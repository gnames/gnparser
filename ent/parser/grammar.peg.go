package parser

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleSciName
	ruleTail
	ruleName
	ruleHybridFormula
	ruleHybridFormulaFull
	ruleHybridFormulaPart
	ruleNamedHybrid
	ruleNamedSpeciesHybrid
	ruleNamedGenusHybrid
	ruleGraftChimeraFormula
	ruleGraftChimeraFormulaFull
	ruleGraftChimeraFormulaPart
	ruleNamedGenusGraftChimera
	ruleCandidatusName
	ruleCandidatus
	ruleSingleName
	ruleNameUninomial
	ruleNameApprox
	ruleNameComp
	ruleNameCompSp
	ruleNameCompIsp
	ruleNameSpecies
	ruleGenusWord
	ruleInfraspGroup
	ruleInfraspEpithet
	ruleCultivarWordGroup
	ruleCultivar
	ruleRankCultivar
	ruleNotHybridChar
	ruleCultivarRecursive
	ruleCultivarApostrophe
	ruleSpeciesEpithet
	ruleIgnoredWord
	ruleComparison
	ruleRank
	ruleRankNotho
	ruleRankOtherUncommon
	ruleRankOther
	ruleRankVar
	ruleRankForma
	ruleRankSsp
	ruleRankAgamo
	ruleSubgenusOrSuperspecies
	ruleSubgenus
	ruleSubgenus2
	ruleSubgenus1
	ruleUninomialCombo
	ruleUninomialCombo1
	ruleUninomialCombo2
	ruleRankUninomial
	ruleRankUninomialPlain
	ruleRankUninomialNotho
	ruleUninomial
	ruleUninomialWord
	ruleAbbrSubgenus
	ruleAbbrGenus
	ruleCapWord
	ruleCapWord1
	ruleCapWordWithDash
	ruleTwoLetterGenusDashedSegment
	ruleWordAfterDash
	ruleUpperAfterDash
	ruleLowerAfterDash
	ruleTwoLetterGenus
	ruleWord
	ruleWord1
	ruleWordStartsWithDigit
	ruleWord2
	ruleWordApostr
	ruleWord4
	ruleDotPrefix
	ruleMultiDashedWord
	ruleHybridChar
	ruleGraftChimeraChar
	ruleApproxNameIgnored
	ruleApproximation
	ruleAuthorship
	ruleAuthorshipCombo
	ruleOriginalAuthorship
	ruleOriginalAuthorshipComb
	ruleCombinationAuthorship
	ruleBasionymAuthorshipMissingParens
	ruleMissingParensStart
	ruleMissingParensEnd
	ruleBasionymAuthorshipYearMisformed
	ruleBasionymAuthorship
	ruleBasionymAuthorship1
	ruleBasionymAuthorship2Parens
	ruleAuthorsGroup
	ruleAuthorsTeam
	ruleAuthorSep
	ruleAuthorSep1
	ruleAuthorSep2
	ruleAuthorSepSpanish
	ruleAuthorEx
	ruleAuthorEmend
	ruleAuthor
	ruleAuthor0
	ruleAuthor1
	ruleAuthor2
	ruleUnknownAuthor
	ruleAuthorWord
	ruleAuthorEtAl
	ruleAuthorWord1
	ruleAuthorWord2
	ruleAuthorWord3
	ruleAuthorWord4
	ruleAuthorDashInitials
	ruleAuthorInitial
	ruleAuthorWordSoft
	ruleCapAuthorWord
	ruleAllCapsAuthorWord
	ruleFilius
	ruleFiliusF
	ruleFiliusFNoSpace
	ruleAuthorSuffix
	ruleAuthorPrefixGlued1
	ruleAuthorPrefixGlued2
	ruleAuthorPrefix
	ruleAuthorPrefix2
	ruleAuthorPrefix1
	ruleAuthorUpperChar
	ruleAuthorLowerChar
	ruleYear
	ruleYearRange
	ruleYearWithDot
	ruleYearApprox
	ruleYearWithPage
	ruleYearWithParens
	ruleYearWithChar
	ruleYearNum
	ruleNameUpperChar
	ruleUpperCharExtended
	ruleUpperChar
	ruleNameLowerChar
	ruleMiscodedChar
	ruleLowerCharExtended
	ruleLowerChar
	ruleSpaceCharEOI
	ruleNums
	ruleLowerGreek
	ruleLowerASCII
	ruleUpperASCII
	ruleApostrophe
	ruleApostrASCII
	ruleApostrOther
	ruleDash
	ruleDashOther
	ruleSlash
	rule_
	ruleMultipleSpace
	ruleSingleSpace
	ruleOtherSpace
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"SciName",
	"Tail",
	"Name",
	"HybridFormula",
	"HybridFormulaFull",
	"HybridFormulaPart",
	"NamedHybrid",
	"NamedSpeciesHybrid",
	"NamedGenusHybrid",
	"GraftChimeraFormula",
	"GraftChimeraFormulaFull",
	"GraftChimeraFormulaPart",
	"NamedGenusGraftChimera",
	"CandidatusName",
	"Candidatus",
	"SingleName",
	"NameUninomial",
	"NameApprox",
	"NameComp",
	"NameCompSp",
	"NameCompIsp",
	"NameSpecies",
	"GenusWord",
	"InfraspGroup",
	"InfraspEpithet",
	"CultivarWordGroup",
	"Cultivar",
	"RankCultivar",
	"NotHybridChar",
	"CultivarRecursive",
	"CultivarApostrophe",
	"SpeciesEpithet",
	"IgnoredWord",
	"Comparison",
	"Rank",
	"RankNotho",
	"RankOtherUncommon",
	"RankOther",
	"RankVar",
	"RankForma",
	"RankSsp",
	"RankAgamo",
	"SubgenusOrSuperspecies",
	"Subgenus",
	"Subgenus2",
	"Subgenus1",
	"UninomialCombo",
	"UninomialCombo1",
	"UninomialCombo2",
	"RankUninomial",
	"RankUninomialPlain",
	"RankUninomialNotho",
	"Uninomial",
	"UninomialWord",
	"AbbrSubgenus",
	"AbbrGenus",
	"CapWord",
	"CapWord1",
	"CapWordWithDash",
	"TwoLetterGenusDashedSegment",
	"WordAfterDash",
	"UpperAfterDash",
	"LowerAfterDash",
	"TwoLetterGenus",
	"Word",
	"Word1",
	"WordStartsWithDigit",
	"Word2",
	"WordApostr",
	"Word4",
	"DotPrefix",
	"MultiDashedWord",
	"HybridChar",
	"GraftChimeraChar",
	"ApproxNameIgnored",
	"Approximation",
	"Authorship",
	"AuthorshipCombo",
	"OriginalAuthorship",
	"OriginalAuthorshipComb",
	"CombinationAuthorship",
	"BasionymAuthorshipMissingParens",
	"MissingParensStart",
	"MissingParensEnd",
	"BasionymAuthorshipYearMisformed",
	"BasionymAuthorship",
	"BasionymAuthorship1",
	"BasionymAuthorship2Parens",
	"AuthorsGroup",
	"AuthorsTeam",
	"AuthorSep",
	"AuthorSep1",
	"AuthorSep2",
	"AuthorSepSpanish",
	"AuthorEx",
	"AuthorEmend",
	"Author",
	"Author0",
	"Author1",
	"Author2",
	"UnknownAuthor",
	"AuthorWord",
	"AuthorEtAl",
	"AuthorWord1",
	"AuthorWord2",
	"AuthorWord3",
	"AuthorWord4",
	"AuthorDashInitials",
	"AuthorInitial",
	"AuthorWordSoft",
	"CapAuthorWord",
	"AllCapsAuthorWord",
	"Filius",
	"FiliusF",
	"FiliusFNoSpace",
	"AuthorSuffix",
	"AuthorPrefixGlued1",
	"AuthorPrefixGlued2",
	"AuthorPrefix",
	"AuthorPrefix2",
	"AuthorPrefix1",
	"AuthorUpperChar",
	"AuthorLowerChar",
	"Year",
	"YearRange",
	"YearWithDot",
	"YearApprox",
	"YearWithPage",
	"YearWithParens",
	"YearWithChar",
	"YearNum",
	"NameUpperChar",
	"UpperCharExtended",
	"UpperChar",
	"NameLowerChar",
	"MiscodedChar",
	"LowerCharExtended",
	"LowerChar",
	"SpaceCharEOI",
	"Nums",
	"LowerGreek",
	"LowerASCII",
	"UpperASCII",
	"Apostrophe",
	"ApostrASCII",
	"ApostrOther",
	"Dash",
	"DashOther",
	"Slash",
	"_",
	"MultipleSpace",
	"SingleSpace",
	"OtherSpace",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Engine struct {
	baseEngine

	Buffer string
	buffer []rune
	rules  [155]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Engine) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Engine) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Engine
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Engine) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Engine) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Engine) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Engine) error {
	return func(p *Engine) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Engine) error {
	return func(p *Engine) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Engine) Init(options ...func(*Engine) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 SciName <- <(_? Name Tail END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rule_]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				if !_rules[ruleName]() {
					goto l0
				}
				if !_rules[ruleTail]() {
					goto l0
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleSciName, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Tail <- <((_ / ';' / ',') .*)?> */
		func() bool {
			{
				position5 := position
				{
					position6, tokenIndex6 := position, tokenIndex
					{
						position8, tokenIndex8 := position, tokenIndex
						if !_rules[rule_]() {
							goto l9
						}
						goto l8
					l9:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(';') {
							goto l10
						}
						position++
						goto l8
					l10:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(',') {
							goto l6
						}
						position++
					}
				l8:
				l11:
					{
						position12, tokenIndex12 := position, tokenIndex
						if !matchDot() {
							goto l12
						}
						goto l11
					l12:
						position, tokenIndex = position12, tokenIndex12
					}
					goto l7
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
			l7:
				add(ruleTail, position5)
			}
			return true
		},
		/* 2 Name <- <(NamedGenusGraftChimera / GraftChimeraFormula / NamedHybrid / HybridFormula / CandidatusName / SingleName)> */
		func() bool {
			position13, tokenIndex13 := position, tokenIndex
			{
				position14 := position
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleNamedGenusGraftChimera]() {
						goto l16
					}
					goto l15
				l16:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleGraftChimeraFormula]() {
						goto l17
					}
					goto l15
				l17:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleNamedHybrid]() {
						goto l18
					}
					goto l15
				l18:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleHybridFormula]() {
						goto l19
					}
					goto l15
				l19:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleCandidatusName]() {
						goto l20
					}
					goto l15
				l20:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleSingleName]() {
						goto l13
					}
				}
			l15:
				add(ruleName, position14)
			}
			return true
		l13:
			position, tokenIndex = position13, tokenIndex13
			return false
		},
		/* 3 HybridFormula <- <(SingleName (_ (HybridFormulaPart / HybridFormulaFull))+)> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				if !_rules[ruleSingleName]() {
					goto l21
				}
				if !_rules[rule_]() {
					goto l21
				}
				{
					position25, tokenIndex25 := position, tokenIndex
					if !_rules[ruleHybridFormulaPart]() {
						goto l26
					}
					goto l25
				l26:
					position, tokenIndex = position25, tokenIndex25
					if !_rules[ruleHybridFormulaFull]() {
						goto l21
					}
				}
			l25:
			l23:
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[rule_]() {
						goto l24
					}
					{
						position27, tokenIndex27 := position, tokenIndex
						if !_rules[ruleHybridFormulaPart]() {
							goto l28
						}
						goto l27
					l28:
						position, tokenIndex = position27, tokenIndex27
						if !_rules[ruleHybridFormulaFull]() {
							goto l24
						}
					}
				l27:
					goto l23
				l24:
					position, tokenIndex = position24, tokenIndex24
				}
				add(ruleHybridFormula, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 4 HybridFormulaFull <- <(HybridChar (_ SingleName)?)> */
		func() bool {
			position29, tokenIndex29 := position, tokenIndex
			{
				position30 := position
				if !_rules[ruleHybridChar]() {
					goto l29
				}
				{
					position31, tokenIndex31 := position, tokenIndex
					if !_rules[rule_]() {
						goto l31
					}
					if !_rules[ruleSingleName]() {
						goto l31
					}
					goto l32
				l31:
					position, tokenIndex = position31, tokenIndex31
				}
			l32:
				add(ruleHybridFormulaFull, position30)
			}
			return true
		l29:
			position, tokenIndex = position29, tokenIndex29
			return false
		},
		/* 5 HybridFormulaPart <- <(HybridChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position33, tokenIndex33 := position, tokenIndex
			{
				position34 := position
				if !_rules[ruleHybridChar]() {
					goto l33
				}
				if !_rules[rule_]() {
					goto l33
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l33
				}
				{
					position35, tokenIndex35 := position, tokenIndex
					if !_rules[rule_]() {
						goto l35
					}
					if !_rules[ruleInfraspGroup]() {
						goto l35
					}
					goto l36
				l35:
					position, tokenIndex = position35, tokenIndex35
				}
			l36:
				add(ruleHybridFormulaPart, position34)
			}
			return true
		l33:
			position, tokenIndex = position33, tokenIndex33
			return false
		},
		/* 6 NamedHybrid <- <(NamedGenusHybrid / NamedSpeciesHybrid)> */
		func() bool {
			position37, tokenIndex37 := position, tokenIndex
			{
				position38 := position
				{
					position39, tokenIndex39 := position, tokenIndex
					if !_rules[ruleNamedGenusHybrid]() {
						goto l40
					}
					goto l39
				l40:
					position, tokenIndex = position39, tokenIndex39
					if !_rules[ruleNamedSpeciesHybrid]() {
						goto l37
					}
				}
			l39:
				add(ruleNamedHybrid, position38)
			}
			return true
		l37:
			position, tokenIndex = position37, tokenIndex37
			return false
		},
		/* 7 NamedSpeciesHybrid <- <(GenusWord (_ Subgenus)? (_ Comparison)? _ HybridChar _? SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position41, tokenIndex41 := position, tokenIndex
			{
				position42 := position
				if !_rules[ruleGenusWord]() {
					goto l41
				}
				{
					position43, tokenIndex43 := position, tokenIndex
					if !_rules[rule_]() {
						goto l43
					}
					if !_rules[ruleSubgenus]() {
						goto l43
					}
					goto l44
				l43:
					position, tokenIndex = position43, tokenIndex43
				}
			l44:
				{
					position45, tokenIndex45 := position, tokenIndex
					if !_rules[rule_]() {
						goto l45
					}
					if !_rules[ruleComparison]() {
						goto l45
					}
					goto l46
				l45:
					position, tokenIndex = position45, tokenIndex45
				}
			l46:
				if !_rules[rule_]() {
					goto l41
				}
				if !_rules[ruleHybridChar]() {
					goto l41
				}
				{
					position47, tokenIndex47 := position, tokenIndex
					if !_rules[rule_]() {
						goto l47
					}
					goto l48
				l47:
					position, tokenIndex = position47, tokenIndex47
				}
			l48:
				if !_rules[ruleSpeciesEpithet]() {
					goto l41
				}
				{
					position49, tokenIndex49 := position, tokenIndex
					if !_rules[rule_]() {
						goto l49
					}
					if !_rules[ruleInfraspGroup]() {
						goto l49
					}
					goto l50
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
			l50:
				add(ruleNamedSpeciesHybrid, position42)
			}
			return true
		l41:
			position, tokenIndex = position41, tokenIndex41
			return false
		},
		/* 8 NamedGenusHybrid <- <(HybridChar _? SingleName)> */
		func() bool {
			position51, tokenIndex51 := position, tokenIndex
			{
				position52 := position
				if !_rules[ruleHybridChar]() {
					goto l51
				}
				{
					position53, tokenIndex53 := position, tokenIndex
					if !_rules[rule_]() {
						goto l53
					}
					goto l54
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
			l54:
				if !_rules[ruleSingleName]() {
					goto l51
				}
				add(ruleNamedGenusHybrid, position52)
			}
			return true
		l51:
			position, tokenIndex = position51, tokenIndex51
			return false
		},
		/* 9 GraftChimeraFormula <- <(SingleName (_ (GraftChimeraFormulaPart / GraftChimeraFormulaFull))+)> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				if !_rules[ruleSingleName]() {
					goto l55
				}
				if !_rules[rule_]() {
					goto l55
				}
				{
					position59, tokenIndex59 := position, tokenIndex
					if !_rules[ruleGraftChimeraFormulaPart]() {
						goto l60
					}
					goto l59
				l60:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleGraftChimeraFormulaFull]() {
						goto l55
					}
				}
			l59:
			l57:
				{
					position58, tokenIndex58 := position, tokenIndex
					if !_rules[rule_]() {
						goto l58
					}
					{
						position61, tokenIndex61 := position, tokenIndex
						if !_rules[ruleGraftChimeraFormulaPart]() {
							goto l62
						}
						goto l61
					l62:
						position, tokenIndex = position61, tokenIndex61
						if !_rules[ruleGraftChimeraFormulaFull]() {
							goto l58
						}
					}
				l61:
					goto l57
				l58:
					position, tokenIndex = position58, tokenIndex58
				}
				add(ruleGraftChimeraFormula, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 10 GraftChimeraFormulaFull <- <(GraftChimeraChar (_ SingleName)?)> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l63
				}
				{
					position65, tokenIndex65 := position, tokenIndex
					if !_rules[rule_]() {
						goto l65
					}
					if !_rules[ruleSingleName]() {
						goto l65
					}
					goto l66
				l65:
					position, tokenIndex = position65, tokenIndex65
				}
			l66:
				add(ruleGraftChimeraFormulaFull, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 11 GraftChimeraFormulaPart <- <(GraftChimeraChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position67, tokenIndex67 := position, tokenIndex
			{
				position68 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l67
				}
				if !_rules[rule_]() {
					goto l67
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l67
				}
				{
					position69, tokenIndex69 := position, tokenIndex
					if !_rules[rule_]() {
						goto l69
					}
					if !_rules[ruleInfraspGroup]() {
						goto l69
					}
					goto l70
				l69:
					position, tokenIndex = position69, tokenIndex69
				}
			l70:
				add(ruleGraftChimeraFormulaPart, position68)
			}
			return true
		l67:
			position, tokenIndex = position67, tokenIndex67
			return false
		},
		/* 12 NamedGenusGraftChimera <- <(GraftChimeraChar _? SingleName)> */
		func() bool {
			position71, tokenIndex71 := position, tokenIndex
			{
				position72 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l71
				}
				{
					position73, tokenIndex73 := position, tokenIndex
					if !_rules[rule_]() {
						goto l73
					}
					goto l74
				l73:
					position, tokenIndex = position73, tokenIndex73
				}
			l74:
				if !_rules[ruleSingleName]() {
					goto l71
				}
				add(ruleNamedGenusGraftChimera, position72)
			}
			return true
		l71:
			position, tokenIndex = position71, tokenIndex71
			return false
		},
		/* 13 CandidatusName <- <(Candidatus _ SingleName)> */
		func() bool {
			position75, tokenIndex75 := position, tokenIndex
			{
				position76 := position
				if !_rules[ruleCandidatus]() {
					goto l75
				}
				if !_rules[rule_]() {
					goto l75
				}
				if !_rules[ruleSingleName]() {
					goto l75
				}
				add(ruleCandidatusName, position76)
			}
			return true
		l75:
			position, tokenIndex = position75, tokenIndex75
			return false
		},
		/* 14 Candidatus <- <('C' 'a' 'n' 'd' 'i' 'd' 'a' 't' 'u' 's')> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if buffer[position] != rune('C') {
					goto l77
				}
				position++
				if buffer[position] != rune('a') {
					goto l77
				}
				position++
				if buffer[position] != rune('n') {
					goto l77
				}
				position++
				if buffer[position] != rune('d') {
					goto l77
				}
				position++
				if buffer[position] != rune('i') {
					goto l77
				}
				position++
				if buffer[position] != rune('d') {
					goto l77
				}
				position++
				if buffer[position] != rune('a') {
					goto l77
				}
				position++
				if buffer[position] != rune('t') {
					goto l77
				}
				position++
				if buffer[position] != rune('u') {
					goto l77
				}
				position++
				if buffer[position] != rune('s') {
					goto l77
				}
				position++
				add(ruleCandidatus, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 15 SingleName <- <(NameComp / NameApprox / NameSpecies / NameUninomial)> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				{
					position81, tokenIndex81 := position, tokenIndex
					if !_rules[ruleNameComp]() {
						goto l82
					}
					goto l81
				l82:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameApprox]() {
						goto l83
					}
					goto l81
				l83:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameSpecies]() {
						goto l84
					}
					goto l81
				l84:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameUninomial]() {
						goto l79
					}
				}
			l81:
				add(ruleSingleName, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 16 NameUninomial <- <((UninomialCombo / Uninomial) (_ CultivarWordGroup)?)> */
		func() bool {
			position85, tokenIndex85 := position, tokenIndex
			{
				position86 := position
				{
					position87, tokenIndex87 := position, tokenIndex
					if !_rules[ruleUninomialCombo]() {
						goto l88
					}
					goto l87
				l88:
					position, tokenIndex = position87, tokenIndex87
					if !_rules[ruleUninomial]() {
						goto l85
					}
				}
			l87:
				{
					position89, tokenIndex89 := position, tokenIndex
					if !_rules[rule_]() {
						goto l89
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l89
					}
					goto l90
				l89:
					position, tokenIndex = position89, tokenIndex89
				}
			l90:
				add(ruleNameUninomial, position86)
			}
			return true
		l85:
			position, tokenIndex = position85, tokenIndex85
			return false
		},
		/* 17 NameApprox <- <(GenusWord (_ SpeciesEpithet)? _ Approximation ApproxNameIgnored)> */
		func() bool {
			position91, tokenIndex91 := position, tokenIndex
			{
				position92 := position
				if !_rules[ruleGenusWord]() {
					goto l91
				}
				{
					position93, tokenIndex93 := position, tokenIndex
					if !_rules[rule_]() {
						goto l93
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l93
					}
					goto l94
				l93:
					position, tokenIndex = position93, tokenIndex93
				}
			l94:
				if !_rules[rule_]() {
					goto l91
				}
				if !_rules[ruleApproximation]() {
					goto l91
				}
				if !_rules[ruleApproxNameIgnored]() {
					goto l91
				}
				add(ruleNameApprox, position92)
			}
			return true
		l91:
			position, tokenIndex = position91, tokenIndex91
			return false
		},
		/* 18 NameComp <- <(NameCompIsp / NameCompSp)> */
		func() bool {
			position95, tokenIndex95 := position, tokenIndex
			{
				position96 := position
				{
					position97, tokenIndex97 := position, tokenIndex
					if !_rules[ruleNameCompIsp]() {
						goto l98
					}
					goto l97
				l98:
					position, tokenIndex = position97, tokenIndex97
					if !_rules[ruleNameCompSp]() {
						goto l95
					}
				}
			l97:
				add(ruleNameComp, position96)
			}
			return true
		l95:
			position, tokenIndex = position95, tokenIndex95
			return false
		},
		/* 19 NameCompSp <- <(GenusWord _ Comparison (_ SpeciesEpithet)?)> */
		func() bool {
			position99, tokenIndex99 := position, tokenIndex
			{
				position100 := position
				if !_rules[ruleGenusWord]() {
					goto l99
				}
				if !_rules[rule_]() {
					goto l99
				}
				if !_rules[ruleComparison]() {
					goto l99
				}
				{
					position101, tokenIndex101 := position, tokenIndex
					if !_rules[rule_]() {
						goto l101
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l101
					}
					goto l102
				l101:
					position, tokenIndex = position101, tokenIndex101
				}
			l102:
				add(ruleNameCompSp, position100)
			}
			return true
		l99:
			position, tokenIndex = position99, tokenIndex99
			return false
		},
		/* 20 NameCompIsp <- <(GenusWord _ SpeciesEpithet _ Comparison (_ InfraspEpithet)?)> */
		func() bool {
			position103, tokenIndex103 := position, tokenIndex
			{
				position104 := position
				if !_rules[ruleGenusWord]() {
					goto l103
				}
				if !_rules[rule_]() {
					goto l103
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l103
				}
				if !_rules[rule_]() {
					goto l103
				}
				if !_rules[ruleComparison]() {
					goto l103
				}
				{
					position105, tokenIndex105 := position, tokenIndex
					if !_rules[rule_]() {
						goto l105
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l105
					}
					goto l106
				l105:
					position, tokenIndex = position105, tokenIndex105
				}
			l106:
				add(ruleNameCompIsp, position104)
			}
			return true
		l103:
			position, tokenIndex = position103, tokenIndex103
			return false
		},
		/* 21 NameSpecies <- <(GenusWord (_? (Subgenus / SubgenusOrSuperspecies))? _ SpeciesEpithet (_ InfraspGroup)? (_ CultivarWordGroup)?)> */
		func() bool {
			position107, tokenIndex107 := position, tokenIndex
			{
				position108 := position
				if !_rules[ruleGenusWord]() {
					goto l107
				}
				{
					position109, tokenIndex109 := position, tokenIndex
					{
						position111, tokenIndex111 := position, tokenIndex
						if !_rules[rule_]() {
							goto l111
						}
						goto l112
					l111:
						position, tokenIndex = position111, tokenIndex111
					}
				l112:
					{
						position113, tokenIndex113 := position, tokenIndex
						if !_rules[ruleSubgenus]() {
							goto l114
						}
						goto l113
					l114:
						position, tokenIndex = position113, tokenIndex113
						if !_rules[ruleSubgenusOrSuperspecies]() {
							goto l109
						}
					}
				l113:
					goto l110
				l109:
					position, tokenIndex = position109, tokenIndex109
				}
			l110:
				if !_rules[rule_]() {
					goto l107
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l107
				}
				{
					position115, tokenIndex115 := position, tokenIndex
					if !_rules[rule_]() {
						goto l115
					}
					if !_rules[ruleInfraspGroup]() {
						goto l115
					}
					goto l116
				l115:
					position, tokenIndex = position115, tokenIndex115
				}
			l116:
				{
					position117, tokenIndex117 := position, tokenIndex
					if !_rules[rule_]() {
						goto l117
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l117
					}
					goto l118
				l117:
					position, tokenIndex = position117, tokenIndex117
				}
			l118:
				add(ruleNameSpecies, position108)
			}
			return true
		l107:
			position, tokenIndex = position107, tokenIndex107
			return false
		},
		/* 22 GenusWord <- <((AbbrGenus / UninomialWord) !(_ AuthorWord))> */
		func() bool {
			position119, tokenIndex119 := position, tokenIndex
			{
				position120 := position
				{
					position121, tokenIndex121 := position, tokenIndex
					if !_rules[ruleAbbrGenus]() {
						goto l122
					}
					goto l121
				l122:
					position, tokenIndex = position121, tokenIndex121
					if !_rules[ruleUninomialWord]() {
						goto l119
					}
				}
			l121:
				{
					position123, tokenIndex123 := position, tokenIndex
					if !_rules[rule_]() {
						goto l123
					}
					if !_rules[ruleAuthorWord]() {
						goto l123
					}
					goto l119
				l123:
					position, tokenIndex = position123, tokenIndex123
				}
				add(ruleGenusWord, position120)
			}
			return true
		l119:
			position, tokenIndex = position119, tokenIndex119
			return false
		},
		/* 23 InfraspGroup <- <(InfraspEpithet (_ InfraspEpithet)? (_ InfraspEpithet)?)> */
		func() bool {
			position124, tokenIndex124 := position, tokenIndex
			{
				position125 := position
				if !_rules[ruleInfraspEpithet]() {
					goto l124
				}
				{
					position126, tokenIndex126 := position, tokenIndex
					if !_rules[rule_]() {
						goto l126
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l126
					}
					goto l127
				l126:
					position, tokenIndex = position126, tokenIndex126
				}
			l127:
				{
					position128, tokenIndex128 := position, tokenIndex
					if !_rules[rule_]() {
						goto l128
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l128
					}
					goto l129
				l128:
					position, tokenIndex = position128, tokenIndex128
				}
			l129:
				add(ruleInfraspGroup, position125)
			}
			return true
		l124:
			position, tokenIndex = position124, tokenIndex124
			return false
		},
		/* 24 InfraspEpithet <- <((Rank _?)? !AuthorEx Word (_ IgnoredWord)? (_? Authorship)?)> */
		func() bool {
			position130, tokenIndex130 := position, tokenIndex
			{
				position131 := position
				{
					position132, tokenIndex132 := position, tokenIndex
					if !_rules[ruleRank]() {
						goto l132
					}
					{
						position134, tokenIndex134 := position, tokenIndex
						if !_rules[rule_]() {
							goto l134
						}
						goto l135
					l134:
						position, tokenIndex = position134, tokenIndex134
					}
				l135:
					goto l133
				l132:
					position, tokenIndex = position132, tokenIndex132
				}
			l133:
				{
					position136, tokenIndex136 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l136
					}
					goto l130
				l136:
					position, tokenIndex = position136, tokenIndex136
				}
				if !_rules[ruleWord]() {
					goto l130
				}
				{
					position137, tokenIndex137 := position, tokenIndex
					if !_rules[rule_]() {
						goto l137
					}
					if !_rules[ruleIgnoredWord]() {
						goto l137
					}
					goto l138
				l137:
					position, tokenIndex = position137, tokenIndex137
				}
			l138:
				{
					position139, tokenIndex139 := position, tokenIndex
					{
						position141, tokenIndex141 := position, tokenIndex
						if !_rules[rule_]() {
							goto l141
						}
						goto l142
					l141:
						position, tokenIndex = position141, tokenIndex141
					}
				l142:
					if !_rules[ruleAuthorship]() {
						goto l139
					}
					goto l140
				l139:
					position, tokenIndex = position139, tokenIndex139
				}
			l140:
				add(ruleInfraspEpithet, position131)
			}
			return true
		l130:
			position, tokenIndex = position130, tokenIndex130
			return false
		},
		/* 25 CultivarWordGroup <- <(((RankCultivar _)? CultivarApostrophe CultivarRecursive CultivarApostrophe) / (RankCultivar _ Cultivar))> */
		func() bool {
			position143, tokenIndex143 := position, tokenIndex
			{
				position144 := position
				{
					position145, tokenIndex145 := position, tokenIndex
					{
						position147, tokenIndex147 := position, tokenIndex
						if !_rules[ruleRankCultivar]() {
							goto l147
						}
						if !_rules[rule_]() {
							goto l147
						}
						goto l148
					l147:
						position, tokenIndex = position147, tokenIndex147
					}
				l148:
					if !_rules[ruleCultivarApostrophe]() {
						goto l146
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l146
					}
					if !_rules[ruleCultivarApostrophe]() {
						goto l146
					}
					goto l145
				l146:
					position, tokenIndex = position145, tokenIndex145
					if !_rules[ruleRankCultivar]() {
						goto l143
					}
					if !_rules[rule_]() {
						goto l143
					}
					if !_rules[ruleCultivar]() {
						goto l143
					}
				}
			l145:
				add(ruleCultivarWordGroup, position144)
			}
			return true
		l143:
			position, tokenIndex = position143, tokenIndex143
			return false
		},
		/* 26 Cultivar <- <NotHybridChar+> */
		func() bool {
			position149, tokenIndex149 := position, tokenIndex
			{
				position150 := position
				if !_rules[ruleNotHybridChar]() {
					goto l149
				}
			l151:
				{
					position152, tokenIndex152 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l152
					}
					goto l151
				l152:
					position, tokenIndex = position152, tokenIndex152
				}
				add(ruleCultivar, position150)
			}
			return true
		l149:
			position, tokenIndex = position149, tokenIndex149
			return false
		},
		/* 27 RankCultivar <- <('c' 'v' '.'?)> */
		func() bool {
			position153, tokenIndex153 := position, tokenIndex
			{
				position154 := position
				if buffer[position] != rune('c') {
					goto l153
				}
				position++
				if buffer[position] != rune('v') {
					goto l153
				}
				position++
				{
					position155, tokenIndex155 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l155
					}
					position++
					goto l156
				l155:
					position, tokenIndex = position155, tokenIndex155
				}
			l156:
				add(ruleRankCultivar, position154)
			}
			return true
		l153:
			position, tokenIndex = position153, tokenIndex153
			return false
		},
		/* 28 NotHybridChar <- <(!(_ HybridChar) .)> */
		func() bool {
			position157, tokenIndex157 := position, tokenIndex
			{
				position158 := position
				{
					position159, tokenIndex159 := position, tokenIndex
					if !_rules[rule_]() {
						goto l159
					}
					if !_rules[ruleHybridChar]() {
						goto l159
					}
					goto l157
				l159:
					position, tokenIndex = position159, tokenIndex159
				}
				if !matchDot() {
					goto l157
				}
				add(ruleNotHybridChar, position158)
			}
			return true
		l157:
			position, tokenIndex = position157, tokenIndex157
			return false
		},
		/* 29 CultivarRecursive <- <((NotHybridChar CultivarRecursive) / &CultivarApostrophe)> */
		func() bool {
			position160, tokenIndex160 := position, tokenIndex
			{
				position161 := position
				{
					position162, tokenIndex162 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l163
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l163
					}
					goto l162
				l163:
					position, tokenIndex = position162, tokenIndex162
					{
						position164, tokenIndex164 := position, tokenIndex
						if !_rules[ruleCultivarApostrophe]() {
							goto l160
						}
						position, tokenIndex = position164, tokenIndex164
					}
				}
			l162:
				add(ruleCultivarRecursive, position161)
			}
			return true
		l160:
			position, tokenIndex = position160, tokenIndex160
			return false
		},
		/* 30 CultivarApostrophe <- <('\'' / '‘' / '’' / '"' / '“' / '”')> */
		func() bool {
			position165, tokenIndex165 := position, tokenIndex
			{
				position166 := position
				{
					position167, tokenIndex167 := position, tokenIndex
					if buffer[position] != rune('\'') {
						goto l168
					}
					position++
					goto l167
				l168:
					position, tokenIndex = position167, tokenIndex167
					if buffer[position] != rune('‘') {
						goto l169
					}
					position++
					goto l167
				l169:
					position, tokenIndex = position167, tokenIndex167
					if buffer[position] != rune('’') {
						goto l170
					}
					position++
					goto l167
				l170:
					position, tokenIndex = position167, tokenIndex167
					if buffer[position] != rune('"') {
						goto l171
					}
					position++
					goto l167
				l171:
					position, tokenIndex = position167, tokenIndex167
					if buffer[position] != rune('“') {
						goto l172
					}
					position++
					goto l167
				l172:
					position, tokenIndex = position167, tokenIndex167
					if buffer[position] != rune('”') {
						goto l165
					}
					position++
				}
			l167:
				add(ruleCultivarApostrophe, position166)
			}
			return true
		l165:
			position, tokenIndex = position165, tokenIndex165
			return false
		},
		/* 31 SpeciesEpithet <- <(!AuthorEx Word (_ IgnoredWord)? (_? Authorship)?)> */
		func() bool {
			position173, tokenIndex173 := position, tokenIndex
			{
				position174 := position
				{
					position175, tokenIndex175 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l175
					}
					goto l173
				l175:
					position, tokenIndex = position175, tokenIndex175
				}
				if !_rules[ruleWord]() {
					goto l173
				}
				{
					position176, tokenIndex176 := position, tokenIndex
					if !_rules[rule_]() {
						goto l176
					}
					if !_rules[ruleIgnoredWord]() {
						goto l176
					}
					goto l177
				l176:
					position, tokenIndex = position176, tokenIndex176
				}
			l177:
				{
					position178, tokenIndex178 := position, tokenIndex
					{
						position180, tokenIndex180 := position, tokenIndex
						if !_rules[rule_]() {
							goto l180
						}
						goto l181
					l180:
						position, tokenIndex = position180, tokenIndex180
					}
				l181:
					if !_rules[ruleAuthorship]() {
						goto l178
					}
					goto l179
				l178:
					position, tokenIndex = position178, tokenIndex178
				}
			l179:
				add(ruleSpeciesEpithet, position174)
			}
			return true
		l173:
			position, tokenIndex = position173, tokenIndex173
			return false
		},
		/* 32 IgnoredWord <- <(('m' 'i' 'h' 'i' '.') / ('m' 'i' 'h' 'i'))> */
		func() bool {
			position182, tokenIndex182 := position, tokenIndex
			{
				position183 := position
				{
					position184, tokenIndex184 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l185
					}
					position++
					if buffer[position] != rune('i') {
						goto l185
					}
					position++
					if buffer[position] != rune('h') {
						goto l185
					}
					position++
					if buffer[position] != rune('i') {
						goto l185
					}
					position++
					if buffer[position] != rune('.') {
						goto l185
					}
					position++
					goto l184
				l185:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('m') {
						goto l182
					}
					position++
					if buffer[position] != rune('i') {
						goto l182
					}
					position++
					if buffer[position] != rune('h') {
						goto l182
					}
					position++
					if buffer[position] != rune('i') {
						goto l182
					}
					position++
				}
			l184:
				add(ruleIgnoredWord, position183)
			}
			return true
		l182:
			position, tokenIndex = position182, tokenIndex182
			return false
		},
		/* 33 Comparison <- <('c' 'f' '.'? &SpaceCharEOI)> */
		func() bool {
			position186, tokenIndex186 := position, tokenIndex
			{
				position187 := position
				if buffer[position] != rune('c') {
					goto l186
				}
				position++
				if buffer[position] != rune('f') {
					goto l186
				}
				position++
				{
					position188, tokenIndex188 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l188
					}
					position++
					goto l189
				l188:
					position, tokenIndex = position188, tokenIndex188
				}
			l189:
				{
					position190, tokenIndex190 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l186
					}
					position, tokenIndex = position190, tokenIndex190
				}
				add(ruleComparison, position187)
			}
			return true
		l186:
			position, tokenIndex = position186, tokenIndex186
			return false
		},
		/* 34 Rank <- <((RankForma / RankVar / RankSsp / RankOther / RankOtherUncommon / RankAgamo / RankNotho) (_? LowerGreek ('.' / &SpaceCharEOI))?)> */
		func() bool {
			position191, tokenIndex191 := position, tokenIndex
			{
				position192 := position
				{
					position193, tokenIndex193 := position, tokenIndex
					if !_rules[ruleRankForma]() {
						goto l194
					}
					goto l193
				l194:
					position, tokenIndex = position193, tokenIndex193
					if !_rules[ruleRankVar]() {
						goto l195
					}
					goto l193
				l195:
					position, tokenIndex = position193, tokenIndex193
					if !_rules[ruleRankSsp]() {
						goto l196
					}
					goto l193
				l196:
					position, tokenIndex = position193, tokenIndex193
					if !_rules[ruleRankOther]() {
						goto l197
					}
					goto l193
				l197:
					position, tokenIndex = position193, tokenIndex193
					if !_rules[ruleRankOtherUncommon]() {
						goto l198
					}
					goto l193
				l198:
					position, tokenIndex = position193, tokenIndex193
					if !_rules[ruleRankAgamo]() {
						goto l199
					}
					goto l193
				l199:
					position, tokenIndex = position193, tokenIndex193
					if !_rules[ruleRankNotho]() {
						goto l191
					}
				}
			l193:
				{
					position200, tokenIndex200 := position, tokenIndex
					{
						position202, tokenIndex202 := position, tokenIndex
						if !_rules[rule_]() {
							goto l202
						}
						goto l203
					l202:
						position, tokenIndex = position202, tokenIndex202
					}
				l203:
					if !_rules[ruleLowerGreek]() {
						goto l200
					}
					{
						position204, tokenIndex204 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l205
						}
						position++
						goto l204
					l205:
						position, tokenIndex = position204, tokenIndex204
						{
							position206, tokenIndex206 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l200
							}
							position, tokenIndex = position206, tokenIndex206
						}
					}
				l204:
					goto l201
				l200:
					position, tokenIndex = position200, tokenIndex200
				}
			l201:
				add(ruleRank, position192)
			}
			return true
		l191:
			position, tokenIndex = position191, tokenIndex191
			return false
		},
		/* 35 RankNotho <- <((('n' 'o' 't' 'h' 'o' (('v' 'a' 'r') / ('f' 'o') / 'f' / ('s' 'u' 'b' 's' 'p') / ('s' 's' 'p') / ('s' 'p') / ('m' 'o' 'r' 't' 'h') / ('s' 'u' 'p' 's' 'p') / ('s' 'u'))) / ('n' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position207, tokenIndex207 := position, tokenIndex
			{
				position208 := position
				{
					position209, tokenIndex209 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l210
					}
					position++
					if buffer[position] != rune('o') {
						goto l210
					}
					position++
					if buffer[position] != rune('t') {
						goto l210
					}
					position++
					if buffer[position] != rune('h') {
						goto l210
					}
					position++
					if buffer[position] != rune('o') {
						goto l210
					}
					position++
					{
						position211, tokenIndex211 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l212
						}
						position++
						if buffer[position] != rune('a') {
							goto l212
						}
						position++
						if buffer[position] != rune('r') {
							goto l212
						}
						position++
						goto l211
					l212:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('f') {
							goto l213
						}
						position++
						if buffer[position] != rune('o') {
							goto l213
						}
						position++
						goto l211
					l213:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('f') {
							goto l214
						}
						position++
						goto l211
					l214:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('s') {
							goto l215
						}
						position++
						if buffer[position] != rune('u') {
							goto l215
						}
						position++
						if buffer[position] != rune('b') {
							goto l215
						}
						position++
						if buffer[position] != rune('s') {
							goto l215
						}
						position++
						if buffer[position] != rune('p') {
							goto l215
						}
						position++
						goto l211
					l215:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('s') {
							goto l216
						}
						position++
						if buffer[position] != rune('s') {
							goto l216
						}
						position++
						if buffer[position] != rune('p') {
							goto l216
						}
						position++
						goto l211
					l216:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('s') {
							goto l217
						}
						position++
						if buffer[position] != rune('p') {
							goto l217
						}
						position++
						goto l211
					l217:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('m') {
							goto l218
						}
						position++
						if buffer[position] != rune('o') {
							goto l218
						}
						position++
						if buffer[position] != rune('r') {
							goto l218
						}
						position++
						if buffer[position] != rune('t') {
							goto l218
						}
						position++
						if buffer[position] != rune('h') {
							goto l218
						}
						position++
						goto l211
					l218:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('s') {
							goto l219
						}
						position++
						if buffer[position] != rune('u') {
							goto l219
						}
						position++
						if buffer[position] != rune('p') {
							goto l219
						}
						position++
						if buffer[position] != rune('s') {
							goto l219
						}
						position++
						if buffer[position] != rune('p') {
							goto l219
						}
						position++
						goto l211
					l219:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('s') {
							goto l210
						}
						position++
						if buffer[position] != rune('u') {
							goto l210
						}
						position++
					}
				l211:
					goto l209
				l210:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('n') {
						goto l207
					}
					position++
					if buffer[position] != rune('v') {
						goto l207
					}
					position++
					if buffer[position] != rune('a') {
						goto l207
					}
					position++
					if buffer[position] != rune('r') {
						goto l207
					}
					position++
				}
			l209:
				{
					position220, tokenIndex220 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l221
					}
					position++
					goto l220
				l221:
					position, tokenIndex = position220, tokenIndex220
					{
						position222, tokenIndex222 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l207
						}
						position, tokenIndex = position222, tokenIndex222
					}
				}
			l220:
				add(ruleRankNotho, position208)
			}
			return true
		l207:
			position, tokenIndex = position207, tokenIndex207
			return false
		},
		/* 36 RankOtherUncommon <- <(('*' / ('n' 'a' 't' 'i' 'o') / ('n' 'a' 't' '.') / ('n' 'a' 't') / ('f' '.' 's' 'p') / 'α' / ('β' 'β') / 'β' / 'γ' / 'δ' / 'ε' / 'φ' / 'θ' / 'μ' / ('a' '.') / ('b' '.') / ('c' '.') / ('d' '.') / ('e' '.') / ('g' '.') / ('k' '.') / ('m' 'u' 't' '.')) &SpaceCharEOI)> */
		func() bool {
			position223, tokenIndex223 := position, tokenIndex
			{
				position224 := position
				{
					position225, tokenIndex225 := position, tokenIndex
					if buffer[position] != rune('*') {
						goto l226
					}
					position++
					goto l225
				l226:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('n') {
						goto l227
					}
					position++
					if buffer[position] != rune('a') {
						goto l227
					}
					position++
					if buffer[position] != rune('t') {
						goto l227
					}
					position++
					if buffer[position] != rune('i') {
						goto l227
					}
					position++
					if buffer[position] != rune('o') {
						goto l227
					}
					position++
					goto l225
				l227:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('n') {
						goto l228
					}
					position++
					if buffer[position] != rune('a') {
						goto l228
					}
					position++
					if buffer[position] != rune('t') {
						goto l228
					}
					position++
					if buffer[position] != rune('.') {
						goto l228
					}
					position++
					goto l225
				l228:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('n') {
						goto l229
					}
					position++
					if buffer[position] != rune('a') {
						goto l229
					}
					position++
					if buffer[position] != rune('t') {
						goto l229
					}
					position++
					goto l225
				l229:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('f') {
						goto l230
					}
					position++
					if buffer[position] != rune('.') {
						goto l230
					}
					position++
					if buffer[position] != rune('s') {
						goto l230
					}
					position++
					if buffer[position] != rune('p') {
						goto l230
					}
					position++
					goto l225
				l230:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('α') {
						goto l231
					}
					position++
					goto l225
				l231:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('β') {
						goto l232
					}
					position++
					if buffer[position] != rune('β') {
						goto l232
					}
					position++
					goto l225
				l232:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('β') {
						goto l233
					}
					position++
					goto l225
				l233:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('γ') {
						goto l234
					}
					position++
					goto l225
				l234:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('δ') {
						goto l235
					}
					position++
					goto l225
				l235:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('ε') {
						goto l236
					}
					position++
					goto l225
				l236:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('φ') {
						goto l237
					}
					position++
					goto l225
				l237:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('θ') {
						goto l238
					}
					position++
					goto l225
				l238:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('μ') {
						goto l239
					}
					position++
					goto l225
				l239:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('a') {
						goto l240
					}
					position++
					if buffer[position] != rune('.') {
						goto l240
					}
					position++
					goto l225
				l240:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('b') {
						goto l241
					}
					position++
					if buffer[position] != rune('.') {
						goto l241
					}
					position++
					goto l225
				l241:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('c') {
						goto l242
					}
					position++
					if buffer[position] != rune('.') {
						goto l242
					}
					position++
					goto l225
				l242:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('d') {
						goto l243
					}
					position++
					if buffer[position] != rune('.') {
						goto l243
					}
					position++
					goto l225
				l243:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('e') {
						goto l244
					}
					position++
					if buffer[position] != rune('.') {
						goto l244
					}
					position++
					goto l225
				l244:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('g') {
						goto l245
					}
					position++
					if buffer[position] != rune('.') {
						goto l245
					}
					position++
					goto l225
				l245:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('k') {
						goto l246
					}
					position++
					if buffer[position] != rune('.') {
						goto l246
					}
					position++
					goto l225
				l246:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('m') {
						goto l223
					}
					position++
					if buffer[position] != rune('u') {
						goto l223
					}
					position++
					if buffer[position] != rune('t') {
						goto l223
					}
					position++
					if buffer[position] != rune('.') {
						goto l223
					}
					position++
				}
			l225:
				{
					position247, tokenIndex247 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l223
					}
					position, tokenIndex = position247, tokenIndex247
				}
				add(ruleRankOtherUncommon, position224)
			}
			return true
		l223:
			position, tokenIndex = position223, tokenIndex223
			return false
		},
		/* 37 RankOther <- <((('m' 'o' 'r' 'p' 'h') / ('c' 'o' 'n' 'v' 'a' 'r') / ('p' 's' 'e' 'u' 'd' 'o' 'v' 'a' 'r') / ('s' 'e' 'c' 't') / ('s' 'e' 'r') / ('s' 'u' 'b' 'v' 'a' 'r') / ('s' 'u' 'b' 'f') / ('r' 'a' 'c' 'e') / ('p' 'v') / ('p' 'a' 't' 'h' 'o' 'v' 'a' 'r') / ('a' 'b' '.' (_? ('n' '.'))?) / ('s' 't')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position248, tokenIndex248 := position, tokenIndex
			{
				position249 := position
				{
					position250, tokenIndex250 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l251
					}
					position++
					if buffer[position] != rune('o') {
						goto l251
					}
					position++
					if buffer[position] != rune('r') {
						goto l251
					}
					position++
					if buffer[position] != rune('p') {
						goto l251
					}
					position++
					if buffer[position] != rune('h') {
						goto l251
					}
					position++
					goto l250
				l251:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('c') {
						goto l252
					}
					position++
					if buffer[position] != rune('o') {
						goto l252
					}
					position++
					if buffer[position] != rune('n') {
						goto l252
					}
					position++
					if buffer[position] != rune('v') {
						goto l252
					}
					position++
					if buffer[position] != rune('a') {
						goto l252
					}
					position++
					if buffer[position] != rune('r') {
						goto l252
					}
					position++
					goto l250
				l252:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('p') {
						goto l253
					}
					position++
					if buffer[position] != rune('s') {
						goto l253
					}
					position++
					if buffer[position] != rune('e') {
						goto l253
					}
					position++
					if buffer[position] != rune('u') {
						goto l253
					}
					position++
					if buffer[position] != rune('d') {
						goto l253
					}
					position++
					if buffer[position] != rune('o') {
						goto l253
					}
					position++
					if buffer[position] != rune('v') {
						goto l253
					}
					position++
					if buffer[position] != rune('a') {
						goto l253
					}
					position++
					if buffer[position] != rune('r') {
						goto l253
					}
					position++
					goto l250
				l253:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('s') {
						goto l254
					}
					position++
					if buffer[position] != rune('e') {
						goto l254
					}
					position++
					if buffer[position] != rune('c') {
						goto l254
					}
					position++
					if buffer[position] != rune('t') {
						goto l254
					}
					position++
					goto l250
				l254:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('s') {
						goto l255
					}
					position++
					if buffer[position] != rune('e') {
						goto l255
					}
					position++
					if buffer[position] != rune('r') {
						goto l255
					}
					position++
					goto l250
				l255:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('s') {
						goto l256
					}
					position++
					if buffer[position] != rune('u') {
						goto l256
					}
					position++
					if buffer[position] != rune('b') {
						goto l256
					}
					position++
					if buffer[position] != rune('v') {
						goto l256
					}
					position++
					if buffer[position] != rune('a') {
						goto l256
					}
					position++
					if buffer[position] != rune('r') {
						goto l256
					}
					position++
					goto l250
				l256:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('s') {
						goto l257
					}
					position++
					if buffer[position] != rune('u') {
						goto l257
					}
					position++
					if buffer[position] != rune('b') {
						goto l257
					}
					position++
					if buffer[position] != rune('f') {
						goto l257
					}
					position++
					goto l250
				l257:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('r') {
						goto l258
					}
					position++
					if buffer[position] != rune('a') {
						goto l258
					}
					position++
					if buffer[position] != rune('c') {
						goto l258
					}
					position++
					if buffer[position] != rune('e') {
						goto l258
					}
					position++
					goto l250
				l258:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('p') {
						goto l259
					}
					position++
					if buffer[position] != rune('v') {
						goto l259
					}
					position++
					goto l250
				l259:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('p') {
						goto l260
					}
					position++
					if buffer[position] != rune('a') {
						goto l260
					}
					position++
					if buffer[position] != rune('t') {
						goto l260
					}
					position++
					if buffer[position] != rune('h') {
						goto l260
					}
					position++
					if buffer[position] != rune('o') {
						goto l260
					}
					position++
					if buffer[position] != rune('v') {
						goto l260
					}
					position++
					if buffer[position] != rune('a') {
						goto l260
					}
					position++
					if buffer[position] != rune('r') {
						goto l260
					}
					position++
					goto l250
				l260:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('a') {
						goto l261
					}
					position++
					if buffer[position] != rune('b') {
						goto l261
					}
					position++
					if buffer[position] != rune('.') {
						goto l261
					}
					position++
					{
						position262, tokenIndex262 := position, tokenIndex
						{
							position264, tokenIndex264 := position, tokenIndex
							if !_rules[rule_]() {
								goto l264
							}
							goto l265
						l264:
							position, tokenIndex = position264, tokenIndex264
						}
					l265:
						if buffer[position] != rune('n') {
							goto l262
						}
						position++
						if buffer[position] != rune('.') {
							goto l262
						}
						position++
						goto l263
					l262:
						position, tokenIndex = position262, tokenIndex262
					}
				l263:
					goto l250
				l261:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('s') {
						goto l248
					}
					position++
					if buffer[position] != rune('t') {
						goto l248
					}
					position++
				}
			l250:
				{
					position266, tokenIndex266 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l267
					}
					position++
					goto l266
				l267:
					position, tokenIndex = position266, tokenIndex266
					{
						position268, tokenIndex268 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l248
						}
						position, tokenIndex = position268, tokenIndex268
					}
				}
			l266:
				add(ruleRankOther, position249)
			}
			return true
		l248:
			position, tokenIndex = position248, tokenIndex248
			return false
		},
		/* 38 RankVar <- <((('v' 'a' 'r' 'i' 'e' 't' 'y') / ('[' 'v' 'a' 'r' '.' ']') / ('v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position269, tokenIndex269 := position, tokenIndex
			{
				position270 := position
				{
					position271, tokenIndex271 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l272
					}
					position++
					if buffer[position] != rune('a') {
						goto l272
					}
					position++
					if buffer[position] != rune('r') {
						goto l272
					}
					position++
					if buffer[position] != rune('i') {
						goto l272
					}
					position++
					if buffer[position] != rune('e') {
						goto l272
					}
					position++
					if buffer[position] != rune('t') {
						goto l272
					}
					position++
					if buffer[position] != rune('y') {
						goto l272
					}
					position++
					goto l271
				l272:
					position, tokenIndex = position271, tokenIndex271
					if buffer[position] != rune('[') {
						goto l273
					}
					position++
					if buffer[position] != rune('v') {
						goto l273
					}
					position++
					if buffer[position] != rune('a') {
						goto l273
					}
					position++
					if buffer[position] != rune('r') {
						goto l273
					}
					position++
					if buffer[position] != rune('.') {
						goto l273
					}
					position++
					if buffer[position] != rune(']') {
						goto l273
					}
					position++
					goto l271
				l273:
					position, tokenIndex = position271, tokenIndex271
					if buffer[position] != rune('v') {
						goto l269
					}
					position++
					if buffer[position] != rune('a') {
						goto l269
					}
					position++
					if buffer[position] != rune('r') {
						goto l269
					}
					position++
				}
			l271:
				{
					position274, tokenIndex274 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l275
					}
					position++
					goto l274
				l275:
					position, tokenIndex = position274, tokenIndex274
					{
						position276, tokenIndex276 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l269
						}
						position, tokenIndex = position276, tokenIndex276
					}
				}
			l274:
				add(ruleRankVar, position270)
			}
			return true
		l269:
			position, tokenIndex = position269, tokenIndex269
			return false
		},
		/* 39 RankForma <- <((('f' 'o' 'r' 'm' 'a') / ('f' 'm' 'a') / ('f' 'm') / ('f' 'o' 'r' 'm') / ('f' 'o') / 'f') ('.' / &SpaceCharEOI))> */
		func() bool {
			position277, tokenIndex277 := position, tokenIndex
			{
				position278 := position
				{
					position279, tokenIndex279 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l280
					}
					position++
					if buffer[position] != rune('o') {
						goto l280
					}
					position++
					if buffer[position] != rune('r') {
						goto l280
					}
					position++
					if buffer[position] != rune('m') {
						goto l280
					}
					position++
					if buffer[position] != rune('a') {
						goto l280
					}
					position++
					goto l279
				l280:
					position, tokenIndex = position279, tokenIndex279
					if buffer[position] != rune('f') {
						goto l281
					}
					position++
					if buffer[position] != rune('m') {
						goto l281
					}
					position++
					if buffer[position] != rune('a') {
						goto l281
					}
					position++
					goto l279
				l281:
					position, tokenIndex = position279, tokenIndex279
					if buffer[position] != rune('f') {
						goto l282
					}
					position++
					if buffer[position] != rune('m') {
						goto l282
					}
					position++
					goto l279
				l282:
					position, tokenIndex = position279, tokenIndex279
					if buffer[position] != rune('f') {
						goto l283
					}
					position++
					if buffer[position] != rune('o') {
						goto l283
					}
					position++
					if buffer[position] != rune('r') {
						goto l283
					}
					position++
					if buffer[position] != rune('m') {
						goto l283
					}
					position++
					goto l279
				l283:
					position, tokenIndex = position279, tokenIndex279
					if buffer[position] != rune('f') {
						goto l284
					}
					position++
					if buffer[position] != rune('o') {
						goto l284
					}
					position++
					goto l279
				l284:
					position, tokenIndex = position279, tokenIndex279
					if buffer[position] != rune('f') {
						goto l277
					}
					position++
				}
			l279:
				{
					position285, tokenIndex285 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l286
					}
					position++
					goto l285
				l286:
					position, tokenIndex = position285, tokenIndex285
					{
						position287, tokenIndex287 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l277
						}
						position, tokenIndex = position287, tokenIndex287
					}
				}
			l285:
				add(ruleRankForma, position278)
			}
			return true
		l277:
			position, tokenIndex = position277, tokenIndex277
			return false
		},
		/* 40 RankSsp <- <((('s' 's' 'p') / ('s' 'u' 'b' 's' 'p' 'e' 'c') / ('s' 'u' 'b' 's' 'p')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position288, tokenIndex288 := position, tokenIndex
			{
				position289 := position
				{
					position290, tokenIndex290 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l291
					}
					position++
					if buffer[position] != rune('s') {
						goto l291
					}
					position++
					if buffer[position] != rune('p') {
						goto l291
					}
					position++
					goto l290
				l291:
					position, tokenIndex = position290, tokenIndex290
					if buffer[position] != rune('s') {
						goto l292
					}
					position++
					if buffer[position] != rune('u') {
						goto l292
					}
					position++
					if buffer[position] != rune('b') {
						goto l292
					}
					position++
					if buffer[position] != rune('s') {
						goto l292
					}
					position++
					if buffer[position] != rune('p') {
						goto l292
					}
					position++
					if buffer[position] != rune('e') {
						goto l292
					}
					position++
					if buffer[position] != rune('c') {
						goto l292
					}
					position++
					goto l290
				l292:
					position, tokenIndex = position290, tokenIndex290
					if buffer[position] != rune('s') {
						goto l288
					}
					position++
					if buffer[position] != rune('u') {
						goto l288
					}
					position++
					if buffer[position] != rune('b') {
						goto l288
					}
					position++
					if buffer[position] != rune('s') {
						goto l288
					}
					position++
					if buffer[position] != rune('p') {
						goto l288
					}
					position++
				}
			l290:
				{
					position293, tokenIndex293 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l294
					}
					position++
					goto l293
				l294:
					position, tokenIndex = position293, tokenIndex293
					{
						position295, tokenIndex295 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l288
						}
						position, tokenIndex = position295, tokenIndex295
					}
				}
			l293:
				add(ruleRankSsp, position289)
			}
			return true
		l288:
			position, tokenIndex = position288, tokenIndex288
			return false
		},
		/* 41 RankAgamo <- <((('a' 'g' 'a' 'm' 'o' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 's' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position296, tokenIndex296 := position, tokenIndex
			{
				position297 := position
				{
					position298, tokenIndex298 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l299
					}
					position++
					if buffer[position] != rune('g') {
						goto l299
					}
					position++
					if buffer[position] != rune('a') {
						goto l299
					}
					position++
					if buffer[position] != rune('m') {
						goto l299
					}
					position++
					if buffer[position] != rune('o') {
						goto l299
					}
					position++
					if buffer[position] != rune('s') {
						goto l299
					}
					position++
					if buffer[position] != rune('p') {
						goto l299
					}
					position++
					goto l298
				l299:
					position, tokenIndex = position298, tokenIndex298
					if buffer[position] != rune('a') {
						goto l300
					}
					position++
					if buffer[position] != rune('g') {
						goto l300
					}
					position++
					if buffer[position] != rune('a') {
						goto l300
					}
					position++
					if buffer[position] != rune('m') {
						goto l300
					}
					position++
					if buffer[position] != rune('o') {
						goto l300
					}
					position++
					if buffer[position] != rune('s') {
						goto l300
					}
					position++
					if buffer[position] != rune('s') {
						goto l300
					}
					position++
					if buffer[position] != rune('p') {
						goto l300
					}
					position++
					goto l298
				l300:
					position, tokenIndex = position298, tokenIndex298
					if buffer[position] != rune('a') {
						goto l296
					}
					position++
					if buffer[position] != rune('g') {
						goto l296
					}
					position++
					if buffer[position] != rune('a') {
						goto l296
					}
					position++
					if buffer[position] != rune('m') {
						goto l296
					}
					position++
					if buffer[position] != rune('o') {
						goto l296
					}
					position++
					if buffer[position] != rune('v') {
						goto l296
					}
					position++
					if buffer[position] != rune('a') {
						goto l296
					}
					position++
					if buffer[position] != rune('r') {
						goto l296
					}
					position++
				}
			l298:
				{
					position301, tokenIndex301 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l302
					}
					position++
					goto l301
				l302:
					position, tokenIndex = position301, tokenIndex301
					{
						position303, tokenIndex303 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l296
						}
						position, tokenIndex = position303, tokenIndex303
					}
				}
			l301:
				add(ruleRankAgamo, position297)
			}
			return true
		l296:
			position, tokenIndex = position296, tokenIndex296
			return false
		},
		/* 42 SubgenusOrSuperspecies <- <('(' _? NameLowerChar+ _? ')')> */
		func() bool {
			position304, tokenIndex304 := position, tokenIndex
			{
				position305 := position
				if buffer[position] != rune('(') {
					goto l304
				}
				position++
				{
					position306, tokenIndex306 := position, tokenIndex
					if !_rules[rule_]() {
						goto l306
					}
					goto l307
				l306:
					position, tokenIndex = position306, tokenIndex306
				}
			l307:
				if !_rules[ruleNameLowerChar]() {
					goto l304
				}
			l308:
				{
					position309, tokenIndex309 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l309
					}
					goto l308
				l309:
					position, tokenIndex = position309, tokenIndex309
				}
				{
					position310, tokenIndex310 := position, tokenIndex
					if !_rules[rule_]() {
						goto l310
					}
					goto l311
				l310:
					position, tokenIndex = position310, tokenIndex310
				}
			l311:
				if buffer[position] != rune(')') {
					goto l304
				}
				position++
				add(ruleSubgenusOrSuperspecies, position305)
			}
			return true
		l304:
			position, tokenIndex = position304, tokenIndex304
			return false
		},
		/* 43 Subgenus <- <(Subgenus2 / Subgenus1)> */
		func() bool {
			position312, tokenIndex312 := position, tokenIndex
			{
				position313 := position
				{
					position314, tokenIndex314 := position, tokenIndex
					if !_rules[ruleSubgenus2]() {
						goto l315
					}
					goto l314
				l315:
					position, tokenIndex = position314, tokenIndex314
					if !_rules[ruleSubgenus1]() {
						goto l312
					}
				}
			l314:
				add(ruleSubgenus, position313)
			}
			return true
		l312:
			position, tokenIndex = position312, tokenIndex312
			return false
		},
		/* 44 Subgenus2 <- <('(' _? AbbrSubgenus _? ')' !(_? NameUpperChar))> */
		func() bool {
			position316, tokenIndex316 := position, tokenIndex
			{
				position317 := position
				if buffer[position] != rune('(') {
					goto l316
				}
				position++
				{
					position318, tokenIndex318 := position, tokenIndex
					if !_rules[rule_]() {
						goto l318
					}
					goto l319
				l318:
					position, tokenIndex = position318, tokenIndex318
				}
			l319:
				if !_rules[ruleAbbrSubgenus]() {
					goto l316
				}
				{
					position320, tokenIndex320 := position, tokenIndex
					if !_rules[rule_]() {
						goto l320
					}
					goto l321
				l320:
					position, tokenIndex = position320, tokenIndex320
				}
			l321:
				if buffer[position] != rune(')') {
					goto l316
				}
				position++
				{
					position322, tokenIndex322 := position, tokenIndex
					{
						position323, tokenIndex323 := position, tokenIndex
						if !_rules[rule_]() {
							goto l323
						}
						goto l324
					l323:
						position, tokenIndex = position323, tokenIndex323
					}
				l324:
					if !_rules[ruleNameUpperChar]() {
						goto l322
					}
					goto l316
				l322:
					position, tokenIndex = position322, tokenIndex322
				}
				add(ruleSubgenus2, position317)
			}
			return true
		l316:
			position, tokenIndex = position316, tokenIndex316
			return false
		},
		/* 45 Subgenus1 <- <('(' _? UninomialWord _? ')')> */
		func() bool {
			position325, tokenIndex325 := position, tokenIndex
			{
				position326 := position
				if buffer[position] != rune('(') {
					goto l325
				}
				position++
				{
					position327, tokenIndex327 := position, tokenIndex
					if !_rules[rule_]() {
						goto l327
					}
					goto l328
				l327:
					position, tokenIndex = position327, tokenIndex327
				}
			l328:
				if !_rules[ruleUninomialWord]() {
					goto l325
				}
				{
					position329, tokenIndex329 := position, tokenIndex
					if !_rules[rule_]() {
						goto l329
					}
					goto l330
				l329:
					position, tokenIndex = position329, tokenIndex329
				}
			l330:
				if buffer[position] != rune(')') {
					goto l325
				}
				position++
				add(ruleSubgenus1, position326)
			}
			return true
		l325:
			position, tokenIndex = position325, tokenIndex325
			return false
		},
		/* 46 UninomialCombo <- <(UninomialCombo1 / UninomialCombo2)> */
		func() bool {
			position331, tokenIndex331 := position, tokenIndex
			{
				position332 := position
				{
					position333, tokenIndex333 := position, tokenIndex
					if !_rules[ruleUninomialCombo1]() {
						goto l334
					}
					goto l333
				l334:
					position, tokenIndex = position333, tokenIndex333
					if !_rules[ruleUninomialCombo2]() {
						goto l331
					}
				}
			l333:
				add(ruleUninomialCombo, position332)
			}
			return true
		l331:
			position, tokenIndex = position331, tokenIndex331
			return false
		},
		/* 47 UninomialCombo1 <- <(UninomialWord _? Subgenus (_? Authorship)?)> */
		func() bool {
			position335, tokenIndex335 := position, tokenIndex
			{
				position336 := position
				if !_rules[ruleUninomialWord]() {
					goto l335
				}
				{
					position337, tokenIndex337 := position, tokenIndex
					if !_rules[rule_]() {
						goto l337
					}
					goto l338
				l337:
					position, tokenIndex = position337, tokenIndex337
				}
			l338:
				if !_rules[ruleSubgenus]() {
					goto l335
				}
				{
					position339, tokenIndex339 := position, tokenIndex
					{
						position341, tokenIndex341 := position, tokenIndex
						if !_rules[rule_]() {
							goto l341
						}
						goto l342
					l341:
						position, tokenIndex = position341, tokenIndex341
					}
				l342:
					if !_rules[ruleAuthorship]() {
						goto l339
					}
					goto l340
				l339:
					position, tokenIndex = position339, tokenIndex339
				}
			l340:
				add(ruleUninomialCombo1, position336)
			}
			return true
		l335:
			position, tokenIndex = position335, tokenIndex335
			return false
		},
		/* 48 UninomialCombo2 <- <(Uninomial _ RankUninomial _ Uninomial)> */
		func() bool {
			position343, tokenIndex343 := position, tokenIndex
			{
				position344 := position
				if !_rules[ruleUninomial]() {
					goto l343
				}
				if !_rules[rule_]() {
					goto l343
				}
				if !_rules[ruleRankUninomial]() {
					goto l343
				}
				if !_rules[rule_]() {
					goto l343
				}
				if !_rules[ruleUninomial]() {
					goto l343
				}
				add(ruleUninomialCombo2, position344)
			}
			return true
		l343:
			position, tokenIndex = position343, tokenIndex343
			return false
		},
		/* 49 RankUninomial <- <(RankUninomialPlain / RankUninomialNotho)> */
		func() bool {
			position345, tokenIndex345 := position, tokenIndex
			{
				position346 := position
				{
					position347, tokenIndex347 := position, tokenIndex
					if !_rules[ruleRankUninomialPlain]() {
						goto l348
					}
					goto l347
				l348:
					position, tokenIndex = position347, tokenIndex347
					if !_rules[ruleRankUninomialNotho]() {
						goto l345
					}
				}
			l347:
				add(ruleRankUninomial, position346)
			}
			return true
		l345:
			position, tokenIndex = position345, tokenIndex345
			return false
		},
		/* 50 RankUninomialPlain <- <((('s' 'e' 'c' 't') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('t' 'r' 'i' 'b') / ('t' 'r') / ('s' 'u' 'b' 't' 'r' 'i' 'b') / ('s' 'u' 'b' 't' 'r') / ('s' 'u' 'b' 's' 'e' 'r') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('f' 'a' 'm') / ('s' 'u' 'b' 'f' 'a' 'm') / ('d' 'i' 'v') / ('s' 'u' 'p' 'e' 'r' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position349, tokenIndex349 := position, tokenIndex
			{
				position350 := position
				{
					position351, tokenIndex351 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l352
					}
					position++
					if buffer[position] != rune('e') {
						goto l352
					}
					position++
					if buffer[position] != rune('c') {
						goto l352
					}
					position++
					if buffer[position] != rune('t') {
						goto l352
					}
					position++
					goto l351
				l352:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('s') {
						goto l353
					}
					position++
					if buffer[position] != rune('u') {
						goto l353
					}
					position++
					if buffer[position] != rune('b') {
						goto l353
					}
					position++
					if buffer[position] != rune('s') {
						goto l353
					}
					position++
					if buffer[position] != rune('e') {
						goto l353
					}
					position++
					if buffer[position] != rune('c') {
						goto l353
					}
					position++
					if buffer[position] != rune('t') {
						goto l353
					}
					position++
					goto l351
				l353:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('t') {
						goto l354
					}
					position++
					if buffer[position] != rune('r') {
						goto l354
					}
					position++
					if buffer[position] != rune('i') {
						goto l354
					}
					position++
					if buffer[position] != rune('b') {
						goto l354
					}
					position++
					goto l351
				l354:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('t') {
						goto l355
					}
					position++
					if buffer[position] != rune('r') {
						goto l355
					}
					position++
					goto l351
				l355:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('s') {
						goto l356
					}
					position++
					if buffer[position] != rune('u') {
						goto l356
					}
					position++
					if buffer[position] != rune('b') {
						goto l356
					}
					position++
					if buffer[position] != rune('t') {
						goto l356
					}
					position++
					if buffer[position] != rune('r') {
						goto l356
					}
					position++
					if buffer[position] != rune('i') {
						goto l356
					}
					position++
					if buffer[position] != rune('b') {
						goto l356
					}
					position++
					goto l351
				l356:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('s') {
						goto l357
					}
					position++
					if buffer[position] != rune('u') {
						goto l357
					}
					position++
					if buffer[position] != rune('b') {
						goto l357
					}
					position++
					if buffer[position] != rune('t') {
						goto l357
					}
					position++
					if buffer[position] != rune('r') {
						goto l357
					}
					position++
					goto l351
				l357:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('s') {
						goto l358
					}
					position++
					if buffer[position] != rune('u') {
						goto l358
					}
					position++
					if buffer[position] != rune('b') {
						goto l358
					}
					position++
					if buffer[position] != rune('s') {
						goto l358
					}
					position++
					if buffer[position] != rune('e') {
						goto l358
					}
					position++
					if buffer[position] != rune('r') {
						goto l358
					}
					position++
					goto l351
				l358:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('s') {
						goto l359
					}
					position++
					if buffer[position] != rune('e') {
						goto l359
					}
					position++
					if buffer[position] != rune('r') {
						goto l359
					}
					position++
					goto l351
				l359:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('s') {
						goto l360
					}
					position++
					if buffer[position] != rune('u') {
						goto l360
					}
					position++
					if buffer[position] != rune('b') {
						goto l360
					}
					position++
					if buffer[position] != rune('g') {
						goto l360
					}
					position++
					if buffer[position] != rune('e') {
						goto l360
					}
					position++
					if buffer[position] != rune('n') {
						goto l360
					}
					position++
					goto l351
				l360:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('s') {
						goto l361
					}
					position++
					if buffer[position] != rune('u') {
						goto l361
					}
					position++
					if buffer[position] != rune('b') {
						goto l361
					}
					position++
					if buffer[position] != rune('g') {
						goto l361
					}
					position++
					goto l351
				l361:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('f') {
						goto l362
					}
					position++
					if buffer[position] != rune('a') {
						goto l362
					}
					position++
					if buffer[position] != rune('m') {
						goto l362
					}
					position++
					goto l351
				l362:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('s') {
						goto l363
					}
					position++
					if buffer[position] != rune('u') {
						goto l363
					}
					position++
					if buffer[position] != rune('b') {
						goto l363
					}
					position++
					if buffer[position] != rune('f') {
						goto l363
					}
					position++
					if buffer[position] != rune('a') {
						goto l363
					}
					position++
					if buffer[position] != rune('m') {
						goto l363
					}
					position++
					goto l351
				l363:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('d') {
						goto l364
					}
					position++
					if buffer[position] != rune('i') {
						goto l364
					}
					position++
					if buffer[position] != rune('v') {
						goto l364
					}
					position++
					goto l351
				l364:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('s') {
						goto l349
					}
					position++
					if buffer[position] != rune('u') {
						goto l349
					}
					position++
					if buffer[position] != rune('p') {
						goto l349
					}
					position++
					if buffer[position] != rune('e') {
						goto l349
					}
					position++
					if buffer[position] != rune('r') {
						goto l349
					}
					position++
					if buffer[position] != rune('t') {
						goto l349
					}
					position++
					if buffer[position] != rune('r') {
						goto l349
					}
					position++
					if buffer[position] != rune('i') {
						goto l349
					}
					position++
					if buffer[position] != rune('b') {
						goto l349
					}
					position++
				}
			l351:
				{
					position365, tokenIndex365 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l366
					}
					position++
					goto l365
				l366:
					position, tokenIndex = position365, tokenIndex365
					{
						position367, tokenIndex367 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l349
						}
						position, tokenIndex = position367, tokenIndex367
					}
				}
			l365:
				add(ruleRankUninomialPlain, position350)
			}
			return true
		l349:
			position, tokenIndex = position349, tokenIndex349
			return false
		},
		/* 51 RankUninomialNotho <- <('n' 'o' 't' 'h' 'o' _? (('s' 'e' 'c' 't') / ('g' 'e' 'n') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'e' 'n') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('s' 'u' 'b' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position368, tokenIndex368 := position, tokenIndex
			{
				position369 := position
				if buffer[position] != rune('n') {
					goto l368
				}
				position++
				if buffer[position] != rune('o') {
					goto l368
				}
				position++
				if buffer[position] != rune('t') {
					goto l368
				}
				position++
				if buffer[position] != rune('h') {
					goto l368
				}
				position++
				if buffer[position] != rune('o') {
					goto l368
				}
				position++
				{
					position370, tokenIndex370 := position, tokenIndex
					if !_rules[rule_]() {
						goto l370
					}
					goto l371
				l370:
					position, tokenIndex = position370, tokenIndex370
				}
			l371:
				{
					position372, tokenIndex372 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l373
					}
					position++
					if buffer[position] != rune('e') {
						goto l373
					}
					position++
					if buffer[position] != rune('c') {
						goto l373
					}
					position++
					if buffer[position] != rune('t') {
						goto l373
					}
					position++
					goto l372
				l373:
					position, tokenIndex = position372, tokenIndex372
					if buffer[position] != rune('g') {
						goto l374
					}
					position++
					if buffer[position] != rune('e') {
						goto l374
					}
					position++
					if buffer[position] != rune('n') {
						goto l374
					}
					position++
					goto l372
				l374:
					position, tokenIndex = position372, tokenIndex372
					if buffer[position] != rune('s') {
						goto l375
					}
					position++
					if buffer[position] != rune('e') {
						goto l375
					}
					position++
					if buffer[position] != rune('r') {
						goto l375
					}
					position++
					goto l372
				l375:
					position, tokenIndex = position372, tokenIndex372
					if buffer[position] != rune('s') {
						goto l376
					}
					position++
					if buffer[position] != rune('u') {
						goto l376
					}
					position++
					if buffer[position] != rune('b') {
						goto l376
					}
					position++
					if buffer[position] != rune('g') {
						goto l376
					}
					position++
					if buffer[position] != rune('e') {
						goto l376
					}
					position++
					if buffer[position] != rune('e') {
						goto l376
					}
					position++
					if buffer[position] != rune('n') {
						goto l376
					}
					position++
					goto l372
				l376:
					position, tokenIndex = position372, tokenIndex372
					if buffer[position] != rune('s') {
						goto l377
					}
					position++
					if buffer[position] != rune('u') {
						goto l377
					}
					position++
					if buffer[position] != rune('b') {
						goto l377
					}
					position++
					if buffer[position] != rune('g') {
						goto l377
					}
					position++
					if buffer[position] != rune('e') {
						goto l377
					}
					position++
					if buffer[position] != rune('n') {
						goto l377
					}
					position++
					goto l372
				l377:
					position, tokenIndex = position372, tokenIndex372
					if buffer[position] != rune('s') {
						goto l378
					}
					position++
					if buffer[position] != rune('u') {
						goto l378
					}
					position++
					if buffer[position] != rune('b') {
						goto l378
					}
					position++
					if buffer[position] != rune('g') {
						goto l378
					}
					position++
					goto l372
				l378:
					position, tokenIndex = position372, tokenIndex372
					if buffer[position] != rune('s') {
						goto l379
					}
					position++
					if buffer[position] != rune('u') {
						goto l379
					}
					position++
					if buffer[position] != rune('b') {
						goto l379
					}
					position++
					if buffer[position] != rune('s') {
						goto l379
					}
					position++
					if buffer[position] != rune('e') {
						goto l379
					}
					position++
					if buffer[position] != rune('c') {
						goto l379
					}
					position++
					if buffer[position] != rune('t') {
						goto l379
					}
					position++
					goto l372
				l379:
					position, tokenIndex = position372, tokenIndex372
					if buffer[position] != rune('s') {
						goto l368
					}
					position++
					if buffer[position] != rune('u') {
						goto l368
					}
					position++
					if buffer[position] != rune('b') {
						goto l368
					}
					position++
					if buffer[position] != rune('t') {
						goto l368
					}
					position++
					if buffer[position] != rune('r') {
						goto l368
					}
					position++
					if buffer[position] != rune('i') {
						goto l368
					}
					position++
					if buffer[position] != rune('b') {
						goto l368
					}
					position++
				}
			l372:
				{
					position380, tokenIndex380 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l381
					}
					position++
					goto l380
				l381:
					position, tokenIndex = position380, tokenIndex380
					{
						position382, tokenIndex382 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l368
						}
						position, tokenIndex = position382, tokenIndex382
					}
				}
			l380:
				add(ruleRankUninomialNotho, position369)
			}
			return true
		l368:
			position, tokenIndex = position368, tokenIndex368
			return false
		},
		/* 52 Uninomial <- <(UninomialWord (_ Authorship !(_ LowerCharExtended LowerCharExtended LowerCharExtended))?)> */
		func() bool {
			position383, tokenIndex383 := position, tokenIndex
			{
				position384 := position
				if !_rules[ruleUninomialWord]() {
					goto l383
				}
				{
					position385, tokenIndex385 := position, tokenIndex
					if !_rules[rule_]() {
						goto l385
					}
					if !_rules[ruleAuthorship]() {
						goto l385
					}
					{
						position387, tokenIndex387 := position, tokenIndex
						if !_rules[rule_]() {
							goto l387
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l387
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l387
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l387
						}
						goto l385
					l387:
						position, tokenIndex = position387, tokenIndex387
					}
					goto l386
				l385:
					position, tokenIndex = position385, tokenIndex385
				}
			l386:
				add(ruleUninomial, position384)
			}
			return true
		l383:
			position, tokenIndex = position383, tokenIndex383
			return false
		},
		/* 53 UninomialWord <- <(CapWord / TwoLetterGenus)> */
		func() bool {
			position388, tokenIndex388 := position, tokenIndex
			{
				position389 := position
				{
					position390, tokenIndex390 := position, tokenIndex
					if !_rules[ruleCapWord]() {
						goto l391
					}
					goto l390
				l391:
					position, tokenIndex = position390, tokenIndex390
					if !_rules[ruleTwoLetterGenus]() {
						goto l388
					}
				}
			l390:
				add(ruleUninomialWord, position389)
			}
			return true
		l388:
			position, tokenIndex = position388, tokenIndex388
			return false
		},
		/* 54 AbbrSubgenus <- <(UpperChar LowerChar* '.')> */
		func() bool {
			position392, tokenIndex392 := position, tokenIndex
			{
				position393 := position
				if !_rules[ruleUpperChar]() {
					goto l392
				}
			l394:
				{
					position395, tokenIndex395 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l395
					}
					goto l394
				l395:
					position, tokenIndex = position395, tokenIndex395
				}
				if buffer[position] != rune('.') {
					goto l392
				}
				position++
				add(ruleAbbrSubgenus, position393)
			}
			return true
		l392:
			position, tokenIndex = position392, tokenIndex392
			return false
		},
		/* 55 AbbrGenus <- <(UpperChar LowerChar? '.')> */
		func() bool {
			position396, tokenIndex396 := position, tokenIndex
			{
				position397 := position
				if !_rules[ruleUpperChar]() {
					goto l396
				}
				{
					position398, tokenIndex398 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l398
					}
					goto l399
				l398:
					position, tokenIndex = position398, tokenIndex398
				}
			l399:
				if buffer[position] != rune('.') {
					goto l396
				}
				position++
				add(ruleAbbrGenus, position397)
			}
			return true
		l396:
			position, tokenIndex = position396, tokenIndex396
			return false
		},
		/* 56 CapWord <- <(CapWordWithDash / CapWord1)> */
		func() bool {
			position400, tokenIndex400 := position, tokenIndex
			{
				position401 := position
				{
					position402, tokenIndex402 := position, tokenIndex
					if !_rules[ruleCapWordWithDash]() {
						goto l403
					}
					goto l402
				l403:
					position, tokenIndex = position402, tokenIndex402
					if !_rules[ruleCapWord1]() {
						goto l400
					}
				}
			l402:
				add(ruleCapWord, position401)
			}
			return true
		l400:
			position, tokenIndex = position400, tokenIndex400
			return false
		},
		/* 57 CapWord1 <- <(NameUpperChar NameLowerChar NameLowerChar+ '?'?)> */
		func() bool {
			position404, tokenIndex404 := position, tokenIndex
			{
				position405 := position
				if !_rules[ruleNameUpperChar]() {
					goto l404
				}
				if !_rules[ruleNameLowerChar]() {
					goto l404
				}
				if !_rules[ruleNameLowerChar]() {
					goto l404
				}
			l406:
				{
					position407, tokenIndex407 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l407
					}
					goto l406
				l407:
					position, tokenIndex = position407, tokenIndex407
				}
				{
					position408, tokenIndex408 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l408
					}
					position++
					goto l409
				l408:
					position, tokenIndex = position408, tokenIndex408
				}
			l409:
				add(ruleCapWord1, position405)
			}
			return true
		l404:
			position, tokenIndex = position404, tokenIndex404
			return false
		},
		/* 58 CapWordWithDash <- <((CapWord1 / TwoLetterGenusDashedSegment) Dash WordAfterDash (Dash WordAfterDash)?)> */
		func() bool {
			position410, tokenIndex410 := position, tokenIndex
			{
				position411 := position
				{
					position412, tokenIndex412 := position, tokenIndex
					if !_rules[ruleCapWord1]() {
						goto l413
					}
					goto l412
				l413:
					position, tokenIndex = position412, tokenIndex412
					if !_rules[ruleTwoLetterGenusDashedSegment]() {
						goto l410
					}
				}
			l412:
				if !_rules[ruleDash]() {
					goto l410
				}
				if !_rules[ruleWordAfterDash]() {
					goto l410
				}
				{
					position414, tokenIndex414 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l414
					}
					if !_rules[ruleWordAfterDash]() {
						goto l414
					}
					goto l415
				l414:
					position, tokenIndex = position414, tokenIndex414
				}
			l415:
				add(ruleCapWordWithDash, position411)
			}
			return true
		l410:
			position, tokenIndex = position410, tokenIndex410
			return false
		},
		/* 59 TwoLetterGenusDashedSegment <- <(('D' 'e') / ('E' 'u') / ('L' 'e') / ('N' 'e'))> */
		func() bool {
			position416, tokenIndex416 := position, tokenIndex
			{
				position417 := position
				{
					position418, tokenIndex418 := position, tokenIndex
					if buffer[position] != rune('D') {
						goto l419
					}
					position++
					if buffer[position] != rune('e') {
						goto l419
					}
					position++
					goto l418
				l419:
					position, tokenIndex = position418, tokenIndex418
					if buffer[position] != rune('E') {
						goto l420
					}
					position++
					if buffer[position] != rune('u') {
						goto l420
					}
					position++
					goto l418
				l420:
					position, tokenIndex = position418, tokenIndex418
					if buffer[position] != rune('L') {
						goto l421
					}
					position++
					if buffer[position] != rune('e') {
						goto l421
					}
					position++
					goto l418
				l421:
					position, tokenIndex = position418, tokenIndex418
					if buffer[position] != rune('N') {
						goto l416
					}
					position++
					if buffer[position] != rune('e') {
						goto l416
					}
					position++
				}
			l418:
				add(ruleTwoLetterGenusDashedSegment, position417)
			}
			return true
		l416:
			position, tokenIndex = position416, tokenIndex416
			return false
		},
		/* 60 WordAfterDash <- <(UpperAfterDash / LowerAfterDash)> */
		func() bool {
			position422, tokenIndex422 := position, tokenIndex
			{
				position423 := position
				{
					position424, tokenIndex424 := position, tokenIndex
					if !_rules[ruleUpperAfterDash]() {
						goto l425
					}
					goto l424
				l425:
					position, tokenIndex = position424, tokenIndex424
					if !_rules[ruleLowerAfterDash]() {
						goto l422
					}
				}
			l424:
				add(ruleWordAfterDash, position423)
			}
			return true
		l422:
			position, tokenIndex = position422, tokenIndex422
			return false
		},
		/* 61 UpperAfterDash <- <CapWord1> */
		func() bool {
			position426, tokenIndex426 := position, tokenIndex
			{
				position427 := position
				if !_rules[ruleCapWord1]() {
					goto l426
				}
				add(ruleUpperAfterDash, position427)
			}
			return true
		l426:
			position, tokenIndex = position426, tokenIndex426
			return false
		},
		/* 62 LowerAfterDash <- <Word1> */
		func() bool {
			position428, tokenIndex428 := position, tokenIndex
			{
				position429 := position
				if !_rules[ruleWord1]() {
					goto l428
				}
				add(ruleLowerAfterDash, position429)
			}
			return true
		l428:
			position, tokenIndex = position428, tokenIndex428
			return false
		},
		/* 63 TwoLetterGenus <- <(('C' 'a') / ('D' 'o') / ('E' 'a') / ('G' 'e') / ('I' 'a') / ('I' 'o') / ('I' 'x') / ('L' 'o') / ('O' 'a') / ('O' 'o') / ('N' 'u') / ('R' 'a') / ('T' 'y') / ('U' 'a') / ('A' 'a') / ('J' 'a') / ('Z' 'u') / ('L' 'a') / ('Q' 'u') / ('A' 's') / ('B' 'a'))> */
		func() bool {
			position430, tokenIndex430 := position, tokenIndex
			{
				position431 := position
				{
					position432, tokenIndex432 := position, tokenIndex
					if buffer[position] != rune('C') {
						goto l433
					}
					position++
					if buffer[position] != rune('a') {
						goto l433
					}
					position++
					goto l432
				l433:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('D') {
						goto l434
					}
					position++
					if buffer[position] != rune('o') {
						goto l434
					}
					position++
					goto l432
				l434:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('E') {
						goto l435
					}
					position++
					if buffer[position] != rune('a') {
						goto l435
					}
					position++
					goto l432
				l435:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('G') {
						goto l436
					}
					position++
					if buffer[position] != rune('e') {
						goto l436
					}
					position++
					goto l432
				l436:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('I') {
						goto l437
					}
					position++
					if buffer[position] != rune('a') {
						goto l437
					}
					position++
					goto l432
				l437:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('I') {
						goto l438
					}
					position++
					if buffer[position] != rune('o') {
						goto l438
					}
					position++
					goto l432
				l438:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('I') {
						goto l439
					}
					position++
					if buffer[position] != rune('x') {
						goto l439
					}
					position++
					goto l432
				l439:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('L') {
						goto l440
					}
					position++
					if buffer[position] != rune('o') {
						goto l440
					}
					position++
					goto l432
				l440:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('O') {
						goto l441
					}
					position++
					if buffer[position] != rune('a') {
						goto l441
					}
					position++
					goto l432
				l441:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('O') {
						goto l442
					}
					position++
					if buffer[position] != rune('o') {
						goto l442
					}
					position++
					goto l432
				l442:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('N') {
						goto l443
					}
					position++
					if buffer[position] != rune('u') {
						goto l443
					}
					position++
					goto l432
				l443:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('R') {
						goto l444
					}
					position++
					if buffer[position] != rune('a') {
						goto l444
					}
					position++
					goto l432
				l444:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('T') {
						goto l445
					}
					position++
					if buffer[position] != rune('y') {
						goto l445
					}
					position++
					goto l432
				l445:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('U') {
						goto l446
					}
					position++
					if buffer[position] != rune('a') {
						goto l446
					}
					position++
					goto l432
				l446:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('A') {
						goto l447
					}
					position++
					if buffer[position] != rune('a') {
						goto l447
					}
					position++
					goto l432
				l447:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('J') {
						goto l448
					}
					position++
					if buffer[position] != rune('a') {
						goto l448
					}
					position++
					goto l432
				l448:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('Z') {
						goto l449
					}
					position++
					if buffer[position] != rune('u') {
						goto l449
					}
					position++
					goto l432
				l449:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('L') {
						goto l450
					}
					position++
					if buffer[position] != rune('a') {
						goto l450
					}
					position++
					goto l432
				l450:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('Q') {
						goto l451
					}
					position++
					if buffer[position] != rune('u') {
						goto l451
					}
					position++
					goto l432
				l451:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('A') {
						goto l452
					}
					position++
					if buffer[position] != rune('s') {
						goto l452
					}
					position++
					goto l432
				l452:
					position, tokenIndex = position432, tokenIndex432
					if buffer[position] != rune('B') {
						goto l430
					}
					position++
					if buffer[position] != rune('a') {
						goto l430
					}
					position++
				}
			l432:
				add(ruleTwoLetterGenus, position431)
			}
			return true
		l430:
			position, tokenIndex = position430, tokenIndex430
			return false
		},
		/* 64 Word <- <(!((('e' 'x') / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd') / ('p' 'r' 'o') / ('c' 'v') / ('c' 'u' 'l' 't' 'i' 'v' 'a' 'r') / AuthorPrefix / RankUninomial / Approximation / Word4) SpaceCharEOI) (WordApostr / WordStartsWithDigit / MultiDashedWord / Word2 / Word1) &(SpaceCharEOI / '('))> */
		func() bool {
			position453, tokenIndex453 := position, tokenIndex
			{
				position454 := position
				{
					position455, tokenIndex455 := position, tokenIndex
					{
						position456, tokenIndex456 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l457
						}
						position++
						if buffer[position] != rune('x') {
							goto l457
						}
						position++
						goto l456
					l457:
						position, tokenIndex = position456, tokenIndex456
						if buffer[position] != rune('e') {
							goto l458
						}
						position++
						if buffer[position] != rune('t') {
							goto l458
						}
						position++
						goto l456
					l458:
						position, tokenIndex = position456, tokenIndex456
						if buffer[position] != rune('a') {
							goto l459
						}
						position++
						if buffer[position] != rune('n') {
							goto l459
						}
						position++
						if buffer[position] != rune('d') {
							goto l459
						}
						position++
						goto l456
					l459:
						position, tokenIndex = position456, tokenIndex456
						if buffer[position] != rune('a') {
							goto l460
						}
						position++
						if buffer[position] != rune('p') {
							goto l460
						}
						position++
						if buffer[position] != rune('u') {
							goto l460
						}
						position++
						if buffer[position] != rune('d') {
							goto l460
						}
						position++
						goto l456
					l460:
						position, tokenIndex = position456, tokenIndex456
						if buffer[position] != rune('p') {
							goto l461
						}
						position++
						if buffer[position] != rune('r') {
							goto l461
						}
						position++
						if buffer[position] != rune('o') {
							goto l461
						}
						position++
						goto l456
					l461:
						position, tokenIndex = position456, tokenIndex456
						if buffer[position] != rune('c') {
							goto l462
						}
						position++
						if buffer[position] != rune('v') {
							goto l462
						}
						position++
						goto l456
					l462:
						position, tokenIndex = position456, tokenIndex456
						if buffer[position] != rune('c') {
							goto l463
						}
						position++
						if buffer[position] != rune('u') {
							goto l463
						}
						position++
						if buffer[position] != rune('l') {
							goto l463
						}
						position++
						if buffer[position] != rune('t') {
							goto l463
						}
						position++
						if buffer[position] != rune('i') {
							goto l463
						}
						position++
						if buffer[position] != rune('v') {
							goto l463
						}
						position++
						if buffer[position] != rune('a') {
							goto l463
						}
						position++
						if buffer[position] != rune('r') {
							goto l463
						}
						position++
						goto l456
					l463:
						position, tokenIndex = position456, tokenIndex456
						if !_rules[ruleAuthorPrefix]() {
							goto l464
						}
						goto l456
					l464:
						position, tokenIndex = position456, tokenIndex456
						if !_rules[ruleRankUninomial]() {
							goto l465
						}
						goto l456
					l465:
						position, tokenIndex = position456, tokenIndex456
						if !_rules[ruleApproximation]() {
							goto l466
						}
						goto l456
					l466:
						position, tokenIndex = position456, tokenIndex456
						if !_rules[ruleWord4]() {
							goto l455
						}
					}
				l456:
					if !_rules[ruleSpaceCharEOI]() {
						goto l455
					}
					goto l453
				l455:
					position, tokenIndex = position455, tokenIndex455
				}
				{
					position467, tokenIndex467 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l468
					}
					goto l467
				l468:
					position, tokenIndex = position467, tokenIndex467
					if !_rules[ruleWordStartsWithDigit]() {
						goto l469
					}
					goto l467
				l469:
					position, tokenIndex = position467, tokenIndex467
					if !_rules[ruleMultiDashedWord]() {
						goto l470
					}
					goto l467
				l470:
					position, tokenIndex = position467, tokenIndex467
					if !_rules[ruleWord2]() {
						goto l471
					}
					goto l467
				l471:
					position, tokenIndex = position467, tokenIndex467
					if !_rules[ruleWord1]() {
						goto l453
					}
				}
			l467:
				{
					position472, tokenIndex472 := position, tokenIndex
					{
						position473, tokenIndex473 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l474
						}
						goto l473
					l474:
						position, tokenIndex = position473, tokenIndex473
						if buffer[position] != rune('(') {
							goto l453
						}
						position++
					}
				l473:
					position, tokenIndex = position472, tokenIndex472
				}
				add(ruleWord, position454)
			}
			return true
		l453:
			position, tokenIndex = position453, tokenIndex453
			return false
		},
		/* 65 Word1 <- <(((DotPrefix / LowerASCII) Dash)? NameLowerChar NameLowerChar+)> */
		func() bool {
			position475, tokenIndex475 := position, tokenIndex
			{
				position476 := position
				{
					position477, tokenIndex477 := position, tokenIndex
					{
						position479, tokenIndex479 := position, tokenIndex
						if !_rules[ruleDotPrefix]() {
							goto l480
						}
						goto l479
					l480:
						position, tokenIndex = position479, tokenIndex479
						if !_rules[ruleLowerASCII]() {
							goto l477
						}
					}
				l479:
					if !_rules[ruleDash]() {
						goto l477
					}
					goto l478
				l477:
					position, tokenIndex = position477, tokenIndex477
				}
			l478:
				if !_rules[ruleNameLowerChar]() {
					goto l475
				}
				if !_rules[ruleNameLowerChar]() {
					goto l475
				}
			l481:
				{
					position482, tokenIndex482 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l482
					}
					goto l481
				l482:
					position, tokenIndex = position482, tokenIndex482
				}
				add(ruleWord1, position476)
			}
			return true
		l475:
			position, tokenIndex = position475, tokenIndex475
			return false
		},
		/* 66 WordStartsWithDigit <- <(('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9') Nums? ('.' / Dash)? NameLowerChar NameLowerChar NameLowerChar NameLowerChar+)> */
		func() bool {
			position483, tokenIndex483 := position, tokenIndex
			{
				position484 := position
				{
					position485, tokenIndex485 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l486
					}
					position++
					goto l485
				l486:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('2') {
						goto l487
					}
					position++
					goto l485
				l487:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('3') {
						goto l488
					}
					position++
					goto l485
				l488:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('4') {
						goto l489
					}
					position++
					goto l485
				l489:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('5') {
						goto l490
					}
					position++
					goto l485
				l490:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('6') {
						goto l491
					}
					position++
					goto l485
				l491:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('7') {
						goto l492
					}
					position++
					goto l485
				l492:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('8') {
						goto l493
					}
					position++
					goto l485
				l493:
					position, tokenIndex = position485, tokenIndex485
					if buffer[position] != rune('9') {
						goto l483
					}
					position++
				}
			l485:
				{
					position494, tokenIndex494 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l494
					}
					goto l495
				l494:
					position, tokenIndex = position494, tokenIndex494
				}
			l495:
				{
					position496, tokenIndex496 := position, tokenIndex
					{
						position498, tokenIndex498 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l499
						}
						position++
						goto l498
					l499:
						position, tokenIndex = position498, tokenIndex498
						if !_rules[ruleDash]() {
							goto l496
						}
					}
				l498:
					goto l497
				l496:
					position, tokenIndex = position496, tokenIndex496
				}
			l497:
				if !_rules[ruleNameLowerChar]() {
					goto l483
				}
				if !_rules[ruleNameLowerChar]() {
					goto l483
				}
				if !_rules[ruleNameLowerChar]() {
					goto l483
				}
				if !_rules[ruleNameLowerChar]() {
					goto l483
				}
			l500:
				{
					position501, tokenIndex501 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l501
					}
					goto l500
				l501:
					position, tokenIndex = position501, tokenIndex501
				}
				add(ruleWordStartsWithDigit, position484)
			}
			return true
		l483:
			position, tokenIndex = position483, tokenIndex483
			return false
		},
		/* 67 Word2 <- <(NameLowerChar+ Dash? (WordApostr / NameLowerChar+))> */
		func() bool {
			position502, tokenIndex502 := position, tokenIndex
			{
				position503 := position
				if !_rules[ruleNameLowerChar]() {
					goto l502
				}
			l504:
				{
					position505, tokenIndex505 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l505
					}
					goto l504
				l505:
					position, tokenIndex = position505, tokenIndex505
				}
				{
					position506, tokenIndex506 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l506
					}
					goto l507
				l506:
					position, tokenIndex = position506, tokenIndex506
				}
			l507:
				{
					position508, tokenIndex508 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l509
					}
					goto l508
				l509:
					position, tokenIndex = position508, tokenIndex508
					if !_rules[ruleNameLowerChar]() {
						goto l502
					}
				l510:
					{
						position511, tokenIndex511 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l511
						}
						goto l510
					l511:
						position, tokenIndex = position511, tokenIndex511
					}
				}
			l508:
				add(ruleWord2, position503)
			}
			return true
		l502:
			position, tokenIndex = position502, tokenIndex502
			return false
		},
		/* 68 WordApostr <- <(NameLowerChar NameLowerChar* Apostrophe Word1)> */
		func() bool {
			position512, tokenIndex512 := position, tokenIndex
			{
				position513 := position
				if !_rules[ruleNameLowerChar]() {
					goto l512
				}
			l514:
				{
					position515, tokenIndex515 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l515
					}
					goto l514
				l515:
					position, tokenIndex = position515, tokenIndex515
				}
				if !_rules[ruleApostrophe]() {
					goto l512
				}
				if !_rules[ruleWord1]() {
					goto l512
				}
				add(ruleWordApostr, position513)
			}
			return true
		l512:
			position, tokenIndex = position512, tokenIndex512
			return false
		},
		/* 69 Word4 <- <(NameLowerChar+ '.' NameLowerChar)> */
		func() bool {
			position516, tokenIndex516 := position, tokenIndex
			{
				position517 := position
				if !_rules[ruleNameLowerChar]() {
					goto l516
				}
			l518:
				{
					position519, tokenIndex519 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l519
					}
					goto l518
				l519:
					position, tokenIndex = position519, tokenIndex519
				}
				if buffer[position] != rune('.') {
					goto l516
				}
				position++
				if !_rules[ruleNameLowerChar]() {
					goto l516
				}
				add(ruleWord4, position517)
			}
			return true
		l516:
			position, tokenIndex = position516, tokenIndex516
			return false
		},
		/* 70 DotPrefix <- <('s' 't' '.')> */
		func() bool {
			position520, tokenIndex520 := position, tokenIndex
			{
				position521 := position
				if buffer[position] != rune('s') {
					goto l520
				}
				position++
				if buffer[position] != rune('t') {
					goto l520
				}
				position++
				if buffer[position] != rune('.') {
					goto l520
				}
				position++
				add(ruleDotPrefix, position521)
			}
			return true
		l520:
			position, tokenIndex = position520, tokenIndex520
			return false
		},
		/* 71 MultiDashedWord <- <(NameLowerChar+ Dash NameLowerChar+ Dash NameLowerChar+ (Dash NameLowerChar+)?)> */
		func() bool {
			position522, tokenIndex522 := position, tokenIndex
			{
				position523 := position
				if !_rules[ruleNameLowerChar]() {
					goto l522
				}
			l524:
				{
					position525, tokenIndex525 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l525
					}
					goto l524
				l525:
					position, tokenIndex = position525, tokenIndex525
				}
				if !_rules[ruleDash]() {
					goto l522
				}
				if !_rules[ruleNameLowerChar]() {
					goto l522
				}
			l526:
				{
					position527, tokenIndex527 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l527
					}
					goto l526
				l527:
					position, tokenIndex = position527, tokenIndex527
				}
				if !_rules[ruleDash]() {
					goto l522
				}
				if !_rules[ruleNameLowerChar]() {
					goto l522
				}
			l528:
				{
					position529, tokenIndex529 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l529
					}
					goto l528
				l529:
					position, tokenIndex = position529, tokenIndex529
				}
				{
					position530, tokenIndex530 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l530
					}
					if !_rules[ruleNameLowerChar]() {
						goto l530
					}
				l532:
					{
						position533, tokenIndex533 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l533
						}
						goto l532
					l533:
						position, tokenIndex = position533, tokenIndex533
					}
					goto l531
				l530:
					position, tokenIndex = position530, tokenIndex530
				}
			l531:
				add(ruleMultiDashedWord, position523)
			}
			return true
		l522:
			position, tokenIndex = position522, tokenIndex522
			return false
		},
		/* 72 HybridChar <- <('×' / (('x' / 'X') &_) / (('x' / 'X') &UninomialWord) / (('x' / 'X') &END))> */
		func() bool {
			position534, tokenIndex534 := position, tokenIndex
			{
				position535 := position
				{
					position536, tokenIndex536 := position, tokenIndex
					if buffer[position] != rune('×') {
						goto l537
					}
					position++
					goto l536
				l537:
					position, tokenIndex = position536, tokenIndex536
					{
						position539, tokenIndex539 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l540
						}
						position++
						goto l539
					l540:
						position, tokenIndex = position539, tokenIndex539
						if buffer[position] != rune('X') {
							goto l538
						}
						position++
					}
				l539:
					{
						position541, tokenIndex541 := position, tokenIndex
						if !_rules[rule_]() {
							goto l538
						}
						position, tokenIndex = position541, tokenIndex541
					}
					goto l536
				l538:
					position, tokenIndex = position536, tokenIndex536
					{
						position543, tokenIndex543 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l544
						}
						position++
						goto l543
					l544:
						position, tokenIndex = position543, tokenIndex543
						if buffer[position] != rune('X') {
							goto l542
						}
						position++
					}
				l543:
					{
						position545, tokenIndex545 := position, tokenIndex
						if !_rules[ruleUninomialWord]() {
							goto l542
						}
						position, tokenIndex = position545, tokenIndex545
					}
					goto l536
				l542:
					position, tokenIndex = position536, tokenIndex536
					{
						position546, tokenIndex546 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l547
						}
						position++
						goto l546
					l547:
						position, tokenIndex = position546, tokenIndex546
						if buffer[position] != rune('X') {
							goto l534
						}
						position++
					}
				l546:
					{
						position548, tokenIndex548 := position, tokenIndex
						if !_rules[ruleEND]() {
							goto l534
						}
						position, tokenIndex = position548, tokenIndex548
					}
				}
			l536:
				add(ruleHybridChar, position535)
			}
			return true
		l534:
			position, tokenIndex = position534, tokenIndex534
			return false
		},
		/* 73 GraftChimeraChar <- <'+'> */
		func() bool {
			position549, tokenIndex549 := position, tokenIndex
			{
				position550 := position
				if buffer[position] != rune('+') {
					goto l549
				}
				position++
				add(ruleGraftChimeraChar, position550)
			}
			return true
		l549:
			position, tokenIndex = position549, tokenIndex549
			return false
		},
		/* 74 ApproxNameIgnored <- <.*> */
		func() bool {
			{
				position552 := position
			l553:
				{
					position554, tokenIndex554 := position, tokenIndex
					if !matchDot() {
						goto l554
					}
					goto l553
				l554:
					position, tokenIndex = position554, tokenIndex554
				}
				add(ruleApproxNameIgnored, position552)
			}
			return true
		},
		/* 75 Approximation <- <(('s' 'p' '.' _? ('n' 'r' '.')) / ('s' 'p' '.' _? ('a' 'f' 'f' '.')) / ('m' 'o' 'n' 's' 't' '.') / '?' / ((('s' 'p' 'p') / ('n' 'r') / ('s' 'p') / ('a' 'f' 'f') / ('s' 'p' 'e' 'c' 'i' 'e' 's')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position555, tokenIndex555 := position, tokenIndex
			{
				position556 := position
				{
					position557, tokenIndex557 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l558
					}
					position++
					if buffer[position] != rune('p') {
						goto l558
					}
					position++
					if buffer[position] != rune('.') {
						goto l558
					}
					position++
					{
						position559, tokenIndex559 := position, tokenIndex
						if !_rules[rule_]() {
							goto l559
						}
						goto l560
					l559:
						position, tokenIndex = position559, tokenIndex559
					}
				l560:
					if buffer[position] != rune('n') {
						goto l558
					}
					position++
					if buffer[position] != rune('r') {
						goto l558
					}
					position++
					if buffer[position] != rune('.') {
						goto l558
					}
					position++
					goto l557
				l558:
					position, tokenIndex = position557, tokenIndex557
					if buffer[position] != rune('s') {
						goto l561
					}
					position++
					if buffer[position] != rune('p') {
						goto l561
					}
					position++
					if buffer[position] != rune('.') {
						goto l561
					}
					position++
					{
						position562, tokenIndex562 := position, tokenIndex
						if !_rules[rule_]() {
							goto l562
						}
						goto l563
					l562:
						position, tokenIndex = position562, tokenIndex562
					}
				l563:
					if buffer[position] != rune('a') {
						goto l561
					}
					position++
					if buffer[position] != rune('f') {
						goto l561
					}
					position++
					if buffer[position] != rune('f') {
						goto l561
					}
					position++
					if buffer[position] != rune('.') {
						goto l561
					}
					position++
					goto l557
				l561:
					position, tokenIndex = position557, tokenIndex557
					if buffer[position] != rune('m') {
						goto l564
					}
					position++
					if buffer[position] != rune('o') {
						goto l564
					}
					position++
					if buffer[position] != rune('n') {
						goto l564
					}
					position++
					if buffer[position] != rune('s') {
						goto l564
					}
					position++
					if buffer[position] != rune('t') {
						goto l564
					}
					position++
					if buffer[position] != rune('.') {
						goto l564
					}
					position++
					goto l557
				l564:
					position, tokenIndex = position557, tokenIndex557
					if buffer[position] != rune('?') {
						goto l565
					}
					position++
					goto l557
				l565:
					position, tokenIndex = position557, tokenIndex557
					{
						position566, tokenIndex566 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l567
						}
						position++
						if buffer[position] != rune('p') {
							goto l567
						}
						position++
						if buffer[position] != rune('p') {
							goto l567
						}
						position++
						goto l566
					l567:
						position, tokenIndex = position566, tokenIndex566
						if buffer[position] != rune('n') {
							goto l568
						}
						position++
						if buffer[position] != rune('r') {
							goto l568
						}
						position++
						goto l566
					l568:
						position, tokenIndex = position566, tokenIndex566
						if buffer[position] != rune('s') {
							goto l569
						}
						position++
						if buffer[position] != rune('p') {
							goto l569
						}
						position++
						goto l566
					l569:
						position, tokenIndex = position566, tokenIndex566
						if buffer[position] != rune('a') {
							goto l570
						}
						position++
						if buffer[position] != rune('f') {
							goto l570
						}
						position++
						if buffer[position] != rune('f') {
							goto l570
						}
						position++
						goto l566
					l570:
						position, tokenIndex = position566, tokenIndex566
						if buffer[position] != rune('s') {
							goto l555
						}
						position++
						if buffer[position] != rune('p') {
							goto l555
						}
						position++
						if buffer[position] != rune('e') {
							goto l555
						}
						position++
						if buffer[position] != rune('c') {
							goto l555
						}
						position++
						if buffer[position] != rune('i') {
							goto l555
						}
						position++
						if buffer[position] != rune('e') {
							goto l555
						}
						position++
						if buffer[position] != rune('s') {
							goto l555
						}
						position++
					}
				l566:
					{
						position571, tokenIndex571 := position, tokenIndex
						{
							position573, tokenIndex573 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l572
							}
							position, tokenIndex = position573, tokenIndex573
						}
						goto l571
					l572:
						position, tokenIndex = position571, tokenIndex571
						if buffer[position] != rune('.') {
							goto l555
						}
						position++
					}
				l571:
				}
			l557:
				add(ruleApproximation, position556)
			}
			return true
		l555:
			position, tokenIndex = position555, tokenIndex555
			return false
		},
		/* 76 Authorship <- <((AuthorshipCombo / OriginalAuthorship) &(SpaceCharEOI / ';' / ','))> */
		func() bool {
			position574, tokenIndex574 := position, tokenIndex
			{
				position575 := position
				{
					position576, tokenIndex576 := position, tokenIndex
					if !_rules[ruleAuthorshipCombo]() {
						goto l577
					}
					goto l576
				l577:
					position, tokenIndex = position576, tokenIndex576
					if !_rules[ruleOriginalAuthorship]() {
						goto l574
					}
				}
			l576:
				{
					position578, tokenIndex578 := position, tokenIndex
					{
						position579, tokenIndex579 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l580
						}
						goto l579
					l580:
						position, tokenIndex = position579, tokenIndex579
						if buffer[position] != rune(';') {
							goto l581
						}
						position++
						goto l579
					l581:
						position, tokenIndex = position579, tokenIndex579
						if buffer[position] != rune(',') {
							goto l574
						}
						position++
					}
				l579:
					position, tokenIndex = position578, tokenIndex578
				}
				add(ruleAuthorship, position575)
			}
			return true
		l574:
			position, tokenIndex = position574, tokenIndex574
			return false
		},
		/* 77 AuthorshipCombo <- <(OriginalAuthorshipComb (_? CombinationAuthorship)?)> */
		func() bool {
			position582, tokenIndex582 := position, tokenIndex
			{
				position583 := position
				if !_rules[ruleOriginalAuthorshipComb]() {
					goto l582
				}
				{
					position584, tokenIndex584 := position, tokenIndex
					{
						position586, tokenIndex586 := position, tokenIndex
						if !_rules[rule_]() {
							goto l586
						}
						goto l587
					l586:
						position, tokenIndex = position586, tokenIndex586
					}
				l587:
					if !_rules[ruleCombinationAuthorship]() {
						goto l584
					}
					goto l585
				l584:
					position, tokenIndex = position584, tokenIndex584
				}
			l585:
				add(ruleAuthorshipCombo, position583)
			}
			return true
		l582:
			position, tokenIndex = position582, tokenIndex582
			return false
		},
		/* 78 OriginalAuthorship <- <AuthorsGroup> */
		func() bool {
			position588, tokenIndex588 := position, tokenIndex
			{
				position589 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l588
				}
				add(ruleOriginalAuthorship, position589)
			}
			return true
		l588:
			position, tokenIndex = position588, tokenIndex588
			return false
		},
		/* 79 OriginalAuthorshipComb <- <(BasionymAuthorshipYearMisformed / BasionymAuthorship / BasionymAuthorshipMissingParens)> */
		func() bool {
			position590, tokenIndex590 := position, tokenIndex
			{
				position591 := position
				{
					position592, tokenIndex592 := position, tokenIndex
					if !_rules[ruleBasionymAuthorshipYearMisformed]() {
						goto l593
					}
					goto l592
				l593:
					position, tokenIndex = position592, tokenIndex592
					if !_rules[ruleBasionymAuthorship]() {
						goto l594
					}
					goto l592
				l594:
					position, tokenIndex = position592, tokenIndex592
					if !_rules[ruleBasionymAuthorshipMissingParens]() {
						goto l590
					}
				}
			l592:
				add(ruleOriginalAuthorshipComb, position591)
			}
			return true
		l590:
			position, tokenIndex = position590, tokenIndex590
			return false
		},
		/* 80 CombinationAuthorship <- <AuthorsGroup> */
		func() bool {
			position595, tokenIndex595 := position, tokenIndex
			{
				position596 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l595
				}
				add(ruleCombinationAuthorship, position596)
			}
			return true
		l595:
			position, tokenIndex = position595, tokenIndex595
			return false
		},
		/* 81 BasionymAuthorshipMissingParens <- <(MissingParensStart / MissingParensEnd)> */
		func() bool {
			position597, tokenIndex597 := position, tokenIndex
			{
				position598 := position
				{
					position599, tokenIndex599 := position, tokenIndex
					if !_rules[ruleMissingParensStart]() {
						goto l600
					}
					goto l599
				l600:
					position, tokenIndex = position599, tokenIndex599
					if !_rules[ruleMissingParensEnd]() {
						goto l597
					}
				}
			l599:
				add(ruleBasionymAuthorshipMissingParens, position598)
			}
			return true
		l597:
			position, tokenIndex = position597, tokenIndex597
			return false
		},
		/* 82 MissingParensStart <- <('(' _? AuthorsGroup)> */
		func() bool {
			position601, tokenIndex601 := position, tokenIndex
			{
				position602 := position
				if buffer[position] != rune('(') {
					goto l601
				}
				position++
				{
					position603, tokenIndex603 := position, tokenIndex
					if !_rules[rule_]() {
						goto l603
					}
					goto l604
				l603:
					position, tokenIndex = position603, tokenIndex603
				}
			l604:
				if !_rules[ruleAuthorsGroup]() {
					goto l601
				}
				add(ruleMissingParensStart, position602)
			}
			return true
		l601:
			position, tokenIndex = position601, tokenIndex601
			return false
		},
		/* 83 MissingParensEnd <- <(AuthorsGroup _? ')')> */
		func() bool {
			position605, tokenIndex605 := position, tokenIndex
			{
				position606 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l605
				}
				{
					position607, tokenIndex607 := position, tokenIndex
					if !_rules[rule_]() {
						goto l607
					}
					goto l608
				l607:
					position, tokenIndex = position607, tokenIndex607
				}
			l608:
				if buffer[position] != rune(')') {
					goto l605
				}
				position++
				add(ruleMissingParensEnd, position606)
			}
			return true
		l605:
			position, tokenIndex = position605, tokenIndex605
			return false
		},
		/* 84 BasionymAuthorshipYearMisformed <- <('(' _? AuthorsGroup _? ')' (_? ',')? _? Year)> */
		func() bool {
			position609, tokenIndex609 := position, tokenIndex
			{
				position610 := position
				if buffer[position] != rune('(') {
					goto l609
				}
				position++
				{
					position611, tokenIndex611 := position, tokenIndex
					if !_rules[rule_]() {
						goto l611
					}
					goto l612
				l611:
					position, tokenIndex = position611, tokenIndex611
				}
			l612:
				if !_rules[ruleAuthorsGroup]() {
					goto l609
				}
				{
					position613, tokenIndex613 := position, tokenIndex
					if !_rules[rule_]() {
						goto l613
					}
					goto l614
				l613:
					position, tokenIndex = position613, tokenIndex613
				}
			l614:
				if buffer[position] != rune(')') {
					goto l609
				}
				position++
				{
					position615, tokenIndex615 := position, tokenIndex
					{
						position617, tokenIndex617 := position, tokenIndex
						if !_rules[rule_]() {
							goto l617
						}
						goto l618
					l617:
						position, tokenIndex = position617, tokenIndex617
					}
				l618:
					if buffer[position] != rune(',') {
						goto l615
					}
					position++
					goto l616
				l615:
					position, tokenIndex = position615, tokenIndex615
				}
			l616:
				{
					position619, tokenIndex619 := position, tokenIndex
					if !_rules[rule_]() {
						goto l619
					}
					goto l620
				l619:
					position, tokenIndex = position619, tokenIndex619
				}
			l620:
				if !_rules[ruleYear]() {
					goto l609
				}
				add(ruleBasionymAuthorshipYearMisformed, position610)
			}
			return true
		l609:
			position, tokenIndex = position609, tokenIndex609
			return false
		},
		/* 85 BasionymAuthorship <- <(BasionymAuthorship1 / BasionymAuthorship2Parens)> */
		func() bool {
			position621, tokenIndex621 := position, tokenIndex
			{
				position622 := position
				{
					position623, tokenIndex623 := position, tokenIndex
					if !_rules[ruleBasionymAuthorship1]() {
						goto l624
					}
					goto l623
				l624:
					position, tokenIndex = position623, tokenIndex623
					if !_rules[ruleBasionymAuthorship2Parens]() {
						goto l621
					}
				}
			l623:
				add(ruleBasionymAuthorship, position622)
			}
			return true
		l621:
			position, tokenIndex = position621, tokenIndex621
			return false
		},
		/* 86 BasionymAuthorship1 <- <('(' _? AuthorsGroup _? ')')> */
		func() bool {
			position625, tokenIndex625 := position, tokenIndex
			{
				position626 := position
				if buffer[position] != rune('(') {
					goto l625
				}
				position++
				{
					position627, tokenIndex627 := position, tokenIndex
					if !_rules[rule_]() {
						goto l627
					}
					goto l628
				l627:
					position, tokenIndex = position627, tokenIndex627
				}
			l628:
				if !_rules[ruleAuthorsGroup]() {
					goto l625
				}
				{
					position629, tokenIndex629 := position, tokenIndex
					if !_rules[rule_]() {
						goto l629
					}
					goto l630
				l629:
					position, tokenIndex = position629, tokenIndex629
				}
			l630:
				if buffer[position] != rune(')') {
					goto l625
				}
				position++
				add(ruleBasionymAuthorship1, position626)
			}
			return true
		l625:
			position, tokenIndex = position625, tokenIndex625
			return false
		},
		/* 87 BasionymAuthorship2Parens <- <('(' _? '(' _? AuthorsGroup _? ')' _? ')')> */
		func() bool {
			position631, tokenIndex631 := position, tokenIndex
			{
				position632 := position
				if buffer[position] != rune('(') {
					goto l631
				}
				position++
				{
					position633, tokenIndex633 := position, tokenIndex
					if !_rules[rule_]() {
						goto l633
					}
					goto l634
				l633:
					position, tokenIndex = position633, tokenIndex633
				}
			l634:
				if buffer[position] != rune('(') {
					goto l631
				}
				position++
				{
					position635, tokenIndex635 := position, tokenIndex
					if !_rules[rule_]() {
						goto l635
					}
					goto l636
				l635:
					position, tokenIndex = position635, tokenIndex635
				}
			l636:
				if !_rules[ruleAuthorsGroup]() {
					goto l631
				}
				{
					position637, tokenIndex637 := position, tokenIndex
					if !_rules[rule_]() {
						goto l637
					}
					goto l638
				l637:
					position, tokenIndex = position637, tokenIndex637
				}
			l638:
				if buffer[position] != rune(')') {
					goto l631
				}
				position++
				{
					position639, tokenIndex639 := position, tokenIndex
					if !_rules[rule_]() {
						goto l639
					}
					goto l640
				l639:
					position, tokenIndex = position639, tokenIndex639
				}
			l640:
				if buffer[position] != rune(')') {
					goto l631
				}
				position++
				add(ruleBasionymAuthorship2Parens, position632)
			}
			return true
		l631:
			position, tokenIndex = position631, tokenIndex631
			return false
		},
		/* 88 AuthorsGroup <- <(AuthorsTeam (','? _ (AuthorEmend / AuthorEx) AuthorsTeam)?)> */
		func() bool {
			position641, tokenIndex641 := position, tokenIndex
			{
				position642 := position
				if !_rules[ruleAuthorsTeam]() {
					goto l641
				}
				{
					position643, tokenIndex643 := position, tokenIndex
					{
						position645, tokenIndex645 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l645
						}
						position++
						goto l646
					l645:
						position, tokenIndex = position645, tokenIndex645
					}
				l646:
					if !_rules[rule_]() {
						goto l643
					}
					{
						position647, tokenIndex647 := position, tokenIndex
						if !_rules[ruleAuthorEmend]() {
							goto l648
						}
						goto l647
					l648:
						position, tokenIndex = position647, tokenIndex647
						if !_rules[ruleAuthorEx]() {
							goto l643
						}
					}
				l647:
					if !_rules[ruleAuthorsTeam]() {
						goto l643
					}
					goto l644
				l643:
					position, tokenIndex = position643, tokenIndex643
				}
			l644:
				add(ruleAuthorsGroup, position642)
			}
			return true
		l641:
			position, tokenIndex = position641, tokenIndex641
			return false
		},
		/* 89 AuthorsTeam <- <(Author (AuthorSep Author)* (_? ','? _? Year)?)> */
		func() bool {
			position649, tokenIndex649 := position, tokenIndex
			{
				position650 := position
				if !_rules[ruleAuthor]() {
					goto l649
				}
			l651:
				{
					position652, tokenIndex652 := position, tokenIndex
					if !_rules[ruleAuthorSep]() {
						goto l652
					}
					if !_rules[ruleAuthor]() {
						goto l652
					}
					goto l651
				l652:
					position, tokenIndex = position652, tokenIndex652
				}
				{
					position653, tokenIndex653 := position, tokenIndex
					{
						position655, tokenIndex655 := position, tokenIndex
						if !_rules[rule_]() {
							goto l655
						}
						goto l656
					l655:
						position, tokenIndex = position655, tokenIndex655
					}
				l656:
					{
						position657, tokenIndex657 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l657
						}
						position++
						goto l658
					l657:
						position, tokenIndex = position657, tokenIndex657
					}
				l658:
					{
						position659, tokenIndex659 := position, tokenIndex
						if !_rules[rule_]() {
							goto l659
						}
						goto l660
					l659:
						position, tokenIndex = position659, tokenIndex659
					}
				l660:
					if !_rules[ruleYear]() {
						goto l653
					}
					goto l654
				l653:
					position, tokenIndex = position653, tokenIndex653
				}
			l654:
				add(ruleAuthorsTeam, position650)
			}
			return true
		l649:
			position, tokenIndex = position649, tokenIndex649
			return false
		},
		/* 90 AuthorSep <- <(AuthorSep1 / AuthorSep2)> */
		func() bool {
			position661, tokenIndex661 := position, tokenIndex
			{
				position662 := position
				{
					position663, tokenIndex663 := position, tokenIndex
					if !_rules[ruleAuthorSep1]() {
						goto l664
					}
					goto l663
				l664:
					position, tokenIndex = position663, tokenIndex663
					if !_rules[ruleAuthorSep2]() {
						goto l661
					}
				}
			l663:
				add(ruleAuthorSep, position662)
			}
			return true
		l661:
			position, tokenIndex = position661, tokenIndex661
			return false
		},
		/* 91 AuthorSep1 <- <(_? (',' _)? ('&' / AuthorSepSpanish / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd')) _?)> */
		func() bool {
			position665, tokenIndex665 := position, tokenIndex
			{
				position666 := position
				{
					position667, tokenIndex667 := position, tokenIndex
					if !_rules[rule_]() {
						goto l667
					}
					goto l668
				l667:
					position, tokenIndex = position667, tokenIndex667
				}
			l668:
				{
					position669, tokenIndex669 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l669
					}
					position++
					if !_rules[rule_]() {
						goto l669
					}
					goto l670
				l669:
					position, tokenIndex = position669, tokenIndex669
				}
			l670:
				{
					position671, tokenIndex671 := position, tokenIndex
					if buffer[position] != rune('&') {
						goto l672
					}
					position++
					goto l671
				l672:
					position, tokenIndex = position671, tokenIndex671
					if !_rules[ruleAuthorSepSpanish]() {
						goto l673
					}
					goto l671
				l673:
					position, tokenIndex = position671, tokenIndex671
					if buffer[position] != rune('e') {
						goto l674
					}
					position++
					if buffer[position] != rune('t') {
						goto l674
					}
					position++
					goto l671
				l674:
					position, tokenIndex = position671, tokenIndex671
					if buffer[position] != rune('a') {
						goto l675
					}
					position++
					if buffer[position] != rune('n') {
						goto l675
					}
					position++
					if buffer[position] != rune('d') {
						goto l675
					}
					position++
					goto l671
				l675:
					position, tokenIndex = position671, tokenIndex671
					if buffer[position] != rune('a') {
						goto l665
					}
					position++
					if buffer[position] != rune('p') {
						goto l665
					}
					position++
					if buffer[position] != rune('u') {
						goto l665
					}
					position++
					if buffer[position] != rune('d') {
						goto l665
					}
					position++
				}
			l671:
				{
					position676, tokenIndex676 := position, tokenIndex
					if !_rules[rule_]() {
						goto l676
					}
					goto l677
				l676:
					position, tokenIndex = position676, tokenIndex676
				}
			l677:
				add(ruleAuthorSep1, position666)
			}
			return true
		l665:
			position, tokenIndex = position665, tokenIndex665
			return false
		},
		/* 92 AuthorSep2 <- <(_? ',' _?)> */
		func() bool {
			position678, tokenIndex678 := position, tokenIndex
			{
				position679 := position
				{
					position680, tokenIndex680 := position, tokenIndex
					if !_rules[rule_]() {
						goto l680
					}
					goto l681
				l680:
					position, tokenIndex = position680, tokenIndex680
				}
			l681:
				if buffer[position] != rune(',') {
					goto l678
				}
				position++
				{
					position682, tokenIndex682 := position, tokenIndex
					if !_rules[rule_]() {
						goto l682
					}
					goto l683
				l682:
					position, tokenIndex = position682, tokenIndex682
				}
			l683:
				add(ruleAuthorSep2, position679)
			}
			return true
		l678:
			position, tokenIndex = position678, tokenIndex678
			return false
		},
		/* 93 AuthorSepSpanish <- <(_? 'y' _?)> */
		func() bool {
			position684, tokenIndex684 := position, tokenIndex
			{
				position685 := position
				{
					position686, tokenIndex686 := position, tokenIndex
					if !_rules[rule_]() {
						goto l686
					}
					goto l687
				l686:
					position, tokenIndex = position686, tokenIndex686
				}
			l687:
				if buffer[position] != rune('y') {
					goto l684
				}
				position++
				{
					position688, tokenIndex688 := position, tokenIndex
					if !_rules[rule_]() {
						goto l688
					}
					goto l689
				l688:
					position, tokenIndex = position688, tokenIndex688
				}
			l689:
				add(ruleAuthorSepSpanish, position685)
			}
			return true
		l684:
			position, tokenIndex = position684, tokenIndex684
			return false
		},
		/* 94 AuthorEx <- <((('e' 'x' '.'?) / ('m' 's' _ ('i' 'n')) / ('i' 'n')) _)> */
		func() bool {
			position690, tokenIndex690 := position, tokenIndex
			{
				position691 := position
				{
					position692, tokenIndex692 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l693
					}
					position++
					if buffer[position] != rune('x') {
						goto l693
					}
					position++
					{
						position694, tokenIndex694 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l694
						}
						position++
						goto l695
					l694:
						position, tokenIndex = position694, tokenIndex694
					}
				l695:
					goto l692
				l693:
					position, tokenIndex = position692, tokenIndex692
					if buffer[position] != rune('m') {
						goto l696
					}
					position++
					if buffer[position] != rune('s') {
						goto l696
					}
					position++
					if !_rules[rule_]() {
						goto l696
					}
					if buffer[position] != rune('i') {
						goto l696
					}
					position++
					if buffer[position] != rune('n') {
						goto l696
					}
					position++
					goto l692
				l696:
					position, tokenIndex = position692, tokenIndex692
					if buffer[position] != rune('i') {
						goto l690
					}
					position++
					if buffer[position] != rune('n') {
						goto l690
					}
					position++
				}
			l692:
				if !_rules[rule_]() {
					goto l690
				}
				add(ruleAuthorEx, position691)
			}
			return true
		l690:
			position, tokenIndex = position690, tokenIndex690
			return false
		},
		/* 95 AuthorEmend <- <('e' 'm' 'e' 'n' 'd' '.'? _)> */
		func() bool {
			position697, tokenIndex697 := position, tokenIndex
			{
				position698 := position
				if buffer[position] != rune('e') {
					goto l697
				}
				position++
				if buffer[position] != rune('m') {
					goto l697
				}
				position++
				if buffer[position] != rune('e') {
					goto l697
				}
				position++
				if buffer[position] != rune('n') {
					goto l697
				}
				position++
				if buffer[position] != rune('d') {
					goto l697
				}
				position++
				{
					position699, tokenIndex699 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l699
					}
					position++
					goto l700
				l699:
					position, tokenIndex = position699, tokenIndex699
				}
			l700:
				if !_rules[rule_]() {
					goto l697
				}
				add(ruleAuthorEmend, position698)
			}
			return true
		l697:
			position, tokenIndex = position697, tokenIndex697
			return false
		},
		/* 96 Author <- <((Author0 / Author1 / Author2 / UnknownAuthor) (_ AuthorEtAl)?)> */
		func() bool {
			position701, tokenIndex701 := position, tokenIndex
			{
				position702 := position
				{
					position703, tokenIndex703 := position, tokenIndex
					if !_rules[ruleAuthor0]() {
						goto l704
					}
					goto l703
				l704:
					position, tokenIndex = position703, tokenIndex703
					if !_rules[ruleAuthor1]() {
						goto l705
					}
					goto l703
				l705:
					position, tokenIndex = position703, tokenIndex703
					if !_rules[ruleAuthor2]() {
						goto l706
					}
					goto l703
				l706:
					position, tokenIndex = position703, tokenIndex703
					if !_rules[ruleUnknownAuthor]() {
						goto l701
					}
				}
			l703:
				{
					position707, tokenIndex707 := position, tokenIndex
					if !_rules[rule_]() {
						goto l707
					}
					if !_rules[ruleAuthorEtAl]() {
						goto l707
					}
					goto l708
				l707:
					position, tokenIndex = position707, tokenIndex707
				}
			l708:
				add(ruleAuthor, position702)
			}
			return true
		l701:
			position, tokenIndex = position701, tokenIndex701
			return false
		},
		/* 97 Author0 <- <(Author2 FiliusFNoSpace)> */
		func() bool {
			position709, tokenIndex709 := position, tokenIndex
			{
				position710 := position
				if !_rules[ruleAuthor2]() {
					goto l709
				}
				if !_rules[ruleFiliusFNoSpace]() {
					goto l709
				}
				add(ruleAuthor0, position710)
			}
			return true
		l709:
			position, tokenIndex = position709, tokenIndex709
			return false
		},
		/* 98 Author1 <- <(Author2 _? (Filius / AuthorSuffix))> */
		func() bool {
			position711, tokenIndex711 := position, tokenIndex
			{
				position712 := position
				if !_rules[ruleAuthor2]() {
					goto l711
				}
				{
					position713, tokenIndex713 := position, tokenIndex
					if !_rules[rule_]() {
						goto l713
					}
					goto l714
				l713:
					position, tokenIndex = position713, tokenIndex713
				}
			l714:
				{
					position715, tokenIndex715 := position, tokenIndex
					if !_rules[ruleFilius]() {
						goto l716
					}
					goto l715
				l716:
					position, tokenIndex = position715, tokenIndex715
					if !_rules[ruleAuthorSuffix]() {
						goto l711
					}
				}
			l715:
				add(ruleAuthor1, position712)
			}
			return true
		l711:
			position, tokenIndex = position711, tokenIndex711
			return false
		},
		/* 99 Author2 <- <(AuthorWord (_? AuthorWord)*)> */
		func() bool {
			position717, tokenIndex717 := position, tokenIndex
			{
				position718 := position
				if !_rules[ruleAuthorWord]() {
					goto l717
				}
			l719:
				{
					position720, tokenIndex720 := position, tokenIndex
					{
						position721, tokenIndex721 := position, tokenIndex
						if !_rules[rule_]() {
							goto l721
						}
						goto l722
					l721:
						position, tokenIndex = position721, tokenIndex721
					}
				l722:
					if !_rules[ruleAuthorWord]() {
						goto l720
					}
					goto l719
				l720:
					position, tokenIndex = position720, tokenIndex720
				}
				add(ruleAuthor2, position718)
			}
			return true
		l717:
			position, tokenIndex = position717, tokenIndex717
			return false
		},
		/* 100 UnknownAuthor <- <('?' / ((('a' 'u' 'c' 't') / ('a' 'n' 'o' 'n')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position723, tokenIndex723 := position, tokenIndex
			{
				position724 := position
				{
					position725, tokenIndex725 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l726
					}
					position++
					goto l725
				l726:
					position, tokenIndex = position725, tokenIndex725
					{
						position727, tokenIndex727 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l728
						}
						position++
						if buffer[position] != rune('u') {
							goto l728
						}
						position++
						if buffer[position] != rune('c') {
							goto l728
						}
						position++
						if buffer[position] != rune('t') {
							goto l728
						}
						position++
						goto l727
					l728:
						position, tokenIndex = position727, tokenIndex727
						if buffer[position] != rune('a') {
							goto l723
						}
						position++
						if buffer[position] != rune('n') {
							goto l723
						}
						position++
						if buffer[position] != rune('o') {
							goto l723
						}
						position++
						if buffer[position] != rune('n') {
							goto l723
						}
						position++
					}
				l727:
					{
						position729, tokenIndex729 := position, tokenIndex
						{
							position731, tokenIndex731 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l730
							}
							position, tokenIndex = position731, tokenIndex731
						}
						goto l729
					l730:
						position, tokenIndex = position729, tokenIndex729
						if buffer[position] != rune('.') {
							goto l723
						}
						position++
					}
				l729:
				}
			l725:
				add(ruleUnknownAuthor, position724)
			}
			return true
		l723:
			position, tokenIndex = position723, tokenIndex723
			return false
		},
		/* 101 AuthorWord <- <(!(HybridChar / (('b' / 'B') ('o' / 'O') ('l' / 'L') ('d' / 'D') ':')) (AuthorDashInitials / AuthorWord1 / AuthorWord2 / AuthorWord3 / AuthorWord4 / AuthorPrefix))> */
		func() bool {
			position732, tokenIndex732 := position, tokenIndex
			{
				position733 := position
				{
					position734, tokenIndex734 := position, tokenIndex
					{
						position735, tokenIndex735 := position, tokenIndex
						if !_rules[ruleHybridChar]() {
							goto l736
						}
						goto l735
					l736:
						position, tokenIndex = position735, tokenIndex735
						{
							position737, tokenIndex737 := position, tokenIndex
							if buffer[position] != rune('b') {
								goto l738
							}
							position++
							goto l737
						l738:
							position, tokenIndex = position737, tokenIndex737
							if buffer[position] != rune('B') {
								goto l734
							}
							position++
						}
					l737:
						{
							position739, tokenIndex739 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l740
							}
							position++
							goto l739
						l740:
							position, tokenIndex = position739, tokenIndex739
							if buffer[position] != rune('O') {
								goto l734
							}
							position++
						}
					l739:
						{
							position741, tokenIndex741 := position, tokenIndex
							if buffer[position] != rune('l') {
								goto l742
							}
							position++
							goto l741
						l742:
							position, tokenIndex = position741, tokenIndex741
							if buffer[position] != rune('L') {
								goto l734
							}
							position++
						}
					l741:
						{
							position743, tokenIndex743 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l744
							}
							position++
							goto l743
						l744:
							position, tokenIndex = position743, tokenIndex743
							if buffer[position] != rune('D') {
								goto l734
							}
							position++
						}
					l743:
						if buffer[position] != rune(':') {
							goto l734
						}
						position++
					}
				l735:
					goto l732
				l734:
					position, tokenIndex = position734, tokenIndex734
				}
				{
					position745, tokenIndex745 := position, tokenIndex
					if !_rules[ruleAuthorDashInitials]() {
						goto l746
					}
					goto l745
				l746:
					position, tokenIndex = position745, tokenIndex745
					if !_rules[ruleAuthorWord1]() {
						goto l747
					}
					goto l745
				l747:
					position, tokenIndex = position745, tokenIndex745
					if !_rules[ruleAuthorWord2]() {
						goto l748
					}
					goto l745
				l748:
					position, tokenIndex = position745, tokenIndex745
					if !_rules[ruleAuthorWord3]() {
						goto l749
					}
					goto l745
				l749:
					position, tokenIndex = position745, tokenIndex745
					if !_rules[ruleAuthorWord4]() {
						goto l750
					}
					goto l745
				l750:
					position, tokenIndex = position745, tokenIndex745
					if !_rules[ruleAuthorPrefix]() {
						goto l732
					}
				}
			l745:
				add(ruleAuthorWord, position733)
			}
			return true
		l732:
			position, tokenIndex = position732, tokenIndex732
			return false
		},
		/* 102 AuthorEtAl <- <(('a' 'r' 'g' '.') / ('e' 't' ' ' 'a' 'l' '.' '{' '?' '}') / ((('e' 't') / '&') (' ' 'a' 'l') '.'?))> */
		func() bool {
			position751, tokenIndex751 := position, tokenIndex
			{
				position752 := position
				{
					position753, tokenIndex753 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l754
					}
					position++
					if buffer[position] != rune('r') {
						goto l754
					}
					position++
					if buffer[position] != rune('g') {
						goto l754
					}
					position++
					if buffer[position] != rune('.') {
						goto l754
					}
					position++
					goto l753
				l754:
					position, tokenIndex = position753, tokenIndex753
					if buffer[position] != rune('e') {
						goto l755
					}
					position++
					if buffer[position] != rune('t') {
						goto l755
					}
					position++
					if buffer[position] != rune(' ') {
						goto l755
					}
					position++
					if buffer[position] != rune('a') {
						goto l755
					}
					position++
					if buffer[position] != rune('l') {
						goto l755
					}
					position++
					if buffer[position] != rune('.') {
						goto l755
					}
					position++
					if buffer[position] != rune('{') {
						goto l755
					}
					position++
					if buffer[position] != rune('?') {
						goto l755
					}
					position++
					if buffer[position] != rune('}') {
						goto l755
					}
					position++
					goto l753
				l755:
					position, tokenIndex = position753, tokenIndex753
					{
						position756, tokenIndex756 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l757
						}
						position++
						if buffer[position] != rune('t') {
							goto l757
						}
						position++
						goto l756
					l757:
						position, tokenIndex = position756, tokenIndex756
						if buffer[position] != rune('&') {
							goto l751
						}
						position++
					}
				l756:
					if buffer[position] != rune(' ') {
						goto l751
					}
					position++
					if buffer[position] != rune('a') {
						goto l751
					}
					position++
					if buffer[position] != rune('l') {
						goto l751
					}
					position++
					{
						position758, tokenIndex758 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l758
						}
						position++
						goto l759
					l758:
						position, tokenIndex = position758, tokenIndex758
					}
				l759:
				}
			l753:
				add(ruleAuthorEtAl, position752)
			}
			return true
		l751:
			position, tokenIndex = position751, tokenIndex751
			return false
		},
		/* 103 AuthorWord1 <- <(('d' 'u' 'P' 'o' 'n' 't') / ('d' 'e' 'g' 'l' 'i') / ('A' 'r' 'a' 'n' 'g' 'o' ' ' 'y' ' ' 'M' 'o' 'l' 'i' 'n' 'a'))> */
		func() bool {
			position760, tokenIndex760 := position, tokenIndex
			{
				position761 := position
				{
					position762, tokenIndex762 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l763
					}
					position++
					if buffer[position] != rune('u') {
						goto l763
					}
					position++
					if buffer[position] != rune('P') {
						goto l763
					}
					position++
					if buffer[position] != rune('o') {
						goto l763
					}
					position++
					if buffer[position] != rune('n') {
						goto l763
					}
					position++
					if buffer[position] != rune('t') {
						goto l763
					}
					position++
					goto l762
				l763:
					position, tokenIndex = position762, tokenIndex762
					if buffer[position] != rune('d') {
						goto l764
					}
					position++
					if buffer[position] != rune('e') {
						goto l764
					}
					position++
					if buffer[position] != rune('g') {
						goto l764
					}
					position++
					if buffer[position] != rune('l') {
						goto l764
					}
					position++
					if buffer[position] != rune('i') {
						goto l764
					}
					position++
					goto l762
				l764:
					position, tokenIndex = position762, tokenIndex762
					if buffer[position] != rune('A') {
						goto l760
					}
					position++
					if buffer[position] != rune('r') {
						goto l760
					}
					position++
					if buffer[position] != rune('a') {
						goto l760
					}
					position++
					if buffer[position] != rune('n') {
						goto l760
					}
					position++
					if buffer[position] != rune('g') {
						goto l760
					}
					position++
					if buffer[position] != rune('o') {
						goto l760
					}
					position++
					if buffer[position] != rune(' ') {
						goto l760
					}
					position++
					if buffer[position] != rune('y') {
						goto l760
					}
					position++
					if buffer[position] != rune(' ') {
						goto l760
					}
					position++
					if buffer[position] != rune('M') {
						goto l760
					}
					position++
					if buffer[position] != rune('o') {
						goto l760
					}
					position++
					if buffer[position] != rune('l') {
						goto l760
					}
					position++
					if buffer[position] != rune('i') {
						goto l760
					}
					position++
					if buffer[position] != rune('n') {
						goto l760
					}
					position++
					if buffer[position] != rune('a') {
						goto l760
					}
					position++
				}
			l762:
				add(ruleAuthorWord1, position761)
			}
			return true
		l760:
			position, tokenIndex = position760, tokenIndex760
			return false
		},
		/* 104 AuthorWord2 <- <((AuthorWord3 / AuthorWord4) Dash (AuthorWordSoft / AuthorInitial))> */
		func() bool {
			position765, tokenIndex765 := position, tokenIndex
			{
				position766 := position
				{
					position767, tokenIndex767 := position, tokenIndex
					if !_rules[ruleAuthorWord3]() {
						goto l768
					}
					goto l767
				l768:
					position, tokenIndex = position767, tokenIndex767
					if !_rules[ruleAuthorWord4]() {
						goto l765
					}
				}
			l767:
				if !_rules[ruleDash]() {
					goto l765
				}
				{
					position769, tokenIndex769 := position, tokenIndex
					if !_rules[ruleAuthorWordSoft]() {
						goto l770
					}
					goto l769
				l770:
					position, tokenIndex = position769, tokenIndex769
					if !_rules[ruleAuthorInitial]() {
						goto l765
					}
				}
			l769:
				add(ruleAuthorWord2, position766)
			}
			return true
		l765:
			position, tokenIndex = position765, tokenIndex765
			return false
		},
		/* 105 AuthorWord3 <- <(AuthorPrefixGlued2 (CapAuthorWord / AuthorLowerChar+) '.'?)> */
		func() bool {
			position771, tokenIndex771 := position, tokenIndex
			{
				position772 := position
				if !_rules[ruleAuthorPrefixGlued2]() {
					goto l771
				}
				{
					position773, tokenIndex773 := position, tokenIndex
					if !_rules[ruleCapAuthorWord]() {
						goto l774
					}
					goto l773
				l774:
					position, tokenIndex = position773, tokenIndex773
					if !_rules[ruleAuthorLowerChar]() {
						goto l771
					}
				l775:
					{
						position776, tokenIndex776 := position, tokenIndex
						if !_rules[ruleAuthorLowerChar]() {
							goto l776
						}
						goto l775
					l776:
						position, tokenIndex = position776, tokenIndex776
					}
				}
			l773:
				{
					position777, tokenIndex777 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l777
					}
					position++
					goto l778
				l777:
					position, tokenIndex = position777, tokenIndex777
				}
			l778:
				add(ruleAuthorWord3, position772)
			}
			return true
		l771:
			position, tokenIndex = position771, tokenIndex771
			return false
		},
		/* 106 AuthorWord4 <- <(AuthorPrefixGlued1? (AllCapsAuthorWord / CapAuthorWord) '.'?)> */
		func() bool {
			position779, tokenIndex779 := position, tokenIndex
			{
				position780 := position
				{
					position781, tokenIndex781 := position, tokenIndex
					if !_rules[ruleAuthorPrefixGlued1]() {
						goto l781
					}
					goto l782
				l781:
					position, tokenIndex = position781, tokenIndex781
				}
			l782:
				{
					position783, tokenIndex783 := position, tokenIndex
					if !_rules[ruleAllCapsAuthorWord]() {
						goto l784
					}
					goto l783
				l784:
					position, tokenIndex = position783, tokenIndex783
					if !_rules[ruleCapAuthorWord]() {
						goto l779
					}
				}
			l783:
				{
					position785, tokenIndex785 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l785
					}
					position++
					goto l786
				l785:
					position, tokenIndex = position785, tokenIndex785
				}
			l786:
				add(ruleAuthorWord4, position780)
			}
			return true
		l779:
			position, tokenIndex = position779, tokenIndex779
			return false
		},
		/* 107 AuthorDashInitials <- <(AuthorUpperChar '.'? Dash AuthorUpperChar '.'?)> */
		func() bool {
			position787, tokenIndex787 := position, tokenIndex
			{
				position788 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l787
				}
				{
					position789, tokenIndex789 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l789
					}
					position++
					goto l790
				l789:
					position, tokenIndex = position789, tokenIndex789
				}
			l790:
				if !_rules[ruleDash]() {
					goto l787
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l787
				}
				{
					position791, tokenIndex791 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l791
					}
					position++
					goto l792
				l791:
					position, tokenIndex = position791, tokenIndex791
				}
			l792:
				add(ruleAuthorDashInitials, position788)
			}
			return true
		l787:
			position, tokenIndex = position787, tokenIndex787
			return false
		},
		/* 108 AuthorInitial <- <(AuthorUpperChar '.'?)> */
		func() bool {
			position793, tokenIndex793 := position, tokenIndex
			{
				position794 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l793
				}
				{
					position795, tokenIndex795 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l795
					}
					position++
					goto l796
				l795:
					position, tokenIndex = position795, tokenIndex795
				}
			l796:
				add(ruleAuthorInitial, position794)
			}
			return true
		l793:
			position, tokenIndex = position793, tokenIndex793
			return false
		},
		/* 109 AuthorWordSoft <- <(((AuthorUpperChar (AuthorUpperChar+ / AuthorLowerChar+)) / AuthorLowerChar+) '.'?)> */
		func() bool {
			position797, tokenIndex797 := position, tokenIndex
			{
				position798 := position
				{
					position799, tokenIndex799 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l800
					}
					{
						position801, tokenIndex801 := position, tokenIndex
						if !_rules[ruleAuthorUpperChar]() {
							goto l802
						}
					l803:
						{
							position804, tokenIndex804 := position, tokenIndex
							if !_rules[ruleAuthorUpperChar]() {
								goto l804
							}
							goto l803
						l804:
							position, tokenIndex = position804, tokenIndex804
						}
						goto l801
					l802:
						position, tokenIndex = position801, tokenIndex801
						if !_rules[ruleAuthorLowerChar]() {
							goto l800
						}
					l805:
						{
							position806, tokenIndex806 := position, tokenIndex
							if !_rules[ruleAuthorLowerChar]() {
								goto l806
							}
							goto l805
						l806:
							position, tokenIndex = position806, tokenIndex806
						}
					}
				l801:
					goto l799
				l800:
					position, tokenIndex = position799, tokenIndex799
					if !_rules[ruleAuthorLowerChar]() {
						goto l797
					}
				l807:
					{
						position808, tokenIndex808 := position, tokenIndex
						if !_rules[ruleAuthorLowerChar]() {
							goto l808
						}
						goto l807
					l808:
						position, tokenIndex = position808, tokenIndex808
					}
				}
			l799:
				{
					position809, tokenIndex809 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l809
					}
					position++
					goto l810
				l809:
					position, tokenIndex = position809, tokenIndex809
				}
			l810:
				add(ruleAuthorWordSoft, position798)
			}
			return true
		l797:
			position, tokenIndex = position797, tokenIndex797
			return false
		},
		/* 110 CapAuthorWord <- <(AuthorUpperChar AuthorLowerChar*)> */
		func() bool {
			position811, tokenIndex811 := position, tokenIndex
			{
				position812 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l811
				}
			l813:
				{
					position814, tokenIndex814 := position, tokenIndex
					if !_rules[ruleAuthorLowerChar]() {
						goto l814
					}
					goto l813
				l814:
					position, tokenIndex = position814, tokenIndex814
				}
				add(ruleCapAuthorWord, position812)
			}
			return true
		l811:
			position, tokenIndex = position811, tokenIndex811
			return false
		},
		/* 111 AllCapsAuthorWord <- <(AuthorUpperChar AuthorUpperChar+)> */
		func() bool {
			position815, tokenIndex815 := position, tokenIndex
			{
				position816 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l815
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l815
				}
			l817:
				{
					position818, tokenIndex818 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l818
					}
					goto l817
				l818:
					position, tokenIndex = position818, tokenIndex818
				}
				add(ruleAllCapsAuthorWord, position816)
			}
			return true
		l815:
			position, tokenIndex = position815, tokenIndex815
			return false
		},
		/* 112 Filius <- <(FiliusF / ('f' 'i' 'l' '.') / ('f' 'i' 'l' 'i' 'u' 's'))> */
		func() bool {
			position819, tokenIndex819 := position, tokenIndex
			{
				position820 := position
				{
					position821, tokenIndex821 := position, tokenIndex
					if !_rules[ruleFiliusF]() {
						goto l822
					}
					goto l821
				l822:
					position, tokenIndex = position821, tokenIndex821
					if buffer[position] != rune('f') {
						goto l823
					}
					position++
					if buffer[position] != rune('i') {
						goto l823
					}
					position++
					if buffer[position] != rune('l') {
						goto l823
					}
					position++
					if buffer[position] != rune('.') {
						goto l823
					}
					position++
					goto l821
				l823:
					position, tokenIndex = position821, tokenIndex821
					if buffer[position] != rune('f') {
						goto l819
					}
					position++
					if buffer[position] != rune('i') {
						goto l819
					}
					position++
					if buffer[position] != rune('l') {
						goto l819
					}
					position++
					if buffer[position] != rune('i') {
						goto l819
					}
					position++
					if buffer[position] != rune('u') {
						goto l819
					}
					position++
					if buffer[position] != rune('s') {
						goto l819
					}
					position++
				}
			l821:
				add(ruleFilius, position820)
			}
			return true
		l819:
			position, tokenIndex = position819, tokenIndex819
			return false
		},
		/* 113 FiliusF <- <('f' '.' !(_ Word))> */
		func() bool {
			position824, tokenIndex824 := position, tokenIndex
			{
				position825 := position
				if buffer[position] != rune('f') {
					goto l824
				}
				position++
				if buffer[position] != rune('.') {
					goto l824
				}
				position++
				{
					position826, tokenIndex826 := position, tokenIndex
					if !_rules[rule_]() {
						goto l826
					}
					if !_rules[ruleWord]() {
						goto l826
					}
					goto l824
				l826:
					position, tokenIndex = position826, tokenIndex826
				}
				add(ruleFiliusF, position825)
			}
			return true
		l824:
			position, tokenIndex = position824, tokenIndex824
			return false
		},
		/* 114 FiliusFNoSpace <- <('f' '.')> */
		func() bool {
			position827, tokenIndex827 := position, tokenIndex
			{
				position828 := position
				if buffer[position] != rune('f') {
					goto l827
				}
				position++
				if buffer[position] != rune('.') {
					goto l827
				}
				position++
				add(ruleFiliusFNoSpace, position828)
			}
			return true
		l827:
			position, tokenIndex = position827, tokenIndex827
			return false
		},
		/* 115 AuthorSuffix <- <(('b' 'i' 's') / ('t' 'e' 'r'))> */
		func() bool {
			position829, tokenIndex829 := position, tokenIndex
			{
				position830 := position
				{
					position831, tokenIndex831 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l832
					}
					position++
					if buffer[position] != rune('i') {
						goto l832
					}
					position++
					if buffer[position] != rune('s') {
						goto l832
					}
					position++
					goto l831
				l832:
					position, tokenIndex = position831, tokenIndex831
					if buffer[position] != rune('t') {
						goto l829
					}
					position++
					if buffer[position] != rune('e') {
						goto l829
					}
					position++
					if buffer[position] != rune('r') {
						goto l829
					}
					position++
				}
			l831:
				add(ruleAuthorSuffix, position830)
			}
			return true
		l829:
			position, tokenIndex = position829, tokenIndex829
			return false
		},
		/* 116 AuthorPrefixGlued1 <- <(('d' / 'O' / 'L' / 'M') Apostrophe)> */
		func() bool {
			position833, tokenIndex833 := position, tokenIndex
			{
				position834 := position
				{
					position835, tokenIndex835 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l836
					}
					position++
					goto l835
				l836:
					position, tokenIndex = position835, tokenIndex835
					if buffer[position] != rune('O') {
						goto l837
					}
					position++
					goto l835
				l837:
					position, tokenIndex = position835, tokenIndex835
					if buffer[position] != rune('L') {
						goto l838
					}
					position++
					goto l835
				l838:
					position, tokenIndex = position835, tokenIndex835
					if buffer[position] != rune('M') {
						goto l833
					}
					position++
				}
			l835:
				if !_rules[ruleApostrophe]() {
					goto l833
				}
				add(ruleAuthorPrefixGlued1, position834)
			}
			return true
		l833:
			position, tokenIndex = position833, tokenIndex833
			return false
		},
		/* 117 AuthorPrefixGlued2 <- <((('M' 'c') / ('M' 'a' 'c')) Apostrophe?)> */
		func() bool {
			position839, tokenIndex839 := position, tokenIndex
			{
				position840 := position
				{
					position841, tokenIndex841 := position, tokenIndex
					if buffer[position] != rune('M') {
						goto l842
					}
					position++
					if buffer[position] != rune('c') {
						goto l842
					}
					position++
					goto l841
				l842:
					position, tokenIndex = position841, tokenIndex841
					if buffer[position] != rune('M') {
						goto l839
					}
					position++
					if buffer[position] != rune('a') {
						goto l839
					}
					position++
					if buffer[position] != rune('c') {
						goto l839
					}
					position++
				}
			l841:
				{
					position843, tokenIndex843 := position, tokenIndex
					if !_rules[ruleApostrophe]() {
						goto l843
					}
					goto l844
				l843:
					position, tokenIndex = position843, tokenIndex843
				}
			l844:
				add(ruleAuthorPrefixGlued2, position840)
			}
			return true
		l839:
			position, tokenIndex = position839, tokenIndex839
			return false
		},
		/* 118 AuthorPrefix <- <(AuthorPrefix1 / AuthorPrefix2)> */
		func() bool {
			position845, tokenIndex845 := position, tokenIndex
			{
				position846 := position
				{
					position847, tokenIndex847 := position, tokenIndex
					if !_rules[ruleAuthorPrefix1]() {
						goto l848
					}
					goto l847
				l848:
					position, tokenIndex = position847, tokenIndex847
					if !_rules[ruleAuthorPrefix2]() {
						goto l845
					}
				}
			l847:
				add(ruleAuthorPrefix, position846)
			}
			return true
		l845:
			position, tokenIndex = position845, tokenIndex845
			return false
		},
		/* 119 AuthorPrefix2 <- <(('v' '.' (_? ('d' '.'))?) / (Apostrophe 't'))> */
		func() bool {
			position849, tokenIndex849 := position, tokenIndex
			{
				position850 := position
				{
					position851, tokenIndex851 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l852
					}
					position++
					if buffer[position] != rune('.') {
						goto l852
					}
					position++
					{
						position853, tokenIndex853 := position, tokenIndex
						{
							position855, tokenIndex855 := position, tokenIndex
							if !_rules[rule_]() {
								goto l855
							}
							goto l856
						l855:
							position, tokenIndex = position855, tokenIndex855
						}
					l856:
						if buffer[position] != rune('d') {
							goto l853
						}
						position++
						if buffer[position] != rune('.') {
							goto l853
						}
						position++
						goto l854
					l853:
						position, tokenIndex = position853, tokenIndex853
					}
				l854:
					goto l851
				l852:
					position, tokenIndex = position851, tokenIndex851
					if !_rules[ruleApostrophe]() {
						goto l849
					}
					if buffer[position] != rune('t') {
						goto l849
					}
					position++
				}
			l851:
				add(ruleAuthorPrefix2, position850)
			}
			return true
		l849:
			position, tokenIndex = position849, tokenIndex849
			return false
		},
		/* 120 AuthorPrefix1 <- <((('a' 'b') / ('a' 'f') / ('b' 'i' 's') / ('d' 'a') / ('d' 'e' 'r') / ('d' 'e' 's') / ('d' 'e' 'n') / ('d' 'e' 'm') / ('d' 'e' 'l' 'l' 'a') / ('d' 'e' 'l' 'a') / ('d' 'e' 'l' 'l' 'e') / ('d' 'e' 'l') / ('d' 'e' ' ' 'l' 'o' 's') / ('d' 'e') / ('d' 'i') / ('d' 'o' 's') / ('d' 'u') / ('d' 'o') / ('e' 'l') / ('l' 'a') / ('l' 'e') / ('t' 'e' 'n') / ('t' 'e' 'r') / ('v' 'a' 'n') / ('v' 'e' 'r') / ('d' Apostrophe) / ('i' 'n' Apostrophe 't') / ('z' 'u' 'r') / ('z' 'u') / ('v' 'o' 'n' (_ (('d' '.') / ('d' 'e' 'm')))?) / ('v' (_ 'd')?)) &_)> */
		func() bool {
			position857, tokenIndex857 := position, tokenIndex
			{
				position858 := position
				{
					position859, tokenIndex859 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l860
					}
					position++
					if buffer[position] != rune('b') {
						goto l860
					}
					position++
					goto l859
				l860:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('a') {
						goto l861
					}
					position++
					if buffer[position] != rune('f') {
						goto l861
					}
					position++
					goto l859
				l861:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('b') {
						goto l862
					}
					position++
					if buffer[position] != rune('i') {
						goto l862
					}
					position++
					if buffer[position] != rune('s') {
						goto l862
					}
					position++
					goto l859
				l862:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('d') {
						goto l863
					}
					position++
					if buffer[position] != rune('a') {
						goto l863
					}
					position++
					goto l859
				l863:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('d') {
						goto l864
					}
					position++
					if buffer[position] != rune('e') {
						goto l864
					}
					position++
					if buffer[position] != rune('r') {
						goto l864
					}
					position++
					goto l859
				l864:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('d') {
						goto l865
					}
					position++
					if buffer[position] != rune('e') {
						goto l865
					}
					position++
					if buffer[position] != rune('s') {
						goto l865
					}
					position++
					goto l859
				l865:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('d') {
						goto l866
					}
					position++
					if buffer[position] != rune('e') {
						goto l866
					}
					position++
					if buffer[position] != rune('n') {
						goto l866
					}
					position++
					goto l859
				l866:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('d') {
						goto l867
					}
					position++
					if buffer[position] != rune('e') {
						goto l867
					}
					position++
					if buffer[position] != rune('m') {
						goto l867
					}
					position++
					goto l859
				l867:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('d') {
						goto l868
					}
					position++
					if buffer[position] != rune('e') {
						goto l868
					}
					position++
					if buffer[position] != rune('l') {
						goto l868
					}
					position++
					if buffer[position] != rune('l') {
						goto l868
					}
					position++
					if buffer[position] != rune('a') {
						goto l868
					}
					position++
					goto l859
				l868:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('d') {
						goto l869
					}
					position++
					if buffer[position] != rune('e') {
						goto l869
					}
					position++
					if buffer[position] != rune('l') {
						goto l869
					}
					position++
					if buffer[position] != rune('a') {
						goto l869
					}
					position++
					goto l859
				l869:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('d') {
						goto l870
					}
					position++
					if buffer[position] != rune('e') {
						goto l870
					}
					position++
					if buffer[position] != rune('l') {
						goto l870
					}
					position++
					if buffer[position] != rune('l') {
						goto l870
					}
					position++
					if buffer[position] != rune('e') {
						goto l870
					}
					position++
					goto l859
				l870:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('d') {
						goto l871
					}
					position++
					if buffer[position] != rune('e') {
						goto l871
					}
					position++
					if buffer[position] != rune('l') {
						goto l871
					}
					position++
					goto l859
				l871:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('d') {
						goto l872
					}
					position++
					if buffer[position] != rune('e') {
						goto l872
					}
					position++
					if buffer[position] != rune(' ') {
						goto l872
					}
					position++
					if buffer[position] != rune('l') {
						goto l872
					}
					position++
					if buffer[position] != rune('o') {
						goto l872
					}
					position++
					if buffer[position] != rune('s') {
						goto l872
					}
					position++
					goto l859
				l872:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('d') {
						goto l873
					}
					position++
					if buffer[position] != rune('e') {
						goto l873
					}
					position++
					goto l859
				l873:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('d') {
						goto l874
					}
					position++
					if buffer[position] != rune('i') {
						goto l874
					}
					position++
					goto l859
				l874:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('d') {
						goto l875
					}
					position++
					if buffer[position] != rune('o') {
						goto l875
					}
					position++
					if buffer[position] != rune('s') {
						goto l875
					}
					position++
					goto l859
				l875:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('d') {
						goto l876
					}
					position++
					if buffer[position] != rune('u') {
						goto l876
					}
					position++
					goto l859
				l876:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('d') {
						goto l877
					}
					position++
					if buffer[position] != rune('o') {
						goto l877
					}
					position++
					goto l859
				l877:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('e') {
						goto l878
					}
					position++
					if buffer[position] != rune('l') {
						goto l878
					}
					position++
					goto l859
				l878:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('l') {
						goto l879
					}
					position++
					if buffer[position] != rune('a') {
						goto l879
					}
					position++
					goto l859
				l879:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('l') {
						goto l880
					}
					position++
					if buffer[position] != rune('e') {
						goto l880
					}
					position++
					goto l859
				l880:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('t') {
						goto l881
					}
					position++
					if buffer[position] != rune('e') {
						goto l881
					}
					position++
					if buffer[position] != rune('n') {
						goto l881
					}
					position++
					goto l859
				l881:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('t') {
						goto l882
					}
					position++
					if buffer[position] != rune('e') {
						goto l882
					}
					position++
					if buffer[position] != rune('r') {
						goto l882
					}
					position++
					goto l859
				l882:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('v') {
						goto l883
					}
					position++
					if buffer[position] != rune('a') {
						goto l883
					}
					position++
					if buffer[position] != rune('n') {
						goto l883
					}
					position++
					goto l859
				l883:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('v') {
						goto l884
					}
					position++
					if buffer[position] != rune('e') {
						goto l884
					}
					position++
					if buffer[position] != rune('r') {
						goto l884
					}
					position++
					goto l859
				l884:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('d') {
						goto l885
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l885
					}
					goto l859
				l885:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('i') {
						goto l886
					}
					position++
					if buffer[position] != rune('n') {
						goto l886
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l886
					}
					if buffer[position] != rune('t') {
						goto l886
					}
					position++
					goto l859
				l886:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('z') {
						goto l887
					}
					position++
					if buffer[position] != rune('u') {
						goto l887
					}
					position++
					if buffer[position] != rune('r') {
						goto l887
					}
					position++
					goto l859
				l887:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('z') {
						goto l888
					}
					position++
					if buffer[position] != rune('u') {
						goto l888
					}
					position++
					goto l859
				l888:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('v') {
						goto l889
					}
					position++
					if buffer[position] != rune('o') {
						goto l889
					}
					position++
					if buffer[position] != rune('n') {
						goto l889
					}
					position++
					{
						position890, tokenIndex890 := position, tokenIndex
						if !_rules[rule_]() {
							goto l890
						}
						{
							position892, tokenIndex892 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l893
							}
							position++
							if buffer[position] != rune('.') {
								goto l893
							}
							position++
							goto l892
						l893:
							position, tokenIndex = position892, tokenIndex892
							if buffer[position] != rune('d') {
								goto l890
							}
							position++
							if buffer[position] != rune('e') {
								goto l890
							}
							position++
							if buffer[position] != rune('m') {
								goto l890
							}
							position++
						}
					l892:
						goto l891
					l890:
						position, tokenIndex = position890, tokenIndex890
					}
				l891:
					goto l859
				l889:
					position, tokenIndex = position859, tokenIndex859
					if buffer[position] != rune('v') {
						goto l857
					}
					position++
					{
						position894, tokenIndex894 := position, tokenIndex
						if !_rules[rule_]() {
							goto l894
						}
						if buffer[position] != rune('d') {
							goto l894
						}
						position++
						goto l895
					l894:
						position, tokenIndex = position894, tokenIndex894
					}
				l895:
				}
			l859:
				{
					position896, tokenIndex896 := position, tokenIndex
					if !_rules[rule_]() {
						goto l857
					}
					position, tokenIndex = position896, tokenIndex896
				}
				add(ruleAuthorPrefix1, position858)
			}
			return true
		l857:
			position, tokenIndex = position857, tokenIndex857
			return false
		},
		/* 121 AuthorUpperChar <- <(UpperASCII / MiscodedChar / ('À' / 'Á' / 'Â' / 'Ã' / 'Ä' / 'Å' / 'Æ' / 'Ç' / 'È' / 'É' / 'Ê' / 'Ë' / 'Ì' / 'Í' / 'Î' / 'Ï' / 'Ð' / 'Ñ' / 'Ò' / 'Ó' / 'Ô' / 'Õ' / 'Ö' / 'Ø' / 'Ù' / 'Ú' / 'Û' / 'Ü' / 'Ý' / 'Ć' / 'Č' / 'Ď' / 'İ' / 'Ķ' / 'Ĺ' / 'ĺ' / 'Ľ' / 'ľ' / 'Ł' / 'ł' / 'Ņ' / 'Ō' / 'Ő' / 'Œ' / 'Ř' / 'Ś' / 'Ŝ' / 'Ş' / 'Š' / 'Ÿ' / 'Ź' / 'Ż' / 'Ž' / 'ƒ' / 'Ǿ' / 'Ș' / 'Ț'))> */
		func() bool {
			position897, tokenIndex897 := position, tokenIndex
			{
				position898 := position
				{
					position899, tokenIndex899 := position, tokenIndex
					if !_rules[ruleUpperASCII]() {
						goto l900
					}
					goto l899
				l900:
					position, tokenIndex = position899, tokenIndex899
					if !_rules[ruleMiscodedChar]() {
						goto l901
					}
					goto l899
				l901:
					position, tokenIndex = position899, tokenIndex899
					{
						position902, tokenIndex902 := position, tokenIndex
						if buffer[position] != rune('À') {
							goto l903
						}
						position++
						goto l902
					l903:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Á') {
							goto l904
						}
						position++
						goto l902
					l904:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Â') {
							goto l905
						}
						position++
						goto l902
					l905:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ã') {
							goto l906
						}
						position++
						goto l902
					l906:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ä') {
							goto l907
						}
						position++
						goto l902
					l907:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Å') {
							goto l908
						}
						position++
						goto l902
					l908:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Æ') {
							goto l909
						}
						position++
						goto l902
					l909:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ç') {
							goto l910
						}
						position++
						goto l902
					l910:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('È') {
							goto l911
						}
						position++
						goto l902
					l911:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('É') {
							goto l912
						}
						position++
						goto l902
					l912:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ê') {
							goto l913
						}
						position++
						goto l902
					l913:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ë') {
							goto l914
						}
						position++
						goto l902
					l914:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ì') {
							goto l915
						}
						position++
						goto l902
					l915:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Í') {
							goto l916
						}
						position++
						goto l902
					l916:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Î') {
							goto l917
						}
						position++
						goto l902
					l917:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ï') {
							goto l918
						}
						position++
						goto l902
					l918:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ð') {
							goto l919
						}
						position++
						goto l902
					l919:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ñ') {
							goto l920
						}
						position++
						goto l902
					l920:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ò') {
							goto l921
						}
						position++
						goto l902
					l921:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ó') {
							goto l922
						}
						position++
						goto l902
					l922:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ô') {
							goto l923
						}
						position++
						goto l902
					l923:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Õ') {
							goto l924
						}
						position++
						goto l902
					l924:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ö') {
							goto l925
						}
						position++
						goto l902
					l925:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ø') {
							goto l926
						}
						position++
						goto l902
					l926:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ù') {
							goto l927
						}
						position++
						goto l902
					l927:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ú') {
							goto l928
						}
						position++
						goto l902
					l928:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Û') {
							goto l929
						}
						position++
						goto l902
					l929:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ü') {
							goto l930
						}
						position++
						goto l902
					l930:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ý') {
							goto l931
						}
						position++
						goto l902
					l931:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ć') {
							goto l932
						}
						position++
						goto l902
					l932:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Č') {
							goto l933
						}
						position++
						goto l902
					l933:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ď') {
							goto l934
						}
						position++
						goto l902
					l934:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('İ') {
							goto l935
						}
						position++
						goto l902
					l935:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ķ') {
							goto l936
						}
						position++
						goto l902
					l936:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ĺ') {
							goto l937
						}
						position++
						goto l902
					l937:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('ĺ') {
							goto l938
						}
						position++
						goto l902
					l938:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ľ') {
							goto l939
						}
						position++
						goto l902
					l939:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('ľ') {
							goto l940
						}
						position++
						goto l902
					l940:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ł') {
							goto l941
						}
						position++
						goto l902
					l941:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('ł') {
							goto l942
						}
						position++
						goto l902
					l942:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ņ') {
							goto l943
						}
						position++
						goto l902
					l943:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ō') {
							goto l944
						}
						position++
						goto l902
					l944:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ő') {
							goto l945
						}
						position++
						goto l902
					l945:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Œ') {
							goto l946
						}
						position++
						goto l902
					l946:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ř') {
							goto l947
						}
						position++
						goto l902
					l947:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ś') {
							goto l948
						}
						position++
						goto l902
					l948:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ŝ') {
							goto l949
						}
						position++
						goto l902
					l949:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ş') {
							goto l950
						}
						position++
						goto l902
					l950:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Š') {
							goto l951
						}
						position++
						goto l902
					l951:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ÿ') {
							goto l952
						}
						position++
						goto l902
					l952:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ź') {
							goto l953
						}
						position++
						goto l902
					l953:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ż') {
							goto l954
						}
						position++
						goto l902
					l954:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ž') {
							goto l955
						}
						position++
						goto l902
					l955:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('ƒ') {
							goto l956
						}
						position++
						goto l902
					l956:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ǿ') {
							goto l957
						}
						position++
						goto l902
					l957:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ș') {
							goto l958
						}
						position++
						goto l902
					l958:
						position, tokenIndex = position902, tokenIndex902
						if buffer[position] != rune('Ț') {
							goto l897
						}
						position++
					}
				l902:
				}
			l899:
				add(ruleAuthorUpperChar, position898)
			}
			return true
		l897:
			position, tokenIndex = position897, tokenIndex897
			return false
		},
		/* 122 AuthorLowerChar <- <(LowerASCII / MiscodedChar / Apostrophe / ('à' / 'á' / 'â' / 'ã' / 'ä' / 'å' / 'æ' / 'ç' / 'è' / 'é' / 'ê' / 'ë' / 'ì' / 'í' / 'î' / 'ï' / 'ð' / 'ñ' / 'ò' / 'ó' / 'ó' / 'ô' / 'õ' / 'ö' / 'ø' / 'ù' / 'ú' / 'û' / 'ü' / 'ý' / 'ÿ' / 'ā' / 'ă' / 'ą' / 'ć' / 'ĉ' / 'č' / 'ď' / 'đ' / 'ē' / 'ĕ' / 'ė' / 'ę' / 'ě' / 'ğ' / 'ī' / 'ĭ' / 'İ' / 'ı' / 'ĺ' / 'ľ' / 'ł' / 'ń' / 'ņ' / 'ň' / 'ŏ' / 'ő' / 'œ' / 'ŕ' / 'ř' / 'ś' / 'ş' / 'š' / 'ţ' / 'ť' / 'ũ' / 'ū' / 'ŭ' / 'ů' / 'ű' / 'ź' / 'ż' / 'ž' / 'ſ' / 'ǎ' / 'ǔ' / 'ǧ' / 'ș' / 'ț' / 'ȳ' / 'ß'))> */
		func() bool {
			position959, tokenIndex959 := position, tokenIndex
			{
				position960 := position
				{
					position961, tokenIndex961 := position, tokenIndex
					if !_rules[ruleLowerASCII]() {
						goto l962
					}
					goto l961
				l962:
					position, tokenIndex = position961, tokenIndex961
					if !_rules[ruleMiscodedChar]() {
						goto l963
					}
					goto l961
				l963:
					position, tokenIndex = position961, tokenIndex961
					if !_rules[ruleApostrophe]() {
						goto l964
					}
					goto l961
				l964:
					position, tokenIndex = position961, tokenIndex961
					{
						position965, tokenIndex965 := position, tokenIndex
						if buffer[position] != rune('à') {
							goto l966
						}
						position++
						goto l965
					l966:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('á') {
							goto l967
						}
						position++
						goto l965
					l967:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('â') {
							goto l968
						}
						position++
						goto l965
					l968:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ã') {
							goto l969
						}
						position++
						goto l965
					l969:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ä') {
							goto l970
						}
						position++
						goto l965
					l970:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('å') {
							goto l971
						}
						position++
						goto l965
					l971:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('æ') {
							goto l972
						}
						position++
						goto l965
					l972:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ç') {
							goto l973
						}
						position++
						goto l965
					l973:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('è') {
							goto l974
						}
						position++
						goto l965
					l974:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('é') {
							goto l975
						}
						position++
						goto l965
					l975:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ê') {
							goto l976
						}
						position++
						goto l965
					l976:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ë') {
							goto l977
						}
						position++
						goto l965
					l977:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ì') {
							goto l978
						}
						position++
						goto l965
					l978:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('í') {
							goto l979
						}
						position++
						goto l965
					l979:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('î') {
							goto l980
						}
						position++
						goto l965
					l980:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ï') {
							goto l981
						}
						position++
						goto l965
					l981:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ð') {
							goto l982
						}
						position++
						goto l965
					l982:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ñ') {
							goto l983
						}
						position++
						goto l965
					l983:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ò') {
							goto l984
						}
						position++
						goto l965
					l984:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ó') {
							goto l985
						}
						position++
						goto l965
					l985:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ó') {
							goto l986
						}
						position++
						goto l965
					l986:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ô') {
							goto l987
						}
						position++
						goto l965
					l987:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('õ') {
							goto l988
						}
						position++
						goto l965
					l988:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ö') {
							goto l989
						}
						position++
						goto l965
					l989:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ø') {
							goto l990
						}
						position++
						goto l965
					l990:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ù') {
							goto l991
						}
						position++
						goto l965
					l991:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ú') {
							goto l992
						}
						position++
						goto l965
					l992:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('û') {
							goto l993
						}
						position++
						goto l965
					l993:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ü') {
							goto l994
						}
						position++
						goto l965
					l994:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ý') {
							goto l995
						}
						position++
						goto l965
					l995:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ÿ') {
							goto l996
						}
						position++
						goto l965
					l996:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ā') {
							goto l997
						}
						position++
						goto l965
					l997:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ă') {
							goto l998
						}
						position++
						goto l965
					l998:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ą') {
							goto l999
						}
						position++
						goto l965
					l999:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ć') {
							goto l1000
						}
						position++
						goto l965
					l1000:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ĉ') {
							goto l1001
						}
						position++
						goto l965
					l1001:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('č') {
							goto l1002
						}
						position++
						goto l965
					l1002:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ď') {
							goto l1003
						}
						position++
						goto l965
					l1003:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('đ') {
							goto l1004
						}
						position++
						goto l965
					l1004:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ē') {
							goto l1005
						}
						position++
						goto l965
					l1005:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ĕ') {
							goto l1006
						}
						position++
						goto l965
					l1006:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ė') {
							goto l1007
						}
						position++
						goto l965
					l1007:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ę') {
							goto l1008
						}
						position++
						goto l965
					l1008:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ě') {
							goto l1009
						}
						position++
						goto l965
					l1009:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ğ') {
							goto l1010
						}
						position++
						goto l965
					l1010:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ī') {
							goto l1011
						}
						position++
						goto l965
					l1011:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ĭ') {
							goto l1012
						}
						position++
						goto l965
					l1012:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('İ') {
							goto l1013
						}
						position++
						goto l965
					l1013:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ı') {
							goto l1014
						}
						position++
						goto l965
					l1014:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ĺ') {
							goto l1015
						}
						position++
						goto l965
					l1015:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ľ') {
							goto l1016
						}
						position++
						goto l965
					l1016:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ł') {
							goto l1017
						}
						position++
						goto l965
					l1017:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ń') {
							goto l1018
						}
						position++
						goto l965
					l1018:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ņ') {
							goto l1019
						}
						position++
						goto l965
					l1019:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ň') {
							goto l1020
						}
						position++
						goto l965
					l1020:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ŏ') {
							goto l1021
						}
						position++
						goto l965
					l1021:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ő') {
							goto l1022
						}
						position++
						goto l965
					l1022:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('œ') {
							goto l1023
						}
						position++
						goto l965
					l1023:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ŕ') {
							goto l1024
						}
						position++
						goto l965
					l1024:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ř') {
							goto l1025
						}
						position++
						goto l965
					l1025:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ś') {
							goto l1026
						}
						position++
						goto l965
					l1026:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ş') {
							goto l1027
						}
						position++
						goto l965
					l1027:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('š') {
							goto l1028
						}
						position++
						goto l965
					l1028:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ţ') {
							goto l1029
						}
						position++
						goto l965
					l1029:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ť') {
							goto l1030
						}
						position++
						goto l965
					l1030:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ũ') {
							goto l1031
						}
						position++
						goto l965
					l1031:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ū') {
							goto l1032
						}
						position++
						goto l965
					l1032:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ŭ') {
							goto l1033
						}
						position++
						goto l965
					l1033:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ů') {
							goto l1034
						}
						position++
						goto l965
					l1034:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ű') {
							goto l1035
						}
						position++
						goto l965
					l1035:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ź') {
							goto l1036
						}
						position++
						goto l965
					l1036:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ż') {
							goto l1037
						}
						position++
						goto l965
					l1037:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ž') {
							goto l1038
						}
						position++
						goto l965
					l1038:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ſ') {
							goto l1039
						}
						position++
						goto l965
					l1039:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ǎ') {
							goto l1040
						}
						position++
						goto l965
					l1040:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ǔ') {
							goto l1041
						}
						position++
						goto l965
					l1041:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ǧ') {
							goto l1042
						}
						position++
						goto l965
					l1042:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ș') {
							goto l1043
						}
						position++
						goto l965
					l1043:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ț') {
							goto l1044
						}
						position++
						goto l965
					l1044:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ȳ') {
							goto l1045
						}
						position++
						goto l965
					l1045:
						position, tokenIndex = position965, tokenIndex965
						if buffer[position] != rune('ß') {
							goto l959
						}
						position++
					}
				l965:
				}
			l961:
				add(ruleAuthorLowerChar, position960)
			}
			return true
		l959:
			position, tokenIndex = position959, tokenIndex959
			return false
		},
		/* 123 Year <- <(YearRange / YearApprox / YearWithParens / YearWithPage / YearWithDot / YearWithChar / YearNum)> */
		func() bool {
			position1046, tokenIndex1046 := position, tokenIndex
			{
				position1047 := position
				{
					position1048, tokenIndex1048 := position, tokenIndex
					if !_rules[ruleYearRange]() {
						goto l1049
					}
					goto l1048
				l1049:
					position, tokenIndex = position1048, tokenIndex1048
					if !_rules[ruleYearApprox]() {
						goto l1050
					}
					goto l1048
				l1050:
					position, tokenIndex = position1048, tokenIndex1048
					if !_rules[ruleYearWithParens]() {
						goto l1051
					}
					goto l1048
				l1051:
					position, tokenIndex = position1048, tokenIndex1048
					if !_rules[ruleYearWithPage]() {
						goto l1052
					}
					goto l1048
				l1052:
					position, tokenIndex = position1048, tokenIndex1048
					if !_rules[ruleYearWithDot]() {
						goto l1053
					}
					goto l1048
				l1053:
					position, tokenIndex = position1048, tokenIndex1048
					if !_rules[ruleYearWithChar]() {
						goto l1054
					}
					goto l1048
				l1054:
					position, tokenIndex = position1048, tokenIndex1048
					if !_rules[ruleYearNum]() {
						goto l1046
					}
				}
			l1048:
				add(ruleYear, position1047)
			}
			return true
		l1046:
			position, tokenIndex = position1046, tokenIndex1046
			return false
		},
		/* 124 YearRange <- <(YearNum (Dash / Slash) (Nums+ ('a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '?')*))> */
		func() bool {
			position1055, tokenIndex1055 := position, tokenIndex
			{
				position1056 := position
				if !_rules[ruleYearNum]() {
					goto l1055
				}
				{
					position1057, tokenIndex1057 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l1058
					}
					goto l1057
				l1058:
					position, tokenIndex = position1057, tokenIndex1057
					if !_rules[ruleSlash]() {
						goto l1055
					}
				}
			l1057:
				if !_rules[ruleNums]() {
					goto l1055
				}
			l1059:
				{
					position1060, tokenIndex1060 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1060
					}
					goto l1059
				l1060:
					position, tokenIndex = position1060, tokenIndex1060
				}
			l1061:
				{
					position1062, tokenIndex1062 := position, tokenIndex
					{
						position1063, tokenIndex1063 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l1064
						}
						position++
						goto l1063
					l1064:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('b') {
							goto l1065
						}
						position++
						goto l1063
					l1065:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('c') {
							goto l1066
						}
						position++
						goto l1063
					l1066:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('d') {
							goto l1067
						}
						position++
						goto l1063
					l1067:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('e') {
							goto l1068
						}
						position++
						goto l1063
					l1068:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('f') {
							goto l1069
						}
						position++
						goto l1063
					l1069:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('g') {
							goto l1070
						}
						position++
						goto l1063
					l1070:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('h') {
							goto l1071
						}
						position++
						goto l1063
					l1071:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('i') {
							goto l1072
						}
						position++
						goto l1063
					l1072:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('j') {
							goto l1073
						}
						position++
						goto l1063
					l1073:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('k') {
							goto l1074
						}
						position++
						goto l1063
					l1074:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('l') {
							goto l1075
						}
						position++
						goto l1063
					l1075:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('m') {
							goto l1076
						}
						position++
						goto l1063
					l1076:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('n') {
							goto l1077
						}
						position++
						goto l1063
					l1077:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('o') {
							goto l1078
						}
						position++
						goto l1063
					l1078:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('p') {
							goto l1079
						}
						position++
						goto l1063
					l1079:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('q') {
							goto l1080
						}
						position++
						goto l1063
					l1080:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('r') {
							goto l1081
						}
						position++
						goto l1063
					l1081:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('s') {
							goto l1082
						}
						position++
						goto l1063
					l1082:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('t') {
							goto l1083
						}
						position++
						goto l1063
					l1083:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('u') {
							goto l1084
						}
						position++
						goto l1063
					l1084:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('v') {
							goto l1085
						}
						position++
						goto l1063
					l1085:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('w') {
							goto l1086
						}
						position++
						goto l1063
					l1086:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('x') {
							goto l1087
						}
						position++
						goto l1063
					l1087:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('y') {
							goto l1088
						}
						position++
						goto l1063
					l1088:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('z') {
							goto l1089
						}
						position++
						goto l1063
					l1089:
						position, tokenIndex = position1063, tokenIndex1063
						if buffer[position] != rune('?') {
							goto l1062
						}
						position++
					}
				l1063:
					goto l1061
				l1062:
					position, tokenIndex = position1062, tokenIndex1062
				}
				add(ruleYearRange, position1056)
			}
			return true
		l1055:
			position, tokenIndex = position1055, tokenIndex1055
			return false
		},
		/* 125 YearWithDot <- <(YearNum '.')> */
		func() bool {
			position1090, tokenIndex1090 := position, tokenIndex
			{
				position1091 := position
				if !_rules[ruleYearNum]() {
					goto l1090
				}
				if buffer[position] != rune('.') {
					goto l1090
				}
				position++
				add(ruleYearWithDot, position1091)
			}
			return true
		l1090:
			position, tokenIndex = position1090, tokenIndex1090
			return false
		},
		/* 126 YearApprox <- <('[' _? YearNum _? ']')> */
		func() bool {
			position1092, tokenIndex1092 := position, tokenIndex
			{
				position1093 := position
				if buffer[position] != rune('[') {
					goto l1092
				}
				position++
				{
					position1094, tokenIndex1094 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1094
					}
					goto l1095
				l1094:
					position, tokenIndex = position1094, tokenIndex1094
				}
			l1095:
				if !_rules[ruleYearNum]() {
					goto l1092
				}
				{
					position1096, tokenIndex1096 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1096
					}
					goto l1097
				l1096:
					position, tokenIndex = position1096, tokenIndex1096
				}
			l1097:
				if buffer[position] != rune(']') {
					goto l1092
				}
				position++
				add(ruleYearApprox, position1093)
			}
			return true
		l1092:
			position, tokenIndex = position1092, tokenIndex1092
			return false
		},
		/* 127 YearWithPage <- <((YearWithChar / YearNum) _? ':' _? Nums+)> */
		func() bool {
			position1098, tokenIndex1098 := position, tokenIndex
			{
				position1099 := position
				{
					position1100, tokenIndex1100 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1101
					}
					goto l1100
				l1101:
					position, tokenIndex = position1100, tokenIndex1100
					if !_rules[ruleYearNum]() {
						goto l1098
					}
				}
			l1100:
				{
					position1102, tokenIndex1102 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1102
					}
					goto l1103
				l1102:
					position, tokenIndex = position1102, tokenIndex1102
				}
			l1103:
				if buffer[position] != rune(':') {
					goto l1098
				}
				position++
				{
					position1104, tokenIndex1104 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1104
					}
					goto l1105
				l1104:
					position, tokenIndex = position1104, tokenIndex1104
				}
			l1105:
				if !_rules[ruleNums]() {
					goto l1098
				}
			l1106:
				{
					position1107, tokenIndex1107 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1107
					}
					goto l1106
				l1107:
					position, tokenIndex = position1107, tokenIndex1107
				}
				add(ruleYearWithPage, position1099)
			}
			return true
		l1098:
			position, tokenIndex = position1098, tokenIndex1098
			return false
		},
		/* 128 YearWithParens <- <('(' (YearWithChar / YearNum) ')')> */
		func() bool {
			position1108, tokenIndex1108 := position, tokenIndex
			{
				position1109 := position
				if buffer[position] != rune('(') {
					goto l1108
				}
				position++
				{
					position1110, tokenIndex1110 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1111
					}
					goto l1110
				l1111:
					position, tokenIndex = position1110, tokenIndex1110
					if !_rules[ruleYearNum]() {
						goto l1108
					}
				}
			l1110:
				if buffer[position] != rune(')') {
					goto l1108
				}
				position++
				add(ruleYearWithParens, position1109)
			}
			return true
		l1108:
			position, tokenIndex = position1108, tokenIndex1108
			return false
		},
		/* 129 YearWithChar <- <(YearNum LowerASCII)> */
		func() bool {
			position1112, tokenIndex1112 := position, tokenIndex
			{
				position1113 := position
				if !_rules[ruleYearNum]() {
					goto l1112
				}
				if !_rules[ruleLowerASCII]() {
					goto l1112
				}
				add(ruleYearWithChar, position1113)
			}
			return true
		l1112:
			position, tokenIndex = position1112, tokenIndex1112
			return false
		},
		/* 130 YearNum <- <(('1' / '2') ('0' / '7' / '8' / '9') Nums (Nums / '?') '?'*)> */
		func() bool {
			position1114, tokenIndex1114 := position, tokenIndex
			{
				position1115 := position
				{
					position1116, tokenIndex1116 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l1117
					}
					position++
					goto l1116
				l1117:
					position, tokenIndex = position1116, tokenIndex1116
					if buffer[position] != rune('2') {
						goto l1114
					}
					position++
				}
			l1116:
				{
					position1118, tokenIndex1118 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l1119
					}
					position++
					goto l1118
				l1119:
					position, tokenIndex = position1118, tokenIndex1118
					if buffer[position] != rune('7') {
						goto l1120
					}
					position++
					goto l1118
				l1120:
					position, tokenIndex = position1118, tokenIndex1118
					if buffer[position] != rune('8') {
						goto l1121
					}
					position++
					goto l1118
				l1121:
					position, tokenIndex = position1118, tokenIndex1118
					if buffer[position] != rune('9') {
						goto l1114
					}
					position++
				}
			l1118:
				if !_rules[ruleNums]() {
					goto l1114
				}
				{
					position1122, tokenIndex1122 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1123
					}
					goto l1122
				l1123:
					position, tokenIndex = position1122, tokenIndex1122
					if buffer[position] != rune('?') {
						goto l1114
					}
					position++
				}
			l1122:
			l1124:
				{
					position1125, tokenIndex1125 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l1125
					}
					position++
					goto l1124
				l1125:
					position, tokenIndex = position1125, tokenIndex1125
				}
				add(ruleYearNum, position1115)
			}
			return true
		l1114:
			position, tokenIndex = position1114, tokenIndex1114
			return false
		},
		/* 131 NameUpperChar <- <(UpperChar / UpperCharExtended)> */
		func() bool {
			position1126, tokenIndex1126 := position, tokenIndex
			{
				position1127 := position
				{
					position1128, tokenIndex1128 := position, tokenIndex
					if !_rules[ruleUpperChar]() {
						goto l1129
					}
					goto l1128
				l1129:
					position, tokenIndex = position1128, tokenIndex1128
					if !_rules[ruleUpperCharExtended]() {
						goto l1126
					}
				}
			l1128:
				add(ruleNameUpperChar, position1127)
			}
			return true
		l1126:
			position, tokenIndex = position1126, tokenIndex1126
			return false
		},
		/* 132 UpperCharExtended <- <('Æ' / 'Œ' / 'Ö')> */
		func() bool {
			position1130, tokenIndex1130 := position, tokenIndex
			{
				position1131 := position
				{
					position1132, tokenIndex1132 := position, tokenIndex
					if buffer[position] != rune('Æ') {
						goto l1133
					}
					position++
					goto l1132
				l1133:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('Œ') {
						goto l1134
					}
					position++
					goto l1132
				l1134:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('Ö') {
						goto l1130
					}
					position++
				}
			l1132:
				add(ruleUpperCharExtended, position1131)
			}
			return true
		l1130:
			position, tokenIndex = position1130, tokenIndex1130
			return false
		},
		/* 133 UpperChar <- <UpperASCII> */
		func() bool {
			position1135, tokenIndex1135 := position, tokenIndex
			{
				position1136 := position
				if !_rules[ruleUpperASCII]() {
					goto l1135
				}
				add(ruleUpperChar, position1136)
			}
			return true
		l1135:
			position, tokenIndex = position1135, tokenIndex1135
			return false
		},
		/* 134 NameLowerChar <- <(LowerChar / LowerCharExtended / MiscodedChar)> */
		func() bool {
			position1137, tokenIndex1137 := position, tokenIndex
			{
				position1138 := position
				{
					position1139, tokenIndex1139 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l1140
					}
					goto l1139
				l1140:
					position, tokenIndex = position1139, tokenIndex1139
					if !_rules[ruleLowerCharExtended]() {
						goto l1141
					}
					goto l1139
				l1141:
					position, tokenIndex = position1139, tokenIndex1139
					if !_rules[ruleMiscodedChar]() {
						goto l1137
					}
				}
			l1139:
				add(ruleNameLowerChar, position1138)
			}
			return true
		l1137:
			position, tokenIndex = position1137, tokenIndex1137
			return false
		},
		/* 135 MiscodedChar <- <'�'> */
		func() bool {
			position1142, tokenIndex1142 := position, tokenIndex
			{
				position1143 := position
				if buffer[position] != rune('�') {
					goto l1142
				}
				position++
				add(ruleMiscodedChar, position1143)
			}
			return true
		l1142:
			position, tokenIndex = position1142, tokenIndex1142
			return false
		},
		/* 136 LowerCharExtended <- <('æ' / 'œ' / 'à' / 'â' / 'å' / 'ã' / 'ä' / 'á' / 'ç' / 'č' / 'é' / 'è' / 'ë' / 'í' / 'ì' / 'ï' / 'ň' / 'ñ' / 'ñ' / 'ó' / 'ò' / 'ô' / 'ø' / 'õ' / 'ö' / 'ú' / 'û' / 'ù' / 'ü' / 'ŕ' / 'ř' / 'ŗ' / 'ſ' / 'š' / 'š' / 'ş' / 'ß' / 'ž')> */
		func() bool {
			position1144, tokenIndex1144 := position, tokenIndex
			{
				position1145 := position
				{
					position1146, tokenIndex1146 := position, tokenIndex
					if buffer[position] != rune('æ') {
						goto l1147
					}
					position++
					goto l1146
				l1147:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('œ') {
						goto l1148
					}
					position++
					goto l1146
				l1148:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('à') {
						goto l1149
					}
					position++
					goto l1146
				l1149:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('â') {
						goto l1150
					}
					position++
					goto l1146
				l1150:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('å') {
						goto l1151
					}
					position++
					goto l1146
				l1151:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ã') {
						goto l1152
					}
					position++
					goto l1146
				l1152:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ä') {
						goto l1153
					}
					position++
					goto l1146
				l1153:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('á') {
						goto l1154
					}
					position++
					goto l1146
				l1154:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ç') {
						goto l1155
					}
					position++
					goto l1146
				l1155:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('č') {
						goto l1156
					}
					position++
					goto l1146
				l1156:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('é') {
						goto l1157
					}
					position++
					goto l1146
				l1157:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('è') {
						goto l1158
					}
					position++
					goto l1146
				l1158:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ë') {
						goto l1159
					}
					position++
					goto l1146
				l1159:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('í') {
						goto l1160
					}
					position++
					goto l1146
				l1160:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ì') {
						goto l1161
					}
					position++
					goto l1146
				l1161:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ï') {
						goto l1162
					}
					position++
					goto l1146
				l1162:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ň') {
						goto l1163
					}
					position++
					goto l1146
				l1163:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ñ') {
						goto l1164
					}
					position++
					goto l1146
				l1164:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ñ') {
						goto l1165
					}
					position++
					goto l1146
				l1165:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ó') {
						goto l1166
					}
					position++
					goto l1146
				l1166:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ò') {
						goto l1167
					}
					position++
					goto l1146
				l1167:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ô') {
						goto l1168
					}
					position++
					goto l1146
				l1168:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ø') {
						goto l1169
					}
					position++
					goto l1146
				l1169:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('õ') {
						goto l1170
					}
					position++
					goto l1146
				l1170:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ö') {
						goto l1171
					}
					position++
					goto l1146
				l1171:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ú') {
						goto l1172
					}
					position++
					goto l1146
				l1172:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('û') {
						goto l1173
					}
					position++
					goto l1146
				l1173:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ù') {
						goto l1174
					}
					position++
					goto l1146
				l1174:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ü') {
						goto l1175
					}
					position++
					goto l1146
				l1175:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ŕ') {
						goto l1176
					}
					position++
					goto l1146
				l1176:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ř') {
						goto l1177
					}
					position++
					goto l1146
				l1177:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ŗ') {
						goto l1178
					}
					position++
					goto l1146
				l1178:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ſ') {
						goto l1179
					}
					position++
					goto l1146
				l1179:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('š') {
						goto l1180
					}
					position++
					goto l1146
				l1180:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('š') {
						goto l1181
					}
					position++
					goto l1146
				l1181:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ş') {
						goto l1182
					}
					position++
					goto l1146
				l1182:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ß') {
						goto l1183
					}
					position++
					goto l1146
				l1183:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('ž') {
						goto l1144
					}
					position++
				}
			l1146:
				add(ruleLowerCharExtended, position1145)
			}
			return true
		l1144:
			position, tokenIndex = position1144, tokenIndex1144
			return false
		},
		/* 137 LowerChar <- <LowerASCII> */
		func() bool {
			position1184, tokenIndex1184 := position, tokenIndex
			{
				position1185 := position
				if !_rules[ruleLowerASCII]() {
					goto l1184
				}
				add(ruleLowerChar, position1185)
			}
			return true
		l1184:
			position, tokenIndex = position1184, tokenIndex1184
			return false
		},
		/* 138 SpaceCharEOI <- <(_ / !.)> */
		func() bool {
			position1186, tokenIndex1186 := position, tokenIndex
			{
				position1187 := position
				{
					position1188, tokenIndex1188 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1189
					}
					goto l1188
				l1189:
					position, tokenIndex = position1188, tokenIndex1188
					{
						position1190, tokenIndex1190 := position, tokenIndex
						if !matchDot() {
							goto l1190
						}
						goto l1186
					l1190:
						position, tokenIndex = position1190, tokenIndex1190
					}
				}
			l1188:
				add(ruleSpaceCharEOI, position1187)
			}
			return true
		l1186:
			position, tokenIndex = position1186, tokenIndex1186
			return false
		},
		/* 139 Nums <- <[0-9]> */
		func() bool {
			position1191, tokenIndex1191 := position, tokenIndex
			{
				position1192 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l1191
				}
				position++
				add(ruleNums, position1192)
			}
			return true
		l1191:
			position, tokenIndex = position1191, tokenIndex1191
			return false
		},
		/* 140 LowerGreek <- <[α-ω]> */
		func() bool {
			position1193, tokenIndex1193 := position, tokenIndex
			{
				position1194 := position
				if c := buffer[position]; c < rune('α') || c > rune('ω') {
					goto l1193
				}
				position++
				add(ruleLowerGreek, position1194)
			}
			return true
		l1193:
			position, tokenIndex = position1193, tokenIndex1193
			return false
		},
		/* 141 LowerASCII <- <[a-z]> */
		func() bool {
			position1195, tokenIndex1195 := position, tokenIndex
			{
				position1196 := position
				if c := buffer[position]; c < rune('a') || c > rune('z') {
					goto l1195
				}
				position++
				add(ruleLowerASCII, position1196)
			}
			return true
		l1195:
			position, tokenIndex = position1195, tokenIndex1195
			return false
		},
		/* 142 UpperASCII <- <[A-Z]> */
		func() bool {
			position1197, tokenIndex1197 := position, tokenIndex
			{
				position1198 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l1197
				}
				position++
				add(ruleUpperASCII, position1198)
			}
			return true
		l1197:
			position, tokenIndex = position1197, tokenIndex1197
			return false
		},
		/* 143 Apostrophe <- <(ApostrOther / ApostrASCII)> */
		func() bool {
			position1199, tokenIndex1199 := position, tokenIndex
			{
				position1200 := position
				{
					position1201, tokenIndex1201 := position, tokenIndex
					if !_rules[ruleApostrOther]() {
						goto l1202
					}
					goto l1201
				l1202:
					position, tokenIndex = position1201, tokenIndex1201
					if !_rules[ruleApostrASCII]() {
						goto l1199
					}
				}
			l1201:
				add(ruleApostrophe, position1200)
			}
			return true
		l1199:
			position, tokenIndex = position1199, tokenIndex1199
			return false
		},
		/* 144 ApostrASCII <- <'\''> */
		func() bool {
			position1203, tokenIndex1203 := position, tokenIndex
			{
				position1204 := position
				if buffer[position] != rune('\'') {
					goto l1203
				}
				position++
				add(ruleApostrASCII, position1204)
			}
			return true
		l1203:
			position, tokenIndex = position1203, tokenIndex1203
			return false
		},
		/* 145 ApostrOther <- <('‘' / '’' / '`' / '´')> */
		func() bool {
			position1205, tokenIndex1205 := position, tokenIndex
			{
				position1206 := position
				{
					position1207, tokenIndex1207 := position, tokenIndex
					if buffer[position] != rune('‘') {
						goto l1208
					}
					position++
					goto l1207
				l1208:
					position, tokenIndex = position1207, tokenIndex1207
					if buffer[position] != rune('’') {
						goto l1209
					}
					position++
					goto l1207
				l1209:
					position, tokenIndex = position1207, tokenIndex1207
					if buffer[position] != rune('`') {
						goto l1210
					}
					position++
					goto l1207
				l1210:
					position, tokenIndex = position1207, tokenIndex1207
					if buffer[position] != rune('´') {
						goto l1205
					}
					position++
				}
			l1207:
				add(ruleApostrOther, position1206)
			}
			return true
		l1205:
			position, tokenIndex = position1205, tokenIndex1205
			return false
		},
		/* 146 Dash <- <('-' / DashOther)> */
		func() bool {
			position1211, tokenIndex1211 := position, tokenIndex
			{
				position1212 := position
				{
					position1213, tokenIndex1213 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l1214
					}
					position++
					goto l1213
				l1214:
					position, tokenIndex = position1213, tokenIndex1213
					if !_rules[ruleDashOther]() {
						goto l1211
					}
				}
			l1213:
				add(ruleDash, position1212)
			}
			return true
		l1211:
			position, tokenIndex = position1211, tokenIndex1211
			return false
		},
		/* 147 DashOther <- <'‑'> */
		func() bool {
			position1215, tokenIndex1215 := position, tokenIndex
			{
				position1216 := position
				if buffer[position] != rune('‑') {
					goto l1215
				}
				position++
				add(ruleDashOther, position1216)
			}
			return true
		l1215:
			position, tokenIndex = position1215, tokenIndex1215
			return false
		},
		/* 148 Slash <- <'/'> */
		func() bool {
			position1217, tokenIndex1217 := position, tokenIndex
			{
				position1218 := position
				if buffer[position] != rune('/') {
					goto l1217
				}
				position++
				add(ruleSlash, position1218)
			}
			return true
		l1217:
			position, tokenIndex = position1217, tokenIndex1217
			return false
		},
		/* 149 _ <- <(MultipleSpace / SingleSpace)> */
		func() bool {
			position1219, tokenIndex1219 := position, tokenIndex
			{
				position1220 := position
				{
					position1221, tokenIndex1221 := position, tokenIndex
					if !_rules[ruleMultipleSpace]() {
						goto l1222
					}
					goto l1221
				l1222:
					position, tokenIndex = position1221, tokenIndex1221
					if !_rules[ruleSingleSpace]() {
						goto l1219
					}
				}
			l1221:
				add(rule_, position1220)
			}
			return true
		l1219:
			position, tokenIndex = position1219, tokenIndex1219
			return false
		},
		/* 150 MultipleSpace <- <(SingleSpace SingleSpace+)> */
		func() bool {
			position1223, tokenIndex1223 := position, tokenIndex
			{
				position1224 := position
				if !_rules[ruleSingleSpace]() {
					goto l1223
				}
				if !_rules[ruleSingleSpace]() {
					goto l1223
				}
			l1225:
				{
					position1226, tokenIndex1226 := position, tokenIndex
					if !_rules[ruleSingleSpace]() {
						goto l1226
					}
					goto l1225
				l1226:
					position, tokenIndex = position1226, tokenIndex1226
				}
				add(ruleMultipleSpace, position1224)
			}
			return true
		l1223:
			position, tokenIndex = position1223, tokenIndex1223
			return false
		},
		/* 151 SingleSpace <- <(' ' / OtherSpace)> */
		func() bool {
			position1227, tokenIndex1227 := position, tokenIndex
			{
				position1228 := position
				{
					position1229, tokenIndex1229 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l1230
					}
					position++
					goto l1229
				l1230:
					position, tokenIndex = position1229, tokenIndex1229
					if !_rules[ruleOtherSpace]() {
						goto l1227
					}
				}
			l1229:
				add(ruleSingleSpace, position1228)
			}
			return true
		l1227:
			position, tokenIndex = position1227, tokenIndex1227
			return false
		},
		/* 152 OtherSpace <- <('\u3000' / '\u00a0' / '\t' / '\r' / '\n' / '\f' / '\v')> */
		func() bool {
			position1231, tokenIndex1231 := position, tokenIndex
			{
				position1232 := position
				{
					position1233, tokenIndex1233 := position, tokenIndex
					if buffer[position] != rune('\u3000') {
						goto l1234
					}
					position++
					goto l1233
				l1234:
					position, tokenIndex = position1233, tokenIndex1233
					if buffer[position] != rune('\u00a0') {
						goto l1235
					}
					position++
					goto l1233
				l1235:
					position, tokenIndex = position1233, tokenIndex1233
					if buffer[position] != rune('\t') {
						goto l1236
					}
					position++
					goto l1233
				l1236:
					position, tokenIndex = position1233, tokenIndex1233
					if buffer[position] != rune('\r') {
						goto l1237
					}
					position++
					goto l1233
				l1237:
					position, tokenIndex = position1233, tokenIndex1233
					if buffer[position] != rune('\n') {
						goto l1238
					}
					position++
					goto l1233
				l1238:
					position, tokenIndex = position1233, tokenIndex1233
					if buffer[position] != rune('\f') {
						goto l1239
					}
					position++
					goto l1233
				l1239:
					position, tokenIndex = position1233, tokenIndex1233
					if buffer[position] != rune('\v') {
						goto l1231
					}
					position++
				}
			l1233:
				add(ruleOtherSpace, position1232)
			}
			return true
		l1231:
			position, tokenIndex = position1231, tokenIndex1231
			return false
		},
		/* 153 END <- <!.> */
		func() bool {
			position1240, tokenIndex1240 := position, tokenIndex
			{
				position1241 := position
				{
					position1242, tokenIndex1242 := position, tokenIndex
					if !matchDot() {
						goto l1242
					}
					goto l1240
				l1242:
					position, tokenIndex = position1242, tokenIndex1242
				}
				add(ruleEND, position1241)
			}
			return true
		l1240:
			position, tokenIndex = position1240, tokenIndex1240
			return false
		},
	}
	p.rules = _rules
	return nil
}
