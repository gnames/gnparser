package parser

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleSciName
	ruleTail
	ruleName
	ruleHybridFormula
	ruleHybridFormulaFull
	ruleHybridFormulaPart
	ruleNamedHybrid
	ruleNamedSpeciesHybrid
	ruleNamedGenusHybrid
	ruleGraftChimeraFormula
	ruleGraftChimeraFormulaFull
	ruleGraftChimeraFormulaPart
	ruleNamedGenusGraftChimera
	ruleCandidatusName
	ruleCandidatus
	ruleSingleName
	ruleNameUninomial
	ruleNameApprox
	ruleNameComp
	ruleNameCompSp
	ruleNameCompIsp
	ruleNameSpecies
	ruleGenusWord
	ruleInfraspGroup
	ruleInfraspEpithet
	ruleCultivarWordGroup
	ruleCultivar
	ruleRankCultivar
	ruleNotHybridChar
	ruleCultivarRecursive
	ruleCultivarApostrophe
	ruleSpeciesEpithet
	ruleIgnoredWord
	ruleComparison
	ruleRank
	ruleRankNotho
	ruleRankOtherUncommon
	ruleRankOther
	ruleRankVar
	ruleRankForma
	ruleRankSsp
	ruleRankAgamo
	ruleSubgenusOrSuperspecies
	ruleSubgenus
	ruleSubgenus2
	ruleSubgenus1
	ruleUninomialCombo
	ruleUninomialCombo1
	ruleUninomialCombo2
	ruleRankUninomial
	ruleRankUninomialPlain
	ruleRankUninomialNotho
	ruleUninomial
	ruleUninomialWord
	ruleAbbrSubgenus
	ruleAbbrGenus
	ruleCapWord
	ruleCapWord1
	ruleCapWordWithDash
	ruleTwoLetterGenusDashedSegment
	ruleWordAfterDash
	ruleUpperAfterDash
	ruleLowerAfterDash
	ruleTwoLetterGenus
	ruleWord
	ruleWord1
	ruleWordStartsWithDigit
	ruleWord2
	ruleWordApostr
	ruleWord4
	ruleDotPrefix
	ruleMultiDashedWord
	ruleHybridChar
	ruleGraftChimeraChar
	ruleApproxNameIgnored
	ruleApproximation
	ruleAuthorship
	ruleAuthorshipCombo
	ruleOriginalAuthorship
	ruleOriginalAuthorshipComb
	ruleCombinationAuthorship
	ruleBasionymAuthorshipMissingParens
	ruleMissingParensStart
	ruleMissingParensEnd
	ruleBasionymAuthorshipYearMisformed
	ruleBasionymAuthorship
	ruleBasionymAuthorship1
	ruleBasionymAuthorship2Parens
	ruleAuthorsGroup
	ruleAuthorsTeam
	ruleAuthorSep
	ruleAuthorSep1
	ruleAuthorSep2
	ruleAuthorSepSpanish
	ruleAuthorEx
	ruleAuthorEmend
	ruleAuthor
	ruleAuthor0
	ruleAuthor1
	ruleAuthor2
	ruleUnknownAuthor
	ruleAuthorWord
	ruleAuthorEtAl
	ruleAuthorWord1
	ruleAuthorWord2
	ruleAuthorWord3
	ruleAuthorWord4
	ruleAuthorDashInitials
	ruleAuthorInitial
	ruleAuthorWordSoft
	ruleCapAuthorWord
	ruleAllCapsAuthorWord
	ruleFilius
	ruleFiliusF
	ruleFiliusFNoSpace
	ruleAuthorSuffix
	ruleAuthorPrefixGlued1
	ruleAuthorPrefixGlued2
	ruleAuthorPrefix
	ruleAuthorPrefix2
	ruleAuthorPrefix1
	ruleAuthorUpperChar
	ruleAuthorLowerChar
	ruleYear
	ruleYearRange
	ruleYearWithDot
	ruleYearApprox
	ruleYearWithPage
	ruleYearWithParens
	ruleYearWithChar
	ruleYearNum
	ruleNameUpperChar
	ruleUpperCharExtended
	ruleUpperChar
	ruleNameLowerChar
	ruleMiscodedChar
	ruleLowerCharExtended
	ruleLowerChar
	ruleSpaceCharEOI
	ruleNums
	ruleLowerGreek
	ruleLowerASCII
	ruleUpperASCII
	ruleApostrophe
	ruleApostrASCII
	ruleApostrOther
	ruleDash
	ruleDashOther
	ruleSlash
	rule_
	ruleMultipleSpace
	ruleSingleSpace
	ruleOtherSpace
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"SciName",
	"Tail",
	"Name",
	"HybridFormula",
	"HybridFormulaFull",
	"HybridFormulaPart",
	"NamedHybrid",
	"NamedSpeciesHybrid",
	"NamedGenusHybrid",
	"GraftChimeraFormula",
	"GraftChimeraFormulaFull",
	"GraftChimeraFormulaPart",
	"NamedGenusGraftChimera",
	"CandidatusName",
	"Candidatus",
	"SingleName",
	"NameUninomial",
	"NameApprox",
	"NameComp",
	"NameCompSp",
	"NameCompIsp",
	"NameSpecies",
	"GenusWord",
	"InfraspGroup",
	"InfraspEpithet",
	"CultivarWordGroup",
	"Cultivar",
	"RankCultivar",
	"NotHybridChar",
	"CultivarRecursive",
	"CultivarApostrophe",
	"SpeciesEpithet",
	"IgnoredWord",
	"Comparison",
	"Rank",
	"RankNotho",
	"RankOtherUncommon",
	"RankOther",
	"RankVar",
	"RankForma",
	"RankSsp",
	"RankAgamo",
	"SubgenusOrSuperspecies",
	"Subgenus",
	"Subgenus2",
	"Subgenus1",
	"UninomialCombo",
	"UninomialCombo1",
	"UninomialCombo2",
	"RankUninomial",
	"RankUninomialPlain",
	"RankUninomialNotho",
	"Uninomial",
	"UninomialWord",
	"AbbrSubgenus",
	"AbbrGenus",
	"CapWord",
	"CapWord1",
	"CapWordWithDash",
	"TwoLetterGenusDashedSegment",
	"WordAfterDash",
	"UpperAfterDash",
	"LowerAfterDash",
	"TwoLetterGenus",
	"Word",
	"Word1",
	"WordStartsWithDigit",
	"Word2",
	"WordApostr",
	"Word4",
	"DotPrefix",
	"MultiDashedWord",
	"HybridChar",
	"GraftChimeraChar",
	"ApproxNameIgnored",
	"Approximation",
	"Authorship",
	"AuthorshipCombo",
	"OriginalAuthorship",
	"OriginalAuthorshipComb",
	"CombinationAuthorship",
	"BasionymAuthorshipMissingParens",
	"MissingParensStart",
	"MissingParensEnd",
	"BasionymAuthorshipYearMisformed",
	"BasionymAuthorship",
	"BasionymAuthorship1",
	"BasionymAuthorship2Parens",
	"AuthorsGroup",
	"AuthorsTeam",
	"AuthorSep",
	"AuthorSep1",
	"AuthorSep2",
	"AuthorSepSpanish",
	"AuthorEx",
	"AuthorEmend",
	"Author",
	"Author0",
	"Author1",
	"Author2",
	"UnknownAuthor",
	"AuthorWord",
	"AuthorEtAl",
	"AuthorWord1",
	"AuthorWord2",
	"AuthorWord3",
	"AuthorWord4",
	"AuthorDashInitials",
	"AuthorInitial",
	"AuthorWordSoft",
	"CapAuthorWord",
	"AllCapsAuthorWord",
	"Filius",
	"FiliusF",
	"FiliusFNoSpace",
	"AuthorSuffix",
	"AuthorPrefixGlued1",
	"AuthorPrefixGlued2",
	"AuthorPrefix",
	"AuthorPrefix2",
	"AuthorPrefix1",
	"AuthorUpperChar",
	"AuthorLowerChar",
	"Year",
	"YearRange",
	"YearWithDot",
	"YearApprox",
	"YearWithPage",
	"YearWithParens",
	"YearWithChar",
	"YearNum",
	"NameUpperChar",
	"UpperCharExtended",
	"UpperChar",
	"NameLowerChar",
	"MiscodedChar",
	"LowerCharExtended",
	"LowerChar",
	"SpaceCharEOI",
	"Nums",
	"LowerGreek",
	"LowerASCII",
	"UpperASCII",
	"Apostrophe",
	"ApostrASCII",
	"ApostrOther",
	"Dash",
	"DashOther",
	"Slash",
	"_",
	"MultipleSpace",
	"SingleSpace",
	"OtherSpace",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Engine struct {
	baseEngine

	Buffer string
	buffer []rune
	rules  [155]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Engine) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Engine) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Engine
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Engine) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Engine) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Engine) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Engine) error {
	return func(p *Engine) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Engine) error {
	return func(p *Engine) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Engine) Init(options ...func(*Engine) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 SciName <- <(_? Name Tail END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rule_]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				if !_rules[ruleName]() {
					goto l0
				}
				if !_rules[ruleTail]() {
					goto l0
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleSciName, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Tail <- <((_ / ';' / ',') .*)?> */
		func() bool {
			{
				position5 := position
				{
					position6, tokenIndex6 := position, tokenIndex
					{
						position8, tokenIndex8 := position, tokenIndex
						if !_rules[rule_]() {
							goto l9
						}
						goto l8
					l9:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(';') {
							goto l10
						}
						position++
						goto l8
					l10:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(',') {
							goto l6
						}
						position++
					}
				l8:
				l11:
					{
						position12, tokenIndex12 := position, tokenIndex
						if !matchDot() {
							goto l12
						}
						goto l11
					l12:
						position, tokenIndex = position12, tokenIndex12
					}
					goto l7
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
			l7:
				add(ruleTail, position5)
			}
			return true
		},
		/* 2 Name <- <(NamedGenusGraftChimera / GraftChimeraFormula / NamedHybrid / HybridFormula / CandidatusName / SingleName)> */
		func() bool {
			position13, tokenIndex13 := position, tokenIndex
			{
				position14 := position
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleNamedGenusGraftChimera]() {
						goto l16
					}
					goto l15
				l16:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleGraftChimeraFormula]() {
						goto l17
					}
					goto l15
				l17:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleNamedHybrid]() {
						goto l18
					}
					goto l15
				l18:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleHybridFormula]() {
						goto l19
					}
					goto l15
				l19:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleCandidatusName]() {
						goto l20
					}
					goto l15
				l20:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleSingleName]() {
						goto l13
					}
				}
			l15:
				add(ruleName, position14)
			}
			return true
		l13:
			position, tokenIndex = position13, tokenIndex13
			return false
		},
		/* 3 HybridFormula <- <(SingleName (_ (HybridFormulaPart / HybridFormulaFull))+)> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				if !_rules[ruleSingleName]() {
					goto l21
				}
				if !_rules[rule_]() {
					goto l21
				}
				{
					position25, tokenIndex25 := position, tokenIndex
					if !_rules[ruleHybridFormulaPart]() {
						goto l26
					}
					goto l25
				l26:
					position, tokenIndex = position25, tokenIndex25
					if !_rules[ruleHybridFormulaFull]() {
						goto l21
					}
				}
			l25:
			l23:
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[rule_]() {
						goto l24
					}
					{
						position27, tokenIndex27 := position, tokenIndex
						if !_rules[ruleHybridFormulaPart]() {
							goto l28
						}
						goto l27
					l28:
						position, tokenIndex = position27, tokenIndex27
						if !_rules[ruleHybridFormulaFull]() {
							goto l24
						}
					}
				l27:
					goto l23
				l24:
					position, tokenIndex = position24, tokenIndex24
				}
				add(ruleHybridFormula, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 4 HybridFormulaFull <- <(HybridChar (_ SingleName)?)> */
		func() bool {
			position29, tokenIndex29 := position, tokenIndex
			{
				position30 := position
				if !_rules[ruleHybridChar]() {
					goto l29
				}
				{
					position31, tokenIndex31 := position, tokenIndex
					if !_rules[rule_]() {
						goto l31
					}
					if !_rules[ruleSingleName]() {
						goto l31
					}
					goto l32
				l31:
					position, tokenIndex = position31, tokenIndex31
				}
			l32:
				add(ruleHybridFormulaFull, position30)
			}
			return true
		l29:
			position, tokenIndex = position29, tokenIndex29
			return false
		},
		/* 5 HybridFormulaPart <- <(HybridChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position33, tokenIndex33 := position, tokenIndex
			{
				position34 := position
				if !_rules[ruleHybridChar]() {
					goto l33
				}
				if !_rules[rule_]() {
					goto l33
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l33
				}
				{
					position35, tokenIndex35 := position, tokenIndex
					if !_rules[rule_]() {
						goto l35
					}
					if !_rules[ruleInfraspGroup]() {
						goto l35
					}
					goto l36
				l35:
					position, tokenIndex = position35, tokenIndex35
				}
			l36:
				add(ruleHybridFormulaPart, position34)
			}
			return true
		l33:
			position, tokenIndex = position33, tokenIndex33
			return false
		},
		/* 6 NamedHybrid <- <(NamedGenusHybrid / NamedSpeciesHybrid)> */
		func() bool {
			position37, tokenIndex37 := position, tokenIndex
			{
				position38 := position
				{
					position39, tokenIndex39 := position, tokenIndex
					if !_rules[ruleNamedGenusHybrid]() {
						goto l40
					}
					goto l39
				l40:
					position, tokenIndex = position39, tokenIndex39
					if !_rules[ruleNamedSpeciesHybrid]() {
						goto l37
					}
				}
			l39:
				add(ruleNamedHybrid, position38)
			}
			return true
		l37:
			position, tokenIndex = position37, tokenIndex37
			return false
		},
		/* 7 NamedSpeciesHybrid <- <(GenusWord (_ Subgenus)? (_ Comparison)? _ HybridChar _? SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position41, tokenIndex41 := position, tokenIndex
			{
				position42 := position
				if !_rules[ruleGenusWord]() {
					goto l41
				}
				{
					position43, tokenIndex43 := position, tokenIndex
					if !_rules[rule_]() {
						goto l43
					}
					if !_rules[ruleSubgenus]() {
						goto l43
					}
					goto l44
				l43:
					position, tokenIndex = position43, tokenIndex43
				}
			l44:
				{
					position45, tokenIndex45 := position, tokenIndex
					if !_rules[rule_]() {
						goto l45
					}
					if !_rules[ruleComparison]() {
						goto l45
					}
					goto l46
				l45:
					position, tokenIndex = position45, tokenIndex45
				}
			l46:
				if !_rules[rule_]() {
					goto l41
				}
				if !_rules[ruleHybridChar]() {
					goto l41
				}
				{
					position47, tokenIndex47 := position, tokenIndex
					if !_rules[rule_]() {
						goto l47
					}
					goto l48
				l47:
					position, tokenIndex = position47, tokenIndex47
				}
			l48:
				if !_rules[ruleSpeciesEpithet]() {
					goto l41
				}
				{
					position49, tokenIndex49 := position, tokenIndex
					if !_rules[rule_]() {
						goto l49
					}
					if !_rules[ruleInfraspGroup]() {
						goto l49
					}
					goto l50
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
			l50:
				add(ruleNamedSpeciesHybrid, position42)
			}
			return true
		l41:
			position, tokenIndex = position41, tokenIndex41
			return false
		},
		/* 8 NamedGenusHybrid <- <(HybridChar _? SingleName)> */
		func() bool {
			position51, tokenIndex51 := position, tokenIndex
			{
				position52 := position
				if !_rules[ruleHybridChar]() {
					goto l51
				}
				{
					position53, tokenIndex53 := position, tokenIndex
					if !_rules[rule_]() {
						goto l53
					}
					goto l54
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
			l54:
				if !_rules[ruleSingleName]() {
					goto l51
				}
				add(ruleNamedGenusHybrid, position52)
			}
			return true
		l51:
			position, tokenIndex = position51, tokenIndex51
			return false
		},
		/* 9 GraftChimeraFormula <- <(SingleName (_ (GraftChimeraFormulaPart / GraftChimeraFormulaFull))+)> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				if !_rules[ruleSingleName]() {
					goto l55
				}
				if !_rules[rule_]() {
					goto l55
				}
				{
					position59, tokenIndex59 := position, tokenIndex
					if !_rules[ruleGraftChimeraFormulaPart]() {
						goto l60
					}
					goto l59
				l60:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleGraftChimeraFormulaFull]() {
						goto l55
					}
				}
			l59:
			l57:
				{
					position58, tokenIndex58 := position, tokenIndex
					if !_rules[rule_]() {
						goto l58
					}
					{
						position61, tokenIndex61 := position, tokenIndex
						if !_rules[ruleGraftChimeraFormulaPart]() {
							goto l62
						}
						goto l61
					l62:
						position, tokenIndex = position61, tokenIndex61
						if !_rules[ruleGraftChimeraFormulaFull]() {
							goto l58
						}
					}
				l61:
					goto l57
				l58:
					position, tokenIndex = position58, tokenIndex58
				}
				add(ruleGraftChimeraFormula, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 10 GraftChimeraFormulaFull <- <(GraftChimeraChar (_ SingleName)?)> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l63
				}
				{
					position65, tokenIndex65 := position, tokenIndex
					if !_rules[rule_]() {
						goto l65
					}
					if !_rules[ruleSingleName]() {
						goto l65
					}
					goto l66
				l65:
					position, tokenIndex = position65, tokenIndex65
				}
			l66:
				add(ruleGraftChimeraFormulaFull, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 11 GraftChimeraFormulaPart <- <(GraftChimeraChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position67, tokenIndex67 := position, tokenIndex
			{
				position68 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l67
				}
				if !_rules[rule_]() {
					goto l67
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l67
				}
				{
					position69, tokenIndex69 := position, tokenIndex
					if !_rules[rule_]() {
						goto l69
					}
					if !_rules[ruleInfraspGroup]() {
						goto l69
					}
					goto l70
				l69:
					position, tokenIndex = position69, tokenIndex69
				}
			l70:
				add(ruleGraftChimeraFormulaPart, position68)
			}
			return true
		l67:
			position, tokenIndex = position67, tokenIndex67
			return false
		},
		/* 12 NamedGenusGraftChimera <- <(GraftChimeraChar _? SingleName)> */
		func() bool {
			position71, tokenIndex71 := position, tokenIndex
			{
				position72 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l71
				}
				{
					position73, tokenIndex73 := position, tokenIndex
					if !_rules[rule_]() {
						goto l73
					}
					goto l74
				l73:
					position, tokenIndex = position73, tokenIndex73
				}
			l74:
				if !_rules[ruleSingleName]() {
					goto l71
				}
				add(ruleNamedGenusGraftChimera, position72)
			}
			return true
		l71:
			position, tokenIndex = position71, tokenIndex71
			return false
		},
		/* 13 CandidatusName <- <(Candidatus _ SingleName)> */
		func() bool {
			position75, tokenIndex75 := position, tokenIndex
			{
				position76 := position
				if !_rules[ruleCandidatus]() {
					goto l75
				}
				if !_rules[rule_]() {
					goto l75
				}
				if !_rules[ruleSingleName]() {
					goto l75
				}
				add(ruleCandidatusName, position76)
			}
			return true
		l75:
			position, tokenIndex = position75, tokenIndex75
			return false
		},
		/* 14 Candidatus <- <('C' 'a' 'n' 'd' 'i' 'd' 'a' 't' 'u' 's')> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if buffer[position] != rune('C') {
					goto l77
				}
				position++
				if buffer[position] != rune('a') {
					goto l77
				}
				position++
				if buffer[position] != rune('n') {
					goto l77
				}
				position++
				if buffer[position] != rune('d') {
					goto l77
				}
				position++
				if buffer[position] != rune('i') {
					goto l77
				}
				position++
				if buffer[position] != rune('d') {
					goto l77
				}
				position++
				if buffer[position] != rune('a') {
					goto l77
				}
				position++
				if buffer[position] != rune('t') {
					goto l77
				}
				position++
				if buffer[position] != rune('u') {
					goto l77
				}
				position++
				if buffer[position] != rune('s') {
					goto l77
				}
				position++
				add(ruleCandidatus, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 15 SingleName <- <(NameComp / NameApprox / NameSpecies / NameUninomial)> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				{
					position81, tokenIndex81 := position, tokenIndex
					if !_rules[ruleNameComp]() {
						goto l82
					}
					goto l81
				l82:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameApprox]() {
						goto l83
					}
					goto l81
				l83:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameSpecies]() {
						goto l84
					}
					goto l81
				l84:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameUninomial]() {
						goto l79
					}
				}
			l81:
				add(ruleSingleName, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 16 NameUninomial <- <((UninomialCombo / Uninomial) (_ CultivarWordGroup)?)> */
		func() bool {
			position85, tokenIndex85 := position, tokenIndex
			{
				position86 := position
				{
					position87, tokenIndex87 := position, tokenIndex
					if !_rules[ruleUninomialCombo]() {
						goto l88
					}
					goto l87
				l88:
					position, tokenIndex = position87, tokenIndex87
					if !_rules[ruleUninomial]() {
						goto l85
					}
				}
			l87:
				{
					position89, tokenIndex89 := position, tokenIndex
					if !_rules[rule_]() {
						goto l89
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l89
					}
					goto l90
				l89:
					position, tokenIndex = position89, tokenIndex89
				}
			l90:
				add(ruleNameUninomial, position86)
			}
			return true
		l85:
			position, tokenIndex = position85, tokenIndex85
			return false
		},
		/* 17 NameApprox <- <(GenusWord (_ SpeciesEpithet)? _ Approximation ApproxNameIgnored)> */
		func() bool {
			position91, tokenIndex91 := position, tokenIndex
			{
				position92 := position
				if !_rules[ruleGenusWord]() {
					goto l91
				}
				{
					position93, tokenIndex93 := position, tokenIndex
					if !_rules[rule_]() {
						goto l93
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l93
					}
					goto l94
				l93:
					position, tokenIndex = position93, tokenIndex93
				}
			l94:
				if !_rules[rule_]() {
					goto l91
				}
				if !_rules[ruleApproximation]() {
					goto l91
				}
				if !_rules[ruleApproxNameIgnored]() {
					goto l91
				}
				add(ruleNameApprox, position92)
			}
			return true
		l91:
			position, tokenIndex = position91, tokenIndex91
			return false
		},
		/* 18 NameComp <- <(NameCompIsp / NameCompSp)> */
		func() bool {
			position95, tokenIndex95 := position, tokenIndex
			{
				position96 := position
				{
					position97, tokenIndex97 := position, tokenIndex
					if !_rules[ruleNameCompIsp]() {
						goto l98
					}
					goto l97
				l98:
					position, tokenIndex = position97, tokenIndex97
					if !_rules[ruleNameCompSp]() {
						goto l95
					}
				}
			l97:
				add(ruleNameComp, position96)
			}
			return true
		l95:
			position, tokenIndex = position95, tokenIndex95
			return false
		},
		/* 19 NameCompSp <- <(GenusWord _ Comparison (_ SpeciesEpithet)?)> */
		func() bool {
			position99, tokenIndex99 := position, tokenIndex
			{
				position100 := position
				if !_rules[ruleGenusWord]() {
					goto l99
				}
				if !_rules[rule_]() {
					goto l99
				}
				if !_rules[ruleComparison]() {
					goto l99
				}
				{
					position101, tokenIndex101 := position, tokenIndex
					if !_rules[rule_]() {
						goto l101
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l101
					}
					goto l102
				l101:
					position, tokenIndex = position101, tokenIndex101
				}
			l102:
				add(ruleNameCompSp, position100)
			}
			return true
		l99:
			position, tokenIndex = position99, tokenIndex99
			return false
		},
		/* 20 NameCompIsp <- <(GenusWord _ SpeciesEpithet _ Comparison (_ InfraspEpithet)?)> */
		func() bool {
			position103, tokenIndex103 := position, tokenIndex
			{
				position104 := position
				if !_rules[ruleGenusWord]() {
					goto l103
				}
				if !_rules[rule_]() {
					goto l103
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l103
				}
				if !_rules[rule_]() {
					goto l103
				}
				if !_rules[ruleComparison]() {
					goto l103
				}
				{
					position105, tokenIndex105 := position, tokenIndex
					if !_rules[rule_]() {
						goto l105
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l105
					}
					goto l106
				l105:
					position, tokenIndex = position105, tokenIndex105
				}
			l106:
				add(ruleNameCompIsp, position104)
			}
			return true
		l103:
			position, tokenIndex = position103, tokenIndex103
			return false
		},
		/* 21 NameSpecies <- <(GenusWord (_? (Subgenus / SubgenusOrSuperspecies))? _ SpeciesEpithet (_ InfraspGroup)? (_ CultivarWordGroup)?)> */
		func() bool {
			position107, tokenIndex107 := position, tokenIndex
			{
				position108 := position
				if !_rules[ruleGenusWord]() {
					goto l107
				}
				{
					position109, tokenIndex109 := position, tokenIndex
					{
						position111, tokenIndex111 := position, tokenIndex
						if !_rules[rule_]() {
							goto l111
						}
						goto l112
					l111:
						position, tokenIndex = position111, tokenIndex111
					}
				l112:
					{
						position113, tokenIndex113 := position, tokenIndex
						if !_rules[ruleSubgenus]() {
							goto l114
						}
						goto l113
					l114:
						position, tokenIndex = position113, tokenIndex113
						if !_rules[ruleSubgenusOrSuperspecies]() {
							goto l109
						}
					}
				l113:
					goto l110
				l109:
					position, tokenIndex = position109, tokenIndex109
				}
			l110:
				if !_rules[rule_]() {
					goto l107
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l107
				}
				{
					position115, tokenIndex115 := position, tokenIndex
					if !_rules[rule_]() {
						goto l115
					}
					if !_rules[ruleInfraspGroup]() {
						goto l115
					}
					goto l116
				l115:
					position, tokenIndex = position115, tokenIndex115
				}
			l116:
				{
					position117, tokenIndex117 := position, tokenIndex
					if !_rules[rule_]() {
						goto l117
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l117
					}
					goto l118
				l117:
					position, tokenIndex = position117, tokenIndex117
				}
			l118:
				add(ruleNameSpecies, position108)
			}
			return true
		l107:
			position, tokenIndex = position107, tokenIndex107
			return false
		},
		/* 22 GenusWord <- <((AbbrGenus / UninomialWord) !(_ AuthorWord))> */
		func() bool {
			position119, tokenIndex119 := position, tokenIndex
			{
				position120 := position
				{
					position121, tokenIndex121 := position, tokenIndex
					if !_rules[ruleAbbrGenus]() {
						goto l122
					}
					goto l121
				l122:
					position, tokenIndex = position121, tokenIndex121
					if !_rules[ruleUninomialWord]() {
						goto l119
					}
				}
			l121:
				{
					position123, tokenIndex123 := position, tokenIndex
					if !_rules[rule_]() {
						goto l123
					}
					if !_rules[ruleAuthorWord]() {
						goto l123
					}
					goto l119
				l123:
					position, tokenIndex = position123, tokenIndex123
				}
				add(ruleGenusWord, position120)
			}
			return true
		l119:
			position, tokenIndex = position119, tokenIndex119
			return false
		},
		/* 23 InfraspGroup <- <(InfraspEpithet (_ InfraspEpithet)? (_ InfraspEpithet)?)> */
		func() bool {
			position124, tokenIndex124 := position, tokenIndex
			{
				position125 := position
				if !_rules[ruleInfraspEpithet]() {
					goto l124
				}
				{
					position126, tokenIndex126 := position, tokenIndex
					if !_rules[rule_]() {
						goto l126
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l126
					}
					goto l127
				l126:
					position, tokenIndex = position126, tokenIndex126
				}
			l127:
				{
					position128, tokenIndex128 := position, tokenIndex
					if !_rules[rule_]() {
						goto l128
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l128
					}
					goto l129
				l128:
					position, tokenIndex = position128, tokenIndex128
				}
			l129:
				add(ruleInfraspGroup, position125)
			}
			return true
		l124:
			position, tokenIndex = position124, tokenIndex124
			return false
		},
		/* 24 InfraspEpithet <- <((Rank _?)? !AuthorEx Word (_ IgnoredWord)? (_? Authorship)?)> */
		func() bool {
			position130, tokenIndex130 := position, tokenIndex
			{
				position131 := position
				{
					position132, tokenIndex132 := position, tokenIndex
					if !_rules[ruleRank]() {
						goto l132
					}
					{
						position134, tokenIndex134 := position, tokenIndex
						if !_rules[rule_]() {
							goto l134
						}
						goto l135
					l134:
						position, tokenIndex = position134, tokenIndex134
					}
				l135:
					goto l133
				l132:
					position, tokenIndex = position132, tokenIndex132
				}
			l133:
				{
					position136, tokenIndex136 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l136
					}
					goto l130
				l136:
					position, tokenIndex = position136, tokenIndex136
				}
				if !_rules[ruleWord]() {
					goto l130
				}
				{
					position137, tokenIndex137 := position, tokenIndex
					if !_rules[rule_]() {
						goto l137
					}
					if !_rules[ruleIgnoredWord]() {
						goto l137
					}
					goto l138
				l137:
					position, tokenIndex = position137, tokenIndex137
				}
			l138:
				{
					position139, tokenIndex139 := position, tokenIndex
					{
						position141, tokenIndex141 := position, tokenIndex
						if !_rules[rule_]() {
							goto l141
						}
						goto l142
					l141:
						position, tokenIndex = position141, tokenIndex141
					}
				l142:
					if !_rules[ruleAuthorship]() {
						goto l139
					}
					goto l140
				l139:
					position, tokenIndex = position139, tokenIndex139
				}
			l140:
				add(ruleInfraspEpithet, position131)
			}
			return true
		l130:
			position, tokenIndex = position130, tokenIndex130
			return false
		},
		/* 25 CultivarWordGroup <- <(((RankCultivar _)? CultivarApostrophe CultivarRecursive CultivarApostrophe) / (RankCultivar _ Cultivar))> */
		func() bool {
			position143, tokenIndex143 := position, tokenIndex
			{
				position144 := position
				{
					position145, tokenIndex145 := position, tokenIndex
					{
						position147, tokenIndex147 := position, tokenIndex
						if !_rules[ruleRankCultivar]() {
							goto l147
						}
						if !_rules[rule_]() {
							goto l147
						}
						goto l148
					l147:
						position, tokenIndex = position147, tokenIndex147
					}
				l148:
					if !_rules[ruleCultivarApostrophe]() {
						goto l146
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l146
					}
					if !_rules[ruleCultivarApostrophe]() {
						goto l146
					}
					goto l145
				l146:
					position, tokenIndex = position145, tokenIndex145
					if !_rules[ruleRankCultivar]() {
						goto l143
					}
					if !_rules[rule_]() {
						goto l143
					}
					if !_rules[ruleCultivar]() {
						goto l143
					}
				}
			l145:
				add(ruleCultivarWordGroup, position144)
			}
			return true
		l143:
			position, tokenIndex = position143, tokenIndex143
			return false
		},
		/* 26 Cultivar <- <NotHybridChar+> */
		func() bool {
			position149, tokenIndex149 := position, tokenIndex
			{
				position150 := position
				if !_rules[ruleNotHybridChar]() {
					goto l149
				}
			l151:
				{
					position152, tokenIndex152 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l152
					}
					goto l151
				l152:
					position, tokenIndex = position152, tokenIndex152
				}
				add(ruleCultivar, position150)
			}
			return true
		l149:
			position, tokenIndex = position149, tokenIndex149
			return false
		},
		/* 27 RankCultivar <- <('c' 'v' '.'?)> */
		func() bool {
			position153, tokenIndex153 := position, tokenIndex
			{
				position154 := position
				if buffer[position] != rune('c') {
					goto l153
				}
				position++
				if buffer[position] != rune('v') {
					goto l153
				}
				position++
				{
					position155, tokenIndex155 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l155
					}
					position++
					goto l156
				l155:
					position, tokenIndex = position155, tokenIndex155
				}
			l156:
				add(ruleRankCultivar, position154)
			}
			return true
		l153:
			position, tokenIndex = position153, tokenIndex153
			return false
		},
		/* 28 NotHybridChar <- <(!(_ HybridChar) .)> */
		func() bool {
			position157, tokenIndex157 := position, tokenIndex
			{
				position158 := position
				{
					position159, tokenIndex159 := position, tokenIndex
					if !_rules[rule_]() {
						goto l159
					}
					if !_rules[ruleHybridChar]() {
						goto l159
					}
					goto l157
				l159:
					position, tokenIndex = position159, tokenIndex159
				}
				if !matchDot() {
					goto l157
				}
				add(ruleNotHybridChar, position158)
			}
			return true
		l157:
			position, tokenIndex = position157, tokenIndex157
			return false
		},
		/* 29 CultivarRecursive <- <((NotHybridChar CultivarRecursive) / &CultivarApostrophe)> */
		func() bool {
			position160, tokenIndex160 := position, tokenIndex
			{
				position161 := position
				{
					position162, tokenIndex162 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l163
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l163
					}
					goto l162
				l163:
					position, tokenIndex = position162, tokenIndex162
					{
						position164, tokenIndex164 := position, tokenIndex
						if !_rules[ruleCultivarApostrophe]() {
							goto l160
						}
						position, tokenIndex = position164, tokenIndex164
					}
				}
			l162:
				add(ruleCultivarRecursive, position161)
			}
			return true
		l160:
			position, tokenIndex = position160, tokenIndex160
			return false
		},
		/* 30 CultivarApostrophe <- <('\'' / '‘' / '’' / '"' / '“' / '”')> */
		func() bool {
			position165, tokenIndex165 := position, tokenIndex
			{
				position166 := position
				{
					position167, tokenIndex167 := position, tokenIndex
					if buffer[position] != rune('\'') {
						goto l168
					}
					position++
					goto l167
				l168:
					position, tokenIndex = position167, tokenIndex167
					if buffer[position] != rune('‘') {
						goto l169
					}
					position++
					goto l167
				l169:
					position, tokenIndex = position167, tokenIndex167
					if buffer[position] != rune('’') {
						goto l170
					}
					position++
					goto l167
				l170:
					position, tokenIndex = position167, tokenIndex167
					if buffer[position] != rune('"') {
						goto l171
					}
					position++
					goto l167
				l171:
					position, tokenIndex = position167, tokenIndex167
					if buffer[position] != rune('“') {
						goto l172
					}
					position++
					goto l167
				l172:
					position, tokenIndex = position167, tokenIndex167
					if buffer[position] != rune('”') {
						goto l165
					}
					position++
				}
			l167:
				add(ruleCultivarApostrophe, position166)
			}
			return true
		l165:
			position, tokenIndex = position165, tokenIndex165
			return false
		},
		/* 31 SpeciesEpithet <- <(!AuthorEx Word (_ IgnoredWord)? (_? Authorship)?)> */
		func() bool {
			position173, tokenIndex173 := position, tokenIndex
			{
				position174 := position
				{
					position175, tokenIndex175 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l175
					}
					goto l173
				l175:
					position, tokenIndex = position175, tokenIndex175
				}
				if !_rules[ruleWord]() {
					goto l173
				}
				{
					position176, tokenIndex176 := position, tokenIndex
					if !_rules[rule_]() {
						goto l176
					}
					if !_rules[ruleIgnoredWord]() {
						goto l176
					}
					goto l177
				l176:
					position, tokenIndex = position176, tokenIndex176
				}
			l177:
				{
					position178, tokenIndex178 := position, tokenIndex
					{
						position180, tokenIndex180 := position, tokenIndex
						if !_rules[rule_]() {
							goto l180
						}
						goto l181
					l180:
						position, tokenIndex = position180, tokenIndex180
					}
				l181:
					if !_rules[ruleAuthorship]() {
						goto l178
					}
					goto l179
				l178:
					position, tokenIndex = position178, tokenIndex178
				}
			l179:
				add(ruleSpeciesEpithet, position174)
			}
			return true
		l173:
			position, tokenIndex = position173, tokenIndex173
			return false
		},
		/* 32 IgnoredWord <- <(('m' 'i' 'h' 'i' '.') / ('m' 'i' 'h' 'i'))> */
		func() bool {
			position182, tokenIndex182 := position, tokenIndex
			{
				position183 := position
				{
					position184, tokenIndex184 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l185
					}
					position++
					if buffer[position] != rune('i') {
						goto l185
					}
					position++
					if buffer[position] != rune('h') {
						goto l185
					}
					position++
					if buffer[position] != rune('i') {
						goto l185
					}
					position++
					if buffer[position] != rune('.') {
						goto l185
					}
					position++
					goto l184
				l185:
					position, tokenIndex = position184, tokenIndex184
					if buffer[position] != rune('m') {
						goto l182
					}
					position++
					if buffer[position] != rune('i') {
						goto l182
					}
					position++
					if buffer[position] != rune('h') {
						goto l182
					}
					position++
					if buffer[position] != rune('i') {
						goto l182
					}
					position++
				}
			l184:
				add(ruleIgnoredWord, position183)
			}
			return true
		l182:
			position, tokenIndex = position182, tokenIndex182
			return false
		},
		/* 33 Comparison <- <('c' 'f' '.'? &SpaceCharEOI)> */
		func() bool {
			position186, tokenIndex186 := position, tokenIndex
			{
				position187 := position
				if buffer[position] != rune('c') {
					goto l186
				}
				position++
				if buffer[position] != rune('f') {
					goto l186
				}
				position++
				{
					position188, tokenIndex188 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l188
					}
					position++
					goto l189
				l188:
					position, tokenIndex = position188, tokenIndex188
				}
			l189:
				{
					position190, tokenIndex190 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l186
					}
					position, tokenIndex = position190, tokenIndex190
				}
				add(ruleComparison, position187)
			}
			return true
		l186:
			position, tokenIndex = position186, tokenIndex186
			return false
		},
		/* 34 Rank <- <((RankForma / RankVar / RankSsp / RankOther / RankOtherUncommon / RankAgamo / RankNotho) (_? LowerGreek ('.' / &SpaceCharEOI))?)> */
		func() bool {
			position191, tokenIndex191 := position, tokenIndex
			{
				position192 := position
				{
					position193, tokenIndex193 := position, tokenIndex
					if !_rules[ruleRankForma]() {
						goto l194
					}
					goto l193
				l194:
					position, tokenIndex = position193, tokenIndex193
					if !_rules[ruleRankVar]() {
						goto l195
					}
					goto l193
				l195:
					position, tokenIndex = position193, tokenIndex193
					if !_rules[ruleRankSsp]() {
						goto l196
					}
					goto l193
				l196:
					position, tokenIndex = position193, tokenIndex193
					if !_rules[ruleRankOther]() {
						goto l197
					}
					goto l193
				l197:
					position, tokenIndex = position193, tokenIndex193
					if !_rules[ruleRankOtherUncommon]() {
						goto l198
					}
					goto l193
				l198:
					position, tokenIndex = position193, tokenIndex193
					if !_rules[ruleRankAgamo]() {
						goto l199
					}
					goto l193
				l199:
					position, tokenIndex = position193, tokenIndex193
					if !_rules[ruleRankNotho]() {
						goto l191
					}
				}
			l193:
				{
					position200, tokenIndex200 := position, tokenIndex
					{
						position202, tokenIndex202 := position, tokenIndex
						if !_rules[rule_]() {
							goto l202
						}
						goto l203
					l202:
						position, tokenIndex = position202, tokenIndex202
					}
				l203:
					if !_rules[ruleLowerGreek]() {
						goto l200
					}
					{
						position204, tokenIndex204 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l205
						}
						position++
						goto l204
					l205:
						position, tokenIndex = position204, tokenIndex204
						{
							position206, tokenIndex206 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l200
							}
							position, tokenIndex = position206, tokenIndex206
						}
					}
				l204:
					goto l201
				l200:
					position, tokenIndex = position200, tokenIndex200
				}
			l201:
				add(ruleRank, position192)
			}
			return true
		l191:
			position, tokenIndex = position191, tokenIndex191
			return false
		},
		/* 35 RankNotho <- <((('n' 'o' 't' 'h' 'o' (('v' 'a' 'r') / ('f' 'o') / 'f' / ('s' 'u' 'b' 's' 'p') / ('s' 's' 'p') / ('s' 'p') / ('m' 'o' 'r' 't' 'h') / ('s' 'u' 'p' 's' 'p') / ('s' 'u'))) / ('n' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position207, tokenIndex207 := position, tokenIndex
			{
				position208 := position
				{
					position209, tokenIndex209 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l210
					}
					position++
					if buffer[position] != rune('o') {
						goto l210
					}
					position++
					if buffer[position] != rune('t') {
						goto l210
					}
					position++
					if buffer[position] != rune('h') {
						goto l210
					}
					position++
					if buffer[position] != rune('o') {
						goto l210
					}
					position++
					{
						position211, tokenIndex211 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l212
						}
						position++
						if buffer[position] != rune('a') {
							goto l212
						}
						position++
						if buffer[position] != rune('r') {
							goto l212
						}
						position++
						goto l211
					l212:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('f') {
							goto l213
						}
						position++
						if buffer[position] != rune('o') {
							goto l213
						}
						position++
						goto l211
					l213:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('f') {
							goto l214
						}
						position++
						goto l211
					l214:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('s') {
							goto l215
						}
						position++
						if buffer[position] != rune('u') {
							goto l215
						}
						position++
						if buffer[position] != rune('b') {
							goto l215
						}
						position++
						if buffer[position] != rune('s') {
							goto l215
						}
						position++
						if buffer[position] != rune('p') {
							goto l215
						}
						position++
						goto l211
					l215:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('s') {
							goto l216
						}
						position++
						if buffer[position] != rune('s') {
							goto l216
						}
						position++
						if buffer[position] != rune('p') {
							goto l216
						}
						position++
						goto l211
					l216:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('s') {
							goto l217
						}
						position++
						if buffer[position] != rune('p') {
							goto l217
						}
						position++
						goto l211
					l217:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('m') {
							goto l218
						}
						position++
						if buffer[position] != rune('o') {
							goto l218
						}
						position++
						if buffer[position] != rune('r') {
							goto l218
						}
						position++
						if buffer[position] != rune('t') {
							goto l218
						}
						position++
						if buffer[position] != rune('h') {
							goto l218
						}
						position++
						goto l211
					l218:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('s') {
							goto l219
						}
						position++
						if buffer[position] != rune('u') {
							goto l219
						}
						position++
						if buffer[position] != rune('p') {
							goto l219
						}
						position++
						if buffer[position] != rune('s') {
							goto l219
						}
						position++
						if buffer[position] != rune('p') {
							goto l219
						}
						position++
						goto l211
					l219:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('s') {
							goto l210
						}
						position++
						if buffer[position] != rune('u') {
							goto l210
						}
						position++
					}
				l211:
					goto l209
				l210:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('n') {
						goto l207
					}
					position++
					if buffer[position] != rune('v') {
						goto l207
					}
					position++
					if buffer[position] != rune('a') {
						goto l207
					}
					position++
					if buffer[position] != rune('r') {
						goto l207
					}
					position++
				}
			l209:
				{
					position220, tokenIndex220 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l221
					}
					position++
					goto l220
				l221:
					position, tokenIndex = position220, tokenIndex220
					{
						position222, tokenIndex222 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l207
						}
						position, tokenIndex = position222, tokenIndex222
					}
				}
			l220:
				add(ruleRankNotho, position208)
			}
			return true
		l207:
			position, tokenIndex = position207, tokenIndex207
			return false
		},
		/* 36 RankOtherUncommon <- <(('*' / ('n' 'a' 't' 'i' 'o') / ('n' 'a' 't' '.') / ('n' 'a' 't') / ('f' '.' 's' 'p') / 'α' / ('β' 'β') / 'β' / 'γ' / 'δ' / 'ε' / 'φ' / 'θ' / 'μ' / ('a' '.') / ('b' '.') / ('c' '.') / ('d' '.') / ('e' '.') / ('g' '.') / ('k' '.') / ('m' 'u' 't' '.')) &SpaceCharEOI)> */
		func() bool {
			position223, tokenIndex223 := position, tokenIndex
			{
				position224 := position
				{
					position225, tokenIndex225 := position, tokenIndex
					if buffer[position] != rune('*') {
						goto l226
					}
					position++
					goto l225
				l226:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('n') {
						goto l227
					}
					position++
					if buffer[position] != rune('a') {
						goto l227
					}
					position++
					if buffer[position] != rune('t') {
						goto l227
					}
					position++
					if buffer[position] != rune('i') {
						goto l227
					}
					position++
					if buffer[position] != rune('o') {
						goto l227
					}
					position++
					goto l225
				l227:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('n') {
						goto l228
					}
					position++
					if buffer[position] != rune('a') {
						goto l228
					}
					position++
					if buffer[position] != rune('t') {
						goto l228
					}
					position++
					if buffer[position] != rune('.') {
						goto l228
					}
					position++
					goto l225
				l228:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('n') {
						goto l229
					}
					position++
					if buffer[position] != rune('a') {
						goto l229
					}
					position++
					if buffer[position] != rune('t') {
						goto l229
					}
					position++
					goto l225
				l229:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('f') {
						goto l230
					}
					position++
					if buffer[position] != rune('.') {
						goto l230
					}
					position++
					if buffer[position] != rune('s') {
						goto l230
					}
					position++
					if buffer[position] != rune('p') {
						goto l230
					}
					position++
					goto l225
				l230:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('α') {
						goto l231
					}
					position++
					goto l225
				l231:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('β') {
						goto l232
					}
					position++
					if buffer[position] != rune('β') {
						goto l232
					}
					position++
					goto l225
				l232:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('β') {
						goto l233
					}
					position++
					goto l225
				l233:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('γ') {
						goto l234
					}
					position++
					goto l225
				l234:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('δ') {
						goto l235
					}
					position++
					goto l225
				l235:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('ε') {
						goto l236
					}
					position++
					goto l225
				l236:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('φ') {
						goto l237
					}
					position++
					goto l225
				l237:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('θ') {
						goto l238
					}
					position++
					goto l225
				l238:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('μ') {
						goto l239
					}
					position++
					goto l225
				l239:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('a') {
						goto l240
					}
					position++
					if buffer[position] != rune('.') {
						goto l240
					}
					position++
					goto l225
				l240:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('b') {
						goto l241
					}
					position++
					if buffer[position] != rune('.') {
						goto l241
					}
					position++
					goto l225
				l241:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('c') {
						goto l242
					}
					position++
					if buffer[position] != rune('.') {
						goto l242
					}
					position++
					goto l225
				l242:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('d') {
						goto l243
					}
					position++
					if buffer[position] != rune('.') {
						goto l243
					}
					position++
					goto l225
				l243:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('e') {
						goto l244
					}
					position++
					if buffer[position] != rune('.') {
						goto l244
					}
					position++
					goto l225
				l244:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('g') {
						goto l245
					}
					position++
					if buffer[position] != rune('.') {
						goto l245
					}
					position++
					goto l225
				l245:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('k') {
						goto l246
					}
					position++
					if buffer[position] != rune('.') {
						goto l246
					}
					position++
					goto l225
				l246:
					position, tokenIndex = position225, tokenIndex225
					if buffer[position] != rune('m') {
						goto l223
					}
					position++
					if buffer[position] != rune('u') {
						goto l223
					}
					position++
					if buffer[position] != rune('t') {
						goto l223
					}
					position++
					if buffer[position] != rune('.') {
						goto l223
					}
					position++
				}
			l225:
				{
					position247, tokenIndex247 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l223
					}
					position, tokenIndex = position247, tokenIndex247
				}
				add(ruleRankOtherUncommon, position224)
			}
			return true
		l223:
			position, tokenIndex = position223, tokenIndex223
			return false
		},
		/* 37 RankOther <- <((('m' 'o' 'r' 'p' 'h') / ('c' 'o' 'n' 'v' 'a' 'r') / ('p' 's' 'e' 'u' 'd' 'o' 'v' 'a' 'r') / ('s' 'e' 'c' 't') / ('s' 'e' 'r') / ('s' 'u' 'b' 'v' 'a' 'r') / ('s' 'u' 'b' 'f') / ('r' 'a' 'c' 'e') / ('p' 'v') / ('p' 'a' 't' 'h' 'o' 'v' 'a' 'r') / ('a' 'b' '.' (_? ('n' '.'))?) / ('s' 't')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position248, tokenIndex248 := position, tokenIndex
			{
				position249 := position
				{
					position250, tokenIndex250 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l251
					}
					position++
					if buffer[position] != rune('o') {
						goto l251
					}
					position++
					if buffer[position] != rune('r') {
						goto l251
					}
					position++
					if buffer[position] != rune('p') {
						goto l251
					}
					position++
					if buffer[position] != rune('h') {
						goto l251
					}
					position++
					goto l250
				l251:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('c') {
						goto l252
					}
					position++
					if buffer[position] != rune('o') {
						goto l252
					}
					position++
					if buffer[position] != rune('n') {
						goto l252
					}
					position++
					if buffer[position] != rune('v') {
						goto l252
					}
					position++
					if buffer[position] != rune('a') {
						goto l252
					}
					position++
					if buffer[position] != rune('r') {
						goto l252
					}
					position++
					goto l250
				l252:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('p') {
						goto l253
					}
					position++
					if buffer[position] != rune('s') {
						goto l253
					}
					position++
					if buffer[position] != rune('e') {
						goto l253
					}
					position++
					if buffer[position] != rune('u') {
						goto l253
					}
					position++
					if buffer[position] != rune('d') {
						goto l253
					}
					position++
					if buffer[position] != rune('o') {
						goto l253
					}
					position++
					if buffer[position] != rune('v') {
						goto l253
					}
					position++
					if buffer[position] != rune('a') {
						goto l253
					}
					position++
					if buffer[position] != rune('r') {
						goto l253
					}
					position++
					goto l250
				l253:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('s') {
						goto l254
					}
					position++
					if buffer[position] != rune('e') {
						goto l254
					}
					position++
					if buffer[position] != rune('c') {
						goto l254
					}
					position++
					if buffer[position] != rune('t') {
						goto l254
					}
					position++
					goto l250
				l254:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('s') {
						goto l255
					}
					position++
					if buffer[position] != rune('e') {
						goto l255
					}
					position++
					if buffer[position] != rune('r') {
						goto l255
					}
					position++
					goto l250
				l255:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('s') {
						goto l256
					}
					position++
					if buffer[position] != rune('u') {
						goto l256
					}
					position++
					if buffer[position] != rune('b') {
						goto l256
					}
					position++
					if buffer[position] != rune('v') {
						goto l256
					}
					position++
					if buffer[position] != rune('a') {
						goto l256
					}
					position++
					if buffer[position] != rune('r') {
						goto l256
					}
					position++
					goto l250
				l256:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('s') {
						goto l257
					}
					position++
					if buffer[position] != rune('u') {
						goto l257
					}
					position++
					if buffer[position] != rune('b') {
						goto l257
					}
					position++
					if buffer[position] != rune('f') {
						goto l257
					}
					position++
					goto l250
				l257:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('r') {
						goto l258
					}
					position++
					if buffer[position] != rune('a') {
						goto l258
					}
					position++
					if buffer[position] != rune('c') {
						goto l258
					}
					position++
					if buffer[position] != rune('e') {
						goto l258
					}
					position++
					goto l250
				l258:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('p') {
						goto l259
					}
					position++
					if buffer[position] != rune('v') {
						goto l259
					}
					position++
					goto l250
				l259:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('p') {
						goto l260
					}
					position++
					if buffer[position] != rune('a') {
						goto l260
					}
					position++
					if buffer[position] != rune('t') {
						goto l260
					}
					position++
					if buffer[position] != rune('h') {
						goto l260
					}
					position++
					if buffer[position] != rune('o') {
						goto l260
					}
					position++
					if buffer[position] != rune('v') {
						goto l260
					}
					position++
					if buffer[position] != rune('a') {
						goto l260
					}
					position++
					if buffer[position] != rune('r') {
						goto l260
					}
					position++
					goto l250
				l260:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('a') {
						goto l261
					}
					position++
					if buffer[position] != rune('b') {
						goto l261
					}
					position++
					if buffer[position] != rune('.') {
						goto l261
					}
					position++
					{
						position262, tokenIndex262 := position, tokenIndex
						{
							position264, tokenIndex264 := position, tokenIndex
							if !_rules[rule_]() {
								goto l264
							}
							goto l265
						l264:
							position, tokenIndex = position264, tokenIndex264
						}
					l265:
						if buffer[position] != rune('n') {
							goto l262
						}
						position++
						if buffer[position] != rune('.') {
							goto l262
						}
						position++
						goto l263
					l262:
						position, tokenIndex = position262, tokenIndex262
					}
				l263:
					goto l250
				l261:
					position, tokenIndex = position250, tokenIndex250
					if buffer[position] != rune('s') {
						goto l248
					}
					position++
					if buffer[position] != rune('t') {
						goto l248
					}
					position++
				}
			l250:
				{
					position266, tokenIndex266 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l267
					}
					position++
					goto l266
				l267:
					position, tokenIndex = position266, tokenIndex266
					{
						position268, tokenIndex268 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l248
						}
						position, tokenIndex = position268, tokenIndex268
					}
				}
			l266:
				add(ruleRankOther, position249)
			}
			return true
		l248:
			position, tokenIndex = position248, tokenIndex248
			return false
		},
		/* 38 RankVar <- <((('v' 'a' 'r' 'i' 'e' 't' 'y') / ('[' 'v' 'a' 'r' '.' ']') / ('v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position269, tokenIndex269 := position, tokenIndex
			{
				position270 := position
				{
					position271, tokenIndex271 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l272
					}
					position++
					if buffer[position] != rune('a') {
						goto l272
					}
					position++
					if buffer[position] != rune('r') {
						goto l272
					}
					position++
					if buffer[position] != rune('i') {
						goto l272
					}
					position++
					if buffer[position] != rune('e') {
						goto l272
					}
					position++
					if buffer[position] != rune('t') {
						goto l272
					}
					position++
					if buffer[position] != rune('y') {
						goto l272
					}
					position++
					goto l271
				l272:
					position, tokenIndex = position271, tokenIndex271
					if buffer[position] != rune('[') {
						goto l273
					}
					position++
					if buffer[position] != rune('v') {
						goto l273
					}
					position++
					if buffer[position] != rune('a') {
						goto l273
					}
					position++
					if buffer[position] != rune('r') {
						goto l273
					}
					position++
					if buffer[position] != rune('.') {
						goto l273
					}
					position++
					if buffer[position] != rune(']') {
						goto l273
					}
					position++
					goto l271
				l273:
					position, tokenIndex = position271, tokenIndex271
					if buffer[position] != rune('v') {
						goto l269
					}
					position++
					if buffer[position] != rune('a') {
						goto l269
					}
					position++
					if buffer[position] != rune('r') {
						goto l269
					}
					position++
				}
			l271:
				{
					position274, tokenIndex274 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l275
					}
					position++
					goto l274
				l275:
					position, tokenIndex = position274, tokenIndex274
					{
						position276, tokenIndex276 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l269
						}
						position, tokenIndex = position276, tokenIndex276
					}
				}
			l274:
				add(ruleRankVar, position270)
			}
			return true
		l269:
			position, tokenIndex = position269, tokenIndex269
			return false
		},
		/* 39 RankForma <- <((('f' 'a') / ('f' 'o' 'r' 'm' 'a') / ('f' 'm' 'a') / ('f' 'm') / ('f' 'o' 'r' 'm') / ('f' 'o') / 'f') ('.' / &SpaceCharEOI))> */
		func() bool {
			position277, tokenIndex277 := position, tokenIndex
			{
				position278 := position
				{
					position279, tokenIndex279 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l280
					}
					position++
					if buffer[position] != rune('a') {
						goto l280
					}
					position++
					goto l279
				l280:
					position, tokenIndex = position279, tokenIndex279
					if buffer[position] != rune('f') {
						goto l281
					}
					position++
					if buffer[position] != rune('o') {
						goto l281
					}
					position++
					if buffer[position] != rune('r') {
						goto l281
					}
					position++
					if buffer[position] != rune('m') {
						goto l281
					}
					position++
					if buffer[position] != rune('a') {
						goto l281
					}
					position++
					goto l279
				l281:
					position, tokenIndex = position279, tokenIndex279
					if buffer[position] != rune('f') {
						goto l282
					}
					position++
					if buffer[position] != rune('m') {
						goto l282
					}
					position++
					if buffer[position] != rune('a') {
						goto l282
					}
					position++
					goto l279
				l282:
					position, tokenIndex = position279, tokenIndex279
					if buffer[position] != rune('f') {
						goto l283
					}
					position++
					if buffer[position] != rune('m') {
						goto l283
					}
					position++
					goto l279
				l283:
					position, tokenIndex = position279, tokenIndex279
					if buffer[position] != rune('f') {
						goto l284
					}
					position++
					if buffer[position] != rune('o') {
						goto l284
					}
					position++
					if buffer[position] != rune('r') {
						goto l284
					}
					position++
					if buffer[position] != rune('m') {
						goto l284
					}
					position++
					goto l279
				l284:
					position, tokenIndex = position279, tokenIndex279
					if buffer[position] != rune('f') {
						goto l285
					}
					position++
					if buffer[position] != rune('o') {
						goto l285
					}
					position++
					goto l279
				l285:
					position, tokenIndex = position279, tokenIndex279
					if buffer[position] != rune('f') {
						goto l277
					}
					position++
				}
			l279:
				{
					position286, tokenIndex286 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l287
					}
					position++
					goto l286
				l287:
					position, tokenIndex = position286, tokenIndex286
					{
						position288, tokenIndex288 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l277
						}
						position, tokenIndex = position288, tokenIndex288
					}
				}
			l286:
				add(ruleRankForma, position278)
			}
			return true
		l277:
			position, tokenIndex = position277, tokenIndex277
			return false
		},
		/* 40 RankSsp <- <((('s' 's' 'p') / ('s' 'u' 'b' 's' 'p' 'e' 'c') / ('s' 'u' 'b' 's' 'p')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position289, tokenIndex289 := position, tokenIndex
			{
				position290 := position
				{
					position291, tokenIndex291 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l292
					}
					position++
					if buffer[position] != rune('s') {
						goto l292
					}
					position++
					if buffer[position] != rune('p') {
						goto l292
					}
					position++
					goto l291
				l292:
					position, tokenIndex = position291, tokenIndex291
					if buffer[position] != rune('s') {
						goto l293
					}
					position++
					if buffer[position] != rune('u') {
						goto l293
					}
					position++
					if buffer[position] != rune('b') {
						goto l293
					}
					position++
					if buffer[position] != rune('s') {
						goto l293
					}
					position++
					if buffer[position] != rune('p') {
						goto l293
					}
					position++
					if buffer[position] != rune('e') {
						goto l293
					}
					position++
					if buffer[position] != rune('c') {
						goto l293
					}
					position++
					goto l291
				l293:
					position, tokenIndex = position291, tokenIndex291
					if buffer[position] != rune('s') {
						goto l289
					}
					position++
					if buffer[position] != rune('u') {
						goto l289
					}
					position++
					if buffer[position] != rune('b') {
						goto l289
					}
					position++
					if buffer[position] != rune('s') {
						goto l289
					}
					position++
					if buffer[position] != rune('p') {
						goto l289
					}
					position++
				}
			l291:
				{
					position294, tokenIndex294 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l295
					}
					position++
					goto l294
				l295:
					position, tokenIndex = position294, tokenIndex294
					{
						position296, tokenIndex296 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l289
						}
						position, tokenIndex = position296, tokenIndex296
					}
				}
			l294:
				add(ruleRankSsp, position290)
			}
			return true
		l289:
			position, tokenIndex = position289, tokenIndex289
			return false
		},
		/* 41 RankAgamo <- <((('a' 'g' 'a' 'm' 'o' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 's' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position297, tokenIndex297 := position, tokenIndex
			{
				position298 := position
				{
					position299, tokenIndex299 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l300
					}
					position++
					if buffer[position] != rune('g') {
						goto l300
					}
					position++
					if buffer[position] != rune('a') {
						goto l300
					}
					position++
					if buffer[position] != rune('m') {
						goto l300
					}
					position++
					if buffer[position] != rune('o') {
						goto l300
					}
					position++
					if buffer[position] != rune('s') {
						goto l300
					}
					position++
					if buffer[position] != rune('p') {
						goto l300
					}
					position++
					goto l299
				l300:
					position, tokenIndex = position299, tokenIndex299
					if buffer[position] != rune('a') {
						goto l301
					}
					position++
					if buffer[position] != rune('g') {
						goto l301
					}
					position++
					if buffer[position] != rune('a') {
						goto l301
					}
					position++
					if buffer[position] != rune('m') {
						goto l301
					}
					position++
					if buffer[position] != rune('o') {
						goto l301
					}
					position++
					if buffer[position] != rune('s') {
						goto l301
					}
					position++
					if buffer[position] != rune('s') {
						goto l301
					}
					position++
					if buffer[position] != rune('p') {
						goto l301
					}
					position++
					goto l299
				l301:
					position, tokenIndex = position299, tokenIndex299
					if buffer[position] != rune('a') {
						goto l297
					}
					position++
					if buffer[position] != rune('g') {
						goto l297
					}
					position++
					if buffer[position] != rune('a') {
						goto l297
					}
					position++
					if buffer[position] != rune('m') {
						goto l297
					}
					position++
					if buffer[position] != rune('o') {
						goto l297
					}
					position++
					if buffer[position] != rune('v') {
						goto l297
					}
					position++
					if buffer[position] != rune('a') {
						goto l297
					}
					position++
					if buffer[position] != rune('r') {
						goto l297
					}
					position++
				}
			l299:
				{
					position302, tokenIndex302 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l303
					}
					position++
					goto l302
				l303:
					position, tokenIndex = position302, tokenIndex302
					{
						position304, tokenIndex304 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l297
						}
						position, tokenIndex = position304, tokenIndex304
					}
				}
			l302:
				add(ruleRankAgamo, position298)
			}
			return true
		l297:
			position, tokenIndex = position297, tokenIndex297
			return false
		},
		/* 42 SubgenusOrSuperspecies <- <('(' _? NameLowerChar+ _? ')')> */
		func() bool {
			position305, tokenIndex305 := position, tokenIndex
			{
				position306 := position
				if buffer[position] != rune('(') {
					goto l305
				}
				position++
				{
					position307, tokenIndex307 := position, tokenIndex
					if !_rules[rule_]() {
						goto l307
					}
					goto l308
				l307:
					position, tokenIndex = position307, tokenIndex307
				}
			l308:
				if !_rules[ruleNameLowerChar]() {
					goto l305
				}
			l309:
				{
					position310, tokenIndex310 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l310
					}
					goto l309
				l310:
					position, tokenIndex = position310, tokenIndex310
				}
				{
					position311, tokenIndex311 := position, tokenIndex
					if !_rules[rule_]() {
						goto l311
					}
					goto l312
				l311:
					position, tokenIndex = position311, tokenIndex311
				}
			l312:
				if buffer[position] != rune(')') {
					goto l305
				}
				position++
				add(ruleSubgenusOrSuperspecies, position306)
			}
			return true
		l305:
			position, tokenIndex = position305, tokenIndex305
			return false
		},
		/* 43 Subgenus <- <(Subgenus2 / Subgenus1)> */
		func() bool {
			position313, tokenIndex313 := position, tokenIndex
			{
				position314 := position
				{
					position315, tokenIndex315 := position, tokenIndex
					if !_rules[ruleSubgenus2]() {
						goto l316
					}
					goto l315
				l316:
					position, tokenIndex = position315, tokenIndex315
					if !_rules[ruleSubgenus1]() {
						goto l313
					}
				}
			l315:
				add(ruleSubgenus, position314)
			}
			return true
		l313:
			position, tokenIndex = position313, tokenIndex313
			return false
		},
		/* 44 Subgenus2 <- <('(' _? AbbrSubgenus _? ')' !(_? NameUpperChar))> */
		func() bool {
			position317, tokenIndex317 := position, tokenIndex
			{
				position318 := position
				if buffer[position] != rune('(') {
					goto l317
				}
				position++
				{
					position319, tokenIndex319 := position, tokenIndex
					if !_rules[rule_]() {
						goto l319
					}
					goto l320
				l319:
					position, tokenIndex = position319, tokenIndex319
				}
			l320:
				if !_rules[ruleAbbrSubgenus]() {
					goto l317
				}
				{
					position321, tokenIndex321 := position, tokenIndex
					if !_rules[rule_]() {
						goto l321
					}
					goto l322
				l321:
					position, tokenIndex = position321, tokenIndex321
				}
			l322:
				if buffer[position] != rune(')') {
					goto l317
				}
				position++
				{
					position323, tokenIndex323 := position, tokenIndex
					{
						position324, tokenIndex324 := position, tokenIndex
						if !_rules[rule_]() {
							goto l324
						}
						goto l325
					l324:
						position, tokenIndex = position324, tokenIndex324
					}
				l325:
					if !_rules[ruleNameUpperChar]() {
						goto l323
					}
					goto l317
				l323:
					position, tokenIndex = position323, tokenIndex323
				}
				add(ruleSubgenus2, position318)
			}
			return true
		l317:
			position, tokenIndex = position317, tokenIndex317
			return false
		},
		/* 45 Subgenus1 <- <('(' _? UninomialWord _? ')')> */
		func() bool {
			position326, tokenIndex326 := position, tokenIndex
			{
				position327 := position
				if buffer[position] != rune('(') {
					goto l326
				}
				position++
				{
					position328, tokenIndex328 := position, tokenIndex
					if !_rules[rule_]() {
						goto l328
					}
					goto l329
				l328:
					position, tokenIndex = position328, tokenIndex328
				}
			l329:
				if !_rules[ruleUninomialWord]() {
					goto l326
				}
				{
					position330, tokenIndex330 := position, tokenIndex
					if !_rules[rule_]() {
						goto l330
					}
					goto l331
				l330:
					position, tokenIndex = position330, tokenIndex330
				}
			l331:
				if buffer[position] != rune(')') {
					goto l326
				}
				position++
				add(ruleSubgenus1, position327)
			}
			return true
		l326:
			position, tokenIndex = position326, tokenIndex326
			return false
		},
		/* 46 UninomialCombo <- <(UninomialCombo1 / UninomialCombo2)> */
		func() bool {
			position332, tokenIndex332 := position, tokenIndex
			{
				position333 := position
				{
					position334, tokenIndex334 := position, tokenIndex
					if !_rules[ruleUninomialCombo1]() {
						goto l335
					}
					goto l334
				l335:
					position, tokenIndex = position334, tokenIndex334
					if !_rules[ruleUninomialCombo2]() {
						goto l332
					}
				}
			l334:
				add(ruleUninomialCombo, position333)
			}
			return true
		l332:
			position, tokenIndex = position332, tokenIndex332
			return false
		},
		/* 47 UninomialCombo1 <- <(UninomialWord _? Subgenus (_? Authorship)?)> */
		func() bool {
			position336, tokenIndex336 := position, tokenIndex
			{
				position337 := position
				if !_rules[ruleUninomialWord]() {
					goto l336
				}
				{
					position338, tokenIndex338 := position, tokenIndex
					if !_rules[rule_]() {
						goto l338
					}
					goto l339
				l338:
					position, tokenIndex = position338, tokenIndex338
				}
			l339:
				if !_rules[ruleSubgenus]() {
					goto l336
				}
				{
					position340, tokenIndex340 := position, tokenIndex
					{
						position342, tokenIndex342 := position, tokenIndex
						if !_rules[rule_]() {
							goto l342
						}
						goto l343
					l342:
						position, tokenIndex = position342, tokenIndex342
					}
				l343:
					if !_rules[ruleAuthorship]() {
						goto l340
					}
					goto l341
				l340:
					position, tokenIndex = position340, tokenIndex340
				}
			l341:
				add(ruleUninomialCombo1, position337)
			}
			return true
		l336:
			position, tokenIndex = position336, tokenIndex336
			return false
		},
		/* 48 UninomialCombo2 <- <(Uninomial _ RankUninomial _ Uninomial)> */
		func() bool {
			position344, tokenIndex344 := position, tokenIndex
			{
				position345 := position
				if !_rules[ruleUninomial]() {
					goto l344
				}
				if !_rules[rule_]() {
					goto l344
				}
				if !_rules[ruleRankUninomial]() {
					goto l344
				}
				if !_rules[rule_]() {
					goto l344
				}
				if !_rules[ruleUninomial]() {
					goto l344
				}
				add(ruleUninomialCombo2, position345)
			}
			return true
		l344:
			position, tokenIndex = position344, tokenIndex344
			return false
		},
		/* 49 RankUninomial <- <(RankUninomialPlain / RankUninomialNotho)> */
		func() bool {
			position346, tokenIndex346 := position, tokenIndex
			{
				position347 := position
				{
					position348, tokenIndex348 := position, tokenIndex
					if !_rules[ruleRankUninomialPlain]() {
						goto l349
					}
					goto l348
				l349:
					position, tokenIndex = position348, tokenIndex348
					if !_rules[ruleRankUninomialNotho]() {
						goto l346
					}
				}
			l348:
				add(ruleRankUninomial, position347)
			}
			return true
		l346:
			position, tokenIndex = position346, tokenIndex346
			return false
		},
		/* 50 RankUninomialPlain <- <((('s' 'e' 'c' 't') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('t' 'r' 'i' 'b') / ('t' 'r') / ('s' 'u' 'b' 't' 'r' 'i' 'b') / ('s' 'u' 'b' 't' 'r') / ('s' 'u' 'b' 's' 'e' 'r') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('f' 'a' 'm') / ('s' 'u' 'b' 'f' 'a' 'm') / ('d' 'i' 'v') / ('s' 'u' 'p' 'e' 'r' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position350, tokenIndex350 := position, tokenIndex
			{
				position351 := position
				{
					position352, tokenIndex352 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l353
					}
					position++
					if buffer[position] != rune('e') {
						goto l353
					}
					position++
					if buffer[position] != rune('c') {
						goto l353
					}
					position++
					if buffer[position] != rune('t') {
						goto l353
					}
					position++
					goto l352
				l353:
					position, tokenIndex = position352, tokenIndex352
					if buffer[position] != rune('s') {
						goto l354
					}
					position++
					if buffer[position] != rune('u') {
						goto l354
					}
					position++
					if buffer[position] != rune('b') {
						goto l354
					}
					position++
					if buffer[position] != rune('s') {
						goto l354
					}
					position++
					if buffer[position] != rune('e') {
						goto l354
					}
					position++
					if buffer[position] != rune('c') {
						goto l354
					}
					position++
					if buffer[position] != rune('t') {
						goto l354
					}
					position++
					goto l352
				l354:
					position, tokenIndex = position352, tokenIndex352
					if buffer[position] != rune('t') {
						goto l355
					}
					position++
					if buffer[position] != rune('r') {
						goto l355
					}
					position++
					if buffer[position] != rune('i') {
						goto l355
					}
					position++
					if buffer[position] != rune('b') {
						goto l355
					}
					position++
					goto l352
				l355:
					position, tokenIndex = position352, tokenIndex352
					if buffer[position] != rune('t') {
						goto l356
					}
					position++
					if buffer[position] != rune('r') {
						goto l356
					}
					position++
					goto l352
				l356:
					position, tokenIndex = position352, tokenIndex352
					if buffer[position] != rune('s') {
						goto l357
					}
					position++
					if buffer[position] != rune('u') {
						goto l357
					}
					position++
					if buffer[position] != rune('b') {
						goto l357
					}
					position++
					if buffer[position] != rune('t') {
						goto l357
					}
					position++
					if buffer[position] != rune('r') {
						goto l357
					}
					position++
					if buffer[position] != rune('i') {
						goto l357
					}
					position++
					if buffer[position] != rune('b') {
						goto l357
					}
					position++
					goto l352
				l357:
					position, tokenIndex = position352, tokenIndex352
					if buffer[position] != rune('s') {
						goto l358
					}
					position++
					if buffer[position] != rune('u') {
						goto l358
					}
					position++
					if buffer[position] != rune('b') {
						goto l358
					}
					position++
					if buffer[position] != rune('t') {
						goto l358
					}
					position++
					if buffer[position] != rune('r') {
						goto l358
					}
					position++
					goto l352
				l358:
					position, tokenIndex = position352, tokenIndex352
					if buffer[position] != rune('s') {
						goto l359
					}
					position++
					if buffer[position] != rune('u') {
						goto l359
					}
					position++
					if buffer[position] != rune('b') {
						goto l359
					}
					position++
					if buffer[position] != rune('s') {
						goto l359
					}
					position++
					if buffer[position] != rune('e') {
						goto l359
					}
					position++
					if buffer[position] != rune('r') {
						goto l359
					}
					position++
					goto l352
				l359:
					position, tokenIndex = position352, tokenIndex352
					if buffer[position] != rune('s') {
						goto l360
					}
					position++
					if buffer[position] != rune('e') {
						goto l360
					}
					position++
					if buffer[position] != rune('r') {
						goto l360
					}
					position++
					goto l352
				l360:
					position, tokenIndex = position352, tokenIndex352
					if buffer[position] != rune('s') {
						goto l361
					}
					position++
					if buffer[position] != rune('u') {
						goto l361
					}
					position++
					if buffer[position] != rune('b') {
						goto l361
					}
					position++
					if buffer[position] != rune('g') {
						goto l361
					}
					position++
					if buffer[position] != rune('e') {
						goto l361
					}
					position++
					if buffer[position] != rune('n') {
						goto l361
					}
					position++
					goto l352
				l361:
					position, tokenIndex = position352, tokenIndex352
					if buffer[position] != rune('s') {
						goto l362
					}
					position++
					if buffer[position] != rune('u') {
						goto l362
					}
					position++
					if buffer[position] != rune('b') {
						goto l362
					}
					position++
					if buffer[position] != rune('g') {
						goto l362
					}
					position++
					goto l352
				l362:
					position, tokenIndex = position352, tokenIndex352
					if buffer[position] != rune('f') {
						goto l363
					}
					position++
					if buffer[position] != rune('a') {
						goto l363
					}
					position++
					if buffer[position] != rune('m') {
						goto l363
					}
					position++
					goto l352
				l363:
					position, tokenIndex = position352, tokenIndex352
					if buffer[position] != rune('s') {
						goto l364
					}
					position++
					if buffer[position] != rune('u') {
						goto l364
					}
					position++
					if buffer[position] != rune('b') {
						goto l364
					}
					position++
					if buffer[position] != rune('f') {
						goto l364
					}
					position++
					if buffer[position] != rune('a') {
						goto l364
					}
					position++
					if buffer[position] != rune('m') {
						goto l364
					}
					position++
					goto l352
				l364:
					position, tokenIndex = position352, tokenIndex352
					if buffer[position] != rune('d') {
						goto l365
					}
					position++
					if buffer[position] != rune('i') {
						goto l365
					}
					position++
					if buffer[position] != rune('v') {
						goto l365
					}
					position++
					goto l352
				l365:
					position, tokenIndex = position352, tokenIndex352
					if buffer[position] != rune('s') {
						goto l350
					}
					position++
					if buffer[position] != rune('u') {
						goto l350
					}
					position++
					if buffer[position] != rune('p') {
						goto l350
					}
					position++
					if buffer[position] != rune('e') {
						goto l350
					}
					position++
					if buffer[position] != rune('r') {
						goto l350
					}
					position++
					if buffer[position] != rune('t') {
						goto l350
					}
					position++
					if buffer[position] != rune('r') {
						goto l350
					}
					position++
					if buffer[position] != rune('i') {
						goto l350
					}
					position++
					if buffer[position] != rune('b') {
						goto l350
					}
					position++
				}
			l352:
				{
					position366, tokenIndex366 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l367
					}
					position++
					goto l366
				l367:
					position, tokenIndex = position366, tokenIndex366
					{
						position368, tokenIndex368 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l350
						}
						position, tokenIndex = position368, tokenIndex368
					}
				}
			l366:
				add(ruleRankUninomialPlain, position351)
			}
			return true
		l350:
			position, tokenIndex = position350, tokenIndex350
			return false
		},
		/* 51 RankUninomialNotho <- <('n' 'o' 't' 'h' 'o' _? (('s' 'e' 'c' 't') / ('g' 'e' 'n') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'e' 'n') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('s' 'u' 'b' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position369, tokenIndex369 := position, tokenIndex
			{
				position370 := position
				if buffer[position] != rune('n') {
					goto l369
				}
				position++
				if buffer[position] != rune('o') {
					goto l369
				}
				position++
				if buffer[position] != rune('t') {
					goto l369
				}
				position++
				if buffer[position] != rune('h') {
					goto l369
				}
				position++
				if buffer[position] != rune('o') {
					goto l369
				}
				position++
				{
					position371, tokenIndex371 := position, tokenIndex
					if !_rules[rule_]() {
						goto l371
					}
					goto l372
				l371:
					position, tokenIndex = position371, tokenIndex371
				}
			l372:
				{
					position373, tokenIndex373 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l374
					}
					position++
					if buffer[position] != rune('e') {
						goto l374
					}
					position++
					if buffer[position] != rune('c') {
						goto l374
					}
					position++
					if buffer[position] != rune('t') {
						goto l374
					}
					position++
					goto l373
				l374:
					position, tokenIndex = position373, tokenIndex373
					if buffer[position] != rune('g') {
						goto l375
					}
					position++
					if buffer[position] != rune('e') {
						goto l375
					}
					position++
					if buffer[position] != rune('n') {
						goto l375
					}
					position++
					goto l373
				l375:
					position, tokenIndex = position373, tokenIndex373
					if buffer[position] != rune('s') {
						goto l376
					}
					position++
					if buffer[position] != rune('e') {
						goto l376
					}
					position++
					if buffer[position] != rune('r') {
						goto l376
					}
					position++
					goto l373
				l376:
					position, tokenIndex = position373, tokenIndex373
					if buffer[position] != rune('s') {
						goto l377
					}
					position++
					if buffer[position] != rune('u') {
						goto l377
					}
					position++
					if buffer[position] != rune('b') {
						goto l377
					}
					position++
					if buffer[position] != rune('g') {
						goto l377
					}
					position++
					if buffer[position] != rune('e') {
						goto l377
					}
					position++
					if buffer[position] != rune('e') {
						goto l377
					}
					position++
					if buffer[position] != rune('n') {
						goto l377
					}
					position++
					goto l373
				l377:
					position, tokenIndex = position373, tokenIndex373
					if buffer[position] != rune('s') {
						goto l378
					}
					position++
					if buffer[position] != rune('u') {
						goto l378
					}
					position++
					if buffer[position] != rune('b') {
						goto l378
					}
					position++
					if buffer[position] != rune('g') {
						goto l378
					}
					position++
					if buffer[position] != rune('e') {
						goto l378
					}
					position++
					if buffer[position] != rune('n') {
						goto l378
					}
					position++
					goto l373
				l378:
					position, tokenIndex = position373, tokenIndex373
					if buffer[position] != rune('s') {
						goto l379
					}
					position++
					if buffer[position] != rune('u') {
						goto l379
					}
					position++
					if buffer[position] != rune('b') {
						goto l379
					}
					position++
					if buffer[position] != rune('g') {
						goto l379
					}
					position++
					goto l373
				l379:
					position, tokenIndex = position373, tokenIndex373
					if buffer[position] != rune('s') {
						goto l380
					}
					position++
					if buffer[position] != rune('u') {
						goto l380
					}
					position++
					if buffer[position] != rune('b') {
						goto l380
					}
					position++
					if buffer[position] != rune('s') {
						goto l380
					}
					position++
					if buffer[position] != rune('e') {
						goto l380
					}
					position++
					if buffer[position] != rune('c') {
						goto l380
					}
					position++
					if buffer[position] != rune('t') {
						goto l380
					}
					position++
					goto l373
				l380:
					position, tokenIndex = position373, tokenIndex373
					if buffer[position] != rune('s') {
						goto l369
					}
					position++
					if buffer[position] != rune('u') {
						goto l369
					}
					position++
					if buffer[position] != rune('b') {
						goto l369
					}
					position++
					if buffer[position] != rune('t') {
						goto l369
					}
					position++
					if buffer[position] != rune('r') {
						goto l369
					}
					position++
					if buffer[position] != rune('i') {
						goto l369
					}
					position++
					if buffer[position] != rune('b') {
						goto l369
					}
					position++
				}
			l373:
				{
					position381, tokenIndex381 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l382
					}
					position++
					goto l381
				l382:
					position, tokenIndex = position381, tokenIndex381
					{
						position383, tokenIndex383 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l369
						}
						position, tokenIndex = position383, tokenIndex383
					}
				}
			l381:
				add(ruleRankUninomialNotho, position370)
			}
			return true
		l369:
			position, tokenIndex = position369, tokenIndex369
			return false
		},
		/* 52 Uninomial <- <(UninomialWord (_ Authorship !(_ LowerCharExtended LowerCharExtended LowerCharExtended))?)> */
		func() bool {
			position384, tokenIndex384 := position, tokenIndex
			{
				position385 := position
				if !_rules[ruleUninomialWord]() {
					goto l384
				}
				{
					position386, tokenIndex386 := position, tokenIndex
					if !_rules[rule_]() {
						goto l386
					}
					if !_rules[ruleAuthorship]() {
						goto l386
					}
					{
						position388, tokenIndex388 := position, tokenIndex
						if !_rules[rule_]() {
							goto l388
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l388
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l388
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l388
						}
						goto l386
					l388:
						position, tokenIndex = position388, tokenIndex388
					}
					goto l387
				l386:
					position, tokenIndex = position386, tokenIndex386
				}
			l387:
				add(ruleUninomial, position385)
			}
			return true
		l384:
			position, tokenIndex = position384, tokenIndex384
			return false
		},
		/* 53 UninomialWord <- <(CapWord / TwoLetterGenus)> */
		func() bool {
			position389, tokenIndex389 := position, tokenIndex
			{
				position390 := position
				{
					position391, tokenIndex391 := position, tokenIndex
					if !_rules[ruleCapWord]() {
						goto l392
					}
					goto l391
				l392:
					position, tokenIndex = position391, tokenIndex391
					if !_rules[ruleTwoLetterGenus]() {
						goto l389
					}
				}
			l391:
				add(ruleUninomialWord, position390)
			}
			return true
		l389:
			position, tokenIndex = position389, tokenIndex389
			return false
		},
		/* 54 AbbrSubgenus <- <(UpperChar LowerChar* '.')> */
		func() bool {
			position393, tokenIndex393 := position, tokenIndex
			{
				position394 := position
				if !_rules[ruleUpperChar]() {
					goto l393
				}
			l395:
				{
					position396, tokenIndex396 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l396
					}
					goto l395
				l396:
					position, tokenIndex = position396, tokenIndex396
				}
				if buffer[position] != rune('.') {
					goto l393
				}
				position++
				add(ruleAbbrSubgenus, position394)
			}
			return true
		l393:
			position, tokenIndex = position393, tokenIndex393
			return false
		},
		/* 55 AbbrGenus <- <(UpperChar LowerChar? '.')> */
		func() bool {
			position397, tokenIndex397 := position, tokenIndex
			{
				position398 := position
				if !_rules[ruleUpperChar]() {
					goto l397
				}
				{
					position399, tokenIndex399 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l399
					}
					goto l400
				l399:
					position, tokenIndex = position399, tokenIndex399
				}
			l400:
				if buffer[position] != rune('.') {
					goto l397
				}
				position++
				add(ruleAbbrGenus, position398)
			}
			return true
		l397:
			position, tokenIndex = position397, tokenIndex397
			return false
		},
		/* 56 CapWord <- <(CapWordWithDash / CapWord1)> */
		func() bool {
			position401, tokenIndex401 := position, tokenIndex
			{
				position402 := position
				{
					position403, tokenIndex403 := position, tokenIndex
					if !_rules[ruleCapWordWithDash]() {
						goto l404
					}
					goto l403
				l404:
					position, tokenIndex = position403, tokenIndex403
					if !_rules[ruleCapWord1]() {
						goto l401
					}
				}
			l403:
				add(ruleCapWord, position402)
			}
			return true
		l401:
			position, tokenIndex = position401, tokenIndex401
			return false
		},
		/* 57 CapWord1 <- <(NameUpperChar NameLowerChar NameLowerChar+ '?'?)> */
		func() bool {
			position405, tokenIndex405 := position, tokenIndex
			{
				position406 := position
				if !_rules[ruleNameUpperChar]() {
					goto l405
				}
				if !_rules[ruleNameLowerChar]() {
					goto l405
				}
				if !_rules[ruleNameLowerChar]() {
					goto l405
				}
			l407:
				{
					position408, tokenIndex408 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l408
					}
					goto l407
				l408:
					position, tokenIndex = position408, tokenIndex408
				}
				{
					position409, tokenIndex409 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l409
					}
					position++
					goto l410
				l409:
					position, tokenIndex = position409, tokenIndex409
				}
			l410:
				add(ruleCapWord1, position406)
			}
			return true
		l405:
			position, tokenIndex = position405, tokenIndex405
			return false
		},
		/* 58 CapWordWithDash <- <((CapWord1 / TwoLetterGenusDashedSegment) Dash WordAfterDash (Dash WordAfterDash)?)> */
		func() bool {
			position411, tokenIndex411 := position, tokenIndex
			{
				position412 := position
				{
					position413, tokenIndex413 := position, tokenIndex
					if !_rules[ruleCapWord1]() {
						goto l414
					}
					goto l413
				l414:
					position, tokenIndex = position413, tokenIndex413
					if !_rules[ruleTwoLetterGenusDashedSegment]() {
						goto l411
					}
				}
			l413:
				if !_rules[ruleDash]() {
					goto l411
				}
				if !_rules[ruleWordAfterDash]() {
					goto l411
				}
				{
					position415, tokenIndex415 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l415
					}
					if !_rules[ruleWordAfterDash]() {
						goto l415
					}
					goto l416
				l415:
					position, tokenIndex = position415, tokenIndex415
				}
			l416:
				add(ruleCapWordWithDash, position412)
			}
			return true
		l411:
			position, tokenIndex = position411, tokenIndex411
			return false
		},
		/* 59 TwoLetterGenusDashedSegment <- <(('D' 'e') / ('E' 'u') / ('L' 'e') / ('N' 'e'))> */
		func() bool {
			position417, tokenIndex417 := position, tokenIndex
			{
				position418 := position
				{
					position419, tokenIndex419 := position, tokenIndex
					if buffer[position] != rune('D') {
						goto l420
					}
					position++
					if buffer[position] != rune('e') {
						goto l420
					}
					position++
					goto l419
				l420:
					position, tokenIndex = position419, tokenIndex419
					if buffer[position] != rune('E') {
						goto l421
					}
					position++
					if buffer[position] != rune('u') {
						goto l421
					}
					position++
					goto l419
				l421:
					position, tokenIndex = position419, tokenIndex419
					if buffer[position] != rune('L') {
						goto l422
					}
					position++
					if buffer[position] != rune('e') {
						goto l422
					}
					position++
					goto l419
				l422:
					position, tokenIndex = position419, tokenIndex419
					if buffer[position] != rune('N') {
						goto l417
					}
					position++
					if buffer[position] != rune('e') {
						goto l417
					}
					position++
				}
			l419:
				add(ruleTwoLetterGenusDashedSegment, position418)
			}
			return true
		l417:
			position, tokenIndex = position417, tokenIndex417
			return false
		},
		/* 60 WordAfterDash <- <(UpperAfterDash / LowerAfterDash)> */
		func() bool {
			position423, tokenIndex423 := position, tokenIndex
			{
				position424 := position
				{
					position425, tokenIndex425 := position, tokenIndex
					if !_rules[ruleUpperAfterDash]() {
						goto l426
					}
					goto l425
				l426:
					position, tokenIndex = position425, tokenIndex425
					if !_rules[ruleLowerAfterDash]() {
						goto l423
					}
				}
			l425:
				add(ruleWordAfterDash, position424)
			}
			return true
		l423:
			position, tokenIndex = position423, tokenIndex423
			return false
		},
		/* 61 UpperAfterDash <- <CapWord1> */
		func() bool {
			position427, tokenIndex427 := position, tokenIndex
			{
				position428 := position
				if !_rules[ruleCapWord1]() {
					goto l427
				}
				add(ruleUpperAfterDash, position428)
			}
			return true
		l427:
			position, tokenIndex = position427, tokenIndex427
			return false
		},
		/* 62 LowerAfterDash <- <Word1> */
		func() bool {
			position429, tokenIndex429 := position, tokenIndex
			{
				position430 := position
				if !_rules[ruleWord1]() {
					goto l429
				}
				add(ruleLowerAfterDash, position430)
			}
			return true
		l429:
			position, tokenIndex = position429, tokenIndex429
			return false
		},
		/* 63 TwoLetterGenus <- <(('C' 'a') / ('D' 'o') / ('E' 'a') / ('G' 'e') / ('I' 'a') / ('I' 'o') / ('I' 'x') / ('L' 'o') / ('O' 'a') / ('O' 'o') / ('N' 'u') / ('R' 'a') / ('T' 'y') / ('U' 'a') / ('A' 'a') / ('J' 'a') / ('Z' 'u') / ('L' 'a') / ('Q' 'u') / ('A' 's') / ('B' 'a'))> */
		func() bool {
			position431, tokenIndex431 := position, tokenIndex
			{
				position432 := position
				{
					position433, tokenIndex433 := position, tokenIndex
					if buffer[position] != rune('C') {
						goto l434
					}
					position++
					if buffer[position] != rune('a') {
						goto l434
					}
					position++
					goto l433
				l434:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('D') {
						goto l435
					}
					position++
					if buffer[position] != rune('o') {
						goto l435
					}
					position++
					goto l433
				l435:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('E') {
						goto l436
					}
					position++
					if buffer[position] != rune('a') {
						goto l436
					}
					position++
					goto l433
				l436:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('G') {
						goto l437
					}
					position++
					if buffer[position] != rune('e') {
						goto l437
					}
					position++
					goto l433
				l437:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('I') {
						goto l438
					}
					position++
					if buffer[position] != rune('a') {
						goto l438
					}
					position++
					goto l433
				l438:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('I') {
						goto l439
					}
					position++
					if buffer[position] != rune('o') {
						goto l439
					}
					position++
					goto l433
				l439:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('I') {
						goto l440
					}
					position++
					if buffer[position] != rune('x') {
						goto l440
					}
					position++
					goto l433
				l440:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('L') {
						goto l441
					}
					position++
					if buffer[position] != rune('o') {
						goto l441
					}
					position++
					goto l433
				l441:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('O') {
						goto l442
					}
					position++
					if buffer[position] != rune('a') {
						goto l442
					}
					position++
					goto l433
				l442:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('O') {
						goto l443
					}
					position++
					if buffer[position] != rune('o') {
						goto l443
					}
					position++
					goto l433
				l443:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('N') {
						goto l444
					}
					position++
					if buffer[position] != rune('u') {
						goto l444
					}
					position++
					goto l433
				l444:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('R') {
						goto l445
					}
					position++
					if buffer[position] != rune('a') {
						goto l445
					}
					position++
					goto l433
				l445:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('T') {
						goto l446
					}
					position++
					if buffer[position] != rune('y') {
						goto l446
					}
					position++
					goto l433
				l446:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('U') {
						goto l447
					}
					position++
					if buffer[position] != rune('a') {
						goto l447
					}
					position++
					goto l433
				l447:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('A') {
						goto l448
					}
					position++
					if buffer[position] != rune('a') {
						goto l448
					}
					position++
					goto l433
				l448:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('J') {
						goto l449
					}
					position++
					if buffer[position] != rune('a') {
						goto l449
					}
					position++
					goto l433
				l449:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('Z') {
						goto l450
					}
					position++
					if buffer[position] != rune('u') {
						goto l450
					}
					position++
					goto l433
				l450:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('L') {
						goto l451
					}
					position++
					if buffer[position] != rune('a') {
						goto l451
					}
					position++
					goto l433
				l451:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('Q') {
						goto l452
					}
					position++
					if buffer[position] != rune('u') {
						goto l452
					}
					position++
					goto l433
				l452:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('A') {
						goto l453
					}
					position++
					if buffer[position] != rune('s') {
						goto l453
					}
					position++
					goto l433
				l453:
					position, tokenIndex = position433, tokenIndex433
					if buffer[position] != rune('B') {
						goto l431
					}
					position++
					if buffer[position] != rune('a') {
						goto l431
					}
					position++
				}
			l433:
				add(ruleTwoLetterGenus, position432)
			}
			return true
		l431:
			position, tokenIndex = position431, tokenIndex431
			return false
		},
		/* 64 Word <- <(!((('e' 'x') / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd') / ('p' 'r' 'o') / ('c' 'v') / ('c' 'u' 'l' 't' 'i' 'v' 'a' 'r') / AuthorPrefix / RankUninomial / Approximation / Word4) SpaceCharEOI) (WordApostr / WordStartsWithDigit / MultiDashedWord / Word2 / Word1) &(SpaceCharEOI / '('))> */
		func() bool {
			position454, tokenIndex454 := position, tokenIndex
			{
				position455 := position
				{
					position456, tokenIndex456 := position, tokenIndex
					{
						position457, tokenIndex457 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l458
						}
						position++
						if buffer[position] != rune('x') {
							goto l458
						}
						position++
						goto l457
					l458:
						position, tokenIndex = position457, tokenIndex457
						if buffer[position] != rune('e') {
							goto l459
						}
						position++
						if buffer[position] != rune('t') {
							goto l459
						}
						position++
						goto l457
					l459:
						position, tokenIndex = position457, tokenIndex457
						if buffer[position] != rune('a') {
							goto l460
						}
						position++
						if buffer[position] != rune('n') {
							goto l460
						}
						position++
						if buffer[position] != rune('d') {
							goto l460
						}
						position++
						goto l457
					l460:
						position, tokenIndex = position457, tokenIndex457
						if buffer[position] != rune('a') {
							goto l461
						}
						position++
						if buffer[position] != rune('p') {
							goto l461
						}
						position++
						if buffer[position] != rune('u') {
							goto l461
						}
						position++
						if buffer[position] != rune('d') {
							goto l461
						}
						position++
						goto l457
					l461:
						position, tokenIndex = position457, tokenIndex457
						if buffer[position] != rune('p') {
							goto l462
						}
						position++
						if buffer[position] != rune('r') {
							goto l462
						}
						position++
						if buffer[position] != rune('o') {
							goto l462
						}
						position++
						goto l457
					l462:
						position, tokenIndex = position457, tokenIndex457
						if buffer[position] != rune('c') {
							goto l463
						}
						position++
						if buffer[position] != rune('v') {
							goto l463
						}
						position++
						goto l457
					l463:
						position, tokenIndex = position457, tokenIndex457
						if buffer[position] != rune('c') {
							goto l464
						}
						position++
						if buffer[position] != rune('u') {
							goto l464
						}
						position++
						if buffer[position] != rune('l') {
							goto l464
						}
						position++
						if buffer[position] != rune('t') {
							goto l464
						}
						position++
						if buffer[position] != rune('i') {
							goto l464
						}
						position++
						if buffer[position] != rune('v') {
							goto l464
						}
						position++
						if buffer[position] != rune('a') {
							goto l464
						}
						position++
						if buffer[position] != rune('r') {
							goto l464
						}
						position++
						goto l457
					l464:
						position, tokenIndex = position457, tokenIndex457
						if !_rules[ruleAuthorPrefix]() {
							goto l465
						}
						goto l457
					l465:
						position, tokenIndex = position457, tokenIndex457
						if !_rules[ruleRankUninomial]() {
							goto l466
						}
						goto l457
					l466:
						position, tokenIndex = position457, tokenIndex457
						if !_rules[ruleApproximation]() {
							goto l467
						}
						goto l457
					l467:
						position, tokenIndex = position457, tokenIndex457
						if !_rules[ruleWord4]() {
							goto l456
						}
					}
				l457:
					if !_rules[ruleSpaceCharEOI]() {
						goto l456
					}
					goto l454
				l456:
					position, tokenIndex = position456, tokenIndex456
				}
				{
					position468, tokenIndex468 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l469
					}
					goto l468
				l469:
					position, tokenIndex = position468, tokenIndex468
					if !_rules[ruleWordStartsWithDigit]() {
						goto l470
					}
					goto l468
				l470:
					position, tokenIndex = position468, tokenIndex468
					if !_rules[ruleMultiDashedWord]() {
						goto l471
					}
					goto l468
				l471:
					position, tokenIndex = position468, tokenIndex468
					if !_rules[ruleWord2]() {
						goto l472
					}
					goto l468
				l472:
					position, tokenIndex = position468, tokenIndex468
					if !_rules[ruleWord1]() {
						goto l454
					}
				}
			l468:
				{
					position473, tokenIndex473 := position, tokenIndex
					{
						position474, tokenIndex474 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l475
						}
						goto l474
					l475:
						position, tokenIndex = position474, tokenIndex474
						if buffer[position] != rune('(') {
							goto l454
						}
						position++
					}
				l474:
					position, tokenIndex = position473, tokenIndex473
				}
				add(ruleWord, position455)
			}
			return true
		l454:
			position, tokenIndex = position454, tokenIndex454
			return false
		},
		/* 65 Word1 <- <(((DotPrefix / LowerASCII) Dash)? NameLowerChar NameLowerChar+)> */
		func() bool {
			position476, tokenIndex476 := position, tokenIndex
			{
				position477 := position
				{
					position478, tokenIndex478 := position, tokenIndex
					{
						position480, tokenIndex480 := position, tokenIndex
						if !_rules[ruleDotPrefix]() {
							goto l481
						}
						goto l480
					l481:
						position, tokenIndex = position480, tokenIndex480
						if !_rules[ruleLowerASCII]() {
							goto l478
						}
					}
				l480:
					if !_rules[ruleDash]() {
						goto l478
					}
					goto l479
				l478:
					position, tokenIndex = position478, tokenIndex478
				}
			l479:
				if !_rules[ruleNameLowerChar]() {
					goto l476
				}
				if !_rules[ruleNameLowerChar]() {
					goto l476
				}
			l482:
				{
					position483, tokenIndex483 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l483
					}
					goto l482
				l483:
					position, tokenIndex = position483, tokenIndex483
				}
				add(ruleWord1, position477)
			}
			return true
		l476:
			position, tokenIndex = position476, tokenIndex476
			return false
		},
		/* 66 WordStartsWithDigit <- <(('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9') Nums? ('.' / Dash)? NameLowerChar NameLowerChar NameLowerChar NameLowerChar+)> */
		func() bool {
			position484, tokenIndex484 := position, tokenIndex
			{
				position485 := position
				{
					position486, tokenIndex486 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l487
					}
					position++
					goto l486
				l487:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('2') {
						goto l488
					}
					position++
					goto l486
				l488:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('3') {
						goto l489
					}
					position++
					goto l486
				l489:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('4') {
						goto l490
					}
					position++
					goto l486
				l490:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('5') {
						goto l491
					}
					position++
					goto l486
				l491:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('6') {
						goto l492
					}
					position++
					goto l486
				l492:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('7') {
						goto l493
					}
					position++
					goto l486
				l493:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('8') {
						goto l494
					}
					position++
					goto l486
				l494:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('9') {
						goto l484
					}
					position++
				}
			l486:
				{
					position495, tokenIndex495 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l495
					}
					goto l496
				l495:
					position, tokenIndex = position495, tokenIndex495
				}
			l496:
				{
					position497, tokenIndex497 := position, tokenIndex
					{
						position499, tokenIndex499 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l500
						}
						position++
						goto l499
					l500:
						position, tokenIndex = position499, tokenIndex499
						if !_rules[ruleDash]() {
							goto l497
						}
					}
				l499:
					goto l498
				l497:
					position, tokenIndex = position497, tokenIndex497
				}
			l498:
				if !_rules[ruleNameLowerChar]() {
					goto l484
				}
				if !_rules[ruleNameLowerChar]() {
					goto l484
				}
				if !_rules[ruleNameLowerChar]() {
					goto l484
				}
				if !_rules[ruleNameLowerChar]() {
					goto l484
				}
			l501:
				{
					position502, tokenIndex502 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l502
					}
					goto l501
				l502:
					position, tokenIndex = position502, tokenIndex502
				}
				add(ruleWordStartsWithDigit, position485)
			}
			return true
		l484:
			position, tokenIndex = position484, tokenIndex484
			return false
		},
		/* 67 Word2 <- <(NameLowerChar+ Dash? (WordApostr / NameLowerChar+))> */
		func() bool {
			position503, tokenIndex503 := position, tokenIndex
			{
				position504 := position
				if !_rules[ruleNameLowerChar]() {
					goto l503
				}
			l505:
				{
					position506, tokenIndex506 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l506
					}
					goto l505
				l506:
					position, tokenIndex = position506, tokenIndex506
				}
				{
					position507, tokenIndex507 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l507
					}
					goto l508
				l507:
					position, tokenIndex = position507, tokenIndex507
				}
			l508:
				{
					position509, tokenIndex509 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l510
					}
					goto l509
				l510:
					position, tokenIndex = position509, tokenIndex509
					if !_rules[ruleNameLowerChar]() {
						goto l503
					}
				l511:
					{
						position512, tokenIndex512 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l512
						}
						goto l511
					l512:
						position, tokenIndex = position512, tokenIndex512
					}
				}
			l509:
				add(ruleWord2, position504)
			}
			return true
		l503:
			position, tokenIndex = position503, tokenIndex503
			return false
		},
		/* 68 WordApostr <- <(NameLowerChar NameLowerChar* Apostrophe Word1)> */
		func() bool {
			position513, tokenIndex513 := position, tokenIndex
			{
				position514 := position
				if !_rules[ruleNameLowerChar]() {
					goto l513
				}
			l515:
				{
					position516, tokenIndex516 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l516
					}
					goto l515
				l516:
					position, tokenIndex = position516, tokenIndex516
				}
				if !_rules[ruleApostrophe]() {
					goto l513
				}
				if !_rules[ruleWord1]() {
					goto l513
				}
				add(ruleWordApostr, position514)
			}
			return true
		l513:
			position, tokenIndex = position513, tokenIndex513
			return false
		},
		/* 69 Word4 <- <(NameLowerChar+ '.' NameLowerChar)> */
		func() bool {
			position517, tokenIndex517 := position, tokenIndex
			{
				position518 := position
				if !_rules[ruleNameLowerChar]() {
					goto l517
				}
			l519:
				{
					position520, tokenIndex520 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l520
					}
					goto l519
				l520:
					position, tokenIndex = position520, tokenIndex520
				}
				if buffer[position] != rune('.') {
					goto l517
				}
				position++
				if !_rules[ruleNameLowerChar]() {
					goto l517
				}
				add(ruleWord4, position518)
			}
			return true
		l517:
			position, tokenIndex = position517, tokenIndex517
			return false
		},
		/* 70 DotPrefix <- <('s' 't' '.')> */
		func() bool {
			position521, tokenIndex521 := position, tokenIndex
			{
				position522 := position
				if buffer[position] != rune('s') {
					goto l521
				}
				position++
				if buffer[position] != rune('t') {
					goto l521
				}
				position++
				if buffer[position] != rune('.') {
					goto l521
				}
				position++
				add(ruleDotPrefix, position522)
			}
			return true
		l521:
			position, tokenIndex = position521, tokenIndex521
			return false
		},
		/* 71 MultiDashedWord <- <(NameLowerChar+ Dash NameLowerChar+ Dash NameLowerChar+ (Dash NameLowerChar+)?)> */
		func() bool {
			position523, tokenIndex523 := position, tokenIndex
			{
				position524 := position
				if !_rules[ruleNameLowerChar]() {
					goto l523
				}
			l525:
				{
					position526, tokenIndex526 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l526
					}
					goto l525
				l526:
					position, tokenIndex = position526, tokenIndex526
				}
				if !_rules[ruleDash]() {
					goto l523
				}
				if !_rules[ruleNameLowerChar]() {
					goto l523
				}
			l527:
				{
					position528, tokenIndex528 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l528
					}
					goto l527
				l528:
					position, tokenIndex = position528, tokenIndex528
				}
				if !_rules[ruleDash]() {
					goto l523
				}
				if !_rules[ruleNameLowerChar]() {
					goto l523
				}
			l529:
				{
					position530, tokenIndex530 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l530
					}
					goto l529
				l530:
					position, tokenIndex = position530, tokenIndex530
				}
				{
					position531, tokenIndex531 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l531
					}
					if !_rules[ruleNameLowerChar]() {
						goto l531
					}
				l533:
					{
						position534, tokenIndex534 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l534
						}
						goto l533
					l534:
						position, tokenIndex = position534, tokenIndex534
					}
					goto l532
				l531:
					position, tokenIndex = position531, tokenIndex531
				}
			l532:
				add(ruleMultiDashedWord, position524)
			}
			return true
		l523:
			position, tokenIndex = position523, tokenIndex523
			return false
		},
		/* 72 HybridChar <- <('×' / (('x' / 'X') &_) / (('x' / 'X') &UninomialWord) / (('x' / 'X') &END))> */
		func() bool {
			position535, tokenIndex535 := position, tokenIndex
			{
				position536 := position
				{
					position537, tokenIndex537 := position, tokenIndex
					if buffer[position] != rune('×') {
						goto l538
					}
					position++
					goto l537
				l538:
					position, tokenIndex = position537, tokenIndex537
					{
						position540, tokenIndex540 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l541
						}
						position++
						goto l540
					l541:
						position, tokenIndex = position540, tokenIndex540
						if buffer[position] != rune('X') {
							goto l539
						}
						position++
					}
				l540:
					{
						position542, tokenIndex542 := position, tokenIndex
						if !_rules[rule_]() {
							goto l539
						}
						position, tokenIndex = position542, tokenIndex542
					}
					goto l537
				l539:
					position, tokenIndex = position537, tokenIndex537
					{
						position544, tokenIndex544 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l545
						}
						position++
						goto l544
					l545:
						position, tokenIndex = position544, tokenIndex544
						if buffer[position] != rune('X') {
							goto l543
						}
						position++
					}
				l544:
					{
						position546, tokenIndex546 := position, tokenIndex
						if !_rules[ruleUninomialWord]() {
							goto l543
						}
						position, tokenIndex = position546, tokenIndex546
					}
					goto l537
				l543:
					position, tokenIndex = position537, tokenIndex537
					{
						position547, tokenIndex547 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l548
						}
						position++
						goto l547
					l548:
						position, tokenIndex = position547, tokenIndex547
						if buffer[position] != rune('X') {
							goto l535
						}
						position++
					}
				l547:
					{
						position549, tokenIndex549 := position, tokenIndex
						if !_rules[ruleEND]() {
							goto l535
						}
						position, tokenIndex = position549, tokenIndex549
					}
				}
			l537:
				add(ruleHybridChar, position536)
			}
			return true
		l535:
			position, tokenIndex = position535, tokenIndex535
			return false
		},
		/* 73 GraftChimeraChar <- <'+'> */
		func() bool {
			position550, tokenIndex550 := position, tokenIndex
			{
				position551 := position
				if buffer[position] != rune('+') {
					goto l550
				}
				position++
				add(ruleGraftChimeraChar, position551)
			}
			return true
		l550:
			position, tokenIndex = position550, tokenIndex550
			return false
		},
		/* 74 ApproxNameIgnored <- <.*> */
		func() bool {
			{
				position553 := position
			l554:
				{
					position555, tokenIndex555 := position, tokenIndex
					if !matchDot() {
						goto l555
					}
					goto l554
				l555:
					position, tokenIndex = position555, tokenIndex555
				}
				add(ruleApproxNameIgnored, position553)
			}
			return true
		},
		/* 75 Approximation <- <(('s' 'p' '.' _? ('n' 'r' '.')) / ('s' 'p' '.' _? ('a' 'f' 'f' '.')) / ('m' 'o' 'n' 's' 't' '.') / '?' / ((('s' 'p' 'p') / ('n' 'r') / ('s' 'p') / ('a' 'f' 'f') / ('s' 'p' 'e' 'c' 'i' 'e' 's')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position556, tokenIndex556 := position, tokenIndex
			{
				position557 := position
				{
					position558, tokenIndex558 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l559
					}
					position++
					if buffer[position] != rune('p') {
						goto l559
					}
					position++
					if buffer[position] != rune('.') {
						goto l559
					}
					position++
					{
						position560, tokenIndex560 := position, tokenIndex
						if !_rules[rule_]() {
							goto l560
						}
						goto l561
					l560:
						position, tokenIndex = position560, tokenIndex560
					}
				l561:
					if buffer[position] != rune('n') {
						goto l559
					}
					position++
					if buffer[position] != rune('r') {
						goto l559
					}
					position++
					if buffer[position] != rune('.') {
						goto l559
					}
					position++
					goto l558
				l559:
					position, tokenIndex = position558, tokenIndex558
					if buffer[position] != rune('s') {
						goto l562
					}
					position++
					if buffer[position] != rune('p') {
						goto l562
					}
					position++
					if buffer[position] != rune('.') {
						goto l562
					}
					position++
					{
						position563, tokenIndex563 := position, tokenIndex
						if !_rules[rule_]() {
							goto l563
						}
						goto l564
					l563:
						position, tokenIndex = position563, tokenIndex563
					}
				l564:
					if buffer[position] != rune('a') {
						goto l562
					}
					position++
					if buffer[position] != rune('f') {
						goto l562
					}
					position++
					if buffer[position] != rune('f') {
						goto l562
					}
					position++
					if buffer[position] != rune('.') {
						goto l562
					}
					position++
					goto l558
				l562:
					position, tokenIndex = position558, tokenIndex558
					if buffer[position] != rune('m') {
						goto l565
					}
					position++
					if buffer[position] != rune('o') {
						goto l565
					}
					position++
					if buffer[position] != rune('n') {
						goto l565
					}
					position++
					if buffer[position] != rune('s') {
						goto l565
					}
					position++
					if buffer[position] != rune('t') {
						goto l565
					}
					position++
					if buffer[position] != rune('.') {
						goto l565
					}
					position++
					goto l558
				l565:
					position, tokenIndex = position558, tokenIndex558
					if buffer[position] != rune('?') {
						goto l566
					}
					position++
					goto l558
				l566:
					position, tokenIndex = position558, tokenIndex558
					{
						position567, tokenIndex567 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l568
						}
						position++
						if buffer[position] != rune('p') {
							goto l568
						}
						position++
						if buffer[position] != rune('p') {
							goto l568
						}
						position++
						goto l567
					l568:
						position, tokenIndex = position567, tokenIndex567
						if buffer[position] != rune('n') {
							goto l569
						}
						position++
						if buffer[position] != rune('r') {
							goto l569
						}
						position++
						goto l567
					l569:
						position, tokenIndex = position567, tokenIndex567
						if buffer[position] != rune('s') {
							goto l570
						}
						position++
						if buffer[position] != rune('p') {
							goto l570
						}
						position++
						goto l567
					l570:
						position, tokenIndex = position567, tokenIndex567
						if buffer[position] != rune('a') {
							goto l571
						}
						position++
						if buffer[position] != rune('f') {
							goto l571
						}
						position++
						if buffer[position] != rune('f') {
							goto l571
						}
						position++
						goto l567
					l571:
						position, tokenIndex = position567, tokenIndex567
						if buffer[position] != rune('s') {
							goto l556
						}
						position++
						if buffer[position] != rune('p') {
							goto l556
						}
						position++
						if buffer[position] != rune('e') {
							goto l556
						}
						position++
						if buffer[position] != rune('c') {
							goto l556
						}
						position++
						if buffer[position] != rune('i') {
							goto l556
						}
						position++
						if buffer[position] != rune('e') {
							goto l556
						}
						position++
						if buffer[position] != rune('s') {
							goto l556
						}
						position++
					}
				l567:
					{
						position572, tokenIndex572 := position, tokenIndex
						{
							position574, tokenIndex574 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l573
							}
							position, tokenIndex = position574, tokenIndex574
						}
						goto l572
					l573:
						position, tokenIndex = position572, tokenIndex572
						if buffer[position] != rune('.') {
							goto l556
						}
						position++
					}
				l572:
				}
			l558:
				add(ruleApproximation, position557)
			}
			return true
		l556:
			position, tokenIndex = position556, tokenIndex556
			return false
		},
		/* 76 Authorship <- <((AuthorshipCombo / OriginalAuthorship) &(SpaceCharEOI / ';' / ','))> */
		func() bool {
			position575, tokenIndex575 := position, tokenIndex
			{
				position576 := position
				{
					position577, tokenIndex577 := position, tokenIndex
					if !_rules[ruleAuthorshipCombo]() {
						goto l578
					}
					goto l577
				l578:
					position, tokenIndex = position577, tokenIndex577
					if !_rules[ruleOriginalAuthorship]() {
						goto l575
					}
				}
			l577:
				{
					position579, tokenIndex579 := position, tokenIndex
					{
						position580, tokenIndex580 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l581
						}
						goto l580
					l581:
						position, tokenIndex = position580, tokenIndex580
						if buffer[position] != rune(';') {
							goto l582
						}
						position++
						goto l580
					l582:
						position, tokenIndex = position580, tokenIndex580
						if buffer[position] != rune(',') {
							goto l575
						}
						position++
					}
				l580:
					position, tokenIndex = position579, tokenIndex579
				}
				add(ruleAuthorship, position576)
			}
			return true
		l575:
			position, tokenIndex = position575, tokenIndex575
			return false
		},
		/* 77 AuthorshipCombo <- <(OriginalAuthorshipComb (_? CombinationAuthorship)?)> */
		func() bool {
			position583, tokenIndex583 := position, tokenIndex
			{
				position584 := position
				if !_rules[ruleOriginalAuthorshipComb]() {
					goto l583
				}
				{
					position585, tokenIndex585 := position, tokenIndex
					{
						position587, tokenIndex587 := position, tokenIndex
						if !_rules[rule_]() {
							goto l587
						}
						goto l588
					l587:
						position, tokenIndex = position587, tokenIndex587
					}
				l588:
					if !_rules[ruleCombinationAuthorship]() {
						goto l585
					}
					goto l586
				l585:
					position, tokenIndex = position585, tokenIndex585
				}
			l586:
				add(ruleAuthorshipCombo, position584)
			}
			return true
		l583:
			position, tokenIndex = position583, tokenIndex583
			return false
		},
		/* 78 OriginalAuthorship <- <AuthorsGroup> */
		func() bool {
			position589, tokenIndex589 := position, tokenIndex
			{
				position590 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l589
				}
				add(ruleOriginalAuthorship, position590)
			}
			return true
		l589:
			position, tokenIndex = position589, tokenIndex589
			return false
		},
		/* 79 OriginalAuthorshipComb <- <(BasionymAuthorshipYearMisformed / BasionymAuthorship / BasionymAuthorshipMissingParens)> */
		func() bool {
			position591, tokenIndex591 := position, tokenIndex
			{
				position592 := position
				{
					position593, tokenIndex593 := position, tokenIndex
					if !_rules[ruleBasionymAuthorshipYearMisformed]() {
						goto l594
					}
					goto l593
				l594:
					position, tokenIndex = position593, tokenIndex593
					if !_rules[ruleBasionymAuthorship]() {
						goto l595
					}
					goto l593
				l595:
					position, tokenIndex = position593, tokenIndex593
					if !_rules[ruleBasionymAuthorshipMissingParens]() {
						goto l591
					}
				}
			l593:
				add(ruleOriginalAuthorshipComb, position592)
			}
			return true
		l591:
			position, tokenIndex = position591, tokenIndex591
			return false
		},
		/* 80 CombinationAuthorship <- <AuthorsGroup> */
		func() bool {
			position596, tokenIndex596 := position, tokenIndex
			{
				position597 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l596
				}
				add(ruleCombinationAuthorship, position597)
			}
			return true
		l596:
			position, tokenIndex = position596, tokenIndex596
			return false
		},
		/* 81 BasionymAuthorshipMissingParens <- <(MissingParensStart / MissingParensEnd)> */
		func() bool {
			position598, tokenIndex598 := position, tokenIndex
			{
				position599 := position
				{
					position600, tokenIndex600 := position, tokenIndex
					if !_rules[ruleMissingParensStart]() {
						goto l601
					}
					goto l600
				l601:
					position, tokenIndex = position600, tokenIndex600
					if !_rules[ruleMissingParensEnd]() {
						goto l598
					}
				}
			l600:
				add(ruleBasionymAuthorshipMissingParens, position599)
			}
			return true
		l598:
			position, tokenIndex = position598, tokenIndex598
			return false
		},
		/* 82 MissingParensStart <- <('(' _? AuthorsGroup)> */
		func() bool {
			position602, tokenIndex602 := position, tokenIndex
			{
				position603 := position
				if buffer[position] != rune('(') {
					goto l602
				}
				position++
				{
					position604, tokenIndex604 := position, tokenIndex
					if !_rules[rule_]() {
						goto l604
					}
					goto l605
				l604:
					position, tokenIndex = position604, tokenIndex604
				}
			l605:
				if !_rules[ruleAuthorsGroup]() {
					goto l602
				}
				add(ruleMissingParensStart, position603)
			}
			return true
		l602:
			position, tokenIndex = position602, tokenIndex602
			return false
		},
		/* 83 MissingParensEnd <- <(AuthorsGroup _? ')')> */
		func() bool {
			position606, tokenIndex606 := position, tokenIndex
			{
				position607 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l606
				}
				{
					position608, tokenIndex608 := position, tokenIndex
					if !_rules[rule_]() {
						goto l608
					}
					goto l609
				l608:
					position, tokenIndex = position608, tokenIndex608
				}
			l609:
				if buffer[position] != rune(')') {
					goto l606
				}
				position++
				add(ruleMissingParensEnd, position607)
			}
			return true
		l606:
			position, tokenIndex = position606, tokenIndex606
			return false
		},
		/* 84 BasionymAuthorshipYearMisformed <- <('(' _? AuthorsGroup _? ')' (_? ',')? _? Year)> */
		func() bool {
			position610, tokenIndex610 := position, tokenIndex
			{
				position611 := position
				if buffer[position] != rune('(') {
					goto l610
				}
				position++
				{
					position612, tokenIndex612 := position, tokenIndex
					if !_rules[rule_]() {
						goto l612
					}
					goto l613
				l612:
					position, tokenIndex = position612, tokenIndex612
				}
			l613:
				if !_rules[ruleAuthorsGroup]() {
					goto l610
				}
				{
					position614, tokenIndex614 := position, tokenIndex
					if !_rules[rule_]() {
						goto l614
					}
					goto l615
				l614:
					position, tokenIndex = position614, tokenIndex614
				}
			l615:
				if buffer[position] != rune(')') {
					goto l610
				}
				position++
				{
					position616, tokenIndex616 := position, tokenIndex
					{
						position618, tokenIndex618 := position, tokenIndex
						if !_rules[rule_]() {
							goto l618
						}
						goto l619
					l618:
						position, tokenIndex = position618, tokenIndex618
					}
				l619:
					if buffer[position] != rune(',') {
						goto l616
					}
					position++
					goto l617
				l616:
					position, tokenIndex = position616, tokenIndex616
				}
			l617:
				{
					position620, tokenIndex620 := position, tokenIndex
					if !_rules[rule_]() {
						goto l620
					}
					goto l621
				l620:
					position, tokenIndex = position620, tokenIndex620
				}
			l621:
				if !_rules[ruleYear]() {
					goto l610
				}
				add(ruleBasionymAuthorshipYearMisformed, position611)
			}
			return true
		l610:
			position, tokenIndex = position610, tokenIndex610
			return false
		},
		/* 85 BasionymAuthorship <- <(BasionymAuthorship1 / BasionymAuthorship2Parens)> */
		func() bool {
			position622, tokenIndex622 := position, tokenIndex
			{
				position623 := position
				{
					position624, tokenIndex624 := position, tokenIndex
					if !_rules[ruleBasionymAuthorship1]() {
						goto l625
					}
					goto l624
				l625:
					position, tokenIndex = position624, tokenIndex624
					if !_rules[ruleBasionymAuthorship2Parens]() {
						goto l622
					}
				}
			l624:
				add(ruleBasionymAuthorship, position623)
			}
			return true
		l622:
			position, tokenIndex = position622, tokenIndex622
			return false
		},
		/* 86 BasionymAuthorship1 <- <('(' _? AuthorsGroup _? ')')> */
		func() bool {
			position626, tokenIndex626 := position, tokenIndex
			{
				position627 := position
				if buffer[position] != rune('(') {
					goto l626
				}
				position++
				{
					position628, tokenIndex628 := position, tokenIndex
					if !_rules[rule_]() {
						goto l628
					}
					goto l629
				l628:
					position, tokenIndex = position628, tokenIndex628
				}
			l629:
				if !_rules[ruleAuthorsGroup]() {
					goto l626
				}
				{
					position630, tokenIndex630 := position, tokenIndex
					if !_rules[rule_]() {
						goto l630
					}
					goto l631
				l630:
					position, tokenIndex = position630, tokenIndex630
				}
			l631:
				if buffer[position] != rune(')') {
					goto l626
				}
				position++
				add(ruleBasionymAuthorship1, position627)
			}
			return true
		l626:
			position, tokenIndex = position626, tokenIndex626
			return false
		},
		/* 87 BasionymAuthorship2Parens <- <('(' _? '(' _? AuthorsGroup _? ')' _? ')')> */
		func() bool {
			position632, tokenIndex632 := position, tokenIndex
			{
				position633 := position
				if buffer[position] != rune('(') {
					goto l632
				}
				position++
				{
					position634, tokenIndex634 := position, tokenIndex
					if !_rules[rule_]() {
						goto l634
					}
					goto l635
				l634:
					position, tokenIndex = position634, tokenIndex634
				}
			l635:
				if buffer[position] != rune('(') {
					goto l632
				}
				position++
				{
					position636, tokenIndex636 := position, tokenIndex
					if !_rules[rule_]() {
						goto l636
					}
					goto l637
				l636:
					position, tokenIndex = position636, tokenIndex636
				}
			l637:
				if !_rules[ruleAuthorsGroup]() {
					goto l632
				}
				{
					position638, tokenIndex638 := position, tokenIndex
					if !_rules[rule_]() {
						goto l638
					}
					goto l639
				l638:
					position, tokenIndex = position638, tokenIndex638
				}
			l639:
				if buffer[position] != rune(')') {
					goto l632
				}
				position++
				{
					position640, tokenIndex640 := position, tokenIndex
					if !_rules[rule_]() {
						goto l640
					}
					goto l641
				l640:
					position, tokenIndex = position640, tokenIndex640
				}
			l641:
				if buffer[position] != rune(')') {
					goto l632
				}
				position++
				add(ruleBasionymAuthorship2Parens, position633)
			}
			return true
		l632:
			position, tokenIndex = position632, tokenIndex632
			return false
		},
		/* 88 AuthorsGroup <- <(AuthorsTeam (','? _ (AuthorEmend / AuthorEx) AuthorsTeam)?)> */
		func() bool {
			position642, tokenIndex642 := position, tokenIndex
			{
				position643 := position
				if !_rules[ruleAuthorsTeam]() {
					goto l642
				}
				{
					position644, tokenIndex644 := position, tokenIndex
					{
						position646, tokenIndex646 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l646
						}
						position++
						goto l647
					l646:
						position, tokenIndex = position646, tokenIndex646
					}
				l647:
					if !_rules[rule_]() {
						goto l644
					}
					{
						position648, tokenIndex648 := position, tokenIndex
						if !_rules[ruleAuthorEmend]() {
							goto l649
						}
						goto l648
					l649:
						position, tokenIndex = position648, tokenIndex648
						if !_rules[ruleAuthorEx]() {
							goto l644
						}
					}
				l648:
					if !_rules[ruleAuthorsTeam]() {
						goto l644
					}
					goto l645
				l644:
					position, tokenIndex = position644, tokenIndex644
				}
			l645:
				add(ruleAuthorsGroup, position643)
			}
			return true
		l642:
			position, tokenIndex = position642, tokenIndex642
			return false
		},
		/* 89 AuthorsTeam <- <(Author (AuthorSep Author)* (_? ','? _? Year)?)> */
		func() bool {
			position650, tokenIndex650 := position, tokenIndex
			{
				position651 := position
				if !_rules[ruleAuthor]() {
					goto l650
				}
			l652:
				{
					position653, tokenIndex653 := position, tokenIndex
					if !_rules[ruleAuthorSep]() {
						goto l653
					}
					if !_rules[ruleAuthor]() {
						goto l653
					}
					goto l652
				l653:
					position, tokenIndex = position653, tokenIndex653
				}
				{
					position654, tokenIndex654 := position, tokenIndex
					{
						position656, tokenIndex656 := position, tokenIndex
						if !_rules[rule_]() {
							goto l656
						}
						goto l657
					l656:
						position, tokenIndex = position656, tokenIndex656
					}
				l657:
					{
						position658, tokenIndex658 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l658
						}
						position++
						goto l659
					l658:
						position, tokenIndex = position658, tokenIndex658
					}
				l659:
					{
						position660, tokenIndex660 := position, tokenIndex
						if !_rules[rule_]() {
							goto l660
						}
						goto l661
					l660:
						position, tokenIndex = position660, tokenIndex660
					}
				l661:
					if !_rules[ruleYear]() {
						goto l654
					}
					goto l655
				l654:
					position, tokenIndex = position654, tokenIndex654
				}
			l655:
				add(ruleAuthorsTeam, position651)
			}
			return true
		l650:
			position, tokenIndex = position650, tokenIndex650
			return false
		},
		/* 90 AuthorSep <- <(AuthorSep1 / AuthorSep2)> */
		func() bool {
			position662, tokenIndex662 := position, tokenIndex
			{
				position663 := position
				{
					position664, tokenIndex664 := position, tokenIndex
					if !_rules[ruleAuthorSep1]() {
						goto l665
					}
					goto l664
				l665:
					position, tokenIndex = position664, tokenIndex664
					if !_rules[ruleAuthorSep2]() {
						goto l662
					}
				}
			l664:
				add(ruleAuthorSep, position663)
			}
			return true
		l662:
			position, tokenIndex = position662, tokenIndex662
			return false
		},
		/* 91 AuthorSep1 <- <(_? (',' _)? ('&' / AuthorSepSpanish / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd')) _?)> */
		func() bool {
			position666, tokenIndex666 := position, tokenIndex
			{
				position667 := position
				{
					position668, tokenIndex668 := position, tokenIndex
					if !_rules[rule_]() {
						goto l668
					}
					goto l669
				l668:
					position, tokenIndex = position668, tokenIndex668
				}
			l669:
				{
					position670, tokenIndex670 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l670
					}
					position++
					if !_rules[rule_]() {
						goto l670
					}
					goto l671
				l670:
					position, tokenIndex = position670, tokenIndex670
				}
			l671:
				{
					position672, tokenIndex672 := position, tokenIndex
					if buffer[position] != rune('&') {
						goto l673
					}
					position++
					goto l672
				l673:
					position, tokenIndex = position672, tokenIndex672
					if !_rules[ruleAuthorSepSpanish]() {
						goto l674
					}
					goto l672
				l674:
					position, tokenIndex = position672, tokenIndex672
					if buffer[position] != rune('e') {
						goto l675
					}
					position++
					if buffer[position] != rune('t') {
						goto l675
					}
					position++
					goto l672
				l675:
					position, tokenIndex = position672, tokenIndex672
					if buffer[position] != rune('a') {
						goto l676
					}
					position++
					if buffer[position] != rune('n') {
						goto l676
					}
					position++
					if buffer[position] != rune('d') {
						goto l676
					}
					position++
					goto l672
				l676:
					position, tokenIndex = position672, tokenIndex672
					if buffer[position] != rune('a') {
						goto l666
					}
					position++
					if buffer[position] != rune('p') {
						goto l666
					}
					position++
					if buffer[position] != rune('u') {
						goto l666
					}
					position++
					if buffer[position] != rune('d') {
						goto l666
					}
					position++
				}
			l672:
				{
					position677, tokenIndex677 := position, tokenIndex
					if !_rules[rule_]() {
						goto l677
					}
					goto l678
				l677:
					position, tokenIndex = position677, tokenIndex677
				}
			l678:
				add(ruleAuthorSep1, position667)
			}
			return true
		l666:
			position, tokenIndex = position666, tokenIndex666
			return false
		},
		/* 92 AuthorSep2 <- <(_? ',' _?)> */
		func() bool {
			position679, tokenIndex679 := position, tokenIndex
			{
				position680 := position
				{
					position681, tokenIndex681 := position, tokenIndex
					if !_rules[rule_]() {
						goto l681
					}
					goto l682
				l681:
					position, tokenIndex = position681, tokenIndex681
				}
			l682:
				if buffer[position] != rune(',') {
					goto l679
				}
				position++
				{
					position683, tokenIndex683 := position, tokenIndex
					if !_rules[rule_]() {
						goto l683
					}
					goto l684
				l683:
					position, tokenIndex = position683, tokenIndex683
				}
			l684:
				add(ruleAuthorSep2, position680)
			}
			return true
		l679:
			position, tokenIndex = position679, tokenIndex679
			return false
		},
		/* 93 AuthorSepSpanish <- <(_? 'y' _?)> */
		func() bool {
			position685, tokenIndex685 := position, tokenIndex
			{
				position686 := position
				{
					position687, tokenIndex687 := position, tokenIndex
					if !_rules[rule_]() {
						goto l687
					}
					goto l688
				l687:
					position, tokenIndex = position687, tokenIndex687
				}
			l688:
				if buffer[position] != rune('y') {
					goto l685
				}
				position++
				{
					position689, tokenIndex689 := position, tokenIndex
					if !_rules[rule_]() {
						goto l689
					}
					goto l690
				l689:
					position, tokenIndex = position689, tokenIndex689
				}
			l690:
				add(ruleAuthorSepSpanish, position686)
			}
			return true
		l685:
			position, tokenIndex = position685, tokenIndex685
			return false
		},
		/* 94 AuthorEx <- <((('e' 'x' '.'?) / ('m' 's' _ ('i' 'n')) / ('i' 'n')) _)> */
		func() bool {
			position691, tokenIndex691 := position, tokenIndex
			{
				position692 := position
				{
					position693, tokenIndex693 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l694
					}
					position++
					if buffer[position] != rune('x') {
						goto l694
					}
					position++
					{
						position695, tokenIndex695 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l695
						}
						position++
						goto l696
					l695:
						position, tokenIndex = position695, tokenIndex695
					}
				l696:
					goto l693
				l694:
					position, tokenIndex = position693, tokenIndex693
					if buffer[position] != rune('m') {
						goto l697
					}
					position++
					if buffer[position] != rune('s') {
						goto l697
					}
					position++
					if !_rules[rule_]() {
						goto l697
					}
					if buffer[position] != rune('i') {
						goto l697
					}
					position++
					if buffer[position] != rune('n') {
						goto l697
					}
					position++
					goto l693
				l697:
					position, tokenIndex = position693, tokenIndex693
					if buffer[position] != rune('i') {
						goto l691
					}
					position++
					if buffer[position] != rune('n') {
						goto l691
					}
					position++
				}
			l693:
				if !_rules[rule_]() {
					goto l691
				}
				add(ruleAuthorEx, position692)
			}
			return true
		l691:
			position, tokenIndex = position691, tokenIndex691
			return false
		},
		/* 95 AuthorEmend <- <('e' 'm' 'e' 'n' 'd' '.'? _)> */
		func() bool {
			position698, tokenIndex698 := position, tokenIndex
			{
				position699 := position
				if buffer[position] != rune('e') {
					goto l698
				}
				position++
				if buffer[position] != rune('m') {
					goto l698
				}
				position++
				if buffer[position] != rune('e') {
					goto l698
				}
				position++
				if buffer[position] != rune('n') {
					goto l698
				}
				position++
				if buffer[position] != rune('d') {
					goto l698
				}
				position++
				{
					position700, tokenIndex700 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l700
					}
					position++
					goto l701
				l700:
					position, tokenIndex = position700, tokenIndex700
				}
			l701:
				if !_rules[rule_]() {
					goto l698
				}
				add(ruleAuthorEmend, position699)
			}
			return true
		l698:
			position, tokenIndex = position698, tokenIndex698
			return false
		},
		/* 96 Author <- <((Author0 / Author1 / Author2 / UnknownAuthor) (_ AuthorEtAl)?)> */
		func() bool {
			position702, tokenIndex702 := position, tokenIndex
			{
				position703 := position
				{
					position704, tokenIndex704 := position, tokenIndex
					if !_rules[ruleAuthor0]() {
						goto l705
					}
					goto l704
				l705:
					position, tokenIndex = position704, tokenIndex704
					if !_rules[ruleAuthor1]() {
						goto l706
					}
					goto l704
				l706:
					position, tokenIndex = position704, tokenIndex704
					if !_rules[ruleAuthor2]() {
						goto l707
					}
					goto l704
				l707:
					position, tokenIndex = position704, tokenIndex704
					if !_rules[ruleUnknownAuthor]() {
						goto l702
					}
				}
			l704:
				{
					position708, tokenIndex708 := position, tokenIndex
					if !_rules[rule_]() {
						goto l708
					}
					if !_rules[ruleAuthorEtAl]() {
						goto l708
					}
					goto l709
				l708:
					position, tokenIndex = position708, tokenIndex708
				}
			l709:
				add(ruleAuthor, position703)
			}
			return true
		l702:
			position, tokenIndex = position702, tokenIndex702
			return false
		},
		/* 97 Author0 <- <(Author2 FiliusFNoSpace)> */
		func() bool {
			position710, tokenIndex710 := position, tokenIndex
			{
				position711 := position
				if !_rules[ruleAuthor2]() {
					goto l710
				}
				if !_rules[ruleFiliusFNoSpace]() {
					goto l710
				}
				add(ruleAuthor0, position711)
			}
			return true
		l710:
			position, tokenIndex = position710, tokenIndex710
			return false
		},
		/* 98 Author1 <- <(Author2 _? (Filius / AuthorSuffix))> */
		func() bool {
			position712, tokenIndex712 := position, tokenIndex
			{
				position713 := position
				if !_rules[ruleAuthor2]() {
					goto l712
				}
				{
					position714, tokenIndex714 := position, tokenIndex
					if !_rules[rule_]() {
						goto l714
					}
					goto l715
				l714:
					position, tokenIndex = position714, tokenIndex714
				}
			l715:
				{
					position716, tokenIndex716 := position, tokenIndex
					if !_rules[ruleFilius]() {
						goto l717
					}
					goto l716
				l717:
					position, tokenIndex = position716, tokenIndex716
					if !_rules[ruleAuthorSuffix]() {
						goto l712
					}
				}
			l716:
				add(ruleAuthor1, position713)
			}
			return true
		l712:
			position, tokenIndex = position712, tokenIndex712
			return false
		},
		/* 99 Author2 <- <(AuthorWord (_? AuthorWord)*)> */
		func() bool {
			position718, tokenIndex718 := position, tokenIndex
			{
				position719 := position
				if !_rules[ruleAuthorWord]() {
					goto l718
				}
			l720:
				{
					position721, tokenIndex721 := position, tokenIndex
					{
						position722, tokenIndex722 := position, tokenIndex
						if !_rules[rule_]() {
							goto l722
						}
						goto l723
					l722:
						position, tokenIndex = position722, tokenIndex722
					}
				l723:
					if !_rules[ruleAuthorWord]() {
						goto l721
					}
					goto l720
				l721:
					position, tokenIndex = position721, tokenIndex721
				}
				add(ruleAuthor2, position719)
			}
			return true
		l718:
			position, tokenIndex = position718, tokenIndex718
			return false
		},
		/* 100 UnknownAuthor <- <('?' / ((('a' 'u' 'c' 't') / ('a' 'n' 'o' 'n')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position724, tokenIndex724 := position, tokenIndex
			{
				position725 := position
				{
					position726, tokenIndex726 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l727
					}
					position++
					goto l726
				l727:
					position, tokenIndex = position726, tokenIndex726
					{
						position728, tokenIndex728 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l729
						}
						position++
						if buffer[position] != rune('u') {
							goto l729
						}
						position++
						if buffer[position] != rune('c') {
							goto l729
						}
						position++
						if buffer[position] != rune('t') {
							goto l729
						}
						position++
						goto l728
					l729:
						position, tokenIndex = position728, tokenIndex728
						if buffer[position] != rune('a') {
							goto l724
						}
						position++
						if buffer[position] != rune('n') {
							goto l724
						}
						position++
						if buffer[position] != rune('o') {
							goto l724
						}
						position++
						if buffer[position] != rune('n') {
							goto l724
						}
						position++
					}
				l728:
					{
						position730, tokenIndex730 := position, tokenIndex
						{
							position732, tokenIndex732 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l731
							}
							position, tokenIndex = position732, tokenIndex732
						}
						goto l730
					l731:
						position, tokenIndex = position730, tokenIndex730
						if buffer[position] != rune('.') {
							goto l724
						}
						position++
					}
				l730:
				}
			l726:
				add(ruleUnknownAuthor, position725)
			}
			return true
		l724:
			position, tokenIndex = position724, tokenIndex724
			return false
		},
		/* 101 AuthorWord <- <(!(HybridChar / (('b' / 'B') ('o' / 'O') ('l' / 'L') ('d' / 'D') ':')) (AuthorDashInitials / AuthorWord1 / AuthorWord2 / AuthorWord3 / AuthorWord4 / AuthorPrefix))> */
		func() bool {
			position733, tokenIndex733 := position, tokenIndex
			{
				position734 := position
				{
					position735, tokenIndex735 := position, tokenIndex
					{
						position736, tokenIndex736 := position, tokenIndex
						if !_rules[ruleHybridChar]() {
							goto l737
						}
						goto l736
					l737:
						position, tokenIndex = position736, tokenIndex736
						{
							position738, tokenIndex738 := position, tokenIndex
							if buffer[position] != rune('b') {
								goto l739
							}
							position++
							goto l738
						l739:
							position, tokenIndex = position738, tokenIndex738
							if buffer[position] != rune('B') {
								goto l735
							}
							position++
						}
					l738:
						{
							position740, tokenIndex740 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l741
							}
							position++
							goto l740
						l741:
							position, tokenIndex = position740, tokenIndex740
							if buffer[position] != rune('O') {
								goto l735
							}
							position++
						}
					l740:
						{
							position742, tokenIndex742 := position, tokenIndex
							if buffer[position] != rune('l') {
								goto l743
							}
							position++
							goto l742
						l743:
							position, tokenIndex = position742, tokenIndex742
							if buffer[position] != rune('L') {
								goto l735
							}
							position++
						}
					l742:
						{
							position744, tokenIndex744 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l745
							}
							position++
							goto l744
						l745:
							position, tokenIndex = position744, tokenIndex744
							if buffer[position] != rune('D') {
								goto l735
							}
							position++
						}
					l744:
						if buffer[position] != rune(':') {
							goto l735
						}
						position++
					}
				l736:
					goto l733
				l735:
					position, tokenIndex = position735, tokenIndex735
				}
				{
					position746, tokenIndex746 := position, tokenIndex
					if !_rules[ruleAuthorDashInitials]() {
						goto l747
					}
					goto l746
				l747:
					position, tokenIndex = position746, tokenIndex746
					if !_rules[ruleAuthorWord1]() {
						goto l748
					}
					goto l746
				l748:
					position, tokenIndex = position746, tokenIndex746
					if !_rules[ruleAuthorWord2]() {
						goto l749
					}
					goto l746
				l749:
					position, tokenIndex = position746, tokenIndex746
					if !_rules[ruleAuthorWord3]() {
						goto l750
					}
					goto l746
				l750:
					position, tokenIndex = position746, tokenIndex746
					if !_rules[ruleAuthorWord4]() {
						goto l751
					}
					goto l746
				l751:
					position, tokenIndex = position746, tokenIndex746
					if !_rules[ruleAuthorPrefix]() {
						goto l733
					}
				}
			l746:
				add(ruleAuthorWord, position734)
			}
			return true
		l733:
			position, tokenIndex = position733, tokenIndex733
			return false
		},
		/* 102 AuthorEtAl <- <(('a' 'r' 'g' '.') / ('e' 't' ' ' 'a' 'l' '.' '{' '?' '}') / ((('e' 't') / '&') (' ' 'a' 'l') '.'?))> */
		func() bool {
			position752, tokenIndex752 := position, tokenIndex
			{
				position753 := position
				{
					position754, tokenIndex754 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l755
					}
					position++
					if buffer[position] != rune('r') {
						goto l755
					}
					position++
					if buffer[position] != rune('g') {
						goto l755
					}
					position++
					if buffer[position] != rune('.') {
						goto l755
					}
					position++
					goto l754
				l755:
					position, tokenIndex = position754, tokenIndex754
					if buffer[position] != rune('e') {
						goto l756
					}
					position++
					if buffer[position] != rune('t') {
						goto l756
					}
					position++
					if buffer[position] != rune(' ') {
						goto l756
					}
					position++
					if buffer[position] != rune('a') {
						goto l756
					}
					position++
					if buffer[position] != rune('l') {
						goto l756
					}
					position++
					if buffer[position] != rune('.') {
						goto l756
					}
					position++
					if buffer[position] != rune('{') {
						goto l756
					}
					position++
					if buffer[position] != rune('?') {
						goto l756
					}
					position++
					if buffer[position] != rune('}') {
						goto l756
					}
					position++
					goto l754
				l756:
					position, tokenIndex = position754, tokenIndex754
					{
						position757, tokenIndex757 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l758
						}
						position++
						if buffer[position] != rune('t') {
							goto l758
						}
						position++
						goto l757
					l758:
						position, tokenIndex = position757, tokenIndex757
						if buffer[position] != rune('&') {
							goto l752
						}
						position++
					}
				l757:
					if buffer[position] != rune(' ') {
						goto l752
					}
					position++
					if buffer[position] != rune('a') {
						goto l752
					}
					position++
					if buffer[position] != rune('l') {
						goto l752
					}
					position++
					{
						position759, tokenIndex759 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l759
						}
						position++
						goto l760
					l759:
						position, tokenIndex = position759, tokenIndex759
					}
				l760:
				}
			l754:
				add(ruleAuthorEtAl, position753)
			}
			return true
		l752:
			position, tokenIndex = position752, tokenIndex752
			return false
		},
		/* 103 AuthorWord1 <- <(('d' 'u' 'P' 'o' 'n' 't') / ('d' 'e' 'g' 'l' 'i') / ('A' 'r' 'a' 'n' 'g' 'o' ' ' 'y' ' ' 'M' 'o' 'l' 'i' 'n' 'a'))> */
		func() bool {
			position761, tokenIndex761 := position, tokenIndex
			{
				position762 := position
				{
					position763, tokenIndex763 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l764
					}
					position++
					if buffer[position] != rune('u') {
						goto l764
					}
					position++
					if buffer[position] != rune('P') {
						goto l764
					}
					position++
					if buffer[position] != rune('o') {
						goto l764
					}
					position++
					if buffer[position] != rune('n') {
						goto l764
					}
					position++
					if buffer[position] != rune('t') {
						goto l764
					}
					position++
					goto l763
				l764:
					position, tokenIndex = position763, tokenIndex763
					if buffer[position] != rune('d') {
						goto l765
					}
					position++
					if buffer[position] != rune('e') {
						goto l765
					}
					position++
					if buffer[position] != rune('g') {
						goto l765
					}
					position++
					if buffer[position] != rune('l') {
						goto l765
					}
					position++
					if buffer[position] != rune('i') {
						goto l765
					}
					position++
					goto l763
				l765:
					position, tokenIndex = position763, tokenIndex763
					if buffer[position] != rune('A') {
						goto l761
					}
					position++
					if buffer[position] != rune('r') {
						goto l761
					}
					position++
					if buffer[position] != rune('a') {
						goto l761
					}
					position++
					if buffer[position] != rune('n') {
						goto l761
					}
					position++
					if buffer[position] != rune('g') {
						goto l761
					}
					position++
					if buffer[position] != rune('o') {
						goto l761
					}
					position++
					if buffer[position] != rune(' ') {
						goto l761
					}
					position++
					if buffer[position] != rune('y') {
						goto l761
					}
					position++
					if buffer[position] != rune(' ') {
						goto l761
					}
					position++
					if buffer[position] != rune('M') {
						goto l761
					}
					position++
					if buffer[position] != rune('o') {
						goto l761
					}
					position++
					if buffer[position] != rune('l') {
						goto l761
					}
					position++
					if buffer[position] != rune('i') {
						goto l761
					}
					position++
					if buffer[position] != rune('n') {
						goto l761
					}
					position++
					if buffer[position] != rune('a') {
						goto l761
					}
					position++
				}
			l763:
				add(ruleAuthorWord1, position762)
			}
			return true
		l761:
			position, tokenIndex = position761, tokenIndex761
			return false
		},
		/* 104 AuthorWord2 <- <((AuthorWord3 / AuthorWord4) Dash (AuthorWordSoft / AuthorInitial) (Dash (AuthorWordSoft / AuthorInitial))?)> */
		func() bool {
			position766, tokenIndex766 := position, tokenIndex
			{
				position767 := position
				{
					position768, tokenIndex768 := position, tokenIndex
					if !_rules[ruleAuthorWord3]() {
						goto l769
					}
					goto l768
				l769:
					position, tokenIndex = position768, tokenIndex768
					if !_rules[ruleAuthorWord4]() {
						goto l766
					}
				}
			l768:
				if !_rules[ruleDash]() {
					goto l766
				}
				{
					position770, tokenIndex770 := position, tokenIndex
					if !_rules[ruleAuthorWordSoft]() {
						goto l771
					}
					goto l770
				l771:
					position, tokenIndex = position770, tokenIndex770
					if !_rules[ruleAuthorInitial]() {
						goto l766
					}
				}
			l770:
				{
					position772, tokenIndex772 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l772
					}
					{
						position774, tokenIndex774 := position, tokenIndex
						if !_rules[ruleAuthorWordSoft]() {
							goto l775
						}
						goto l774
					l775:
						position, tokenIndex = position774, tokenIndex774
						if !_rules[ruleAuthorInitial]() {
							goto l772
						}
					}
				l774:
					goto l773
				l772:
					position, tokenIndex = position772, tokenIndex772
				}
			l773:
				add(ruleAuthorWord2, position767)
			}
			return true
		l766:
			position, tokenIndex = position766, tokenIndex766
			return false
		},
		/* 105 AuthorWord3 <- <(AuthorPrefixGlued2 (CapAuthorWord / AuthorLowerChar+) '.'?)> */
		func() bool {
			position776, tokenIndex776 := position, tokenIndex
			{
				position777 := position
				if !_rules[ruleAuthorPrefixGlued2]() {
					goto l776
				}
				{
					position778, tokenIndex778 := position, tokenIndex
					if !_rules[ruleCapAuthorWord]() {
						goto l779
					}
					goto l778
				l779:
					position, tokenIndex = position778, tokenIndex778
					if !_rules[ruleAuthorLowerChar]() {
						goto l776
					}
				l780:
					{
						position781, tokenIndex781 := position, tokenIndex
						if !_rules[ruleAuthorLowerChar]() {
							goto l781
						}
						goto l780
					l781:
						position, tokenIndex = position781, tokenIndex781
					}
				}
			l778:
				{
					position782, tokenIndex782 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l782
					}
					position++
					goto l783
				l782:
					position, tokenIndex = position782, tokenIndex782
				}
			l783:
				add(ruleAuthorWord3, position777)
			}
			return true
		l776:
			position, tokenIndex = position776, tokenIndex776
			return false
		},
		/* 106 AuthorWord4 <- <(AuthorPrefixGlued1? (AllCapsAuthorWord / CapAuthorWord) '.'?)> */
		func() bool {
			position784, tokenIndex784 := position, tokenIndex
			{
				position785 := position
				{
					position786, tokenIndex786 := position, tokenIndex
					if !_rules[ruleAuthorPrefixGlued1]() {
						goto l786
					}
					goto l787
				l786:
					position, tokenIndex = position786, tokenIndex786
				}
			l787:
				{
					position788, tokenIndex788 := position, tokenIndex
					if !_rules[ruleAllCapsAuthorWord]() {
						goto l789
					}
					goto l788
				l789:
					position, tokenIndex = position788, tokenIndex788
					if !_rules[ruleCapAuthorWord]() {
						goto l784
					}
				}
			l788:
				{
					position790, tokenIndex790 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l790
					}
					position++
					goto l791
				l790:
					position, tokenIndex = position790, tokenIndex790
				}
			l791:
				add(ruleAuthorWord4, position785)
			}
			return true
		l784:
			position, tokenIndex = position784, tokenIndex784
			return false
		},
		/* 107 AuthorDashInitials <- <(AuthorUpperChar '.'? Dash AuthorUpperChar '.'?)> */
		func() bool {
			position792, tokenIndex792 := position, tokenIndex
			{
				position793 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l792
				}
				{
					position794, tokenIndex794 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l794
					}
					position++
					goto l795
				l794:
					position, tokenIndex = position794, tokenIndex794
				}
			l795:
				if !_rules[ruleDash]() {
					goto l792
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l792
				}
				{
					position796, tokenIndex796 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l796
					}
					position++
					goto l797
				l796:
					position, tokenIndex = position796, tokenIndex796
				}
			l797:
				add(ruleAuthorDashInitials, position793)
			}
			return true
		l792:
			position, tokenIndex = position792, tokenIndex792
			return false
		},
		/* 108 AuthorInitial <- <(AuthorUpperChar '.'?)> */
		func() bool {
			position798, tokenIndex798 := position, tokenIndex
			{
				position799 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l798
				}
				{
					position800, tokenIndex800 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l800
					}
					position++
					goto l801
				l800:
					position, tokenIndex = position800, tokenIndex800
				}
			l801:
				add(ruleAuthorInitial, position799)
			}
			return true
		l798:
			position, tokenIndex = position798, tokenIndex798
			return false
		},
		/* 109 AuthorWordSoft <- <(((AuthorUpperChar (AuthorUpperChar+ / AuthorLowerChar+)) / AuthorLowerChar+) '.'?)> */
		func() bool {
			position802, tokenIndex802 := position, tokenIndex
			{
				position803 := position
				{
					position804, tokenIndex804 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l805
					}
					{
						position806, tokenIndex806 := position, tokenIndex
						if !_rules[ruleAuthorUpperChar]() {
							goto l807
						}
					l808:
						{
							position809, tokenIndex809 := position, tokenIndex
							if !_rules[ruleAuthorUpperChar]() {
								goto l809
							}
							goto l808
						l809:
							position, tokenIndex = position809, tokenIndex809
						}
						goto l806
					l807:
						position, tokenIndex = position806, tokenIndex806
						if !_rules[ruleAuthorLowerChar]() {
							goto l805
						}
					l810:
						{
							position811, tokenIndex811 := position, tokenIndex
							if !_rules[ruleAuthorLowerChar]() {
								goto l811
							}
							goto l810
						l811:
							position, tokenIndex = position811, tokenIndex811
						}
					}
				l806:
					goto l804
				l805:
					position, tokenIndex = position804, tokenIndex804
					if !_rules[ruleAuthorLowerChar]() {
						goto l802
					}
				l812:
					{
						position813, tokenIndex813 := position, tokenIndex
						if !_rules[ruleAuthorLowerChar]() {
							goto l813
						}
						goto l812
					l813:
						position, tokenIndex = position813, tokenIndex813
					}
				}
			l804:
				{
					position814, tokenIndex814 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l814
					}
					position++
					goto l815
				l814:
					position, tokenIndex = position814, tokenIndex814
				}
			l815:
				add(ruleAuthorWordSoft, position803)
			}
			return true
		l802:
			position, tokenIndex = position802, tokenIndex802
			return false
		},
		/* 110 CapAuthorWord <- <(AuthorUpperChar AuthorLowerChar*)> */
		func() bool {
			position816, tokenIndex816 := position, tokenIndex
			{
				position817 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l816
				}
			l818:
				{
					position819, tokenIndex819 := position, tokenIndex
					if !_rules[ruleAuthorLowerChar]() {
						goto l819
					}
					goto l818
				l819:
					position, tokenIndex = position819, tokenIndex819
				}
				add(ruleCapAuthorWord, position817)
			}
			return true
		l816:
			position, tokenIndex = position816, tokenIndex816
			return false
		},
		/* 111 AllCapsAuthorWord <- <(AuthorUpperChar AuthorUpperChar+)> */
		func() bool {
			position820, tokenIndex820 := position, tokenIndex
			{
				position821 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l820
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l820
				}
			l822:
				{
					position823, tokenIndex823 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l823
					}
					goto l822
				l823:
					position, tokenIndex = position823, tokenIndex823
				}
				add(ruleAllCapsAuthorWord, position821)
			}
			return true
		l820:
			position, tokenIndex = position820, tokenIndex820
			return false
		},
		/* 112 Filius <- <(FiliusF / ('f' 'i' 'l' '.') / ('f' 'i' 'l' 'i' 'u' 's'))> */
		func() bool {
			position824, tokenIndex824 := position, tokenIndex
			{
				position825 := position
				{
					position826, tokenIndex826 := position, tokenIndex
					if !_rules[ruleFiliusF]() {
						goto l827
					}
					goto l826
				l827:
					position, tokenIndex = position826, tokenIndex826
					if buffer[position] != rune('f') {
						goto l828
					}
					position++
					if buffer[position] != rune('i') {
						goto l828
					}
					position++
					if buffer[position] != rune('l') {
						goto l828
					}
					position++
					if buffer[position] != rune('.') {
						goto l828
					}
					position++
					goto l826
				l828:
					position, tokenIndex = position826, tokenIndex826
					if buffer[position] != rune('f') {
						goto l824
					}
					position++
					if buffer[position] != rune('i') {
						goto l824
					}
					position++
					if buffer[position] != rune('l') {
						goto l824
					}
					position++
					if buffer[position] != rune('i') {
						goto l824
					}
					position++
					if buffer[position] != rune('u') {
						goto l824
					}
					position++
					if buffer[position] != rune('s') {
						goto l824
					}
					position++
				}
			l826:
				add(ruleFilius, position825)
			}
			return true
		l824:
			position, tokenIndex = position824, tokenIndex824
			return false
		},
		/* 113 FiliusF <- <('f' '.' !(_ Word))> */
		func() bool {
			position829, tokenIndex829 := position, tokenIndex
			{
				position830 := position
				if buffer[position] != rune('f') {
					goto l829
				}
				position++
				if buffer[position] != rune('.') {
					goto l829
				}
				position++
				{
					position831, tokenIndex831 := position, tokenIndex
					if !_rules[rule_]() {
						goto l831
					}
					if !_rules[ruleWord]() {
						goto l831
					}
					goto l829
				l831:
					position, tokenIndex = position831, tokenIndex831
				}
				add(ruleFiliusF, position830)
			}
			return true
		l829:
			position, tokenIndex = position829, tokenIndex829
			return false
		},
		/* 114 FiliusFNoSpace <- <('f' '.')> */
		func() bool {
			position832, tokenIndex832 := position, tokenIndex
			{
				position833 := position
				if buffer[position] != rune('f') {
					goto l832
				}
				position++
				if buffer[position] != rune('.') {
					goto l832
				}
				position++
				add(ruleFiliusFNoSpace, position833)
			}
			return true
		l832:
			position, tokenIndex = position832, tokenIndex832
			return false
		},
		/* 115 AuthorSuffix <- <(('b' 'i' 's') / ('t' 'e' 'r'))> */
		func() bool {
			position834, tokenIndex834 := position, tokenIndex
			{
				position835 := position
				{
					position836, tokenIndex836 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l837
					}
					position++
					if buffer[position] != rune('i') {
						goto l837
					}
					position++
					if buffer[position] != rune('s') {
						goto l837
					}
					position++
					goto l836
				l837:
					position, tokenIndex = position836, tokenIndex836
					if buffer[position] != rune('t') {
						goto l834
					}
					position++
					if buffer[position] != rune('e') {
						goto l834
					}
					position++
					if buffer[position] != rune('r') {
						goto l834
					}
					position++
				}
			l836:
				add(ruleAuthorSuffix, position835)
			}
			return true
		l834:
			position, tokenIndex = position834, tokenIndex834
			return false
		},
		/* 116 AuthorPrefixGlued1 <- <(('d' / 'D' / 'O' / 'L' / 'M') Apostrophe)> */
		func() bool {
			position838, tokenIndex838 := position, tokenIndex
			{
				position839 := position
				{
					position840, tokenIndex840 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l841
					}
					position++
					goto l840
				l841:
					position, tokenIndex = position840, tokenIndex840
					if buffer[position] != rune('D') {
						goto l842
					}
					position++
					goto l840
				l842:
					position, tokenIndex = position840, tokenIndex840
					if buffer[position] != rune('O') {
						goto l843
					}
					position++
					goto l840
				l843:
					position, tokenIndex = position840, tokenIndex840
					if buffer[position] != rune('L') {
						goto l844
					}
					position++
					goto l840
				l844:
					position, tokenIndex = position840, tokenIndex840
					if buffer[position] != rune('M') {
						goto l838
					}
					position++
				}
			l840:
				if !_rules[ruleApostrophe]() {
					goto l838
				}
				add(ruleAuthorPrefixGlued1, position839)
			}
			return true
		l838:
			position, tokenIndex = position838, tokenIndex838
			return false
		},
		/* 117 AuthorPrefixGlued2 <- <((('M' 'c') / ('M' 'a' 'c')) Apostrophe?)> */
		func() bool {
			position845, tokenIndex845 := position, tokenIndex
			{
				position846 := position
				{
					position847, tokenIndex847 := position, tokenIndex
					if buffer[position] != rune('M') {
						goto l848
					}
					position++
					if buffer[position] != rune('c') {
						goto l848
					}
					position++
					goto l847
				l848:
					position, tokenIndex = position847, tokenIndex847
					if buffer[position] != rune('M') {
						goto l845
					}
					position++
					if buffer[position] != rune('a') {
						goto l845
					}
					position++
					if buffer[position] != rune('c') {
						goto l845
					}
					position++
				}
			l847:
				{
					position849, tokenIndex849 := position, tokenIndex
					if !_rules[ruleApostrophe]() {
						goto l849
					}
					goto l850
				l849:
					position, tokenIndex = position849, tokenIndex849
				}
			l850:
				add(ruleAuthorPrefixGlued2, position846)
			}
			return true
		l845:
			position, tokenIndex = position845, tokenIndex845
			return false
		},
		/* 118 AuthorPrefix <- <(AuthorPrefix1 / AuthorPrefix2)> */
		func() bool {
			position851, tokenIndex851 := position, tokenIndex
			{
				position852 := position
				{
					position853, tokenIndex853 := position, tokenIndex
					if !_rules[ruleAuthorPrefix1]() {
						goto l854
					}
					goto l853
				l854:
					position, tokenIndex = position853, tokenIndex853
					if !_rules[ruleAuthorPrefix2]() {
						goto l851
					}
				}
			l853:
				add(ruleAuthorPrefix, position852)
			}
			return true
		l851:
			position, tokenIndex = position851, tokenIndex851
			return false
		},
		/* 119 AuthorPrefix2 <- <(('v' '.' (_? ('d' '.'))?) / (Apostrophe 't'))> */
		func() bool {
			position855, tokenIndex855 := position, tokenIndex
			{
				position856 := position
				{
					position857, tokenIndex857 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l858
					}
					position++
					if buffer[position] != rune('.') {
						goto l858
					}
					position++
					{
						position859, tokenIndex859 := position, tokenIndex
						{
							position861, tokenIndex861 := position, tokenIndex
							if !_rules[rule_]() {
								goto l861
							}
							goto l862
						l861:
							position, tokenIndex = position861, tokenIndex861
						}
					l862:
						if buffer[position] != rune('d') {
							goto l859
						}
						position++
						if buffer[position] != rune('.') {
							goto l859
						}
						position++
						goto l860
					l859:
						position, tokenIndex = position859, tokenIndex859
					}
				l860:
					goto l857
				l858:
					position, tokenIndex = position857, tokenIndex857
					if !_rules[ruleApostrophe]() {
						goto l855
					}
					if buffer[position] != rune('t') {
						goto l855
					}
					position++
				}
			l857:
				add(ruleAuthorPrefix2, position856)
			}
			return true
		l855:
			position, tokenIndex = position855, tokenIndex855
			return false
		},
		/* 120 AuthorPrefix1 <- <((('a' 'b') / ('a' 'f') / ('b' 'i' 's') / ('d' 'a') / ('d' 'e' 'r') / ('d' 'e' 's') / ('d' 'e' 'n') / ('d' 'e' 'm') / ('d' 'e' 'l' 'l' 'a') / ('d' 'e' 'l' 'a') / ('d' 'e' 'l' 'l' 'e') / ('d' 'e' 'l') / ('d' 'e' ' ' 'l' 'o' 's') / ('d' 'e') / ('d' 'i') / ('d' 'o' 's') / ('d' 'u') / ('d' 'o') / ('e' 'l') / ('l' 'a') / ('l' 'e') / ('t' 'e' 'n') / ('t' 'e' 'r') / ('v' 'a' 'n') / ('v' 'e' 'r') / ('d' Apostrophe) / ('i' 'n' Apostrophe 't') / ('z' 'u' 'r') / ('z' 'u') / ('v' 'o' 'n' (_ (('d' '.') / ('d' 'e' 'm')))?) / ('v' (_ 'd')?)) &_)> */
		func() bool {
			position863, tokenIndex863 := position, tokenIndex
			{
				position864 := position
				{
					position865, tokenIndex865 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l866
					}
					position++
					if buffer[position] != rune('b') {
						goto l866
					}
					position++
					goto l865
				l866:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('a') {
						goto l867
					}
					position++
					if buffer[position] != rune('f') {
						goto l867
					}
					position++
					goto l865
				l867:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('b') {
						goto l868
					}
					position++
					if buffer[position] != rune('i') {
						goto l868
					}
					position++
					if buffer[position] != rune('s') {
						goto l868
					}
					position++
					goto l865
				l868:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('d') {
						goto l869
					}
					position++
					if buffer[position] != rune('a') {
						goto l869
					}
					position++
					goto l865
				l869:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('d') {
						goto l870
					}
					position++
					if buffer[position] != rune('e') {
						goto l870
					}
					position++
					if buffer[position] != rune('r') {
						goto l870
					}
					position++
					goto l865
				l870:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('d') {
						goto l871
					}
					position++
					if buffer[position] != rune('e') {
						goto l871
					}
					position++
					if buffer[position] != rune('s') {
						goto l871
					}
					position++
					goto l865
				l871:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('d') {
						goto l872
					}
					position++
					if buffer[position] != rune('e') {
						goto l872
					}
					position++
					if buffer[position] != rune('n') {
						goto l872
					}
					position++
					goto l865
				l872:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('d') {
						goto l873
					}
					position++
					if buffer[position] != rune('e') {
						goto l873
					}
					position++
					if buffer[position] != rune('m') {
						goto l873
					}
					position++
					goto l865
				l873:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('d') {
						goto l874
					}
					position++
					if buffer[position] != rune('e') {
						goto l874
					}
					position++
					if buffer[position] != rune('l') {
						goto l874
					}
					position++
					if buffer[position] != rune('l') {
						goto l874
					}
					position++
					if buffer[position] != rune('a') {
						goto l874
					}
					position++
					goto l865
				l874:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('d') {
						goto l875
					}
					position++
					if buffer[position] != rune('e') {
						goto l875
					}
					position++
					if buffer[position] != rune('l') {
						goto l875
					}
					position++
					if buffer[position] != rune('a') {
						goto l875
					}
					position++
					goto l865
				l875:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('d') {
						goto l876
					}
					position++
					if buffer[position] != rune('e') {
						goto l876
					}
					position++
					if buffer[position] != rune('l') {
						goto l876
					}
					position++
					if buffer[position] != rune('l') {
						goto l876
					}
					position++
					if buffer[position] != rune('e') {
						goto l876
					}
					position++
					goto l865
				l876:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('d') {
						goto l877
					}
					position++
					if buffer[position] != rune('e') {
						goto l877
					}
					position++
					if buffer[position] != rune('l') {
						goto l877
					}
					position++
					goto l865
				l877:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('d') {
						goto l878
					}
					position++
					if buffer[position] != rune('e') {
						goto l878
					}
					position++
					if buffer[position] != rune(' ') {
						goto l878
					}
					position++
					if buffer[position] != rune('l') {
						goto l878
					}
					position++
					if buffer[position] != rune('o') {
						goto l878
					}
					position++
					if buffer[position] != rune('s') {
						goto l878
					}
					position++
					goto l865
				l878:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('d') {
						goto l879
					}
					position++
					if buffer[position] != rune('e') {
						goto l879
					}
					position++
					goto l865
				l879:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('d') {
						goto l880
					}
					position++
					if buffer[position] != rune('i') {
						goto l880
					}
					position++
					goto l865
				l880:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('d') {
						goto l881
					}
					position++
					if buffer[position] != rune('o') {
						goto l881
					}
					position++
					if buffer[position] != rune('s') {
						goto l881
					}
					position++
					goto l865
				l881:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('d') {
						goto l882
					}
					position++
					if buffer[position] != rune('u') {
						goto l882
					}
					position++
					goto l865
				l882:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('d') {
						goto l883
					}
					position++
					if buffer[position] != rune('o') {
						goto l883
					}
					position++
					goto l865
				l883:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('e') {
						goto l884
					}
					position++
					if buffer[position] != rune('l') {
						goto l884
					}
					position++
					goto l865
				l884:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('l') {
						goto l885
					}
					position++
					if buffer[position] != rune('a') {
						goto l885
					}
					position++
					goto l865
				l885:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('l') {
						goto l886
					}
					position++
					if buffer[position] != rune('e') {
						goto l886
					}
					position++
					goto l865
				l886:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('t') {
						goto l887
					}
					position++
					if buffer[position] != rune('e') {
						goto l887
					}
					position++
					if buffer[position] != rune('n') {
						goto l887
					}
					position++
					goto l865
				l887:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('t') {
						goto l888
					}
					position++
					if buffer[position] != rune('e') {
						goto l888
					}
					position++
					if buffer[position] != rune('r') {
						goto l888
					}
					position++
					goto l865
				l888:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('v') {
						goto l889
					}
					position++
					if buffer[position] != rune('a') {
						goto l889
					}
					position++
					if buffer[position] != rune('n') {
						goto l889
					}
					position++
					goto l865
				l889:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('v') {
						goto l890
					}
					position++
					if buffer[position] != rune('e') {
						goto l890
					}
					position++
					if buffer[position] != rune('r') {
						goto l890
					}
					position++
					goto l865
				l890:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('d') {
						goto l891
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l891
					}
					goto l865
				l891:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('i') {
						goto l892
					}
					position++
					if buffer[position] != rune('n') {
						goto l892
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l892
					}
					if buffer[position] != rune('t') {
						goto l892
					}
					position++
					goto l865
				l892:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('z') {
						goto l893
					}
					position++
					if buffer[position] != rune('u') {
						goto l893
					}
					position++
					if buffer[position] != rune('r') {
						goto l893
					}
					position++
					goto l865
				l893:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('z') {
						goto l894
					}
					position++
					if buffer[position] != rune('u') {
						goto l894
					}
					position++
					goto l865
				l894:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('v') {
						goto l895
					}
					position++
					if buffer[position] != rune('o') {
						goto l895
					}
					position++
					if buffer[position] != rune('n') {
						goto l895
					}
					position++
					{
						position896, tokenIndex896 := position, tokenIndex
						if !_rules[rule_]() {
							goto l896
						}
						{
							position898, tokenIndex898 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l899
							}
							position++
							if buffer[position] != rune('.') {
								goto l899
							}
							position++
							goto l898
						l899:
							position, tokenIndex = position898, tokenIndex898
							if buffer[position] != rune('d') {
								goto l896
							}
							position++
							if buffer[position] != rune('e') {
								goto l896
							}
							position++
							if buffer[position] != rune('m') {
								goto l896
							}
							position++
						}
					l898:
						goto l897
					l896:
						position, tokenIndex = position896, tokenIndex896
					}
				l897:
					goto l865
				l895:
					position, tokenIndex = position865, tokenIndex865
					if buffer[position] != rune('v') {
						goto l863
					}
					position++
					{
						position900, tokenIndex900 := position, tokenIndex
						if !_rules[rule_]() {
							goto l900
						}
						if buffer[position] != rune('d') {
							goto l900
						}
						position++
						goto l901
					l900:
						position, tokenIndex = position900, tokenIndex900
					}
				l901:
				}
			l865:
				{
					position902, tokenIndex902 := position, tokenIndex
					if !_rules[rule_]() {
						goto l863
					}
					position, tokenIndex = position902, tokenIndex902
				}
				add(ruleAuthorPrefix1, position864)
			}
			return true
		l863:
			position, tokenIndex = position863, tokenIndex863
			return false
		},
		/* 121 AuthorUpperChar <- <(UpperASCII / MiscodedChar / ('À' / 'Á' / 'Â' / 'Ã' / 'Ä' / 'Å' / 'Æ' / 'Ç' / 'È' / 'É' / 'Ê' / 'Ë' / 'Ì' / 'Í' / 'Î' / 'Ï' / 'Ð' / 'Ñ' / 'Ò' / 'Ó' / 'Ô' / 'Õ' / 'Ö' / 'Ø' / 'Ù' / 'Ú' / 'Û' / 'Ü' / 'Ý' / 'Ć' / 'Č' / 'Ď' / 'İ' / 'Ķ' / 'Ĺ' / 'ĺ' / 'Ľ' / 'ľ' / 'Ł' / 'ł' / 'Ņ' / 'Ō' / 'Ő' / 'Œ' / 'Ř' / 'Ś' / 'Ŝ' / 'Ş' / 'Š' / 'Ÿ' / 'Ź' / 'Ż' / 'Ž' / 'ƒ' / 'Ǿ' / 'Ș' / 'Ț'))> */
		func() bool {
			position903, tokenIndex903 := position, tokenIndex
			{
				position904 := position
				{
					position905, tokenIndex905 := position, tokenIndex
					if !_rules[ruleUpperASCII]() {
						goto l906
					}
					goto l905
				l906:
					position, tokenIndex = position905, tokenIndex905
					if !_rules[ruleMiscodedChar]() {
						goto l907
					}
					goto l905
				l907:
					position, tokenIndex = position905, tokenIndex905
					{
						position908, tokenIndex908 := position, tokenIndex
						if buffer[position] != rune('À') {
							goto l909
						}
						position++
						goto l908
					l909:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Á') {
							goto l910
						}
						position++
						goto l908
					l910:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Â') {
							goto l911
						}
						position++
						goto l908
					l911:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ã') {
							goto l912
						}
						position++
						goto l908
					l912:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ä') {
							goto l913
						}
						position++
						goto l908
					l913:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Å') {
							goto l914
						}
						position++
						goto l908
					l914:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Æ') {
							goto l915
						}
						position++
						goto l908
					l915:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ç') {
							goto l916
						}
						position++
						goto l908
					l916:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('È') {
							goto l917
						}
						position++
						goto l908
					l917:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('É') {
							goto l918
						}
						position++
						goto l908
					l918:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ê') {
							goto l919
						}
						position++
						goto l908
					l919:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ë') {
							goto l920
						}
						position++
						goto l908
					l920:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ì') {
							goto l921
						}
						position++
						goto l908
					l921:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Í') {
							goto l922
						}
						position++
						goto l908
					l922:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Î') {
							goto l923
						}
						position++
						goto l908
					l923:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ï') {
							goto l924
						}
						position++
						goto l908
					l924:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ð') {
							goto l925
						}
						position++
						goto l908
					l925:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ñ') {
							goto l926
						}
						position++
						goto l908
					l926:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ò') {
							goto l927
						}
						position++
						goto l908
					l927:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ó') {
							goto l928
						}
						position++
						goto l908
					l928:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ô') {
							goto l929
						}
						position++
						goto l908
					l929:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Õ') {
							goto l930
						}
						position++
						goto l908
					l930:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ö') {
							goto l931
						}
						position++
						goto l908
					l931:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ø') {
							goto l932
						}
						position++
						goto l908
					l932:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ù') {
							goto l933
						}
						position++
						goto l908
					l933:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ú') {
							goto l934
						}
						position++
						goto l908
					l934:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Û') {
							goto l935
						}
						position++
						goto l908
					l935:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ü') {
							goto l936
						}
						position++
						goto l908
					l936:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ý') {
							goto l937
						}
						position++
						goto l908
					l937:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ć') {
							goto l938
						}
						position++
						goto l908
					l938:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Č') {
							goto l939
						}
						position++
						goto l908
					l939:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ď') {
							goto l940
						}
						position++
						goto l908
					l940:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('İ') {
							goto l941
						}
						position++
						goto l908
					l941:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ķ') {
							goto l942
						}
						position++
						goto l908
					l942:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ĺ') {
							goto l943
						}
						position++
						goto l908
					l943:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('ĺ') {
							goto l944
						}
						position++
						goto l908
					l944:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ľ') {
							goto l945
						}
						position++
						goto l908
					l945:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('ľ') {
							goto l946
						}
						position++
						goto l908
					l946:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ł') {
							goto l947
						}
						position++
						goto l908
					l947:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('ł') {
							goto l948
						}
						position++
						goto l908
					l948:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ņ') {
							goto l949
						}
						position++
						goto l908
					l949:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ō') {
							goto l950
						}
						position++
						goto l908
					l950:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ő') {
							goto l951
						}
						position++
						goto l908
					l951:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Œ') {
							goto l952
						}
						position++
						goto l908
					l952:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ř') {
							goto l953
						}
						position++
						goto l908
					l953:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ś') {
							goto l954
						}
						position++
						goto l908
					l954:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ŝ') {
							goto l955
						}
						position++
						goto l908
					l955:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ş') {
							goto l956
						}
						position++
						goto l908
					l956:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Š') {
							goto l957
						}
						position++
						goto l908
					l957:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ÿ') {
							goto l958
						}
						position++
						goto l908
					l958:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ź') {
							goto l959
						}
						position++
						goto l908
					l959:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ż') {
							goto l960
						}
						position++
						goto l908
					l960:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ž') {
							goto l961
						}
						position++
						goto l908
					l961:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('ƒ') {
							goto l962
						}
						position++
						goto l908
					l962:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ǿ') {
							goto l963
						}
						position++
						goto l908
					l963:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ș') {
							goto l964
						}
						position++
						goto l908
					l964:
						position, tokenIndex = position908, tokenIndex908
						if buffer[position] != rune('Ț') {
							goto l903
						}
						position++
					}
				l908:
				}
			l905:
				add(ruleAuthorUpperChar, position904)
			}
			return true
		l903:
			position, tokenIndex = position903, tokenIndex903
			return false
		},
		/* 122 AuthorLowerChar <- <(LowerASCII / MiscodedChar / Apostrophe / ('à' / 'á' / 'â' / 'ã' / 'ä' / 'å' / 'æ' / 'ç' / 'è' / 'é' / 'ê' / 'ë' / 'ì' / 'í' / 'î' / 'ï' / 'ð' / 'ñ' / 'ò' / 'ó' / 'ó' / 'ô' / 'õ' / 'ö' / 'ø' / 'ù' / 'ú' / 'û' / 'ü' / 'ý' / 'ÿ' / 'ā' / 'ă' / 'ą' / 'ć' / 'ĉ' / 'č' / 'ď' / 'đ' / 'ē' / 'ĕ' / 'ė' / 'ę' / 'ě' / 'ğ' / 'ī' / 'ĭ' / 'İ' / 'ı' / 'ĺ' / 'ľ' / 'ł' / 'ń' / 'ņ' / 'ň' / 'ŏ' / 'ő' / 'œ' / 'ŕ' / 'ř' / 'ś' / 'ş' / 'š' / 'ţ' / 'ť' / 'ũ' / 'ū' / 'ŭ' / 'ů' / 'ű' / 'ź' / 'ż' / 'ž' / 'ſ' / 'ǎ' / 'ǔ' / 'ǧ' / 'ș' / 'ț' / 'ȳ' / 'ß'))> */
		func() bool {
			position965, tokenIndex965 := position, tokenIndex
			{
				position966 := position
				{
					position967, tokenIndex967 := position, tokenIndex
					if !_rules[ruleLowerASCII]() {
						goto l968
					}
					goto l967
				l968:
					position, tokenIndex = position967, tokenIndex967
					if !_rules[ruleMiscodedChar]() {
						goto l969
					}
					goto l967
				l969:
					position, tokenIndex = position967, tokenIndex967
					if !_rules[ruleApostrophe]() {
						goto l970
					}
					goto l967
				l970:
					position, tokenIndex = position967, tokenIndex967
					{
						position971, tokenIndex971 := position, tokenIndex
						if buffer[position] != rune('à') {
							goto l972
						}
						position++
						goto l971
					l972:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('á') {
							goto l973
						}
						position++
						goto l971
					l973:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('â') {
							goto l974
						}
						position++
						goto l971
					l974:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ã') {
							goto l975
						}
						position++
						goto l971
					l975:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ä') {
							goto l976
						}
						position++
						goto l971
					l976:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('å') {
							goto l977
						}
						position++
						goto l971
					l977:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('æ') {
							goto l978
						}
						position++
						goto l971
					l978:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ç') {
							goto l979
						}
						position++
						goto l971
					l979:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('è') {
							goto l980
						}
						position++
						goto l971
					l980:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('é') {
							goto l981
						}
						position++
						goto l971
					l981:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ê') {
							goto l982
						}
						position++
						goto l971
					l982:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ë') {
							goto l983
						}
						position++
						goto l971
					l983:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ì') {
							goto l984
						}
						position++
						goto l971
					l984:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('í') {
							goto l985
						}
						position++
						goto l971
					l985:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('î') {
							goto l986
						}
						position++
						goto l971
					l986:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ï') {
							goto l987
						}
						position++
						goto l971
					l987:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ð') {
							goto l988
						}
						position++
						goto l971
					l988:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ñ') {
							goto l989
						}
						position++
						goto l971
					l989:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ò') {
							goto l990
						}
						position++
						goto l971
					l990:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ó') {
							goto l991
						}
						position++
						goto l971
					l991:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ó') {
							goto l992
						}
						position++
						goto l971
					l992:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ô') {
							goto l993
						}
						position++
						goto l971
					l993:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('õ') {
							goto l994
						}
						position++
						goto l971
					l994:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ö') {
							goto l995
						}
						position++
						goto l971
					l995:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ø') {
							goto l996
						}
						position++
						goto l971
					l996:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ù') {
							goto l997
						}
						position++
						goto l971
					l997:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ú') {
							goto l998
						}
						position++
						goto l971
					l998:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('û') {
							goto l999
						}
						position++
						goto l971
					l999:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ü') {
							goto l1000
						}
						position++
						goto l971
					l1000:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ý') {
							goto l1001
						}
						position++
						goto l971
					l1001:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ÿ') {
							goto l1002
						}
						position++
						goto l971
					l1002:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ā') {
							goto l1003
						}
						position++
						goto l971
					l1003:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ă') {
							goto l1004
						}
						position++
						goto l971
					l1004:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ą') {
							goto l1005
						}
						position++
						goto l971
					l1005:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ć') {
							goto l1006
						}
						position++
						goto l971
					l1006:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ĉ') {
							goto l1007
						}
						position++
						goto l971
					l1007:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('č') {
							goto l1008
						}
						position++
						goto l971
					l1008:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ď') {
							goto l1009
						}
						position++
						goto l971
					l1009:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('đ') {
							goto l1010
						}
						position++
						goto l971
					l1010:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ē') {
							goto l1011
						}
						position++
						goto l971
					l1011:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ĕ') {
							goto l1012
						}
						position++
						goto l971
					l1012:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ė') {
							goto l1013
						}
						position++
						goto l971
					l1013:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ę') {
							goto l1014
						}
						position++
						goto l971
					l1014:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ě') {
							goto l1015
						}
						position++
						goto l971
					l1015:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ğ') {
							goto l1016
						}
						position++
						goto l971
					l1016:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ī') {
							goto l1017
						}
						position++
						goto l971
					l1017:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ĭ') {
							goto l1018
						}
						position++
						goto l971
					l1018:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('İ') {
							goto l1019
						}
						position++
						goto l971
					l1019:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ı') {
							goto l1020
						}
						position++
						goto l971
					l1020:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ĺ') {
							goto l1021
						}
						position++
						goto l971
					l1021:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ľ') {
							goto l1022
						}
						position++
						goto l971
					l1022:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ł') {
							goto l1023
						}
						position++
						goto l971
					l1023:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ń') {
							goto l1024
						}
						position++
						goto l971
					l1024:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ņ') {
							goto l1025
						}
						position++
						goto l971
					l1025:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ň') {
							goto l1026
						}
						position++
						goto l971
					l1026:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ŏ') {
							goto l1027
						}
						position++
						goto l971
					l1027:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ő') {
							goto l1028
						}
						position++
						goto l971
					l1028:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('œ') {
							goto l1029
						}
						position++
						goto l971
					l1029:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ŕ') {
							goto l1030
						}
						position++
						goto l971
					l1030:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ř') {
							goto l1031
						}
						position++
						goto l971
					l1031:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ś') {
							goto l1032
						}
						position++
						goto l971
					l1032:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ş') {
							goto l1033
						}
						position++
						goto l971
					l1033:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('š') {
							goto l1034
						}
						position++
						goto l971
					l1034:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ţ') {
							goto l1035
						}
						position++
						goto l971
					l1035:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ť') {
							goto l1036
						}
						position++
						goto l971
					l1036:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ũ') {
							goto l1037
						}
						position++
						goto l971
					l1037:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ū') {
							goto l1038
						}
						position++
						goto l971
					l1038:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ŭ') {
							goto l1039
						}
						position++
						goto l971
					l1039:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ů') {
							goto l1040
						}
						position++
						goto l971
					l1040:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ű') {
							goto l1041
						}
						position++
						goto l971
					l1041:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ź') {
							goto l1042
						}
						position++
						goto l971
					l1042:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ż') {
							goto l1043
						}
						position++
						goto l971
					l1043:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ž') {
							goto l1044
						}
						position++
						goto l971
					l1044:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ſ') {
							goto l1045
						}
						position++
						goto l971
					l1045:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ǎ') {
							goto l1046
						}
						position++
						goto l971
					l1046:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ǔ') {
							goto l1047
						}
						position++
						goto l971
					l1047:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ǧ') {
							goto l1048
						}
						position++
						goto l971
					l1048:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ș') {
							goto l1049
						}
						position++
						goto l971
					l1049:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ț') {
							goto l1050
						}
						position++
						goto l971
					l1050:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ȳ') {
							goto l1051
						}
						position++
						goto l971
					l1051:
						position, tokenIndex = position971, tokenIndex971
						if buffer[position] != rune('ß') {
							goto l965
						}
						position++
					}
				l971:
				}
			l967:
				add(ruleAuthorLowerChar, position966)
			}
			return true
		l965:
			position, tokenIndex = position965, tokenIndex965
			return false
		},
		/* 123 Year <- <(YearRange / YearApprox / YearWithParens / YearWithPage / YearWithDot / YearWithChar / YearNum)> */
		func() bool {
			position1052, tokenIndex1052 := position, tokenIndex
			{
				position1053 := position
				{
					position1054, tokenIndex1054 := position, tokenIndex
					if !_rules[ruleYearRange]() {
						goto l1055
					}
					goto l1054
				l1055:
					position, tokenIndex = position1054, tokenIndex1054
					if !_rules[ruleYearApprox]() {
						goto l1056
					}
					goto l1054
				l1056:
					position, tokenIndex = position1054, tokenIndex1054
					if !_rules[ruleYearWithParens]() {
						goto l1057
					}
					goto l1054
				l1057:
					position, tokenIndex = position1054, tokenIndex1054
					if !_rules[ruleYearWithPage]() {
						goto l1058
					}
					goto l1054
				l1058:
					position, tokenIndex = position1054, tokenIndex1054
					if !_rules[ruleYearWithDot]() {
						goto l1059
					}
					goto l1054
				l1059:
					position, tokenIndex = position1054, tokenIndex1054
					if !_rules[ruleYearWithChar]() {
						goto l1060
					}
					goto l1054
				l1060:
					position, tokenIndex = position1054, tokenIndex1054
					if !_rules[ruleYearNum]() {
						goto l1052
					}
				}
			l1054:
				add(ruleYear, position1053)
			}
			return true
		l1052:
			position, tokenIndex = position1052, tokenIndex1052
			return false
		},
		/* 124 YearRange <- <(YearNum (Dash / Slash) (Nums+ ('a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '?')*))> */
		func() bool {
			position1061, tokenIndex1061 := position, tokenIndex
			{
				position1062 := position
				if !_rules[ruleYearNum]() {
					goto l1061
				}
				{
					position1063, tokenIndex1063 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l1064
					}
					goto l1063
				l1064:
					position, tokenIndex = position1063, tokenIndex1063
					if !_rules[ruleSlash]() {
						goto l1061
					}
				}
			l1063:
				if !_rules[ruleNums]() {
					goto l1061
				}
			l1065:
				{
					position1066, tokenIndex1066 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1066
					}
					goto l1065
				l1066:
					position, tokenIndex = position1066, tokenIndex1066
				}
			l1067:
				{
					position1068, tokenIndex1068 := position, tokenIndex
					{
						position1069, tokenIndex1069 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l1070
						}
						position++
						goto l1069
					l1070:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('b') {
							goto l1071
						}
						position++
						goto l1069
					l1071:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('c') {
							goto l1072
						}
						position++
						goto l1069
					l1072:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('d') {
							goto l1073
						}
						position++
						goto l1069
					l1073:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('e') {
							goto l1074
						}
						position++
						goto l1069
					l1074:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('f') {
							goto l1075
						}
						position++
						goto l1069
					l1075:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('g') {
							goto l1076
						}
						position++
						goto l1069
					l1076:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('h') {
							goto l1077
						}
						position++
						goto l1069
					l1077:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('i') {
							goto l1078
						}
						position++
						goto l1069
					l1078:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('j') {
							goto l1079
						}
						position++
						goto l1069
					l1079:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('k') {
							goto l1080
						}
						position++
						goto l1069
					l1080:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('l') {
							goto l1081
						}
						position++
						goto l1069
					l1081:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('m') {
							goto l1082
						}
						position++
						goto l1069
					l1082:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('n') {
							goto l1083
						}
						position++
						goto l1069
					l1083:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('o') {
							goto l1084
						}
						position++
						goto l1069
					l1084:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('p') {
							goto l1085
						}
						position++
						goto l1069
					l1085:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('q') {
							goto l1086
						}
						position++
						goto l1069
					l1086:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('r') {
							goto l1087
						}
						position++
						goto l1069
					l1087:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('s') {
							goto l1088
						}
						position++
						goto l1069
					l1088:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('t') {
							goto l1089
						}
						position++
						goto l1069
					l1089:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('u') {
							goto l1090
						}
						position++
						goto l1069
					l1090:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('v') {
							goto l1091
						}
						position++
						goto l1069
					l1091:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('w') {
							goto l1092
						}
						position++
						goto l1069
					l1092:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('x') {
							goto l1093
						}
						position++
						goto l1069
					l1093:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('y') {
							goto l1094
						}
						position++
						goto l1069
					l1094:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('z') {
							goto l1095
						}
						position++
						goto l1069
					l1095:
						position, tokenIndex = position1069, tokenIndex1069
						if buffer[position] != rune('?') {
							goto l1068
						}
						position++
					}
				l1069:
					goto l1067
				l1068:
					position, tokenIndex = position1068, tokenIndex1068
				}
				add(ruleYearRange, position1062)
			}
			return true
		l1061:
			position, tokenIndex = position1061, tokenIndex1061
			return false
		},
		/* 125 YearWithDot <- <(YearNum '.')> */
		func() bool {
			position1096, tokenIndex1096 := position, tokenIndex
			{
				position1097 := position
				if !_rules[ruleYearNum]() {
					goto l1096
				}
				if buffer[position] != rune('.') {
					goto l1096
				}
				position++
				add(ruleYearWithDot, position1097)
			}
			return true
		l1096:
			position, tokenIndex = position1096, tokenIndex1096
			return false
		},
		/* 126 YearApprox <- <('[' _? YearNum _? ']')> */
		func() bool {
			position1098, tokenIndex1098 := position, tokenIndex
			{
				position1099 := position
				if buffer[position] != rune('[') {
					goto l1098
				}
				position++
				{
					position1100, tokenIndex1100 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1100
					}
					goto l1101
				l1100:
					position, tokenIndex = position1100, tokenIndex1100
				}
			l1101:
				if !_rules[ruleYearNum]() {
					goto l1098
				}
				{
					position1102, tokenIndex1102 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1102
					}
					goto l1103
				l1102:
					position, tokenIndex = position1102, tokenIndex1102
				}
			l1103:
				if buffer[position] != rune(']') {
					goto l1098
				}
				position++
				add(ruleYearApprox, position1099)
			}
			return true
		l1098:
			position, tokenIndex = position1098, tokenIndex1098
			return false
		},
		/* 127 YearWithPage <- <((YearWithChar / YearNum) _? ':' _? Nums+)> */
		func() bool {
			position1104, tokenIndex1104 := position, tokenIndex
			{
				position1105 := position
				{
					position1106, tokenIndex1106 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1107
					}
					goto l1106
				l1107:
					position, tokenIndex = position1106, tokenIndex1106
					if !_rules[ruleYearNum]() {
						goto l1104
					}
				}
			l1106:
				{
					position1108, tokenIndex1108 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1108
					}
					goto l1109
				l1108:
					position, tokenIndex = position1108, tokenIndex1108
				}
			l1109:
				if buffer[position] != rune(':') {
					goto l1104
				}
				position++
				{
					position1110, tokenIndex1110 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1110
					}
					goto l1111
				l1110:
					position, tokenIndex = position1110, tokenIndex1110
				}
			l1111:
				if !_rules[ruleNums]() {
					goto l1104
				}
			l1112:
				{
					position1113, tokenIndex1113 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1113
					}
					goto l1112
				l1113:
					position, tokenIndex = position1113, tokenIndex1113
				}
				add(ruleYearWithPage, position1105)
			}
			return true
		l1104:
			position, tokenIndex = position1104, tokenIndex1104
			return false
		},
		/* 128 YearWithParens <- <('(' (YearWithChar / YearNum) ')')> */
		func() bool {
			position1114, tokenIndex1114 := position, tokenIndex
			{
				position1115 := position
				if buffer[position] != rune('(') {
					goto l1114
				}
				position++
				{
					position1116, tokenIndex1116 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1117
					}
					goto l1116
				l1117:
					position, tokenIndex = position1116, tokenIndex1116
					if !_rules[ruleYearNum]() {
						goto l1114
					}
				}
			l1116:
				if buffer[position] != rune(')') {
					goto l1114
				}
				position++
				add(ruleYearWithParens, position1115)
			}
			return true
		l1114:
			position, tokenIndex = position1114, tokenIndex1114
			return false
		},
		/* 129 YearWithChar <- <(YearNum LowerASCII)> */
		func() bool {
			position1118, tokenIndex1118 := position, tokenIndex
			{
				position1119 := position
				if !_rules[ruleYearNum]() {
					goto l1118
				}
				if !_rules[ruleLowerASCII]() {
					goto l1118
				}
				add(ruleYearWithChar, position1119)
			}
			return true
		l1118:
			position, tokenIndex = position1118, tokenIndex1118
			return false
		},
		/* 130 YearNum <- <(('1' / '2') ('0' / '7' / '8' / '9') Nums (Nums / '?') '?'*)> */
		func() bool {
			position1120, tokenIndex1120 := position, tokenIndex
			{
				position1121 := position
				{
					position1122, tokenIndex1122 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l1123
					}
					position++
					goto l1122
				l1123:
					position, tokenIndex = position1122, tokenIndex1122
					if buffer[position] != rune('2') {
						goto l1120
					}
					position++
				}
			l1122:
				{
					position1124, tokenIndex1124 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l1125
					}
					position++
					goto l1124
				l1125:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('7') {
						goto l1126
					}
					position++
					goto l1124
				l1126:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('8') {
						goto l1127
					}
					position++
					goto l1124
				l1127:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('9') {
						goto l1120
					}
					position++
				}
			l1124:
				if !_rules[ruleNums]() {
					goto l1120
				}
				{
					position1128, tokenIndex1128 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1129
					}
					goto l1128
				l1129:
					position, tokenIndex = position1128, tokenIndex1128
					if buffer[position] != rune('?') {
						goto l1120
					}
					position++
				}
			l1128:
			l1130:
				{
					position1131, tokenIndex1131 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l1131
					}
					position++
					goto l1130
				l1131:
					position, tokenIndex = position1131, tokenIndex1131
				}
				add(ruleYearNum, position1121)
			}
			return true
		l1120:
			position, tokenIndex = position1120, tokenIndex1120
			return false
		},
		/* 131 NameUpperChar <- <(UpperChar / UpperCharExtended)> */
		func() bool {
			position1132, tokenIndex1132 := position, tokenIndex
			{
				position1133 := position
				{
					position1134, tokenIndex1134 := position, tokenIndex
					if !_rules[ruleUpperChar]() {
						goto l1135
					}
					goto l1134
				l1135:
					position, tokenIndex = position1134, tokenIndex1134
					if !_rules[ruleUpperCharExtended]() {
						goto l1132
					}
				}
			l1134:
				add(ruleNameUpperChar, position1133)
			}
			return true
		l1132:
			position, tokenIndex = position1132, tokenIndex1132
			return false
		},
		/* 132 UpperCharExtended <- <('Æ' / 'Œ' / 'Ö')> */
		func() bool {
			position1136, tokenIndex1136 := position, tokenIndex
			{
				position1137 := position
				{
					position1138, tokenIndex1138 := position, tokenIndex
					if buffer[position] != rune('Æ') {
						goto l1139
					}
					position++
					goto l1138
				l1139:
					position, tokenIndex = position1138, tokenIndex1138
					if buffer[position] != rune('Œ') {
						goto l1140
					}
					position++
					goto l1138
				l1140:
					position, tokenIndex = position1138, tokenIndex1138
					if buffer[position] != rune('Ö') {
						goto l1136
					}
					position++
				}
			l1138:
				add(ruleUpperCharExtended, position1137)
			}
			return true
		l1136:
			position, tokenIndex = position1136, tokenIndex1136
			return false
		},
		/* 133 UpperChar <- <UpperASCII> */
		func() bool {
			position1141, tokenIndex1141 := position, tokenIndex
			{
				position1142 := position
				if !_rules[ruleUpperASCII]() {
					goto l1141
				}
				add(ruleUpperChar, position1142)
			}
			return true
		l1141:
			position, tokenIndex = position1141, tokenIndex1141
			return false
		},
		/* 134 NameLowerChar <- <(LowerChar / LowerCharExtended / MiscodedChar)> */
		func() bool {
			position1143, tokenIndex1143 := position, tokenIndex
			{
				position1144 := position
				{
					position1145, tokenIndex1145 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l1146
					}
					goto l1145
				l1146:
					position, tokenIndex = position1145, tokenIndex1145
					if !_rules[ruleLowerCharExtended]() {
						goto l1147
					}
					goto l1145
				l1147:
					position, tokenIndex = position1145, tokenIndex1145
					if !_rules[ruleMiscodedChar]() {
						goto l1143
					}
				}
			l1145:
				add(ruleNameLowerChar, position1144)
			}
			return true
		l1143:
			position, tokenIndex = position1143, tokenIndex1143
			return false
		},
		/* 135 MiscodedChar <- <'�'> */
		func() bool {
			position1148, tokenIndex1148 := position, tokenIndex
			{
				position1149 := position
				if buffer[position] != rune('�') {
					goto l1148
				}
				position++
				add(ruleMiscodedChar, position1149)
			}
			return true
		l1148:
			position, tokenIndex = position1148, tokenIndex1148
			return false
		},
		/* 136 LowerCharExtended <- <('æ' / 'œ' / 'à' / 'â' / 'å' / 'ã' / 'ä' / 'á' / 'ç' / 'č' / 'é' / 'è' / 'ë' / 'í' / 'ì' / 'ï' / 'ň' / 'ñ' / 'ñ' / 'ó' / 'ò' / 'ô' / 'ø' / 'õ' / 'ö' / 'ú' / 'û' / 'ù' / 'ü' / 'ŕ' / 'ř' / 'ŗ' / 'ſ' / 'š' / 'š' / 'ş' / 'ß' / 'ž')> */
		func() bool {
			position1150, tokenIndex1150 := position, tokenIndex
			{
				position1151 := position
				{
					position1152, tokenIndex1152 := position, tokenIndex
					if buffer[position] != rune('æ') {
						goto l1153
					}
					position++
					goto l1152
				l1153:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('œ') {
						goto l1154
					}
					position++
					goto l1152
				l1154:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('à') {
						goto l1155
					}
					position++
					goto l1152
				l1155:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('â') {
						goto l1156
					}
					position++
					goto l1152
				l1156:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('å') {
						goto l1157
					}
					position++
					goto l1152
				l1157:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ã') {
						goto l1158
					}
					position++
					goto l1152
				l1158:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ä') {
						goto l1159
					}
					position++
					goto l1152
				l1159:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('á') {
						goto l1160
					}
					position++
					goto l1152
				l1160:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ç') {
						goto l1161
					}
					position++
					goto l1152
				l1161:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('č') {
						goto l1162
					}
					position++
					goto l1152
				l1162:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('é') {
						goto l1163
					}
					position++
					goto l1152
				l1163:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('è') {
						goto l1164
					}
					position++
					goto l1152
				l1164:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ë') {
						goto l1165
					}
					position++
					goto l1152
				l1165:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('í') {
						goto l1166
					}
					position++
					goto l1152
				l1166:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ì') {
						goto l1167
					}
					position++
					goto l1152
				l1167:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ï') {
						goto l1168
					}
					position++
					goto l1152
				l1168:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ň') {
						goto l1169
					}
					position++
					goto l1152
				l1169:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ñ') {
						goto l1170
					}
					position++
					goto l1152
				l1170:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ñ') {
						goto l1171
					}
					position++
					goto l1152
				l1171:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ó') {
						goto l1172
					}
					position++
					goto l1152
				l1172:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ò') {
						goto l1173
					}
					position++
					goto l1152
				l1173:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ô') {
						goto l1174
					}
					position++
					goto l1152
				l1174:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ø') {
						goto l1175
					}
					position++
					goto l1152
				l1175:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('õ') {
						goto l1176
					}
					position++
					goto l1152
				l1176:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ö') {
						goto l1177
					}
					position++
					goto l1152
				l1177:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ú') {
						goto l1178
					}
					position++
					goto l1152
				l1178:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('û') {
						goto l1179
					}
					position++
					goto l1152
				l1179:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ù') {
						goto l1180
					}
					position++
					goto l1152
				l1180:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ü') {
						goto l1181
					}
					position++
					goto l1152
				l1181:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ŕ') {
						goto l1182
					}
					position++
					goto l1152
				l1182:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ř') {
						goto l1183
					}
					position++
					goto l1152
				l1183:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ŗ') {
						goto l1184
					}
					position++
					goto l1152
				l1184:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ſ') {
						goto l1185
					}
					position++
					goto l1152
				l1185:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('š') {
						goto l1186
					}
					position++
					goto l1152
				l1186:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('š') {
						goto l1187
					}
					position++
					goto l1152
				l1187:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ş') {
						goto l1188
					}
					position++
					goto l1152
				l1188:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ß') {
						goto l1189
					}
					position++
					goto l1152
				l1189:
					position, tokenIndex = position1152, tokenIndex1152
					if buffer[position] != rune('ž') {
						goto l1150
					}
					position++
				}
			l1152:
				add(ruleLowerCharExtended, position1151)
			}
			return true
		l1150:
			position, tokenIndex = position1150, tokenIndex1150
			return false
		},
		/* 137 LowerChar <- <LowerASCII> */
		func() bool {
			position1190, tokenIndex1190 := position, tokenIndex
			{
				position1191 := position
				if !_rules[ruleLowerASCII]() {
					goto l1190
				}
				add(ruleLowerChar, position1191)
			}
			return true
		l1190:
			position, tokenIndex = position1190, tokenIndex1190
			return false
		},
		/* 138 SpaceCharEOI <- <(_ / !.)> */
		func() bool {
			position1192, tokenIndex1192 := position, tokenIndex
			{
				position1193 := position
				{
					position1194, tokenIndex1194 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1195
					}
					goto l1194
				l1195:
					position, tokenIndex = position1194, tokenIndex1194
					{
						position1196, tokenIndex1196 := position, tokenIndex
						if !matchDot() {
							goto l1196
						}
						goto l1192
					l1196:
						position, tokenIndex = position1196, tokenIndex1196
					}
				}
			l1194:
				add(ruleSpaceCharEOI, position1193)
			}
			return true
		l1192:
			position, tokenIndex = position1192, tokenIndex1192
			return false
		},
		/* 139 Nums <- <[0-9]> */
		func() bool {
			position1197, tokenIndex1197 := position, tokenIndex
			{
				position1198 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l1197
				}
				position++
				add(ruleNums, position1198)
			}
			return true
		l1197:
			position, tokenIndex = position1197, tokenIndex1197
			return false
		},
		/* 140 LowerGreek <- <[α-ω]> */
		func() bool {
			position1199, tokenIndex1199 := position, tokenIndex
			{
				position1200 := position
				if c := buffer[position]; c < rune('α') || c > rune('ω') {
					goto l1199
				}
				position++
				add(ruleLowerGreek, position1200)
			}
			return true
		l1199:
			position, tokenIndex = position1199, tokenIndex1199
			return false
		},
		/* 141 LowerASCII <- <[a-z]> */
		func() bool {
			position1201, tokenIndex1201 := position, tokenIndex
			{
				position1202 := position
				if c := buffer[position]; c < rune('a') || c > rune('z') {
					goto l1201
				}
				position++
				add(ruleLowerASCII, position1202)
			}
			return true
		l1201:
			position, tokenIndex = position1201, tokenIndex1201
			return false
		},
		/* 142 UpperASCII <- <[A-Z]> */
		func() bool {
			position1203, tokenIndex1203 := position, tokenIndex
			{
				position1204 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l1203
				}
				position++
				add(ruleUpperASCII, position1204)
			}
			return true
		l1203:
			position, tokenIndex = position1203, tokenIndex1203
			return false
		},
		/* 143 Apostrophe <- <(ApostrOther / ApostrASCII)> */
		func() bool {
			position1205, tokenIndex1205 := position, tokenIndex
			{
				position1206 := position
				{
					position1207, tokenIndex1207 := position, tokenIndex
					if !_rules[ruleApostrOther]() {
						goto l1208
					}
					goto l1207
				l1208:
					position, tokenIndex = position1207, tokenIndex1207
					if !_rules[ruleApostrASCII]() {
						goto l1205
					}
				}
			l1207:
				add(ruleApostrophe, position1206)
			}
			return true
		l1205:
			position, tokenIndex = position1205, tokenIndex1205
			return false
		},
		/* 144 ApostrASCII <- <'\''> */
		func() bool {
			position1209, tokenIndex1209 := position, tokenIndex
			{
				position1210 := position
				if buffer[position] != rune('\'') {
					goto l1209
				}
				position++
				add(ruleApostrASCII, position1210)
			}
			return true
		l1209:
			position, tokenIndex = position1209, tokenIndex1209
			return false
		},
		/* 145 ApostrOther <- <('‘' / '’' / '`' / '´')> */
		func() bool {
			position1211, tokenIndex1211 := position, tokenIndex
			{
				position1212 := position
				{
					position1213, tokenIndex1213 := position, tokenIndex
					if buffer[position] != rune('‘') {
						goto l1214
					}
					position++
					goto l1213
				l1214:
					position, tokenIndex = position1213, tokenIndex1213
					if buffer[position] != rune('’') {
						goto l1215
					}
					position++
					goto l1213
				l1215:
					position, tokenIndex = position1213, tokenIndex1213
					if buffer[position] != rune('`') {
						goto l1216
					}
					position++
					goto l1213
				l1216:
					position, tokenIndex = position1213, tokenIndex1213
					if buffer[position] != rune('´') {
						goto l1211
					}
					position++
				}
			l1213:
				add(ruleApostrOther, position1212)
			}
			return true
		l1211:
			position, tokenIndex = position1211, tokenIndex1211
			return false
		},
		/* 146 Dash <- <('-' / DashOther)> */
		func() bool {
			position1217, tokenIndex1217 := position, tokenIndex
			{
				position1218 := position
				{
					position1219, tokenIndex1219 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l1220
					}
					position++
					goto l1219
				l1220:
					position, tokenIndex = position1219, tokenIndex1219
					if !_rules[ruleDashOther]() {
						goto l1217
					}
				}
			l1219:
				add(ruleDash, position1218)
			}
			return true
		l1217:
			position, tokenIndex = position1217, tokenIndex1217
			return false
		},
		/* 147 DashOther <- <'‑'> */
		func() bool {
			position1221, tokenIndex1221 := position, tokenIndex
			{
				position1222 := position
				if buffer[position] != rune('‑') {
					goto l1221
				}
				position++
				add(ruleDashOther, position1222)
			}
			return true
		l1221:
			position, tokenIndex = position1221, tokenIndex1221
			return false
		},
		/* 148 Slash <- <'/'> */
		func() bool {
			position1223, tokenIndex1223 := position, tokenIndex
			{
				position1224 := position
				if buffer[position] != rune('/') {
					goto l1223
				}
				position++
				add(ruleSlash, position1224)
			}
			return true
		l1223:
			position, tokenIndex = position1223, tokenIndex1223
			return false
		},
		/* 149 _ <- <(MultipleSpace / SingleSpace)> */
		func() bool {
			position1225, tokenIndex1225 := position, tokenIndex
			{
				position1226 := position
				{
					position1227, tokenIndex1227 := position, tokenIndex
					if !_rules[ruleMultipleSpace]() {
						goto l1228
					}
					goto l1227
				l1228:
					position, tokenIndex = position1227, tokenIndex1227
					if !_rules[ruleSingleSpace]() {
						goto l1225
					}
				}
			l1227:
				add(rule_, position1226)
			}
			return true
		l1225:
			position, tokenIndex = position1225, tokenIndex1225
			return false
		},
		/* 150 MultipleSpace <- <(SingleSpace SingleSpace+)> */
		func() bool {
			position1229, tokenIndex1229 := position, tokenIndex
			{
				position1230 := position
				if !_rules[ruleSingleSpace]() {
					goto l1229
				}
				if !_rules[ruleSingleSpace]() {
					goto l1229
				}
			l1231:
				{
					position1232, tokenIndex1232 := position, tokenIndex
					if !_rules[ruleSingleSpace]() {
						goto l1232
					}
					goto l1231
				l1232:
					position, tokenIndex = position1232, tokenIndex1232
				}
				add(ruleMultipleSpace, position1230)
			}
			return true
		l1229:
			position, tokenIndex = position1229, tokenIndex1229
			return false
		},
		/* 151 SingleSpace <- <(' ' / OtherSpace)> */
		func() bool {
			position1233, tokenIndex1233 := position, tokenIndex
			{
				position1234 := position
				{
					position1235, tokenIndex1235 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l1236
					}
					position++
					goto l1235
				l1236:
					position, tokenIndex = position1235, tokenIndex1235
					if !_rules[ruleOtherSpace]() {
						goto l1233
					}
				}
			l1235:
				add(ruleSingleSpace, position1234)
			}
			return true
		l1233:
			position, tokenIndex = position1233, tokenIndex1233
			return false
		},
		/* 152 OtherSpace <- <('\u3000' / '\u00a0' / '\t' / '\r' / '\n' / '\f' / '\v')> */
		func() bool {
			position1237, tokenIndex1237 := position, tokenIndex
			{
				position1238 := position
				{
					position1239, tokenIndex1239 := position, tokenIndex
					if buffer[position] != rune('\u3000') {
						goto l1240
					}
					position++
					goto l1239
				l1240:
					position, tokenIndex = position1239, tokenIndex1239
					if buffer[position] != rune('\u00a0') {
						goto l1241
					}
					position++
					goto l1239
				l1241:
					position, tokenIndex = position1239, tokenIndex1239
					if buffer[position] != rune('\t') {
						goto l1242
					}
					position++
					goto l1239
				l1242:
					position, tokenIndex = position1239, tokenIndex1239
					if buffer[position] != rune('\r') {
						goto l1243
					}
					position++
					goto l1239
				l1243:
					position, tokenIndex = position1239, tokenIndex1239
					if buffer[position] != rune('\n') {
						goto l1244
					}
					position++
					goto l1239
				l1244:
					position, tokenIndex = position1239, tokenIndex1239
					if buffer[position] != rune('\f') {
						goto l1245
					}
					position++
					goto l1239
				l1245:
					position, tokenIndex = position1239, tokenIndex1239
					if buffer[position] != rune('\v') {
						goto l1237
					}
					position++
				}
			l1239:
				add(ruleOtherSpace, position1238)
			}
			return true
		l1237:
			position, tokenIndex = position1237, tokenIndex1237
			return false
		},
		/* 153 END <- <!.> */
		func() bool {
			position1246, tokenIndex1246 := position, tokenIndex
			{
				position1247 := position
				{
					position1248, tokenIndex1248 := position, tokenIndex
					if !matchDot() {
						goto l1248
					}
					goto l1246
				l1248:
					position, tokenIndex = position1248, tokenIndex1248
				}
				add(ruleEND, position1247)
			}
			return true
		l1246:
			position, tokenIndex = position1246, tokenIndex1246
			return false
		},
	}
	p.rules = _rules
	return nil
}
