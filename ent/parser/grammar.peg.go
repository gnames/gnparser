package parser

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleSciName
	ruleTail
	ruleName
	ruleHybridFormula
	ruleHybridFormulaFull
	ruleHybridFormulaPart
	ruleNamedHybrid
	ruleNamedSpeciesHybrid
	ruleNamedGenusHybrid
	ruleGraftChimeraFormula
	ruleGraftChimeraFormulaFull
	ruleGraftChimeraFormulaPart
	ruleNamedGenusGraftChimera
	ruleCandidatusName
	ruleCandidatus
	ruleSingleName
	ruleNameUninomial
	ruleNameApprox
	ruleNameComp
	ruleNameSpecies
	ruleGenusWord
	ruleInfraspGroup
	ruleInfraspEpithet
	ruleCultivarWordGroup
	ruleCultivar
	ruleRankCultivar
	ruleNotHybridChar
	ruleCultivarRecursive
	ruleCultivarApostrophe
	ruleSpeciesEpithet
	ruleComparison
	ruleRank
	ruleRankNotho
	ruleRankOtherUncommon
	ruleRankOther
	ruleRankVar
	ruleRankForma
	ruleRankSsp
	ruleRankAgamo
	ruleSubgenusOrSuperspecies
	ruleSubgenus
	ruleSubgenus2
	ruleSubgenus1
	ruleUninomialCombo
	ruleUninomialCombo1
	ruleUninomialCombo2
	ruleRankUninomial
	ruleRankUninomialPlain
	ruleRankUninomialNotho
	ruleUninomial
	ruleUninomialWord
	ruleAbbrSubgenus
	ruleAbbrGenus
	ruleCapWord
	ruleCapWord1
	ruleCapWordWithDash
	ruleTwoLetterGenusDashedSegment
	ruleWordAfterDash
	ruleUpperAfterDash
	ruleLowerAfterDash
	ruleTwoLetterGenus
	ruleWord
	ruleWord1
	ruleWordStartsWithDigit
	ruleWord2
	ruleWordApostr
	ruleWord4
	ruleDotPrefix
	ruleMultiDashedWord
	ruleHybridChar
	ruleGraftChimeraChar
	ruleApproxNameIgnored
	ruleApproximation
	ruleAuthorship
	ruleAuthorshipCombo
	ruleOriginalAuthorship
	ruleOriginalAuthorshipComb
	ruleCombinationAuthorship
	ruleBasionymAuthorshipMissingParens
	ruleMissingParensStart
	ruleMissingParensEnd
	ruleBasionymAuthorshipYearMisformed
	ruleBasionymAuthorship
	ruleBasionymAuthorship1
	ruleBasionymAuthorship2Parens
	ruleAuthorsGroup
	ruleAuthorsTeam
	ruleAuthorSep
	ruleAuthorSep1
	ruleAuthorSep2
	ruleAuthorSepSpanish
	ruleAuthorEx
	ruleAuthorEmend
	ruleAuthor
	ruleAuthor0
	ruleAuthor1
	ruleAuthor2
	ruleUnknownAuthor
	ruleAuthorWord
	ruleAuthorEtAl
	ruleAuthorWord1
	ruleAuthorWord2
	ruleAuthorWord3
	ruleAuthorWord4
	ruleAuthorDashInitials
	ruleAuthorInitial
	ruleAuthorWordSoft
	ruleCapAuthorWord
	ruleAllCapsAuthorWord
	ruleFilius
	ruleFiliusF
	ruleFiliusFNoSpace
	ruleAuthorSuffix
	ruleAuthorPrefixGlued1
	ruleAuthorPrefixGlued2
	ruleAuthorPrefix
	ruleAuthorPrefix2
	ruleAuthorPrefix1
	ruleAuthorUpperChar
	ruleAuthorLowerChar
	ruleYear
	ruleYearRange
	ruleYearWithDot
	ruleYearApprox
	ruleYearWithPage
	ruleYearWithParens
	ruleYearWithChar
	ruleYearNum
	ruleNameUpperChar
	ruleUpperCharExtended
	ruleUpperChar
	ruleNameLowerChar
	ruleMiscodedChar
	ruleLowerCharExtended
	ruleLowerChar
	ruleSpaceCharEOI
	ruleNums
	ruleLowerGreek
	ruleLowerASCII
	ruleUpperASCII
	ruleApostrophe
	ruleApostrASCII
	ruleApostrOther
	ruleDash
	ruleSlash
	rule_
	ruleMultipleSpace
	ruleSingleSpace
	ruleOtherSpace
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"SciName",
	"Tail",
	"Name",
	"HybridFormula",
	"HybridFormulaFull",
	"HybridFormulaPart",
	"NamedHybrid",
	"NamedSpeciesHybrid",
	"NamedGenusHybrid",
	"GraftChimeraFormula",
	"GraftChimeraFormulaFull",
	"GraftChimeraFormulaPart",
	"NamedGenusGraftChimera",
	"CandidatusName",
	"Candidatus",
	"SingleName",
	"NameUninomial",
	"NameApprox",
	"NameComp",
	"NameSpecies",
	"GenusWord",
	"InfraspGroup",
	"InfraspEpithet",
	"CultivarWordGroup",
	"Cultivar",
	"RankCultivar",
	"NotHybridChar",
	"CultivarRecursive",
	"CultivarApostrophe",
	"SpeciesEpithet",
	"Comparison",
	"Rank",
	"RankNotho",
	"RankOtherUncommon",
	"RankOther",
	"RankVar",
	"RankForma",
	"RankSsp",
	"RankAgamo",
	"SubgenusOrSuperspecies",
	"Subgenus",
	"Subgenus2",
	"Subgenus1",
	"UninomialCombo",
	"UninomialCombo1",
	"UninomialCombo2",
	"RankUninomial",
	"RankUninomialPlain",
	"RankUninomialNotho",
	"Uninomial",
	"UninomialWord",
	"AbbrSubgenus",
	"AbbrGenus",
	"CapWord",
	"CapWord1",
	"CapWordWithDash",
	"TwoLetterGenusDashedSegment",
	"WordAfterDash",
	"UpperAfterDash",
	"LowerAfterDash",
	"TwoLetterGenus",
	"Word",
	"Word1",
	"WordStartsWithDigit",
	"Word2",
	"WordApostr",
	"Word4",
	"DotPrefix",
	"MultiDashedWord",
	"HybridChar",
	"GraftChimeraChar",
	"ApproxNameIgnored",
	"Approximation",
	"Authorship",
	"AuthorshipCombo",
	"OriginalAuthorship",
	"OriginalAuthorshipComb",
	"CombinationAuthorship",
	"BasionymAuthorshipMissingParens",
	"MissingParensStart",
	"MissingParensEnd",
	"BasionymAuthorshipYearMisformed",
	"BasionymAuthorship",
	"BasionymAuthorship1",
	"BasionymAuthorship2Parens",
	"AuthorsGroup",
	"AuthorsTeam",
	"AuthorSep",
	"AuthorSep1",
	"AuthorSep2",
	"AuthorSepSpanish",
	"AuthorEx",
	"AuthorEmend",
	"Author",
	"Author0",
	"Author1",
	"Author2",
	"UnknownAuthor",
	"AuthorWord",
	"AuthorEtAl",
	"AuthorWord1",
	"AuthorWord2",
	"AuthorWord3",
	"AuthorWord4",
	"AuthorDashInitials",
	"AuthorInitial",
	"AuthorWordSoft",
	"CapAuthorWord",
	"AllCapsAuthorWord",
	"Filius",
	"FiliusF",
	"FiliusFNoSpace",
	"AuthorSuffix",
	"AuthorPrefixGlued1",
	"AuthorPrefixGlued2",
	"AuthorPrefix",
	"AuthorPrefix2",
	"AuthorPrefix1",
	"AuthorUpperChar",
	"AuthorLowerChar",
	"Year",
	"YearRange",
	"YearWithDot",
	"YearApprox",
	"YearWithPage",
	"YearWithParens",
	"YearWithChar",
	"YearNum",
	"NameUpperChar",
	"UpperCharExtended",
	"UpperChar",
	"NameLowerChar",
	"MiscodedChar",
	"LowerCharExtended",
	"LowerChar",
	"SpaceCharEOI",
	"Nums",
	"LowerGreek",
	"LowerASCII",
	"UpperASCII",
	"Apostrophe",
	"ApostrASCII",
	"ApostrOther",
	"Dash",
	"Slash",
	"_",
	"MultipleSpace",
	"SingleSpace",
	"OtherSpace",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Engine struct {
	baseEngine

	Buffer string
	buffer []rune
	rules  [151]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Engine) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Engine) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Engine
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Engine) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Engine) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Engine) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Engine) error {
	return func(p *Engine) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Engine) error {
	return func(p *Engine) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Engine) Init(options ...func(*Engine) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 SciName <- <(_? Name Tail END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rule_]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				if !_rules[ruleName]() {
					goto l0
				}
				if !_rules[ruleTail]() {
					goto l0
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleSciName, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Tail <- <((_ / ';' / ',') .*)?> */
		func() bool {
			{
				position5 := position
				{
					position6, tokenIndex6 := position, tokenIndex
					{
						position8, tokenIndex8 := position, tokenIndex
						if !_rules[rule_]() {
							goto l9
						}
						goto l8
					l9:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(';') {
							goto l10
						}
						position++
						goto l8
					l10:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(',') {
							goto l6
						}
						position++
					}
				l8:
				l11:
					{
						position12, tokenIndex12 := position, tokenIndex
						if !matchDot() {
							goto l12
						}
						goto l11
					l12:
						position, tokenIndex = position12, tokenIndex12
					}
					goto l7
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
			l7:
				add(ruleTail, position5)
			}
			return true
		},
		/* 2 Name <- <(NamedGenusGraftChimera / GraftChimeraFormula / NamedHybrid / HybridFormula / CandidatusName / SingleName)> */
		func() bool {
			position13, tokenIndex13 := position, tokenIndex
			{
				position14 := position
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleNamedGenusGraftChimera]() {
						goto l16
					}
					goto l15
				l16:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleGraftChimeraFormula]() {
						goto l17
					}
					goto l15
				l17:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleNamedHybrid]() {
						goto l18
					}
					goto l15
				l18:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleHybridFormula]() {
						goto l19
					}
					goto l15
				l19:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleCandidatusName]() {
						goto l20
					}
					goto l15
				l20:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleSingleName]() {
						goto l13
					}
				}
			l15:
				add(ruleName, position14)
			}
			return true
		l13:
			position, tokenIndex = position13, tokenIndex13
			return false
		},
		/* 3 HybridFormula <- <(SingleName (_ (HybridFormulaPart / HybridFormulaFull))+)> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				if !_rules[ruleSingleName]() {
					goto l21
				}
				if !_rules[rule_]() {
					goto l21
				}
				{
					position25, tokenIndex25 := position, tokenIndex
					if !_rules[ruleHybridFormulaPart]() {
						goto l26
					}
					goto l25
				l26:
					position, tokenIndex = position25, tokenIndex25
					if !_rules[ruleHybridFormulaFull]() {
						goto l21
					}
				}
			l25:
			l23:
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[rule_]() {
						goto l24
					}
					{
						position27, tokenIndex27 := position, tokenIndex
						if !_rules[ruleHybridFormulaPart]() {
							goto l28
						}
						goto l27
					l28:
						position, tokenIndex = position27, tokenIndex27
						if !_rules[ruleHybridFormulaFull]() {
							goto l24
						}
					}
				l27:
					goto l23
				l24:
					position, tokenIndex = position24, tokenIndex24
				}
				add(ruleHybridFormula, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 4 HybridFormulaFull <- <(HybridChar (_ SingleName)?)> */
		func() bool {
			position29, tokenIndex29 := position, tokenIndex
			{
				position30 := position
				if !_rules[ruleHybridChar]() {
					goto l29
				}
				{
					position31, tokenIndex31 := position, tokenIndex
					if !_rules[rule_]() {
						goto l31
					}
					if !_rules[ruleSingleName]() {
						goto l31
					}
					goto l32
				l31:
					position, tokenIndex = position31, tokenIndex31
				}
			l32:
				add(ruleHybridFormulaFull, position30)
			}
			return true
		l29:
			position, tokenIndex = position29, tokenIndex29
			return false
		},
		/* 5 HybridFormulaPart <- <(HybridChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position33, tokenIndex33 := position, tokenIndex
			{
				position34 := position
				if !_rules[ruleHybridChar]() {
					goto l33
				}
				if !_rules[rule_]() {
					goto l33
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l33
				}
				{
					position35, tokenIndex35 := position, tokenIndex
					if !_rules[rule_]() {
						goto l35
					}
					if !_rules[ruleInfraspGroup]() {
						goto l35
					}
					goto l36
				l35:
					position, tokenIndex = position35, tokenIndex35
				}
			l36:
				add(ruleHybridFormulaPart, position34)
			}
			return true
		l33:
			position, tokenIndex = position33, tokenIndex33
			return false
		},
		/* 6 NamedHybrid <- <(NamedGenusHybrid / NamedSpeciesHybrid)> */
		func() bool {
			position37, tokenIndex37 := position, tokenIndex
			{
				position38 := position
				{
					position39, tokenIndex39 := position, tokenIndex
					if !_rules[ruleNamedGenusHybrid]() {
						goto l40
					}
					goto l39
				l40:
					position, tokenIndex = position39, tokenIndex39
					if !_rules[ruleNamedSpeciesHybrid]() {
						goto l37
					}
				}
			l39:
				add(ruleNamedHybrid, position38)
			}
			return true
		l37:
			position, tokenIndex = position37, tokenIndex37
			return false
		},
		/* 7 NamedSpeciesHybrid <- <(GenusWord (_ Subgenus)? (_ Comparison)? _ HybridChar _? SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position41, tokenIndex41 := position, tokenIndex
			{
				position42 := position
				if !_rules[ruleGenusWord]() {
					goto l41
				}
				{
					position43, tokenIndex43 := position, tokenIndex
					if !_rules[rule_]() {
						goto l43
					}
					if !_rules[ruleSubgenus]() {
						goto l43
					}
					goto l44
				l43:
					position, tokenIndex = position43, tokenIndex43
				}
			l44:
				{
					position45, tokenIndex45 := position, tokenIndex
					if !_rules[rule_]() {
						goto l45
					}
					if !_rules[ruleComparison]() {
						goto l45
					}
					goto l46
				l45:
					position, tokenIndex = position45, tokenIndex45
				}
			l46:
				if !_rules[rule_]() {
					goto l41
				}
				if !_rules[ruleHybridChar]() {
					goto l41
				}
				{
					position47, tokenIndex47 := position, tokenIndex
					if !_rules[rule_]() {
						goto l47
					}
					goto l48
				l47:
					position, tokenIndex = position47, tokenIndex47
				}
			l48:
				if !_rules[ruleSpeciesEpithet]() {
					goto l41
				}
				{
					position49, tokenIndex49 := position, tokenIndex
					if !_rules[rule_]() {
						goto l49
					}
					if !_rules[ruleInfraspGroup]() {
						goto l49
					}
					goto l50
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
			l50:
				add(ruleNamedSpeciesHybrid, position42)
			}
			return true
		l41:
			position, tokenIndex = position41, tokenIndex41
			return false
		},
		/* 8 NamedGenusHybrid <- <(HybridChar _? SingleName)> */
		func() bool {
			position51, tokenIndex51 := position, tokenIndex
			{
				position52 := position
				if !_rules[ruleHybridChar]() {
					goto l51
				}
				{
					position53, tokenIndex53 := position, tokenIndex
					if !_rules[rule_]() {
						goto l53
					}
					goto l54
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
			l54:
				if !_rules[ruleSingleName]() {
					goto l51
				}
				add(ruleNamedGenusHybrid, position52)
			}
			return true
		l51:
			position, tokenIndex = position51, tokenIndex51
			return false
		},
		/* 9 GraftChimeraFormula <- <(SingleName (_ (GraftChimeraFormulaPart / GraftChimeraFormulaFull))+)> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				if !_rules[ruleSingleName]() {
					goto l55
				}
				if !_rules[rule_]() {
					goto l55
				}
				{
					position59, tokenIndex59 := position, tokenIndex
					if !_rules[ruleGraftChimeraFormulaPart]() {
						goto l60
					}
					goto l59
				l60:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleGraftChimeraFormulaFull]() {
						goto l55
					}
				}
			l59:
			l57:
				{
					position58, tokenIndex58 := position, tokenIndex
					if !_rules[rule_]() {
						goto l58
					}
					{
						position61, tokenIndex61 := position, tokenIndex
						if !_rules[ruleGraftChimeraFormulaPart]() {
							goto l62
						}
						goto l61
					l62:
						position, tokenIndex = position61, tokenIndex61
						if !_rules[ruleGraftChimeraFormulaFull]() {
							goto l58
						}
					}
				l61:
					goto l57
				l58:
					position, tokenIndex = position58, tokenIndex58
				}
				add(ruleGraftChimeraFormula, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 10 GraftChimeraFormulaFull <- <(GraftChimeraChar (_ SingleName)?)> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l63
				}
				{
					position65, tokenIndex65 := position, tokenIndex
					if !_rules[rule_]() {
						goto l65
					}
					if !_rules[ruleSingleName]() {
						goto l65
					}
					goto l66
				l65:
					position, tokenIndex = position65, tokenIndex65
				}
			l66:
				add(ruleGraftChimeraFormulaFull, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 11 GraftChimeraFormulaPart <- <(GraftChimeraChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position67, tokenIndex67 := position, tokenIndex
			{
				position68 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l67
				}
				if !_rules[rule_]() {
					goto l67
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l67
				}
				{
					position69, tokenIndex69 := position, tokenIndex
					if !_rules[rule_]() {
						goto l69
					}
					if !_rules[ruleInfraspGroup]() {
						goto l69
					}
					goto l70
				l69:
					position, tokenIndex = position69, tokenIndex69
				}
			l70:
				add(ruleGraftChimeraFormulaPart, position68)
			}
			return true
		l67:
			position, tokenIndex = position67, tokenIndex67
			return false
		},
		/* 12 NamedGenusGraftChimera <- <(GraftChimeraChar _? SingleName)> */
		func() bool {
			position71, tokenIndex71 := position, tokenIndex
			{
				position72 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l71
				}
				{
					position73, tokenIndex73 := position, tokenIndex
					if !_rules[rule_]() {
						goto l73
					}
					goto l74
				l73:
					position, tokenIndex = position73, tokenIndex73
				}
			l74:
				if !_rules[ruleSingleName]() {
					goto l71
				}
				add(ruleNamedGenusGraftChimera, position72)
			}
			return true
		l71:
			position, tokenIndex = position71, tokenIndex71
			return false
		},
		/* 13 CandidatusName <- <(Candidatus _ SingleName)> */
		func() bool {
			position75, tokenIndex75 := position, tokenIndex
			{
				position76 := position
				if !_rules[ruleCandidatus]() {
					goto l75
				}
				if !_rules[rule_]() {
					goto l75
				}
				if !_rules[ruleSingleName]() {
					goto l75
				}
				add(ruleCandidatusName, position76)
			}
			return true
		l75:
			position, tokenIndex = position75, tokenIndex75
			return false
		},
		/* 14 Candidatus <- <('C' 'a' 'n' 'd' 'i' 'd' 'a' 't' 'u' 's')> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if buffer[position] != rune('C') {
					goto l77
				}
				position++
				if buffer[position] != rune('a') {
					goto l77
				}
				position++
				if buffer[position] != rune('n') {
					goto l77
				}
				position++
				if buffer[position] != rune('d') {
					goto l77
				}
				position++
				if buffer[position] != rune('i') {
					goto l77
				}
				position++
				if buffer[position] != rune('d') {
					goto l77
				}
				position++
				if buffer[position] != rune('a') {
					goto l77
				}
				position++
				if buffer[position] != rune('t') {
					goto l77
				}
				position++
				if buffer[position] != rune('u') {
					goto l77
				}
				position++
				if buffer[position] != rune('s') {
					goto l77
				}
				position++
				add(ruleCandidatus, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 15 SingleName <- <(NameComp / NameApprox / NameSpecies / NameUninomial)> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				{
					position81, tokenIndex81 := position, tokenIndex
					if !_rules[ruleNameComp]() {
						goto l82
					}
					goto l81
				l82:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameApprox]() {
						goto l83
					}
					goto l81
				l83:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameSpecies]() {
						goto l84
					}
					goto l81
				l84:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameUninomial]() {
						goto l79
					}
				}
			l81:
				add(ruleSingleName, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 16 NameUninomial <- <((UninomialCombo / Uninomial) (_ CultivarWordGroup)?)> */
		func() bool {
			position85, tokenIndex85 := position, tokenIndex
			{
				position86 := position
				{
					position87, tokenIndex87 := position, tokenIndex
					if !_rules[ruleUninomialCombo]() {
						goto l88
					}
					goto l87
				l88:
					position, tokenIndex = position87, tokenIndex87
					if !_rules[ruleUninomial]() {
						goto l85
					}
				}
			l87:
				{
					position89, tokenIndex89 := position, tokenIndex
					if !_rules[rule_]() {
						goto l89
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l89
					}
					goto l90
				l89:
					position, tokenIndex = position89, tokenIndex89
				}
			l90:
				add(ruleNameUninomial, position86)
			}
			return true
		l85:
			position, tokenIndex = position85, tokenIndex85
			return false
		},
		/* 17 NameApprox <- <(GenusWord (_ SpeciesEpithet)? _ Approximation ApproxNameIgnored)> */
		func() bool {
			position91, tokenIndex91 := position, tokenIndex
			{
				position92 := position
				if !_rules[ruleGenusWord]() {
					goto l91
				}
				{
					position93, tokenIndex93 := position, tokenIndex
					if !_rules[rule_]() {
						goto l93
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l93
					}
					goto l94
				l93:
					position, tokenIndex = position93, tokenIndex93
				}
			l94:
				if !_rules[rule_]() {
					goto l91
				}
				if !_rules[ruleApproximation]() {
					goto l91
				}
				if !_rules[ruleApproxNameIgnored]() {
					goto l91
				}
				add(ruleNameApprox, position92)
			}
			return true
		l91:
			position, tokenIndex = position91, tokenIndex91
			return false
		},
		/* 18 NameComp <- <(GenusWord _ Comparison (_ SpeciesEpithet)?)> */
		func() bool {
			position95, tokenIndex95 := position, tokenIndex
			{
				position96 := position
				if !_rules[ruleGenusWord]() {
					goto l95
				}
				if !_rules[rule_]() {
					goto l95
				}
				if !_rules[ruleComparison]() {
					goto l95
				}
				{
					position97, tokenIndex97 := position, tokenIndex
					if !_rules[rule_]() {
						goto l97
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l97
					}
					goto l98
				l97:
					position, tokenIndex = position97, tokenIndex97
				}
			l98:
				add(ruleNameComp, position96)
			}
			return true
		l95:
			position, tokenIndex = position95, tokenIndex95
			return false
		},
		/* 19 NameSpecies <- <(GenusWord (_? (Subgenus / SubgenusOrSuperspecies))? _ SpeciesEpithet (_ InfraspGroup)? (_ CultivarWordGroup)?)> */
		func() bool {
			position99, tokenIndex99 := position, tokenIndex
			{
				position100 := position
				if !_rules[ruleGenusWord]() {
					goto l99
				}
				{
					position101, tokenIndex101 := position, tokenIndex
					{
						position103, tokenIndex103 := position, tokenIndex
						if !_rules[rule_]() {
							goto l103
						}
						goto l104
					l103:
						position, tokenIndex = position103, tokenIndex103
					}
				l104:
					{
						position105, tokenIndex105 := position, tokenIndex
						if !_rules[ruleSubgenus]() {
							goto l106
						}
						goto l105
					l106:
						position, tokenIndex = position105, tokenIndex105
						if !_rules[ruleSubgenusOrSuperspecies]() {
							goto l101
						}
					}
				l105:
					goto l102
				l101:
					position, tokenIndex = position101, tokenIndex101
				}
			l102:
				if !_rules[rule_]() {
					goto l99
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l99
				}
				{
					position107, tokenIndex107 := position, tokenIndex
					if !_rules[rule_]() {
						goto l107
					}
					if !_rules[ruleInfraspGroup]() {
						goto l107
					}
					goto l108
				l107:
					position, tokenIndex = position107, tokenIndex107
				}
			l108:
				{
					position109, tokenIndex109 := position, tokenIndex
					if !_rules[rule_]() {
						goto l109
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l109
					}
					goto l110
				l109:
					position, tokenIndex = position109, tokenIndex109
				}
			l110:
				add(ruleNameSpecies, position100)
			}
			return true
		l99:
			position, tokenIndex = position99, tokenIndex99
			return false
		},
		/* 20 GenusWord <- <((AbbrGenus / UninomialWord) !(_ AuthorWord))> */
		func() bool {
			position111, tokenIndex111 := position, tokenIndex
			{
				position112 := position
				{
					position113, tokenIndex113 := position, tokenIndex
					if !_rules[ruleAbbrGenus]() {
						goto l114
					}
					goto l113
				l114:
					position, tokenIndex = position113, tokenIndex113
					if !_rules[ruleUninomialWord]() {
						goto l111
					}
				}
			l113:
				{
					position115, tokenIndex115 := position, tokenIndex
					if !_rules[rule_]() {
						goto l115
					}
					if !_rules[ruleAuthorWord]() {
						goto l115
					}
					goto l111
				l115:
					position, tokenIndex = position115, tokenIndex115
				}
				add(ruleGenusWord, position112)
			}
			return true
		l111:
			position, tokenIndex = position111, tokenIndex111
			return false
		},
		/* 21 InfraspGroup <- <(InfraspEpithet (_ InfraspEpithet)? (_ InfraspEpithet)?)> */
		func() bool {
			position116, tokenIndex116 := position, tokenIndex
			{
				position117 := position
				if !_rules[ruleInfraspEpithet]() {
					goto l116
				}
				{
					position118, tokenIndex118 := position, tokenIndex
					if !_rules[rule_]() {
						goto l118
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l118
					}
					goto l119
				l118:
					position, tokenIndex = position118, tokenIndex118
				}
			l119:
				{
					position120, tokenIndex120 := position, tokenIndex
					if !_rules[rule_]() {
						goto l120
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l120
					}
					goto l121
				l120:
					position, tokenIndex = position120, tokenIndex120
				}
			l121:
				add(ruleInfraspGroup, position117)
			}
			return true
		l116:
			position, tokenIndex = position116, tokenIndex116
			return false
		},
		/* 22 InfraspEpithet <- <((Rank _?)? !AuthorEx Word (_? Authorship)?)> */
		func() bool {
			position122, tokenIndex122 := position, tokenIndex
			{
				position123 := position
				{
					position124, tokenIndex124 := position, tokenIndex
					if !_rules[ruleRank]() {
						goto l124
					}
					{
						position126, tokenIndex126 := position, tokenIndex
						if !_rules[rule_]() {
							goto l126
						}
						goto l127
					l126:
						position, tokenIndex = position126, tokenIndex126
					}
				l127:
					goto l125
				l124:
					position, tokenIndex = position124, tokenIndex124
				}
			l125:
				{
					position128, tokenIndex128 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l128
					}
					goto l122
				l128:
					position, tokenIndex = position128, tokenIndex128
				}
				if !_rules[ruleWord]() {
					goto l122
				}
				{
					position129, tokenIndex129 := position, tokenIndex
					{
						position131, tokenIndex131 := position, tokenIndex
						if !_rules[rule_]() {
							goto l131
						}
						goto l132
					l131:
						position, tokenIndex = position131, tokenIndex131
					}
				l132:
					if !_rules[ruleAuthorship]() {
						goto l129
					}
					goto l130
				l129:
					position, tokenIndex = position129, tokenIndex129
				}
			l130:
				add(ruleInfraspEpithet, position123)
			}
			return true
		l122:
			position, tokenIndex = position122, tokenIndex122
			return false
		},
		/* 23 CultivarWordGroup <- <(((RankCultivar _)? CultivarApostrophe CultivarRecursive CultivarApostrophe) / (RankCultivar _ Cultivar))> */
		func() bool {
			position133, tokenIndex133 := position, tokenIndex
			{
				position134 := position
				{
					position135, tokenIndex135 := position, tokenIndex
					{
						position137, tokenIndex137 := position, tokenIndex
						if !_rules[ruleRankCultivar]() {
							goto l137
						}
						if !_rules[rule_]() {
							goto l137
						}
						goto l138
					l137:
						position, tokenIndex = position137, tokenIndex137
					}
				l138:
					if !_rules[ruleCultivarApostrophe]() {
						goto l136
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l136
					}
					if !_rules[ruleCultivarApostrophe]() {
						goto l136
					}
					goto l135
				l136:
					position, tokenIndex = position135, tokenIndex135
					if !_rules[ruleRankCultivar]() {
						goto l133
					}
					if !_rules[rule_]() {
						goto l133
					}
					if !_rules[ruleCultivar]() {
						goto l133
					}
				}
			l135:
				add(ruleCultivarWordGroup, position134)
			}
			return true
		l133:
			position, tokenIndex = position133, tokenIndex133
			return false
		},
		/* 24 Cultivar <- <NotHybridChar+> */
		func() bool {
			position139, tokenIndex139 := position, tokenIndex
			{
				position140 := position
				if !_rules[ruleNotHybridChar]() {
					goto l139
				}
			l141:
				{
					position142, tokenIndex142 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l142
					}
					goto l141
				l142:
					position, tokenIndex = position142, tokenIndex142
				}
				add(ruleCultivar, position140)
			}
			return true
		l139:
			position, tokenIndex = position139, tokenIndex139
			return false
		},
		/* 25 RankCultivar <- <('c' 'v' '.'?)> */
		func() bool {
			position143, tokenIndex143 := position, tokenIndex
			{
				position144 := position
				if buffer[position] != rune('c') {
					goto l143
				}
				position++
				if buffer[position] != rune('v') {
					goto l143
				}
				position++
				{
					position145, tokenIndex145 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l145
					}
					position++
					goto l146
				l145:
					position, tokenIndex = position145, tokenIndex145
				}
			l146:
				add(ruleRankCultivar, position144)
			}
			return true
		l143:
			position, tokenIndex = position143, tokenIndex143
			return false
		},
		/* 26 NotHybridChar <- <(!(_ HybridChar) .)> */
		func() bool {
			position147, tokenIndex147 := position, tokenIndex
			{
				position148 := position
				{
					position149, tokenIndex149 := position, tokenIndex
					if !_rules[rule_]() {
						goto l149
					}
					if !_rules[ruleHybridChar]() {
						goto l149
					}
					goto l147
				l149:
					position, tokenIndex = position149, tokenIndex149
				}
				if !matchDot() {
					goto l147
				}
				add(ruleNotHybridChar, position148)
			}
			return true
		l147:
			position, tokenIndex = position147, tokenIndex147
			return false
		},
		/* 27 CultivarRecursive <- <((NotHybridChar CultivarRecursive) / &CultivarApostrophe)> */
		func() bool {
			position150, tokenIndex150 := position, tokenIndex
			{
				position151 := position
				{
					position152, tokenIndex152 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l153
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l153
					}
					goto l152
				l153:
					position, tokenIndex = position152, tokenIndex152
					{
						position154, tokenIndex154 := position, tokenIndex
						if !_rules[ruleCultivarApostrophe]() {
							goto l150
						}
						position, tokenIndex = position154, tokenIndex154
					}
				}
			l152:
				add(ruleCultivarRecursive, position151)
			}
			return true
		l150:
			position, tokenIndex = position150, tokenIndex150
			return false
		},
		/* 28 CultivarApostrophe <- <('\'' / '‘' / '’' / '"' / '“' / '”')> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				{
					position157, tokenIndex157 := position, tokenIndex
					if buffer[position] != rune('\'') {
						goto l158
					}
					position++
					goto l157
				l158:
					position, tokenIndex = position157, tokenIndex157
					if buffer[position] != rune('‘') {
						goto l159
					}
					position++
					goto l157
				l159:
					position, tokenIndex = position157, tokenIndex157
					if buffer[position] != rune('’') {
						goto l160
					}
					position++
					goto l157
				l160:
					position, tokenIndex = position157, tokenIndex157
					if buffer[position] != rune('"') {
						goto l161
					}
					position++
					goto l157
				l161:
					position, tokenIndex = position157, tokenIndex157
					if buffer[position] != rune('“') {
						goto l162
					}
					position++
					goto l157
				l162:
					position, tokenIndex = position157, tokenIndex157
					if buffer[position] != rune('”') {
						goto l155
					}
					position++
				}
			l157:
				add(ruleCultivarApostrophe, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 29 SpeciesEpithet <- <(!AuthorEx Word (_? Authorship)?)> */
		func() bool {
			position163, tokenIndex163 := position, tokenIndex
			{
				position164 := position
				{
					position165, tokenIndex165 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l165
					}
					goto l163
				l165:
					position, tokenIndex = position165, tokenIndex165
				}
				if !_rules[ruleWord]() {
					goto l163
				}
				{
					position166, tokenIndex166 := position, tokenIndex
					{
						position168, tokenIndex168 := position, tokenIndex
						if !_rules[rule_]() {
							goto l168
						}
						goto l169
					l168:
						position, tokenIndex = position168, tokenIndex168
					}
				l169:
					if !_rules[ruleAuthorship]() {
						goto l166
					}
					goto l167
				l166:
					position, tokenIndex = position166, tokenIndex166
				}
			l167:
				add(ruleSpeciesEpithet, position164)
			}
			return true
		l163:
			position, tokenIndex = position163, tokenIndex163
			return false
		},
		/* 30 Comparison <- <('c' 'f' '.'? &SpaceCharEOI)> */
		func() bool {
			position170, tokenIndex170 := position, tokenIndex
			{
				position171 := position
				if buffer[position] != rune('c') {
					goto l170
				}
				position++
				if buffer[position] != rune('f') {
					goto l170
				}
				position++
				{
					position172, tokenIndex172 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l172
					}
					position++
					goto l173
				l172:
					position, tokenIndex = position172, tokenIndex172
				}
			l173:
				{
					position174, tokenIndex174 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l170
					}
					position, tokenIndex = position174, tokenIndex174
				}
				add(ruleComparison, position171)
			}
			return true
		l170:
			position, tokenIndex = position170, tokenIndex170
			return false
		},
		/* 31 Rank <- <((RankForma / RankVar / RankSsp / RankOther / RankOtherUncommon / RankAgamo / RankNotho) (_? LowerGreek ('.' / &SpaceCharEOI))?)> */
		func() bool {
			position175, tokenIndex175 := position, tokenIndex
			{
				position176 := position
				{
					position177, tokenIndex177 := position, tokenIndex
					if !_rules[ruleRankForma]() {
						goto l178
					}
					goto l177
				l178:
					position, tokenIndex = position177, tokenIndex177
					if !_rules[ruleRankVar]() {
						goto l179
					}
					goto l177
				l179:
					position, tokenIndex = position177, tokenIndex177
					if !_rules[ruleRankSsp]() {
						goto l180
					}
					goto l177
				l180:
					position, tokenIndex = position177, tokenIndex177
					if !_rules[ruleRankOther]() {
						goto l181
					}
					goto l177
				l181:
					position, tokenIndex = position177, tokenIndex177
					if !_rules[ruleRankOtherUncommon]() {
						goto l182
					}
					goto l177
				l182:
					position, tokenIndex = position177, tokenIndex177
					if !_rules[ruleRankAgamo]() {
						goto l183
					}
					goto l177
				l183:
					position, tokenIndex = position177, tokenIndex177
					if !_rules[ruleRankNotho]() {
						goto l175
					}
				}
			l177:
				{
					position184, tokenIndex184 := position, tokenIndex
					{
						position186, tokenIndex186 := position, tokenIndex
						if !_rules[rule_]() {
							goto l186
						}
						goto l187
					l186:
						position, tokenIndex = position186, tokenIndex186
					}
				l187:
					if !_rules[ruleLowerGreek]() {
						goto l184
					}
					{
						position188, tokenIndex188 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l189
						}
						position++
						goto l188
					l189:
						position, tokenIndex = position188, tokenIndex188
						{
							position190, tokenIndex190 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l184
							}
							position, tokenIndex = position190, tokenIndex190
						}
					}
				l188:
					goto l185
				l184:
					position, tokenIndex = position184, tokenIndex184
				}
			l185:
				add(ruleRank, position176)
			}
			return true
		l175:
			position, tokenIndex = position175, tokenIndex175
			return false
		},
		/* 32 RankNotho <- <((('n' 'o' 't' 'h' 'o' (('v' 'a' 'r') / ('f' 'o') / 'f' / ('s' 'u' 'b' 's' 'p') / ('s' 's' 'p') / ('s' 'p') / ('m' 'o' 'r' 't' 'h') / ('s' 'u' 'p' 's' 'p') / ('s' 'u'))) / ('n' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position191, tokenIndex191 := position, tokenIndex
			{
				position192 := position
				{
					position193, tokenIndex193 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l194
					}
					position++
					if buffer[position] != rune('o') {
						goto l194
					}
					position++
					if buffer[position] != rune('t') {
						goto l194
					}
					position++
					if buffer[position] != rune('h') {
						goto l194
					}
					position++
					if buffer[position] != rune('o') {
						goto l194
					}
					position++
					{
						position195, tokenIndex195 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l196
						}
						position++
						if buffer[position] != rune('a') {
							goto l196
						}
						position++
						if buffer[position] != rune('r') {
							goto l196
						}
						position++
						goto l195
					l196:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('f') {
							goto l197
						}
						position++
						if buffer[position] != rune('o') {
							goto l197
						}
						position++
						goto l195
					l197:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('f') {
							goto l198
						}
						position++
						goto l195
					l198:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('s') {
							goto l199
						}
						position++
						if buffer[position] != rune('u') {
							goto l199
						}
						position++
						if buffer[position] != rune('b') {
							goto l199
						}
						position++
						if buffer[position] != rune('s') {
							goto l199
						}
						position++
						if buffer[position] != rune('p') {
							goto l199
						}
						position++
						goto l195
					l199:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('s') {
							goto l200
						}
						position++
						if buffer[position] != rune('s') {
							goto l200
						}
						position++
						if buffer[position] != rune('p') {
							goto l200
						}
						position++
						goto l195
					l200:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('s') {
							goto l201
						}
						position++
						if buffer[position] != rune('p') {
							goto l201
						}
						position++
						goto l195
					l201:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('m') {
							goto l202
						}
						position++
						if buffer[position] != rune('o') {
							goto l202
						}
						position++
						if buffer[position] != rune('r') {
							goto l202
						}
						position++
						if buffer[position] != rune('t') {
							goto l202
						}
						position++
						if buffer[position] != rune('h') {
							goto l202
						}
						position++
						goto l195
					l202:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('s') {
							goto l203
						}
						position++
						if buffer[position] != rune('u') {
							goto l203
						}
						position++
						if buffer[position] != rune('p') {
							goto l203
						}
						position++
						if buffer[position] != rune('s') {
							goto l203
						}
						position++
						if buffer[position] != rune('p') {
							goto l203
						}
						position++
						goto l195
					l203:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('s') {
							goto l194
						}
						position++
						if buffer[position] != rune('u') {
							goto l194
						}
						position++
					}
				l195:
					goto l193
				l194:
					position, tokenIndex = position193, tokenIndex193
					if buffer[position] != rune('n') {
						goto l191
					}
					position++
					if buffer[position] != rune('v') {
						goto l191
					}
					position++
					if buffer[position] != rune('a') {
						goto l191
					}
					position++
					if buffer[position] != rune('r') {
						goto l191
					}
					position++
				}
			l193:
				{
					position204, tokenIndex204 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l205
					}
					position++
					goto l204
				l205:
					position, tokenIndex = position204, tokenIndex204
					{
						position206, tokenIndex206 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l191
						}
						position, tokenIndex = position206, tokenIndex206
					}
				}
			l204:
				add(ruleRankNotho, position192)
			}
			return true
		l191:
			position, tokenIndex = position191, tokenIndex191
			return false
		},
		/* 33 RankOtherUncommon <- <(('*' / ('n' 'a' 't' 'i' 'o') / ('n' 'a' 't' '.') / ('n' 'a' 't') / ('f' '.' 's' 'p') / 'α' / ('β' 'β') / 'β' / 'γ' / 'δ' / 'ε' / 'φ' / 'θ' / 'μ' / ('a' '.') / ('b' '.') / ('c' '.') / ('d' '.') / ('e' '.') / ('g' '.') / ('k' '.') / ('m' 'u' 't' '.')) &SpaceCharEOI)> */
		func() bool {
			position207, tokenIndex207 := position, tokenIndex
			{
				position208 := position
				{
					position209, tokenIndex209 := position, tokenIndex
					if buffer[position] != rune('*') {
						goto l210
					}
					position++
					goto l209
				l210:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('n') {
						goto l211
					}
					position++
					if buffer[position] != rune('a') {
						goto l211
					}
					position++
					if buffer[position] != rune('t') {
						goto l211
					}
					position++
					if buffer[position] != rune('i') {
						goto l211
					}
					position++
					if buffer[position] != rune('o') {
						goto l211
					}
					position++
					goto l209
				l211:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('n') {
						goto l212
					}
					position++
					if buffer[position] != rune('a') {
						goto l212
					}
					position++
					if buffer[position] != rune('t') {
						goto l212
					}
					position++
					if buffer[position] != rune('.') {
						goto l212
					}
					position++
					goto l209
				l212:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('n') {
						goto l213
					}
					position++
					if buffer[position] != rune('a') {
						goto l213
					}
					position++
					if buffer[position] != rune('t') {
						goto l213
					}
					position++
					goto l209
				l213:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('f') {
						goto l214
					}
					position++
					if buffer[position] != rune('.') {
						goto l214
					}
					position++
					if buffer[position] != rune('s') {
						goto l214
					}
					position++
					if buffer[position] != rune('p') {
						goto l214
					}
					position++
					goto l209
				l214:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('α') {
						goto l215
					}
					position++
					goto l209
				l215:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('β') {
						goto l216
					}
					position++
					if buffer[position] != rune('β') {
						goto l216
					}
					position++
					goto l209
				l216:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('β') {
						goto l217
					}
					position++
					goto l209
				l217:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('γ') {
						goto l218
					}
					position++
					goto l209
				l218:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('δ') {
						goto l219
					}
					position++
					goto l209
				l219:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('ε') {
						goto l220
					}
					position++
					goto l209
				l220:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('φ') {
						goto l221
					}
					position++
					goto l209
				l221:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('θ') {
						goto l222
					}
					position++
					goto l209
				l222:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('μ') {
						goto l223
					}
					position++
					goto l209
				l223:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('a') {
						goto l224
					}
					position++
					if buffer[position] != rune('.') {
						goto l224
					}
					position++
					goto l209
				l224:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('b') {
						goto l225
					}
					position++
					if buffer[position] != rune('.') {
						goto l225
					}
					position++
					goto l209
				l225:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('c') {
						goto l226
					}
					position++
					if buffer[position] != rune('.') {
						goto l226
					}
					position++
					goto l209
				l226:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('d') {
						goto l227
					}
					position++
					if buffer[position] != rune('.') {
						goto l227
					}
					position++
					goto l209
				l227:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('e') {
						goto l228
					}
					position++
					if buffer[position] != rune('.') {
						goto l228
					}
					position++
					goto l209
				l228:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('g') {
						goto l229
					}
					position++
					if buffer[position] != rune('.') {
						goto l229
					}
					position++
					goto l209
				l229:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('k') {
						goto l230
					}
					position++
					if buffer[position] != rune('.') {
						goto l230
					}
					position++
					goto l209
				l230:
					position, tokenIndex = position209, tokenIndex209
					if buffer[position] != rune('m') {
						goto l207
					}
					position++
					if buffer[position] != rune('u') {
						goto l207
					}
					position++
					if buffer[position] != rune('t') {
						goto l207
					}
					position++
					if buffer[position] != rune('.') {
						goto l207
					}
					position++
				}
			l209:
				{
					position231, tokenIndex231 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l207
					}
					position, tokenIndex = position231, tokenIndex231
				}
				add(ruleRankOtherUncommon, position208)
			}
			return true
		l207:
			position, tokenIndex = position207, tokenIndex207
			return false
		},
		/* 34 RankOther <- <((('m' 'o' 'r' 'p' 'h') / ('c' 'o' 'n' 'v' 'a' 'r') / ('p' 's' 'e' 'u' 'd' 'o' 'v' 'a' 'r') / ('s' 'e' 'c' 't') / ('s' 'e' 'r') / ('s' 'u' 'b' 'v' 'a' 'r') / ('s' 'u' 'b' 'f') / ('r' 'a' 'c' 'e') / ('p' 'v') / ('p' 'a' 't' 'h' 'o' 'v' 'a' 'r') / ('a' 'b' '.' (_? ('n' '.'))?) / ('s' 't')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position232, tokenIndex232 := position, tokenIndex
			{
				position233 := position
				{
					position234, tokenIndex234 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l235
					}
					position++
					if buffer[position] != rune('o') {
						goto l235
					}
					position++
					if buffer[position] != rune('r') {
						goto l235
					}
					position++
					if buffer[position] != rune('p') {
						goto l235
					}
					position++
					if buffer[position] != rune('h') {
						goto l235
					}
					position++
					goto l234
				l235:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('c') {
						goto l236
					}
					position++
					if buffer[position] != rune('o') {
						goto l236
					}
					position++
					if buffer[position] != rune('n') {
						goto l236
					}
					position++
					if buffer[position] != rune('v') {
						goto l236
					}
					position++
					if buffer[position] != rune('a') {
						goto l236
					}
					position++
					if buffer[position] != rune('r') {
						goto l236
					}
					position++
					goto l234
				l236:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('p') {
						goto l237
					}
					position++
					if buffer[position] != rune('s') {
						goto l237
					}
					position++
					if buffer[position] != rune('e') {
						goto l237
					}
					position++
					if buffer[position] != rune('u') {
						goto l237
					}
					position++
					if buffer[position] != rune('d') {
						goto l237
					}
					position++
					if buffer[position] != rune('o') {
						goto l237
					}
					position++
					if buffer[position] != rune('v') {
						goto l237
					}
					position++
					if buffer[position] != rune('a') {
						goto l237
					}
					position++
					if buffer[position] != rune('r') {
						goto l237
					}
					position++
					goto l234
				l237:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('s') {
						goto l238
					}
					position++
					if buffer[position] != rune('e') {
						goto l238
					}
					position++
					if buffer[position] != rune('c') {
						goto l238
					}
					position++
					if buffer[position] != rune('t') {
						goto l238
					}
					position++
					goto l234
				l238:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('s') {
						goto l239
					}
					position++
					if buffer[position] != rune('e') {
						goto l239
					}
					position++
					if buffer[position] != rune('r') {
						goto l239
					}
					position++
					goto l234
				l239:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('s') {
						goto l240
					}
					position++
					if buffer[position] != rune('u') {
						goto l240
					}
					position++
					if buffer[position] != rune('b') {
						goto l240
					}
					position++
					if buffer[position] != rune('v') {
						goto l240
					}
					position++
					if buffer[position] != rune('a') {
						goto l240
					}
					position++
					if buffer[position] != rune('r') {
						goto l240
					}
					position++
					goto l234
				l240:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('s') {
						goto l241
					}
					position++
					if buffer[position] != rune('u') {
						goto l241
					}
					position++
					if buffer[position] != rune('b') {
						goto l241
					}
					position++
					if buffer[position] != rune('f') {
						goto l241
					}
					position++
					goto l234
				l241:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('r') {
						goto l242
					}
					position++
					if buffer[position] != rune('a') {
						goto l242
					}
					position++
					if buffer[position] != rune('c') {
						goto l242
					}
					position++
					if buffer[position] != rune('e') {
						goto l242
					}
					position++
					goto l234
				l242:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('p') {
						goto l243
					}
					position++
					if buffer[position] != rune('v') {
						goto l243
					}
					position++
					goto l234
				l243:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('p') {
						goto l244
					}
					position++
					if buffer[position] != rune('a') {
						goto l244
					}
					position++
					if buffer[position] != rune('t') {
						goto l244
					}
					position++
					if buffer[position] != rune('h') {
						goto l244
					}
					position++
					if buffer[position] != rune('o') {
						goto l244
					}
					position++
					if buffer[position] != rune('v') {
						goto l244
					}
					position++
					if buffer[position] != rune('a') {
						goto l244
					}
					position++
					if buffer[position] != rune('r') {
						goto l244
					}
					position++
					goto l234
				l244:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('a') {
						goto l245
					}
					position++
					if buffer[position] != rune('b') {
						goto l245
					}
					position++
					if buffer[position] != rune('.') {
						goto l245
					}
					position++
					{
						position246, tokenIndex246 := position, tokenIndex
						{
							position248, tokenIndex248 := position, tokenIndex
							if !_rules[rule_]() {
								goto l248
							}
							goto l249
						l248:
							position, tokenIndex = position248, tokenIndex248
						}
					l249:
						if buffer[position] != rune('n') {
							goto l246
						}
						position++
						if buffer[position] != rune('.') {
							goto l246
						}
						position++
						goto l247
					l246:
						position, tokenIndex = position246, tokenIndex246
					}
				l247:
					goto l234
				l245:
					position, tokenIndex = position234, tokenIndex234
					if buffer[position] != rune('s') {
						goto l232
					}
					position++
					if buffer[position] != rune('t') {
						goto l232
					}
					position++
				}
			l234:
				{
					position250, tokenIndex250 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l251
					}
					position++
					goto l250
				l251:
					position, tokenIndex = position250, tokenIndex250
					{
						position252, tokenIndex252 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l232
						}
						position, tokenIndex = position252, tokenIndex252
					}
				}
			l250:
				add(ruleRankOther, position233)
			}
			return true
		l232:
			position, tokenIndex = position232, tokenIndex232
			return false
		},
		/* 35 RankVar <- <((('v' 'a' 'r' 'i' 'e' 't' 'y') / ('[' 'v' 'a' 'r' '.' ']') / ('v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position253, tokenIndex253 := position, tokenIndex
			{
				position254 := position
				{
					position255, tokenIndex255 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l256
					}
					position++
					if buffer[position] != rune('a') {
						goto l256
					}
					position++
					if buffer[position] != rune('r') {
						goto l256
					}
					position++
					if buffer[position] != rune('i') {
						goto l256
					}
					position++
					if buffer[position] != rune('e') {
						goto l256
					}
					position++
					if buffer[position] != rune('t') {
						goto l256
					}
					position++
					if buffer[position] != rune('y') {
						goto l256
					}
					position++
					goto l255
				l256:
					position, tokenIndex = position255, tokenIndex255
					if buffer[position] != rune('[') {
						goto l257
					}
					position++
					if buffer[position] != rune('v') {
						goto l257
					}
					position++
					if buffer[position] != rune('a') {
						goto l257
					}
					position++
					if buffer[position] != rune('r') {
						goto l257
					}
					position++
					if buffer[position] != rune('.') {
						goto l257
					}
					position++
					if buffer[position] != rune(']') {
						goto l257
					}
					position++
					goto l255
				l257:
					position, tokenIndex = position255, tokenIndex255
					if buffer[position] != rune('v') {
						goto l253
					}
					position++
					if buffer[position] != rune('a') {
						goto l253
					}
					position++
					if buffer[position] != rune('r') {
						goto l253
					}
					position++
				}
			l255:
				{
					position258, tokenIndex258 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l259
					}
					position++
					goto l258
				l259:
					position, tokenIndex = position258, tokenIndex258
					{
						position260, tokenIndex260 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l253
						}
						position, tokenIndex = position260, tokenIndex260
					}
				}
			l258:
				add(ruleRankVar, position254)
			}
			return true
		l253:
			position, tokenIndex = position253, tokenIndex253
			return false
		},
		/* 36 RankForma <- <((('f' 'o' 'r' 'm' 'a') / ('f' 'm' 'a') / ('f' 'm') / ('f' 'o' 'r' 'm') / ('f' 'o') / 'f') ('.' / &SpaceCharEOI))> */
		func() bool {
			position261, tokenIndex261 := position, tokenIndex
			{
				position262 := position
				{
					position263, tokenIndex263 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l264
					}
					position++
					if buffer[position] != rune('o') {
						goto l264
					}
					position++
					if buffer[position] != rune('r') {
						goto l264
					}
					position++
					if buffer[position] != rune('m') {
						goto l264
					}
					position++
					if buffer[position] != rune('a') {
						goto l264
					}
					position++
					goto l263
				l264:
					position, tokenIndex = position263, tokenIndex263
					if buffer[position] != rune('f') {
						goto l265
					}
					position++
					if buffer[position] != rune('m') {
						goto l265
					}
					position++
					if buffer[position] != rune('a') {
						goto l265
					}
					position++
					goto l263
				l265:
					position, tokenIndex = position263, tokenIndex263
					if buffer[position] != rune('f') {
						goto l266
					}
					position++
					if buffer[position] != rune('m') {
						goto l266
					}
					position++
					goto l263
				l266:
					position, tokenIndex = position263, tokenIndex263
					if buffer[position] != rune('f') {
						goto l267
					}
					position++
					if buffer[position] != rune('o') {
						goto l267
					}
					position++
					if buffer[position] != rune('r') {
						goto l267
					}
					position++
					if buffer[position] != rune('m') {
						goto l267
					}
					position++
					goto l263
				l267:
					position, tokenIndex = position263, tokenIndex263
					if buffer[position] != rune('f') {
						goto l268
					}
					position++
					if buffer[position] != rune('o') {
						goto l268
					}
					position++
					goto l263
				l268:
					position, tokenIndex = position263, tokenIndex263
					if buffer[position] != rune('f') {
						goto l261
					}
					position++
				}
			l263:
				{
					position269, tokenIndex269 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l270
					}
					position++
					goto l269
				l270:
					position, tokenIndex = position269, tokenIndex269
					{
						position271, tokenIndex271 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l261
						}
						position, tokenIndex = position271, tokenIndex271
					}
				}
			l269:
				add(ruleRankForma, position262)
			}
			return true
		l261:
			position, tokenIndex = position261, tokenIndex261
			return false
		},
		/* 37 RankSsp <- <((('s' 's' 'p') / ('s' 'u' 'b' 's' 'p' 'e' 'c') / ('s' 'u' 'b' 's' 'p')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position272, tokenIndex272 := position, tokenIndex
			{
				position273 := position
				{
					position274, tokenIndex274 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l275
					}
					position++
					if buffer[position] != rune('s') {
						goto l275
					}
					position++
					if buffer[position] != rune('p') {
						goto l275
					}
					position++
					goto l274
				l275:
					position, tokenIndex = position274, tokenIndex274
					if buffer[position] != rune('s') {
						goto l276
					}
					position++
					if buffer[position] != rune('u') {
						goto l276
					}
					position++
					if buffer[position] != rune('b') {
						goto l276
					}
					position++
					if buffer[position] != rune('s') {
						goto l276
					}
					position++
					if buffer[position] != rune('p') {
						goto l276
					}
					position++
					if buffer[position] != rune('e') {
						goto l276
					}
					position++
					if buffer[position] != rune('c') {
						goto l276
					}
					position++
					goto l274
				l276:
					position, tokenIndex = position274, tokenIndex274
					if buffer[position] != rune('s') {
						goto l272
					}
					position++
					if buffer[position] != rune('u') {
						goto l272
					}
					position++
					if buffer[position] != rune('b') {
						goto l272
					}
					position++
					if buffer[position] != rune('s') {
						goto l272
					}
					position++
					if buffer[position] != rune('p') {
						goto l272
					}
					position++
				}
			l274:
				{
					position277, tokenIndex277 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l278
					}
					position++
					goto l277
				l278:
					position, tokenIndex = position277, tokenIndex277
					{
						position279, tokenIndex279 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l272
						}
						position, tokenIndex = position279, tokenIndex279
					}
				}
			l277:
				add(ruleRankSsp, position273)
			}
			return true
		l272:
			position, tokenIndex = position272, tokenIndex272
			return false
		},
		/* 38 RankAgamo <- <((('a' 'g' 'a' 'm' 'o' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 's' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position280, tokenIndex280 := position, tokenIndex
			{
				position281 := position
				{
					position282, tokenIndex282 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l283
					}
					position++
					if buffer[position] != rune('g') {
						goto l283
					}
					position++
					if buffer[position] != rune('a') {
						goto l283
					}
					position++
					if buffer[position] != rune('m') {
						goto l283
					}
					position++
					if buffer[position] != rune('o') {
						goto l283
					}
					position++
					if buffer[position] != rune('s') {
						goto l283
					}
					position++
					if buffer[position] != rune('p') {
						goto l283
					}
					position++
					goto l282
				l283:
					position, tokenIndex = position282, tokenIndex282
					if buffer[position] != rune('a') {
						goto l284
					}
					position++
					if buffer[position] != rune('g') {
						goto l284
					}
					position++
					if buffer[position] != rune('a') {
						goto l284
					}
					position++
					if buffer[position] != rune('m') {
						goto l284
					}
					position++
					if buffer[position] != rune('o') {
						goto l284
					}
					position++
					if buffer[position] != rune('s') {
						goto l284
					}
					position++
					if buffer[position] != rune('s') {
						goto l284
					}
					position++
					if buffer[position] != rune('p') {
						goto l284
					}
					position++
					goto l282
				l284:
					position, tokenIndex = position282, tokenIndex282
					if buffer[position] != rune('a') {
						goto l280
					}
					position++
					if buffer[position] != rune('g') {
						goto l280
					}
					position++
					if buffer[position] != rune('a') {
						goto l280
					}
					position++
					if buffer[position] != rune('m') {
						goto l280
					}
					position++
					if buffer[position] != rune('o') {
						goto l280
					}
					position++
					if buffer[position] != rune('v') {
						goto l280
					}
					position++
					if buffer[position] != rune('a') {
						goto l280
					}
					position++
					if buffer[position] != rune('r') {
						goto l280
					}
					position++
				}
			l282:
				{
					position285, tokenIndex285 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l286
					}
					position++
					goto l285
				l286:
					position, tokenIndex = position285, tokenIndex285
					{
						position287, tokenIndex287 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l280
						}
						position, tokenIndex = position287, tokenIndex287
					}
				}
			l285:
				add(ruleRankAgamo, position281)
			}
			return true
		l280:
			position, tokenIndex = position280, tokenIndex280
			return false
		},
		/* 39 SubgenusOrSuperspecies <- <('(' _? NameLowerChar+ _? ')')> */
		func() bool {
			position288, tokenIndex288 := position, tokenIndex
			{
				position289 := position
				if buffer[position] != rune('(') {
					goto l288
				}
				position++
				{
					position290, tokenIndex290 := position, tokenIndex
					if !_rules[rule_]() {
						goto l290
					}
					goto l291
				l290:
					position, tokenIndex = position290, tokenIndex290
				}
			l291:
				if !_rules[ruleNameLowerChar]() {
					goto l288
				}
			l292:
				{
					position293, tokenIndex293 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l293
					}
					goto l292
				l293:
					position, tokenIndex = position293, tokenIndex293
				}
				{
					position294, tokenIndex294 := position, tokenIndex
					if !_rules[rule_]() {
						goto l294
					}
					goto l295
				l294:
					position, tokenIndex = position294, tokenIndex294
				}
			l295:
				if buffer[position] != rune(')') {
					goto l288
				}
				position++
				add(ruleSubgenusOrSuperspecies, position289)
			}
			return true
		l288:
			position, tokenIndex = position288, tokenIndex288
			return false
		},
		/* 40 Subgenus <- <(Subgenus2 / Subgenus1)> */
		func() bool {
			position296, tokenIndex296 := position, tokenIndex
			{
				position297 := position
				{
					position298, tokenIndex298 := position, tokenIndex
					if !_rules[ruleSubgenus2]() {
						goto l299
					}
					goto l298
				l299:
					position, tokenIndex = position298, tokenIndex298
					if !_rules[ruleSubgenus1]() {
						goto l296
					}
				}
			l298:
				add(ruleSubgenus, position297)
			}
			return true
		l296:
			position, tokenIndex = position296, tokenIndex296
			return false
		},
		/* 41 Subgenus2 <- <('(' _? AbbrSubgenus _? ')' !(_? NameUpperChar))> */
		func() bool {
			position300, tokenIndex300 := position, tokenIndex
			{
				position301 := position
				if buffer[position] != rune('(') {
					goto l300
				}
				position++
				{
					position302, tokenIndex302 := position, tokenIndex
					if !_rules[rule_]() {
						goto l302
					}
					goto l303
				l302:
					position, tokenIndex = position302, tokenIndex302
				}
			l303:
				if !_rules[ruleAbbrSubgenus]() {
					goto l300
				}
				{
					position304, tokenIndex304 := position, tokenIndex
					if !_rules[rule_]() {
						goto l304
					}
					goto l305
				l304:
					position, tokenIndex = position304, tokenIndex304
				}
			l305:
				if buffer[position] != rune(')') {
					goto l300
				}
				position++
				{
					position306, tokenIndex306 := position, tokenIndex
					{
						position307, tokenIndex307 := position, tokenIndex
						if !_rules[rule_]() {
							goto l307
						}
						goto l308
					l307:
						position, tokenIndex = position307, tokenIndex307
					}
				l308:
					if !_rules[ruleNameUpperChar]() {
						goto l306
					}
					goto l300
				l306:
					position, tokenIndex = position306, tokenIndex306
				}
				add(ruleSubgenus2, position301)
			}
			return true
		l300:
			position, tokenIndex = position300, tokenIndex300
			return false
		},
		/* 42 Subgenus1 <- <('(' _? UninomialWord _? ')')> */
		func() bool {
			position309, tokenIndex309 := position, tokenIndex
			{
				position310 := position
				if buffer[position] != rune('(') {
					goto l309
				}
				position++
				{
					position311, tokenIndex311 := position, tokenIndex
					if !_rules[rule_]() {
						goto l311
					}
					goto l312
				l311:
					position, tokenIndex = position311, tokenIndex311
				}
			l312:
				if !_rules[ruleUninomialWord]() {
					goto l309
				}
				{
					position313, tokenIndex313 := position, tokenIndex
					if !_rules[rule_]() {
						goto l313
					}
					goto l314
				l313:
					position, tokenIndex = position313, tokenIndex313
				}
			l314:
				if buffer[position] != rune(')') {
					goto l309
				}
				position++
				add(ruleSubgenus1, position310)
			}
			return true
		l309:
			position, tokenIndex = position309, tokenIndex309
			return false
		},
		/* 43 UninomialCombo <- <(UninomialCombo1 / UninomialCombo2)> */
		func() bool {
			position315, tokenIndex315 := position, tokenIndex
			{
				position316 := position
				{
					position317, tokenIndex317 := position, tokenIndex
					if !_rules[ruleUninomialCombo1]() {
						goto l318
					}
					goto l317
				l318:
					position, tokenIndex = position317, tokenIndex317
					if !_rules[ruleUninomialCombo2]() {
						goto l315
					}
				}
			l317:
				add(ruleUninomialCombo, position316)
			}
			return true
		l315:
			position, tokenIndex = position315, tokenIndex315
			return false
		},
		/* 44 UninomialCombo1 <- <(UninomialWord _? Subgenus (_? Authorship)?)> */
		func() bool {
			position319, tokenIndex319 := position, tokenIndex
			{
				position320 := position
				if !_rules[ruleUninomialWord]() {
					goto l319
				}
				{
					position321, tokenIndex321 := position, tokenIndex
					if !_rules[rule_]() {
						goto l321
					}
					goto l322
				l321:
					position, tokenIndex = position321, tokenIndex321
				}
			l322:
				if !_rules[ruleSubgenus]() {
					goto l319
				}
				{
					position323, tokenIndex323 := position, tokenIndex
					{
						position325, tokenIndex325 := position, tokenIndex
						if !_rules[rule_]() {
							goto l325
						}
						goto l326
					l325:
						position, tokenIndex = position325, tokenIndex325
					}
				l326:
					if !_rules[ruleAuthorship]() {
						goto l323
					}
					goto l324
				l323:
					position, tokenIndex = position323, tokenIndex323
				}
			l324:
				add(ruleUninomialCombo1, position320)
			}
			return true
		l319:
			position, tokenIndex = position319, tokenIndex319
			return false
		},
		/* 45 UninomialCombo2 <- <(Uninomial _ RankUninomial _ Uninomial)> */
		func() bool {
			position327, tokenIndex327 := position, tokenIndex
			{
				position328 := position
				if !_rules[ruleUninomial]() {
					goto l327
				}
				if !_rules[rule_]() {
					goto l327
				}
				if !_rules[ruleRankUninomial]() {
					goto l327
				}
				if !_rules[rule_]() {
					goto l327
				}
				if !_rules[ruleUninomial]() {
					goto l327
				}
				add(ruleUninomialCombo2, position328)
			}
			return true
		l327:
			position, tokenIndex = position327, tokenIndex327
			return false
		},
		/* 46 RankUninomial <- <(RankUninomialPlain / RankUninomialNotho)> */
		func() bool {
			position329, tokenIndex329 := position, tokenIndex
			{
				position330 := position
				{
					position331, tokenIndex331 := position, tokenIndex
					if !_rules[ruleRankUninomialPlain]() {
						goto l332
					}
					goto l331
				l332:
					position, tokenIndex = position331, tokenIndex331
					if !_rules[ruleRankUninomialNotho]() {
						goto l329
					}
				}
			l331:
				add(ruleRankUninomial, position330)
			}
			return true
		l329:
			position, tokenIndex = position329, tokenIndex329
			return false
		},
		/* 47 RankUninomialPlain <- <((('s' 'e' 'c' 't') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('t' 'r' 'i' 'b') / ('s' 'u' 'b' 't' 'r' 'i' 'b') / ('s' 'u' 'b' 's' 'e' 'r') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('f' 'a' 'm') / ('s' 'u' 'b' 'f' 'a' 'm') / ('d' 'i' 'v') / ('s' 'u' 'p' 'e' 'r' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position333, tokenIndex333 := position, tokenIndex
			{
				position334 := position
				{
					position335, tokenIndex335 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l336
					}
					position++
					if buffer[position] != rune('e') {
						goto l336
					}
					position++
					if buffer[position] != rune('c') {
						goto l336
					}
					position++
					if buffer[position] != rune('t') {
						goto l336
					}
					position++
					goto l335
				l336:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l337
					}
					position++
					if buffer[position] != rune('u') {
						goto l337
					}
					position++
					if buffer[position] != rune('b') {
						goto l337
					}
					position++
					if buffer[position] != rune('s') {
						goto l337
					}
					position++
					if buffer[position] != rune('e') {
						goto l337
					}
					position++
					if buffer[position] != rune('c') {
						goto l337
					}
					position++
					if buffer[position] != rune('t') {
						goto l337
					}
					position++
					goto l335
				l337:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('t') {
						goto l338
					}
					position++
					if buffer[position] != rune('r') {
						goto l338
					}
					position++
					if buffer[position] != rune('i') {
						goto l338
					}
					position++
					if buffer[position] != rune('b') {
						goto l338
					}
					position++
					goto l335
				l338:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l339
					}
					position++
					if buffer[position] != rune('u') {
						goto l339
					}
					position++
					if buffer[position] != rune('b') {
						goto l339
					}
					position++
					if buffer[position] != rune('t') {
						goto l339
					}
					position++
					if buffer[position] != rune('r') {
						goto l339
					}
					position++
					if buffer[position] != rune('i') {
						goto l339
					}
					position++
					if buffer[position] != rune('b') {
						goto l339
					}
					position++
					goto l335
				l339:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l340
					}
					position++
					if buffer[position] != rune('u') {
						goto l340
					}
					position++
					if buffer[position] != rune('b') {
						goto l340
					}
					position++
					if buffer[position] != rune('s') {
						goto l340
					}
					position++
					if buffer[position] != rune('e') {
						goto l340
					}
					position++
					if buffer[position] != rune('r') {
						goto l340
					}
					position++
					goto l335
				l340:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l341
					}
					position++
					if buffer[position] != rune('e') {
						goto l341
					}
					position++
					if buffer[position] != rune('r') {
						goto l341
					}
					position++
					goto l335
				l341:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l342
					}
					position++
					if buffer[position] != rune('u') {
						goto l342
					}
					position++
					if buffer[position] != rune('b') {
						goto l342
					}
					position++
					if buffer[position] != rune('g') {
						goto l342
					}
					position++
					if buffer[position] != rune('e') {
						goto l342
					}
					position++
					if buffer[position] != rune('n') {
						goto l342
					}
					position++
					goto l335
				l342:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l343
					}
					position++
					if buffer[position] != rune('u') {
						goto l343
					}
					position++
					if buffer[position] != rune('b') {
						goto l343
					}
					position++
					if buffer[position] != rune('g') {
						goto l343
					}
					position++
					goto l335
				l343:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('f') {
						goto l344
					}
					position++
					if buffer[position] != rune('a') {
						goto l344
					}
					position++
					if buffer[position] != rune('m') {
						goto l344
					}
					position++
					goto l335
				l344:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l345
					}
					position++
					if buffer[position] != rune('u') {
						goto l345
					}
					position++
					if buffer[position] != rune('b') {
						goto l345
					}
					position++
					if buffer[position] != rune('f') {
						goto l345
					}
					position++
					if buffer[position] != rune('a') {
						goto l345
					}
					position++
					if buffer[position] != rune('m') {
						goto l345
					}
					position++
					goto l335
				l345:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('d') {
						goto l346
					}
					position++
					if buffer[position] != rune('i') {
						goto l346
					}
					position++
					if buffer[position] != rune('v') {
						goto l346
					}
					position++
					goto l335
				l346:
					position, tokenIndex = position335, tokenIndex335
					if buffer[position] != rune('s') {
						goto l333
					}
					position++
					if buffer[position] != rune('u') {
						goto l333
					}
					position++
					if buffer[position] != rune('p') {
						goto l333
					}
					position++
					if buffer[position] != rune('e') {
						goto l333
					}
					position++
					if buffer[position] != rune('r') {
						goto l333
					}
					position++
					if buffer[position] != rune('t') {
						goto l333
					}
					position++
					if buffer[position] != rune('r') {
						goto l333
					}
					position++
					if buffer[position] != rune('i') {
						goto l333
					}
					position++
					if buffer[position] != rune('b') {
						goto l333
					}
					position++
				}
			l335:
				{
					position347, tokenIndex347 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l348
					}
					position++
					goto l347
				l348:
					position, tokenIndex = position347, tokenIndex347
					{
						position349, tokenIndex349 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l333
						}
						position, tokenIndex = position349, tokenIndex349
					}
				}
			l347:
				add(ruleRankUninomialPlain, position334)
			}
			return true
		l333:
			position, tokenIndex = position333, tokenIndex333
			return false
		},
		/* 48 RankUninomialNotho <- <('n' 'o' 't' 'h' 'o' _? (('s' 'e' 'c' 't') / ('g' 'e' 'n') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'e' 'n') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('s' 'u' 'b' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position350, tokenIndex350 := position, tokenIndex
			{
				position351 := position
				if buffer[position] != rune('n') {
					goto l350
				}
				position++
				if buffer[position] != rune('o') {
					goto l350
				}
				position++
				if buffer[position] != rune('t') {
					goto l350
				}
				position++
				if buffer[position] != rune('h') {
					goto l350
				}
				position++
				if buffer[position] != rune('o') {
					goto l350
				}
				position++
				{
					position352, tokenIndex352 := position, tokenIndex
					if !_rules[rule_]() {
						goto l352
					}
					goto l353
				l352:
					position, tokenIndex = position352, tokenIndex352
				}
			l353:
				{
					position354, tokenIndex354 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l355
					}
					position++
					if buffer[position] != rune('e') {
						goto l355
					}
					position++
					if buffer[position] != rune('c') {
						goto l355
					}
					position++
					if buffer[position] != rune('t') {
						goto l355
					}
					position++
					goto l354
				l355:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('g') {
						goto l356
					}
					position++
					if buffer[position] != rune('e') {
						goto l356
					}
					position++
					if buffer[position] != rune('n') {
						goto l356
					}
					position++
					goto l354
				l356:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('s') {
						goto l357
					}
					position++
					if buffer[position] != rune('e') {
						goto l357
					}
					position++
					if buffer[position] != rune('r') {
						goto l357
					}
					position++
					goto l354
				l357:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('s') {
						goto l358
					}
					position++
					if buffer[position] != rune('u') {
						goto l358
					}
					position++
					if buffer[position] != rune('b') {
						goto l358
					}
					position++
					if buffer[position] != rune('g') {
						goto l358
					}
					position++
					if buffer[position] != rune('e') {
						goto l358
					}
					position++
					if buffer[position] != rune('e') {
						goto l358
					}
					position++
					if buffer[position] != rune('n') {
						goto l358
					}
					position++
					goto l354
				l358:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('s') {
						goto l359
					}
					position++
					if buffer[position] != rune('u') {
						goto l359
					}
					position++
					if buffer[position] != rune('b') {
						goto l359
					}
					position++
					if buffer[position] != rune('g') {
						goto l359
					}
					position++
					if buffer[position] != rune('e') {
						goto l359
					}
					position++
					if buffer[position] != rune('n') {
						goto l359
					}
					position++
					goto l354
				l359:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('s') {
						goto l360
					}
					position++
					if buffer[position] != rune('u') {
						goto l360
					}
					position++
					if buffer[position] != rune('b') {
						goto l360
					}
					position++
					if buffer[position] != rune('g') {
						goto l360
					}
					position++
					goto l354
				l360:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('s') {
						goto l361
					}
					position++
					if buffer[position] != rune('u') {
						goto l361
					}
					position++
					if buffer[position] != rune('b') {
						goto l361
					}
					position++
					if buffer[position] != rune('s') {
						goto l361
					}
					position++
					if buffer[position] != rune('e') {
						goto l361
					}
					position++
					if buffer[position] != rune('c') {
						goto l361
					}
					position++
					if buffer[position] != rune('t') {
						goto l361
					}
					position++
					goto l354
				l361:
					position, tokenIndex = position354, tokenIndex354
					if buffer[position] != rune('s') {
						goto l350
					}
					position++
					if buffer[position] != rune('u') {
						goto l350
					}
					position++
					if buffer[position] != rune('b') {
						goto l350
					}
					position++
					if buffer[position] != rune('t') {
						goto l350
					}
					position++
					if buffer[position] != rune('r') {
						goto l350
					}
					position++
					if buffer[position] != rune('i') {
						goto l350
					}
					position++
					if buffer[position] != rune('b') {
						goto l350
					}
					position++
				}
			l354:
				{
					position362, tokenIndex362 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l363
					}
					position++
					goto l362
				l363:
					position, tokenIndex = position362, tokenIndex362
					{
						position364, tokenIndex364 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l350
						}
						position, tokenIndex = position364, tokenIndex364
					}
				}
			l362:
				add(ruleRankUninomialNotho, position351)
			}
			return true
		l350:
			position, tokenIndex = position350, tokenIndex350
			return false
		},
		/* 49 Uninomial <- <(UninomialWord (_ Authorship !(_ LowerCharExtended LowerCharExtended LowerCharExtended))?)> */
		func() bool {
			position365, tokenIndex365 := position, tokenIndex
			{
				position366 := position
				if !_rules[ruleUninomialWord]() {
					goto l365
				}
				{
					position367, tokenIndex367 := position, tokenIndex
					if !_rules[rule_]() {
						goto l367
					}
					if !_rules[ruleAuthorship]() {
						goto l367
					}
					{
						position369, tokenIndex369 := position, tokenIndex
						if !_rules[rule_]() {
							goto l369
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l369
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l369
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l369
						}
						goto l367
					l369:
						position, tokenIndex = position369, tokenIndex369
					}
					goto l368
				l367:
					position, tokenIndex = position367, tokenIndex367
				}
			l368:
				add(ruleUninomial, position366)
			}
			return true
		l365:
			position, tokenIndex = position365, tokenIndex365
			return false
		},
		/* 50 UninomialWord <- <(CapWord / TwoLetterGenus)> */
		func() bool {
			position370, tokenIndex370 := position, tokenIndex
			{
				position371 := position
				{
					position372, tokenIndex372 := position, tokenIndex
					if !_rules[ruleCapWord]() {
						goto l373
					}
					goto l372
				l373:
					position, tokenIndex = position372, tokenIndex372
					if !_rules[ruleTwoLetterGenus]() {
						goto l370
					}
				}
			l372:
				add(ruleUninomialWord, position371)
			}
			return true
		l370:
			position, tokenIndex = position370, tokenIndex370
			return false
		},
		/* 51 AbbrSubgenus <- <(UpperChar LowerChar* '.')> */
		func() bool {
			position374, tokenIndex374 := position, tokenIndex
			{
				position375 := position
				if !_rules[ruleUpperChar]() {
					goto l374
				}
			l376:
				{
					position377, tokenIndex377 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l377
					}
					goto l376
				l377:
					position, tokenIndex = position377, tokenIndex377
				}
				if buffer[position] != rune('.') {
					goto l374
				}
				position++
				add(ruleAbbrSubgenus, position375)
			}
			return true
		l374:
			position, tokenIndex = position374, tokenIndex374
			return false
		},
		/* 52 AbbrGenus <- <(UpperChar LowerChar? '.')> */
		func() bool {
			position378, tokenIndex378 := position, tokenIndex
			{
				position379 := position
				if !_rules[ruleUpperChar]() {
					goto l378
				}
				{
					position380, tokenIndex380 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l380
					}
					goto l381
				l380:
					position, tokenIndex = position380, tokenIndex380
				}
			l381:
				if buffer[position] != rune('.') {
					goto l378
				}
				position++
				add(ruleAbbrGenus, position379)
			}
			return true
		l378:
			position, tokenIndex = position378, tokenIndex378
			return false
		},
		/* 53 CapWord <- <(CapWordWithDash / CapWord1)> */
		func() bool {
			position382, tokenIndex382 := position, tokenIndex
			{
				position383 := position
				{
					position384, tokenIndex384 := position, tokenIndex
					if !_rules[ruleCapWordWithDash]() {
						goto l385
					}
					goto l384
				l385:
					position, tokenIndex = position384, tokenIndex384
					if !_rules[ruleCapWord1]() {
						goto l382
					}
				}
			l384:
				add(ruleCapWord, position383)
			}
			return true
		l382:
			position, tokenIndex = position382, tokenIndex382
			return false
		},
		/* 54 CapWord1 <- <(NameUpperChar NameLowerChar NameLowerChar+ '?'?)> */
		func() bool {
			position386, tokenIndex386 := position, tokenIndex
			{
				position387 := position
				if !_rules[ruleNameUpperChar]() {
					goto l386
				}
				if !_rules[ruleNameLowerChar]() {
					goto l386
				}
				if !_rules[ruleNameLowerChar]() {
					goto l386
				}
			l388:
				{
					position389, tokenIndex389 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l389
					}
					goto l388
				l389:
					position, tokenIndex = position389, tokenIndex389
				}
				{
					position390, tokenIndex390 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l390
					}
					position++
					goto l391
				l390:
					position, tokenIndex = position390, tokenIndex390
				}
			l391:
				add(ruleCapWord1, position387)
			}
			return true
		l386:
			position, tokenIndex = position386, tokenIndex386
			return false
		},
		/* 55 CapWordWithDash <- <((CapWord1 / TwoLetterGenusDashedSegment) Dash WordAfterDash (Dash WordAfterDash)?)> */
		func() bool {
			position392, tokenIndex392 := position, tokenIndex
			{
				position393 := position
				{
					position394, tokenIndex394 := position, tokenIndex
					if !_rules[ruleCapWord1]() {
						goto l395
					}
					goto l394
				l395:
					position, tokenIndex = position394, tokenIndex394
					if !_rules[ruleTwoLetterGenusDashedSegment]() {
						goto l392
					}
				}
			l394:
				if !_rules[ruleDash]() {
					goto l392
				}
				if !_rules[ruleWordAfterDash]() {
					goto l392
				}
				{
					position396, tokenIndex396 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l396
					}
					if !_rules[ruleWordAfterDash]() {
						goto l396
					}
					goto l397
				l396:
					position, tokenIndex = position396, tokenIndex396
				}
			l397:
				add(ruleCapWordWithDash, position393)
			}
			return true
		l392:
			position, tokenIndex = position392, tokenIndex392
			return false
		},
		/* 56 TwoLetterGenusDashedSegment <- <(('D' 'e') / ('E' 'u') / ('L' 'e') / ('N' 'e'))> */
		func() bool {
			position398, tokenIndex398 := position, tokenIndex
			{
				position399 := position
				{
					position400, tokenIndex400 := position, tokenIndex
					if buffer[position] != rune('D') {
						goto l401
					}
					position++
					if buffer[position] != rune('e') {
						goto l401
					}
					position++
					goto l400
				l401:
					position, tokenIndex = position400, tokenIndex400
					if buffer[position] != rune('E') {
						goto l402
					}
					position++
					if buffer[position] != rune('u') {
						goto l402
					}
					position++
					goto l400
				l402:
					position, tokenIndex = position400, tokenIndex400
					if buffer[position] != rune('L') {
						goto l403
					}
					position++
					if buffer[position] != rune('e') {
						goto l403
					}
					position++
					goto l400
				l403:
					position, tokenIndex = position400, tokenIndex400
					if buffer[position] != rune('N') {
						goto l398
					}
					position++
					if buffer[position] != rune('e') {
						goto l398
					}
					position++
				}
			l400:
				add(ruleTwoLetterGenusDashedSegment, position399)
			}
			return true
		l398:
			position, tokenIndex = position398, tokenIndex398
			return false
		},
		/* 57 WordAfterDash <- <(UpperAfterDash / LowerAfterDash)> */
		func() bool {
			position404, tokenIndex404 := position, tokenIndex
			{
				position405 := position
				{
					position406, tokenIndex406 := position, tokenIndex
					if !_rules[ruleUpperAfterDash]() {
						goto l407
					}
					goto l406
				l407:
					position, tokenIndex = position406, tokenIndex406
					if !_rules[ruleLowerAfterDash]() {
						goto l404
					}
				}
			l406:
				add(ruleWordAfterDash, position405)
			}
			return true
		l404:
			position, tokenIndex = position404, tokenIndex404
			return false
		},
		/* 58 UpperAfterDash <- <CapWord1> */
		func() bool {
			position408, tokenIndex408 := position, tokenIndex
			{
				position409 := position
				if !_rules[ruleCapWord1]() {
					goto l408
				}
				add(ruleUpperAfterDash, position409)
			}
			return true
		l408:
			position, tokenIndex = position408, tokenIndex408
			return false
		},
		/* 59 LowerAfterDash <- <Word1> */
		func() bool {
			position410, tokenIndex410 := position, tokenIndex
			{
				position411 := position
				if !_rules[ruleWord1]() {
					goto l410
				}
				add(ruleLowerAfterDash, position411)
			}
			return true
		l410:
			position, tokenIndex = position410, tokenIndex410
			return false
		},
		/* 60 TwoLetterGenus <- <(('C' 'a') / ('D' 'o') / ('E' 'a') / ('G' 'e') / ('I' 'a') / ('I' 'o') / ('I' 'x') / ('L' 'o') / ('O' 'a') / ('O' 'o') / ('N' 'u') / ('R' 'a') / ('T' 'y') / ('U' 'a') / ('A' 'a') / ('J' 'a') / ('Z' 'u') / ('L' 'a') / ('Q' 'u') / ('A' 's') / ('B' 'a'))> */
		func() bool {
			position412, tokenIndex412 := position, tokenIndex
			{
				position413 := position
				{
					position414, tokenIndex414 := position, tokenIndex
					if buffer[position] != rune('C') {
						goto l415
					}
					position++
					if buffer[position] != rune('a') {
						goto l415
					}
					position++
					goto l414
				l415:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('D') {
						goto l416
					}
					position++
					if buffer[position] != rune('o') {
						goto l416
					}
					position++
					goto l414
				l416:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('E') {
						goto l417
					}
					position++
					if buffer[position] != rune('a') {
						goto l417
					}
					position++
					goto l414
				l417:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('G') {
						goto l418
					}
					position++
					if buffer[position] != rune('e') {
						goto l418
					}
					position++
					goto l414
				l418:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('I') {
						goto l419
					}
					position++
					if buffer[position] != rune('a') {
						goto l419
					}
					position++
					goto l414
				l419:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('I') {
						goto l420
					}
					position++
					if buffer[position] != rune('o') {
						goto l420
					}
					position++
					goto l414
				l420:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('I') {
						goto l421
					}
					position++
					if buffer[position] != rune('x') {
						goto l421
					}
					position++
					goto l414
				l421:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('L') {
						goto l422
					}
					position++
					if buffer[position] != rune('o') {
						goto l422
					}
					position++
					goto l414
				l422:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('O') {
						goto l423
					}
					position++
					if buffer[position] != rune('a') {
						goto l423
					}
					position++
					goto l414
				l423:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('O') {
						goto l424
					}
					position++
					if buffer[position] != rune('o') {
						goto l424
					}
					position++
					goto l414
				l424:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('N') {
						goto l425
					}
					position++
					if buffer[position] != rune('u') {
						goto l425
					}
					position++
					goto l414
				l425:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('R') {
						goto l426
					}
					position++
					if buffer[position] != rune('a') {
						goto l426
					}
					position++
					goto l414
				l426:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('T') {
						goto l427
					}
					position++
					if buffer[position] != rune('y') {
						goto l427
					}
					position++
					goto l414
				l427:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('U') {
						goto l428
					}
					position++
					if buffer[position] != rune('a') {
						goto l428
					}
					position++
					goto l414
				l428:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('A') {
						goto l429
					}
					position++
					if buffer[position] != rune('a') {
						goto l429
					}
					position++
					goto l414
				l429:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('J') {
						goto l430
					}
					position++
					if buffer[position] != rune('a') {
						goto l430
					}
					position++
					goto l414
				l430:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('Z') {
						goto l431
					}
					position++
					if buffer[position] != rune('u') {
						goto l431
					}
					position++
					goto l414
				l431:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('L') {
						goto l432
					}
					position++
					if buffer[position] != rune('a') {
						goto l432
					}
					position++
					goto l414
				l432:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('Q') {
						goto l433
					}
					position++
					if buffer[position] != rune('u') {
						goto l433
					}
					position++
					goto l414
				l433:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('A') {
						goto l434
					}
					position++
					if buffer[position] != rune('s') {
						goto l434
					}
					position++
					goto l414
				l434:
					position, tokenIndex = position414, tokenIndex414
					if buffer[position] != rune('B') {
						goto l412
					}
					position++
					if buffer[position] != rune('a') {
						goto l412
					}
					position++
				}
			l414:
				add(ruleTwoLetterGenus, position413)
			}
			return true
		l412:
			position, tokenIndex = position412, tokenIndex412
			return false
		},
		/* 61 Word <- <(!((('e' 'x') / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd') / ('p' 'r' 'o') / ('c' 'v') / ('c' 'u' 'l' 't' 'i' 'v' 'a' 'r') / AuthorPrefix / RankUninomial / Approximation / Word4) SpaceCharEOI) (WordApostr / WordStartsWithDigit / MultiDashedWord / Word2 / Word1) &(SpaceCharEOI / '('))> */
		func() bool {
			position435, tokenIndex435 := position, tokenIndex
			{
				position436 := position
				{
					position437, tokenIndex437 := position, tokenIndex
					{
						position438, tokenIndex438 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l439
						}
						position++
						if buffer[position] != rune('x') {
							goto l439
						}
						position++
						goto l438
					l439:
						position, tokenIndex = position438, tokenIndex438
						if buffer[position] != rune('e') {
							goto l440
						}
						position++
						if buffer[position] != rune('t') {
							goto l440
						}
						position++
						goto l438
					l440:
						position, tokenIndex = position438, tokenIndex438
						if buffer[position] != rune('a') {
							goto l441
						}
						position++
						if buffer[position] != rune('n') {
							goto l441
						}
						position++
						if buffer[position] != rune('d') {
							goto l441
						}
						position++
						goto l438
					l441:
						position, tokenIndex = position438, tokenIndex438
						if buffer[position] != rune('a') {
							goto l442
						}
						position++
						if buffer[position] != rune('p') {
							goto l442
						}
						position++
						if buffer[position] != rune('u') {
							goto l442
						}
						position++
						if buffer[position] != rune('d') {
							goto l442
						}
						position++
						goto l438
					l442:
						position, tokenIndex = position438, tokenIndex438
						if buffer[position] != rune('p') {
							goto l443
						}
						position++
						if buffer[position] != rune('r') {
							goto l443
						}
						position++
						if buffer[position] != rune('o') {
							goto l443
						}
						position++
						goto l438
					l443:
						position, tokenIndex = position438, tokenIndex438
						if buffer[position] != rune('c') {
							goto l444
						}
						position++
						if buffer[position] != rune('v') {
							goto l444
						}
						position++
						goto l438
					l444:
						position, tokenIndex = position438, tokenIndex438
						if buffer[position] != rune('c') {
							goto l445
						}
						position++
						if buffer[position] != rune('u') {
							goto l445
						}
						position++
						if buffer[position] != rune('l') {
							goto l445
						}
						position++
						if buffer[position] != rune('t') {
							goto l445
						}
						position++
						if buffer[position] != rune('i') {
							goto l445
						}
						position++
						if buffer[position] != rune('v') {
							goto l445
						}
						position++
						if buffer[position] != rune('a') {
							goto l445
						}
						position++
						if buffer[position] != rune('r') {
							goto l445
						}
						position++
						goto l438
					l445:
						position, tokenIndex = position438, tokenIndex438
						if !_rules[ruleAuthorPrefix]() {
							goto l446
						}
						goto l438
					l446:
						position, tokenIndex = position438, tokenIndex438
						if !_rules[ruleRankUninomial]() {
							goto l447
						}
						goto l438
					l447:
						position, tokenIndex = position438, tokenIndex438
						if !_rules[ruleApproximation]() {
							goto l448
						}
						goto l438
					l448:
						position, tokenIndex = position438, tokenIndex438
						if !_rules[ruleWord4]() {
							goto l437
						}
					}
				l438:
					if !_rules[ruleSpaceCharEOI]() {
						goto l437
					}
					goto l435
				l437:
					position, tokenIndex = position437, tokenIndex437
				}
				{
					position449, tokenIndex449 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l450
					}
					goto l449
				l450:
					position, tokenIndex = position449, tokenIndex449
					if !_rules[ruleWordStartsWithDigit]() {
						goto l451
					}
					goto l449
				l451:
					position, tokenIndex = position449, tokenIndex449
					if !_rules[ruleMultiDashedWord]() {
						goto l452
					}
					goto l449
				l452:
					position, tokenIndex = position449, tokenIndex449
					if !_rules[ruleWord2]() {
						goto l453
					}
					goto l449
				l453:
					position, tokenIndex = position449, tokenIndex449
					if !_rules[ruleWord1]() {
						goto l435
					}
				}
			l449:
				{
					position454, tokenIndex454 := position, tokenIndex
					{
						position455, tokenIndex455 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l456
						}
						goto l455
					l456:
						position, tokenIndex = position455, tokenIndex455
						if buffer[position] != rune('(') {
							goto l435
						}
						position++
					}
				l455:
					position, tokenIndex = position454, tokenIndex454
				}
				add(ruleWord, position436)
			}
			return true
		l435:
			position, tokenIndex = position435, tokenIndex435
			return false
		},
		/* 62 Word1 <- <(((DotPrefix / LowerASCII) Dash)? NameLowerChar NameLowerChar+)> */
		func() bool {
			position457, tokenIndex457 := position, tokenIndex
			{
				position458 := position
				{
					position459, tokenIndex459 := position, tokenIndex
					{
						position461, tokenIndex461 := position, tokenIndex
						if !_rules[ruleDotPrefix]() {
							goto l462
						}
						goto l461
					l462:
						position, tokenIndex = position461, tokenIndex461
						if !_rules[ruleLowerASCII]() {
							goto l459
						}
					}
				l461:
					if !_rules[ruleDash]() {
						goto l459
					}
					goto l460
				l459:
					position, tokenIndex = position459, tokenIndex459
				}
			l460:
				if !_rules[ruleNameLowerChar]() {
					goto l457
				}
				if !_rules[ruleNameLowerChar]() {
					goto l457
				}
			l463:
				{
					position464, tokenIndex464 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l464
					}
					goto l463
				l464:
					position, tokenIndex = position464, tokenIndex464
				}
				add(ruleWord1, position458)
			}
			return true
		l457:
			position, tokenIndex = position457, tokenIndex457
			return false
		},
		/* 63 WordStartsWithDigit <- <(('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9') Nums? ('.' / Dash)? NameLowerChar NameLowerChar NameLowerChar NameLowerChar+)> */
		func() bool {
			position465, tokenIndex465 := position, tokenIndex
			{
				position466 := position
				{
					position467, tokenIndex467 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l468
					}
					position++
					goto l467
				l468:
					position, tokenIndex = position467, tokenIndex467
					if buffer[position] != rune('2') {
						goto l469
					}
					position++
					goto l467
				l469:
					position, tokenIndex = position467, tokenIndex467
					if buffer[position] != rune('3') {
						goto l470
					}
					position++
					goto l467
				l470:
					position, tokenIndex = position467, tokenIndex467
					if buffer[position] != rune('4') {
						goto l471
					}
					position++
					goto l467
				l471:
					position, tokenIndex = position467, tokenIndex467
					if buffer[position] != rune('5') {
						goto l472
					}
					position++
					goto l467
				l472:
					position, tokenIndex = position467, tokenIndex467
					if buffer[position] != rune('6') {
						goto l473
					}
					position++
					goto l467
				l473:
					position, tokenIndex = position467, tokenIndex467
					if buffer[position] != rune('7') {
						goto l474
					}
					position++
					goto l467
				l474:
					position, tokenIndex = position467, tokenIndex467
					if buffer[position] != rune('8') {
						goto l475
					}
					position++
					goto l467
				l475:
					position, tokenIndex = position467, tokenIndex467
					if buffer[position] != rune('9') {
						goto l465
					}
					position++
				}
			l467:
				{
					position476, tokenIndex476 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l476
					}
					goto l477
				l476:
					position, tokenIndex = position476, tokenIndex476
				}
			l477:
				{
					position478, tokenIndex478 := position, tokenIndex
					{
						position480, tokenIndex480 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l481
						}
						position++
						goto l480
					l481:
						position, tokenIndex = position480, tokenIndex480
						if !_rules[ruleDash]() {
							goto l478
						}
					}
				l480:
					goto l479
				l478:
					position, tokenIndex = position478, tokenIndex478
				}
			l479:
				if !_rules[ruleNameLowerChar]() {
					goto l465
				}
				if !_rules[ruleNameLowerChar]() {
					goto l465
				}
				if !_rules[ruleNameLowerChar]() {
					goto l465
				}
				if !_rules[ruleNameLowerChar]() {
					goto l465
				}
			l482:
				{
					position483, tokenIndex483 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l483
					}
					goto l482
				l483:
					position, tokenIndex = position483, tokenIndex483
				}
				add(ruleWordStartsWithDigit, position466)
			}
			return true
		l465:
			position, tokenIndex = position465, tokenIndex465
			return false
		},
		/* 64 Word2 <- <(NameLowerChar+ Dash? (WordApostr / NameLowerChar+))> */
		func() bool {
			position484, tokenIndex484 := position, tokenIndex
			{
				position485 := position
				if !_rules[ruleNameLowerChar]() {
					goto l484
				}
			l486:
				{
					position487, tokenIndex487 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l487
					}
					goto l486
				l487:
					position, tokenIndex = position487, tokenIndex487
				}
				{
					position488, tokenIndex488 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l488
					}
					goto l489
				l488:
					position, tokenIndex = position488, tokenIndex488
				}
			l489:
				{
					position490, tokenIndex490 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l491
					}
					goto l490
				l491:
					position, tokenIndex = position490, tokenIndex490
					if !_rules[ruleNameLowerChar]() {
						goto l484
					}
				l492:
					{
						position493, tokenIndex493 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l493
						}
						goto l492
					l493:
						position, tokenIndex = position493, tokenIndex493
					}
				}
			l490:
				add(ruleWord2, position485)
			}
			return true
		l484:
			position, tokenIndex = position484, tokenIndex484
			return false
		},
		/* 65 WordApostr <- <(NameLowerChar NameLowerChar* Apostrophe Word1)> */
		func() bool {
			position494, tokenIndex494 := position, tokenIndex
			{
				position495 := position
				if !_rules[ruleNameLowerChar]() {
					goto l494
				}
			l496:
				{
					position497, tokenIndex497 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l497
					}
					goto l496
				l497:
					position, tokenIndex = position497, tokenIndex497
				}
				if !_rules[ruleApostrophe]() {
					goto l494
				}
				if !_rules[ruleWord1]() {
					goto l494
				}
				add(ruleWordApostr, position495)
			}
			return true
		l494:
			position, tokenIndex = position494, tokenIndex494
			return false
		},
		/* 66 Word4 <- <(NameLowerChar+ '.' NameLowerChar)> */
		func() bool {
			position498, tokenIndex498 := position, tokenIndex
			{
				position499 := position
				if !_rules[ruleNameLowerChar]() {
					goto l498
				}
			l500:
				{
					position501, tokenIndex501 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l501
					}
					goto l500
				l501:
					position, tokenIndex = position501, tokenIndex501
				}
				if buffer[position] != rune('.') {
					goto l498
				}
				position++
				if !_rules[ruleNameLowerChar]() {
					goto l498
				}
				add(ruleWord4, position499)
			}
			return true
		l498:
			position, tokenIndex = position498, tokenIndex498
			return false
		},
		/* 67 DotPrefix <- <('s' 't' '.')> */
		func() bool {
			position502, tokenIndex502 := position, tokenIndex
			{
				position503 := position
				if buffer[position] != rune('s') {
					goto l502
				}
				position++
				if buffer[position] != rune('t') {
					goto l502
				}
				position++
				if buffer[position] != rune('.') {
					goto l502
				}
				position++
				add(ruleDotPrefix, position503)
			}
			return true
		l502:
			position, tokenIndex = position502, tokenIndex502
			return false
		},
		/* 68 MultiDashedWord <- <(NameLowerChar+ Dash NameLowerChar+ Dash NameLowerChar+ (Dash NameLowerChar+)?)> */
		func() bool {
			position504, tokenIndex504 := position, tokenIndex
			{
				position505 := position
				if !_rules[ruleNameLowerChar]() {
					goto l504
				}
			l506:
				{
					position507, tokenIndex507 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l507
					}
					goto l506
				l507:
					position, tokenIndex = position507, tokenIndex507
				}
				if !_rules[ruleDash]() {
					goto l504
				}
				if !_rules[ruleNameLowerChar]() {
					goto l504
				}
			l508:
				{
					position509, tokenIndex509 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l509
					}
					goto l508
				l509:
					position, tokenIndex = position509, tokenIndex509
				}
				if !_rules[ruleDash]() {
					goto l504
				}
				if !_rules[ruleNameLowerChar]() {
					goto l504
				}
			l510:
				{
					position511, tokenIndex511 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l511
					}
					goto l510
				l511:
					position, tokenIndex = position511, tokenIndex511
				}
				{
					position512, tokenIndex512 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l512
					}
					if !_rules[ruleNameLowerChar]() {
						goto l512
					}
				l514:
					{
						position515, tokenIndex515 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l515
						}
						goto l514
					l515:
						position, tokenIndex = position515, tokenIndex515
					}
					goto l513
				l512:
					position, tokenIndex = position512, tokenIndex512
				}
			l513:
				add(ruleMultiDashedWord, position505)
			}
			return true
		l504:
			position, tokenIndex = position504, tokenIndex504
			return false
		},
		/* 69 HybridChar <- <('×' / (('x' / 'X') &_) / (('x' / 'X') &UninomialWord) / (('x' / 'X') &END))> */
		func() bool {
			position516, tokenIndex516 := position, tokenIndex
			{
				position517 := position
				{
					position518, tokenIndex518 := position, tokenIndex
					if buffer[position] != rune('×') {
						goto l519
					}
					position++
					goto l518
				l519:
					position, tokenIndex = position518, tokenIndex518
					{
						position521, tokenIndex521 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l522
						}
						position++
						goto l521
					l522:
						position, tokenIndex = position521, tokenIndex521
						if buffer[position] != rune('X') {
							goto l520
						}
						position++
					}
				l521:
					{
						position523, tokenIndex523 := position, tokenIndex
						if !_rules[rule_]() {
							goto l520
						}
						position, tokenIndex = position523, tokenIndex523
					}
					goto l518
				l520:
					position, tokenIndex = position518, tokenIndex518
					{
						position525, tokenIndex525 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l526
						}
						position++
						goto l525
					l526:
						position, tokenIndex = position525, tokenIndex525
						if buffer[position] != rune('X') {
							goto l524
						}
						position++
					}
				l525:
					{
						position527, tokenIndex527 := position, tokenIndex
						if !_rules[ruleUninomialWord]() {
							goto l524
						}
						position, tokenIndex = position527, tokenIndex527
					}
					goto l518
				l524:
					position, tokenIndex = position518, tokenIndex518
					{
						position528, tokenIndex528 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l529
						}
						position++
						goto l528
					l529:
						position, tokenIndex = position528, tokenIndex528
						if buffer[position] != rune('X') {
							goto l516
						}
						position++
					}
				l528:
					{
						position530, tokenIndex530 := position, tokenIndex
						if !_rules[ruleEND]() {
							goto l516
						}
						position, tokenIndex = position530, tokenIndex530
					}
				}
			l518:
				add(ruleHybridChar, position517)
			}
			return true
		l516:
			position, tokenIndex = position516, tokenIndex516
			return false
		},
		/* 70 GraftChimeraChar <- <'+'> */
		func() bool {
			position531, tokenIndex531 := position, tokenIndex
			{
				position532 := position
				if buffer[position] != rune('+') {
					goto l531
				}
				position++
				add(ruleGraftChimeraChar, position532)
			}
			return true
		l531:
			position, tokenIndex = position531, tokenIndex531
			return false
		},
		/* 71 ApproxNameIgnored <- <.*> */
		func() bool {
			{
				position534 := position
			l535:
				{
					position536, tokenIndex536 := position, tokenIndex
					if !matchDot() {
						goto l536
					}
					goto l535
				l536:
					position, tokenIndex = position536, tokenIndex536
				}
				add(ruleApproxNameIgnored, position534)
			}
			return true
		},
		/* 72 Approximation <- <(('s' 'p' '.' _? ('n' 'r' '.')) / ('s' 'p' '.' _? ('a' 'f' 'f' '.')) / ('m' 'o' 'n' 's' 't' '.') / '?' / ((('s' 'p' 'p') / ('n' 'r') / ('s' 'p') / ('a' 'f' 'f') / ('s' 'p' 'e' 'c' 'i' 'e' 's')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position537, tokenIndex537 := position, tokenIndex
			{
				position538 := position
				{
					position539, tokenIndex539 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l540
					}
					position++
					if buffer[position] != rune('p') {
						goto l540
					}
					position++
					if buffer[position] != rune('.') {
						goto l540
					}
					position++
					{
						position541, tokenIndex541 := position, tokenIndex
						if !_rules[rule_]() {
							goto l541
						}
						goto l542
					l541:
						position, tokenIndex = position541, tokenIndex541
					}
				l542:
					if buffer[position] != rune('n') {
						goto l540
					}
					position++
					if buffer[position] != rune('r') {
						goto l540
					}
					position++
					if buffer[position] != rune('.') {
						goto l540
					}
					position++
					goto l539
				l540:
					position, tokenIndex = position539, tokenIndex539
					if buffer[position] != rune('s') {
						goto l543
					}
					position++
					if buffer[position] != rune('p') {
						goto l543
					}
					position++
					if buffer[position] != rune('.') {
						goto l543
					}
					position++
					{
						position544, tokenIndex544 := position, tokenIndex
						if !_rules[rule_]() {
							goto l544
						}
						goto l545
					l544:
						position, tokenIndex = position544, tokenIndex544
					}
				l545:
					if buffer[position] != rune('a') {
						goto l543
					}
					position++
					if buffer[position] != rune('f') {
						goto l543
					}
					position++
					if buffer[position] != rune('f') {
						goto l543
					}
					position++
					if buffer[position] != rune('.') {
						goto l543
					}
					position++
					goto l539
				l543:
					position, tokenIndex = position539, tokenIndex539
					if buffer[position] != rune('m') {
						goto l546
					}
					position++
					if buffer[position] != rune('o') {
						goto l546
					}
					position++
					if buffer[position] != rune('n') {
						goto l546
					}
					position++
					if buffer[position] != rune('s') {
						goto l546
					}
					position++
					if buffer[position] != rune('t') {
						goto l546
					}
					position++
					if buffer[position] != rune('.') {
						goto l546
					}
					position++
					goto l539
				l546:
					position, tokenIndex = position539, tokenIndex539
					if buffer[position] != rune('?') {
						goto l547
					}
					position++
					goto l539
				l547:
					position, tokenIndex = position539, tokenIndex539
					{
						position548, tokenIndex548 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l549
						}
						position++
						if buffer[position] != rune('p') {
							goto l549
						}
						position++
						if buffer[position] != rune('p') {
							goto l549
						}
						position++
						goto l548
					l549:
						position, tokenIndex = position548, tokenIndex548
						if buffer[position] != rune('n') {
							goto l550
						}
						position++
						if buffer[position] != rune('r') {
							goto l550
						}
						position++
						goto l548
					l550:
						position, tokenIndex = position548, tokenIndex548
						if buffer[position] != rune('s') {
							goto l551
						}
						position++
						if buffer[position] != rune('p') {
							goto l551
						}
						position++
						goto l548
					l551:
						position, tokenIndex = position548, tokenIndex548
						if buffer[position] != rune('a') {
							goto l552
						}
						position++
						if buffer[position] != rune('f') {
							goto l552
						}
						position++
						if buffer[position] != rune('f') {
							goto l552
						}
						position++
						goto l548
					l552:
						position, tokenIndex = position548, tokenIndex548
						if buffer[position] != rune('s') {
							goto l537
						}
						position++
						if buffer[position] != rune('p') {
							goto l537
						}
						position++
						if buffer[position] != rune('e') {
							goto l537
						}
						position++
						if buffer[position] != rune('c') {
							goto l537
						}
						position++
						if buffer[position] != rune('i') {
							goto l537
						}
						position++
						if buffer[position] != rune('e') {
							goto l537
						}
						position++
						if buffer[position] != rune('s') {
							goto l537
						}
						position++
					}
				l548:
					{
						position553, tokenIndex553 := position, tokenIndex
						{
							position555, tokenIndex555 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l554
							}
							position, tokenIndex = position555, tokenIndex555
						}
						goto l553
					l554:
						position, tokenIndex = position553, tokenIndex553
						if buffer[position] != rune('.') {
							goto l537
						}
						position++
					}
				l553:
				}
			l539:
				add(ruleApproximation, position538)
			}
			return true
		l537:
			position, tokenIndex = position537, tokenIndex537
			return false
		},
		/* 73 Authorship <- <((AuthorshipCombo / OriginalAuthorship) &(SpaceCharEOI / ';' / ','))> */
		func() bool {
			position556, tokenIndex556 := position, tokenIndex
			{
				position557 := position
				{
					position558, tokenIndex558 := position, tokenIndex
					if !_rules[ruleAuthorshipCombo]() {
						goto l559
					}
					goto l558
				l559:
					position, tokenIndex = position558, tokenIndex558
					if !_rules[ruleOriginalAuthorship]() {
						goto l556
					}
				}
			l558:
				{
					position560, tokenIndex560 := position, tokenIndex
					{
						position561, tokenIndex561 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l562
						}
						goto l561
					l562:
						position, tokenIndex = position561, tokenIndex561
						if buffer[position] != rune(';') {
							goto l563
						}
						position++
						goto l561
					l563:
						position, tokenIndex = position561, tokenIndex561
						if buffer[position] != rune(',') {
							goto l556
						}
						position++
					}
				l561:
					position, tokenIndex = position560, tokenIndex560
				}
				add(ruleAuthorship, position557)
			}
			return true
		l556:
			position, tokenIndex = position556, tokenIndex556
			return false
		},
		/* 74 AuthorshipCombo <- <(OriginalAuthorshipComb (_? CombinationAuthorship)?)> */
		func() bool {
			position564, tokenIndex564 := position, tokenIndex
			{
				position565 := position
				if !_rules[ruleOriginalAuthorshipComb]() {
					goto l564
				}
				{
					position566, tokenIndex566 := position, tokenIndex
					{
						position568, tokenIndex568 := position, tokenIndex
						if !_rules[rule_]() {
							goto l568
						}
						goto l569
					l568:
						position, tokenIndex = position568, tokenIndex568
					}
				l569:
					if !_rules[ruleCombinationAuthorship]() {
						goto l566
					}
					goto l567
				l566:
					position, tokenIndex = position566, tokenIndex566
				}
			l567:
				add(ruleAuthorshipCombo, position565)
			}
			return true
		l564:
			position, tokenIndex = position564, tokenIndex564
			return false
		},
		/* 75 OriginalAuthorship <- <AuthorsGroup> */
		func() bool {
			position570, tokenIndex570 := position, tokenIndex
			{
				position571 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l570
				}
				add(ruleOriginalAuthorship, position571)
			}
			return true
		l570:
			position, tokenIndex = position570, tokenIndex570
			return false
		},
		/* 76 OriginalAuthorshipComb <- <(BasionymAuthorshipYearMisformed / BasionymAuthorship / BasionymAuthorshipMissingParens)> */
		func() bool {
			position572, tokenIndex572 := position, tokenIndex
			{
				position573 := position
				{
					position574, tokenIndex574 := position, tokenIndex
					if !_rules[ruleBasionymAuthorshipYearMisformed]() {
						goto l575
					}
					goto l574
				l575:
					position, tokenIndex = position574, tokenIndex574
					if !_rules[ruleBasionymAuthorship]() {
						goto l576
					}
					goto l574
				l576:
					position, tokenIndex = position574, tokenIndex574
					if !_rules[ruleBasionymAuthorshipMissingParens]() {
						goto l572
					}
				}
			l574:
				add(ruleOriginalAuthorshipComb, position573)
			}
			return true
		l572:
			position, tokenIndex = position572, tokenIndex572
			return false
		},
		/* 77 CombinationAuthorship <- <AuthorsGroup> */
		func() bool {
			position577, tokenIndex577 := position, tokenIndex
			{
				position578 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l577
				}
				add(ruleCombinationAuthorship, position578)
			}
			return true
		l577:
			position, tokenIndex = position577, tokenIndex577
			return false
		},
		/* 78 BasionymAuthorshipMissingParens <- <(MissingParensStart / MissingParensEnd)> */
		func() bool {
			position579, tokenIndex579 := position, tokenIndex
			{
				position580 := position
				{
					position581, tokenIndex581 := position, tokenIndex
					if !_rules[ruleMissingParensStart]() {
						goto l582
					}
					goto l581
				l582:
					position, tokenIndex = position581, tokenIndex581
					if !_rules[ruleMissingParensEnd]() {
						goto l579
					}
				}
			l581:
				add(ruleBasionymAuthorshipMissingParens, position580)
			}
			return true
		l579:
			position, tokenIndex = position579, tokenIndex579
			return false
		},
		/* 79 MissingParensStart <- <('(' _? AuthorsGroup)> */
		func() bool {
			position583, tokenIndex583 := position, tokenIndex
			{
				position584 := position
				if buffer[position] != rune('(') {
					goto l583
				}
				position++
				{
					position585, tokenIndex585 := position, tokenIndex
					if !_rules[rule_]() {
						goto l585
					}
					goto l586
				l585:
					position, tokenIndex = position585, tokenIndex585
				}
			l586:
				if !_rules[ruleAuthorsGroup]() {
					goto l583
				}
				add(ruleMissingParensStart, position584)
			}
			return true
		l583:
			position, tokenIndex = position583, tokenIndex583
			return false
		},
		/* 80 MissingParensEnd <- <(AuthorsGroup _? ')')> */
		func() bool {
			position587, tokenIndex587 := position, tokenIndex
			{
				position588 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l587
				}
				{
					position589, tokenIndex589 := position, tokenIndex
					if !_rules[rule_]() {
						goto l589
					}
					goto l590
				l589:
					position, tokenIndex = position589, tokenIndex589
				}
			l590:
				if buffer[position] != rune(')') {
					goto l587
				}
				position++
				add(ruleMissingParensEnd, position588)
			}
			return true
		l587:
			position, tokenIndex = position587, tokenIndex587
			return false
		},
		/* 81 BasionymAuthorshipYearMisformed <- <('(' _? AuthorsGroup _? ')' (_? ',')? _? Year)> */
		func() bool {
			position591, tokenIndex591 := position, tokenIndex
			{
				position592 := position
				if buffer[position] != rune('(') {
					goto l591
				}
				position++
				{
					position593, tokenIndex593 := position, tokenIndex
					if !_rules[rule_]() {
						goto l593
					}
					goto l594
				l593:
					position, tokenIndex = position593, tokenIndex593
				}
			l594:
				if !_rules[ruleAuthorsGroup]() {
					goto l591
				}
				{
					position595, tokenIndex595 := position, tokenIndex
					if !_rules[rule_]() {
						goto l595
					}
					goto l596
				l595:
					position, tokenIndex = position595, tokenIndex595
				}
			l596:
				if buffer[position] != rune(')') {
					goto l591
				}
				position++
				{
					position597, tokenIndex597 := position, tokenIndex
					{
						position599, tokenIndex599 := position, tokenIndex
						if !_rules[rule_]() {
							goto l599
						}
						goto l600
					l599:
						position, tokenIndex = position599, tokenIndex599
					}
				l600:
					if buffer[position] != rune(',') {
						goto l597
					}
					position++
					goto l598
				l597:
					position, tokenIndex = position597, tokenIndex597
				}
			l598:
				{
					position601, tokenIndex601 := position, tokenIndex
					if !_rules[rule_]() {
						goto l601
					}
					goto l602
				l601:
					position, tokenIndex = position601, tokenIndex601
				}
			l602:
				if !_rules[ruleYear]() {
					goto l591
				}
				add(ruleBasionymAuthorshipYearMisformed, position592)
			}
			return true
		l591:
			position, tokenIndex = position591, tokenIndex591
			return false
		},
		/* 82 BasionymAuthorship <- <(BasionymAuthorship1 / BasionymAuthorship2Parens)> */
		func() bool {
			position603, tokenIndex603 := position, tokenIndex
			{
				position604 := position
				{
					position605, tokenIndex605 := position, tokenIndex
					if !_rules[ruleBasionymAuthorship1]() {
						goto l606
					}
					goto l605
				l606:
					position, tokenIndex = position605, tokenIndex605
					if !_rules[ruleBasionymAuthorship2Parens]() {
						goto l603
					}
				}
			l605:
				add(ruleBasionymAuthorship, position604)
			}
			return true
		l603:
			position, tokenIndex = position603, tokenIndex603
			return false
		},
		/* 83 BasionymAuthorship1 <- <('(' _? AuthorsGroup _? ')')> */
		func() bool {
			position607, tokenIndex607 := position, tokenIndex
			{
				position608 := position
				if buffer[position] != rune('(') {
					goto l607
				}
				position++
				{
					position609, tokenIndex609 := position, tokenIndex
					if !_rules[rule_]() {
						goto l609
					}
					goto l610
				l609:
					position, tokenIndex = position609, tokenIndex609
				}
			l610:
				if !_rules[ruleAuthorsGroup]() {
					goto l607
				}
				{
					position611, tokenIndex611 := position, tokenIndex
					if !_rules[rule_]() {
						goto l611
					}
					goto l612
				l611:
					position, tokenIndex = position611, tokenIndex611
				}
			l612:
				if buffer[position] != rune(')') {
					goto l607
				}
				position++
				add(ruleBasionymAuthorship1, position608)
			}
			return true
		l607:
			position, tokenIndex = position607, tokenIndex607
			return false
		},
		/* 84 BasionymAuthorship2Parens <- <('(' _? '(' _? AuthorsGroup _? ')' _? ')')> */
		func() bool {
			position613, tokenIndex613 := position, tokenIndex
			{
				position614 := position
				if buffer[position] != rune('(') {
					goto l613
				}
				position++
				{
					position615, tokenIndex615 := position, tokenIndex
					if !_rules[rule_]() {
						goto l615
					}
					goto l616
				l615:
					position, tokenIndex = position615, tokenIndex615
				}
			l616:
				if buffer[position] != rune('(') {
					goto l613
				}
				position++
				{
					position617, tokenIndex617 := position, tokenIndex
					if !_rules[rule_]() {
						goto l617
					}
					goto l618
				l617:
					position, tokenIndex = position617, tokenIndex617
				}
			l618:
				if !_rules[ruleAuthorsGroup]() {
					goto l613
				}
				{
					position619, tokenIndex619 := position, tokenIndex
					if !_rules[rule_]() {
						goto l619
					}
					goto l620
				l619:
					position, tokenIndex = position619, tokenIndex619
				}
			l620:
				if buffer[position] != rune(')') {
					goto l613
				}
				position++
				{
					position621, tokenIndex621 := position, tokenIndex
					if !_rules[rule_]() {
						goto l621
					}
					goto l622
				l621:
					position, tokenIndex = position621, tokenIndex621
				}
			l622:
				if buffer[position] != rune(')') {
					goto l613
				}
				position++
				add(ruleBasionymAuthorship2Parens, position614)
			}
			return true
		l613:
			position, tokenIndex = position613, tokenIndex613
			return false
		},
		/* 85 AuthorsGroup <- <(AuthorsTeam (_ (AuthorEmend / AuthorEx) AuthorsTeam)?)> */
		func() bool {
			position623, tokenIndex623 := position, tokenIndex
			{
				position624 := position
				if !_rules[ruleAuthorsTeam]() {
					goto l623
				}
				{
					position625, tokenIndex625 := position, tokenIndex
					if !_rules[rule_]() {
						goto l625
					}
					{
						position627, tokenIndex627 := position, tokenIndex
						if !_rules[ruleAuthorEmend]() {
							goto l628
						}
						goto l627
					l628:
						position, tokenIndex = position627, tokenIndex627
						if !_rules[ruleAuthorEx]() {
							goto l625
						}
					}
				l627:
					if !_rules[ruleAuthorsTeam]() {
						goto l625
					}
					goto l626
				l625:
					position, tokenIndex = position625, tokenIndex625
				}
			l626:
				add(ruleAuthorsGroup, position624)
			}
			return true
		l623:
			position, tokenIndex = position623, tokenIndex623
			return false
		},
		/* 86 AuthorsTeam <- <(Author (AuthorSep Author)* (_? ','? _? Year)?)> */
		func() bool {
			position629, tokenIndex629 := position, tokenIndex
			{
				position630 := position
				if !_rules[ruleAuthor]() {
					goto l629
				}
			l631:
				{
					position632, tokenIndex632 := position, tokenIndex
					if !_rules[ruleAuthorSep]() {
						goto l632
					}
					if !_rules[ruleAuthor]() {
						goto l632
					}
					goto l631
				l632:
					position, tokenIndex = position632, tokenIndex632
				}
				{
					position633, tokenIndex633 := position, tokenIndex
					{
						position635, tokenIndex635 := position, tokenIndex
						if !_rules[rule_]() {
							goto l635
						}
						goto l636
					l635:
						position, tokenIndex = position635, tokenIndex635
					}
				l636:
					{
						position637, tokenIndex637 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l637
						}
						position++
						goto l638
					l637:
						position, tokenIndex = position637, tokenIndex637
					}
				l638:
					{
						position639, tokenIndex639 := position, tokenIndex
						if !_rules[rule_]() {
							goto l639
						}
						goto l640
					l639:
						position, tokenIndex = position639, tokenIndex639
					}
				l640:
					if !_rules[ruleYear]() {
						goto l633
					}
					goto l634
				l633:
					position, tokenIndex = position633, tokenIndex633
				}
			l634:
				add(ruleAuthorsTeam, position630)
			}
			return true
		l629:
			position, tokenIndex = position629, tokenIndex629
			return false
		},
		/* 87 AuthorSep <- <(AuthorSep1 / AuthorSep2)> */
		func() bool {
			position641, tokenIndex641 := position, tokenIndex
			{
				position642 := position
				{
					position643, tokenIndex643 := position, tokenIndex
					if !_rules[ruleAuthorSep1]() {
						goto l644
					}
					goto l643
				l644:
					position, tokenIndex = position643, tokenIndex643
					if !_rules[ruleAuthorSep2]() {
						goto l641
					}
				}
			l643:
				add(ruleAuthorSep, position642)
			}
			return true
		l641:
			position, tokenIndex = position641, tokenIndex641
			return false
		},
		/* 88 AuthorSep1 <- <(_? (',' _)? ('&' / AuthorSepSpanish / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd')) _?)> */
		func() bool {
			position645, tokenIndex645 := position, tokenIndex
			{
				position646 := position
				{
					position647, tokenIndex647 := position, tokenIndex
					if !_rules[rule_]() {
						goto l647
					}
					goto l648
				l647:
					position, tokenIndex = position647, tokenIndex647
				}
			l648:
				{
					position649, tokenIndex649 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l649
					}
					position++
					if !_rules[rule_]() {
						goto l649
					}
					goto l650
				l649:
					position, tokenIndex = position649, tokenIndex649
				}
			l650:
				{
					position651, tokenIndex651 := position, tokenIndex
					if buffer[position] != rune('&') {
						goto l652
					}
					position++
					goto l651
				l652:
					position, tokenIndex = position651, tokenIndex651
					if !_rules[ruleAuthorSepSpanish]() {
						goto l653
					}
					goto l651
				l653:
					position, tokenIndex = position651, tokenIndex651
					if buffer[position] != rune('e') {
						goto l654
					}
					position++
					if buffer[position] != rune('t') {
						goto l654
					}
					position++
					goto l651
				l654:
					position, tokenIndex = position651, tokenIndex651
					if buffer[position] != rune('a') {
						goto l655
					}
					position++
					if buffer[position] != rune('n') {
						goto l655
					}
					position++
					if buffer[position] != rune('d') {
						goto l655
					}
					position++
					goto l651
				l655:
					position, tokenIndex = position651, tokenIndex651
					if buffer[position] != rune('a') {
						goto l645
					}
					position++
					if buffer[position] != rune('p') {
						goto l645
					}
					position++
					if buffer[position] != rune('u') {
						goto l645
					}
					position++
					if buffer[position] != rune('d') {
						goto l645
					}
					position++
				}
			l651:
				{
					position656, tokenIndex656 := position, tokenIndex
					if !_rules[rule_]() {
						goto l656
					}
					goto l657
				l656:
					position, tokenIndex = position656, tokenIndex656
				}
			l657:
				add(ruleAuthorSep1, position646)
			}
			return true
		l645:
			position, tokenIndex = position645, tokenIndex645
			return false
		},
		/* 89 AuthorSep2 <- <(_? ',' _?)> */
		func() bool {
			position658, tokenIndex658 := position, tokenIndex
			{
				position659 := position
				{
					position660, tokenIndex660 := position, tokenIndex
					if !_rules[rule_]() {
						goto l660
					}
					goto l661
				l660:
					position, tokenIndex = position660, tokenIndex660
				}
			l661:
				if buffer[position] != rune(',') {
					goto l658
				}
				position++
				{
					position662, tokenIndex662 := position, tokenIndex
					if !_rules[rule_]() {
						goto l662
					}
					goto l663
				l662:
					position, tokenIndex = position662, tokenIndex662
				}
			l663:
				add(ruleAuthorSep2, position659)
			}
			return true
		l658:
			position, tokenIndex = position658, tokenIndex658
			return false
		},
		/* 90 AuthorSepSpanish <- <(_? 'y' _?)> */
		func() bool {
			position664, tokenIndex664 := position, tokenIndex
			{
				position665 := position
				{
					position666, tokenIndex666 := position, tokenIndex
					if !_rules[rule_]() {
						goto l666
					}
					goto l667
				l666:
					position, tokenIndex = position666, tokenIndex666
				}
			l667:
				if buffer[position] != rune('y') {
					goto l664
				}
				position++
				{
					position668, tokenIndex668 := position, tokenIndex
					if !_rules[rule_]() {
						goto l668
					}
					goto l669
				l668:
					position, tokenIndex = position668, tokenIndex668
				}
			l669:
				add(ruleAuthorSepSpanish, position665)
			}
			return true
		l664:
			position, tokenIndex = position664, tokenIndex664
			return false
		},
		/* 91 AuthorEx <- <((('e' 'x' '.'?) / ('m' 's' _ ('i' 'n')) / ('i' 'n')) _)> */
		func() bool {
			position670, tokenIndex670 := position, tokenIndex
			{
				position671 := position
				{
					position672, tokenIndex672 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l673
					}
					position++
					if buffer[position] != rune('x') {
						goto l673
					}
					position++
					{
						position674, tokenIndex674 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l674
						}
						position++
						goto l675
					l674:
						position, tokenIndex = position674, tokenIndex674
					}
				l675:
					goto l672
				l673:
					position, tokenIndex = position672, tokenIndex672
					if buffer[position] != rune('m') {
						goto l676
					}
					position++
					if buffer[position] != rune('s') {
						goto l676
					}
					position++
					if !_rules[rule_]() {
						goto l676
					}
					if buffer[position] != rune('i') {
						goto l676
					}
					position++
					if buffer[position] != rune('n') {
						goto l676
					}
					position++
					goto l672
				l676:
					position, tokenIndex = position672, tokenIndex672
					if buffer[position] != rune('i') {
						goto l670
					}
					position++
					if buffer[position] != rune('n') {
						goto l670
					}
					position++
				}
			l672:
				if !_rules[rule_]() {
					goto l670
				}
				add(ruleAuthorEx, position671)
			}
			return true
		l670:
			position, tokenIndex = position670, tokenIndex670
			return false
		},
		/* 92 AuthorEmend <- <('e' 'm' 'e' 'n' 'd' '.'? _)> */
		func() bool {
			position677, tokenIndex677 := position, tokenIndex
			{
				position678 := position
				if buffer[position] != rune('e') {
					goto l677
				}
				position++
				if buffer[position] != rune('m') {
					goto l677
				}
				position++
				if buffer[position] != rune('e') {
					goto l677
				}
				position++
				if buffer[position] != rune('n') {
					goto l677
				}
				position++
				if buffer[position] != rune('d') {
					goto l677
				}
				position++
				{
					position679, tokenIndex679 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l679
					}
					position++
					goto l680
				l679:
					position, tokenIndex = position679, tokenIndex679
				}
			l680:
				if !_rules[rule_]() {
					goto l677
				}
				add(ruleAuthorEmend, position678)
			}
			return true
		l677:
			position, tokenIndex = position677, tokenIndex677
			return false
		},
		/* 93 Author <- <((Author0 / Author1 / Author2 / UnknownAuthor) (_ AuthorEtAl)?)> */
		func() bool {
			position681, tokenIndex681 := position, tokenIndex
			{
				position682 := position
				{
					position683, tokenIndex683 := position, tokenIndex
					if !_rules[ruleAuthor0]() {
						goto l684
					}
					goto l683
				l684:
					position, tokenIndex = position683, tokenIndex683
					if !_rules[ruleAuthor1]() {
						goto l685
					}
					goto l683
				l685:
					position, tokenIndex = position683, tokenIndex683
					if !_rules[ruleAuthor2]() {
						goto l686
					}
					goto l683
				l686:
					position, tokenIndex = position683, tokenIndex683
					if !_rules[ruleUnknownAuthor]() {
						goto l681
					}
				}
			l683:
				{
					position687, tokenIndex687 := position, tokenIndex
					if !_rules[rule_]() {
						goto l687
					}
					if !_rules[ruleAuthorEtAl]() {
						goto l687
					}
					goto l688
				l687:
					position, tokenIndex = position687, tokenIndex687
				}
			l688:
				add(ruleAuthor, position682)
			}
			return true
		l681:
			position, tokenIndex = position681, tokenIndex681
			return false
		},
		/* 94 Author0 <- <(Author2 FiliusFNoSpace)> */
		func() bool {
			position689, tokenIndex689 := position, tokenIndex
			{
				position690 := position
				if !_rules[ruleAuthor2]() {
					goto l689
				}
				if !_rules[ruleFiliusFNoSpace]() {
					goto l689
				}
				add(ruleAuthor0, position690)
			}
			return true
		l689:
			position, tokenIndex = position689, tokenIndex689
			return false
		},
		/* 95 Author1 <- <(Author2 _? (Filius / AuthorSuffix))> */
		func() bool {
			position691, tokenIndex691 := position, tokenIndex
			{
				position692 := position
				if !_rules[ruleAuthor2]() {
					goto l691
				}
				{
					position693, tokenIndex693 := position, tokenIndex
					if !_rules[rule_]() {
						goto l693
					}
					goto l694
				l693:
					position, tokenIndex = position693, tokenIndex693
				}
			l694:
				{
					position695, tokenIndex695 := position, tokenIndex
					if !_rules[ruleFilius]() {
						goto l696
					}
					goto l695
				l696:
					position, tokenIndex = position695, tokenIndex695
					if !_rules[ruleAuthorSuffix]() {
						goto l691
					}
				}
			l695:
				add(ruleAuthor1, position692)
			}
			return true
		l691:
			position, tokenIndex = position691, tokenIndex691
			return false
		},
		/* 96 Author2 <- <(AuthorWord (_? AuthorWord)*)> */
		func() bool {
			position697, tokenIndex697 := position, tokenIndex
			{
				position698 := position
				if !_rules[ruleAuthorWord]() {
					goto l697
				}
			l699:
				{
					position700, tokenIndex700 := position, tokenIndex
					{
						position701, tokenIndex701 := position, tokenIndex
						if !_rules[rule_]() {
							goto l701
						}
						goto l702
					l701:
						position, tokenIndex = position701, tokenIndex701
					}
				l702:
					if !_rules[ruleAuthorWord]() {
						goto l700
					}
					goto l699
				l700:
					position, tokenIndex = position700, tokenIndex700
				}
				add(ruleAuthor2, position698)
			}
			return true
		l697:
			position, tokenIndex = position697, tokenIndex697
			return false
		},
		/* 97 UnknownAuthor <- <('?' / ((('a' 'u' 'c' 't') / ('a' 'n' 'o' 'n')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position703, tokenIndex703 := position, tokenIndex
			{
				position704 := position
				{
					position705, tokenIndex705 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l706
					}
					position++
					goto l705
				l706:
					position, tokenIndex = position705, tokenIndex705
					{
						position707, tokenIndex707 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l708
						}
						position++
						if buffer[position] != rune('u') {
							goto l708
						}
						position++
						if buffer[position] != rune('c') {
							goto l708
						}
						position++
						if buffer[position] != rune('t') {
							goto l708
						}
						position++
						goto l707
					l708:
						position, tokenIndex = position707, tokenIndex707
						if buffer[position] != rune('a') {
							goto l703
						}
						position++
						if buffer[position] != rune('n') {
							goto l703
						}
						position++
						if buffer[position] != rune('o') {
							goto l703
						}
						position++
						if buffer[position] != rune('n') {
							goto l703
						}
						position++
					}
				l707:
					{
						position709, tokenIndex709 := position, tokenIndex
						{
							position711, tokenIndex711 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l710
							}
							position, tokenIndex = position711, tokenIndex711
						}
						goto l709
					l710:
						position, tokenIndex = position709, tokenIndex709
						if buffer[position] != rune('.') {
							goto l703
						}
						position++
					}
				l709:
				}
			l705:
				add(ruleUnknownAuthor, position704)
			}
			return true
		l703:
			position, tokenIndex = position703, tokenIndex703
			return false
		},
		/* 98 AuthorWord <- <(!(HybridChar / (('b' / 'B') ('o' / 'O') ('l' / 'L') ('d' / 'D') ':')) (AuthorDashInitials / AuthorWord1 / AuthorWord2 / AuthorWord3 / AuthorWord4 / AuthorPrefix))> */
		func() bool {
			position712, tokenIndex712 := position, tokenIndex
			{
				position713 := position
				{
					position714, tokenIndex714 := position, tokenIndex
					{
						position715, tokenIndex715 := position, tokenIndex
						if !_rules[ruleHybridChar]() {
							goto l716
						}
						goto l715
					l716:
						position, tokenIndex = position715, tokenIndex715
						{
							position717, tokenIndex717 := position, tokenIndex
							if buffer[position] != rune('b') {
								goto l718
							}
							position++
							goto l717
						l718:
							position, tokenIndex = position717, tokenIndex717
							if buffer[position] != rune('B') {
								goto l714
							}
							position++
						}
					l717:
						{
							position719, tokenIndex719 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l720
							}
							position++
							goto l719
						l720:
							position, tokenIndex = position719, tokenIndex719
							if buffer[position] != rune('O') {
								goto l714
							}
							position++
						}
					l719:
						{
							position721, tokenIndex721 := position, tokenIndex
							if buffer[position] != rune('l') {
								goto l722
							}
							position++
							goto l721
						l722:
							position, tokenIndex = position721, tokenIndex721
							if buffer[position] != rune('L') {
								goto l714
							}
							position++
						}
					l721:
						{
							position723, tokenIndex723 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l724
							}
							position++
							goto l723
						l724:
							position, tokenIndex = position723, tokenIndex723
							if buffer[position] != rune('D') {
								goto l714
							}
							position++
						}
					l723:
						if buffer[position] != rune(':') {
							goto l714
						}
						position++
					}
				l715:
					goto l712
				l714:
					position, tokenIndex = position714, tokenIndex714
				}
				{
					position725, tokenIndex725 := position, tokenIndex
					if !_rules[ruleAuthorDashInitials]() {
						goto l726
					}
					goto l725
				l726:
					position, tokenIndex = position725, tokenIndex725
					if !_rules[ruleAuthorWord1]() {
						goto l727
					}
					goto l725
				l727:
					position, tokenIndex = position725, tokenIndex725
					if !_rules[ruleAuthorWord2]() {
						goto l728
					}
					goto l725
				l728:
					position, tokenIndex = position725, tokenIndex725
					if !_rules[ruleAuthorWord3]() {
						goto l729
					}
					goto l725
				l729:
					position, tokenIndex = position725, tokenIndex725
					if !_rules[ruleAuthorWord4]() {
						goto l730
					}
					goto l725
				l730:
					position, tokenIndex = position725, tokenIndex725
					if !_rules[ruleAuthorPrefix]() {
						goto l712
					}
				}
			l725:
				add(ruleAuthorWord, position713)
			}
			return true
		l712:
			position, tokenIndex = position712, tokenIndex712
			return false
		},
		/* 99 AuthorEtAl <- <(('a' 'r' 'g' '.') / ('e' 't' ' ' 'a' 'l' '.' '{' '?' '}') / ((('e' 't') / '&') (' ' 'a' 'l') '.'?))> */
		func() bool {
			position731, tokenIndex731 := position, tokenIndex
			{
				position732 := position
				{
					position733, tokenIndex733 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l734
					}
					position++
					if buffer[position] != rune('r') {
						goto l734
					}
					position++
					if buffer[position] != rune('g') {
						goto l734
					}
					position++
					if buffer[position] != rune('.') {
						goto l734
					}
					position++
					goto l733
				l734:
					position, tokenIndex = position733, tokenIndex733
					if buffer[position] != rune('e') {
						goto l735
					}
					position++
					if buffer[position] != rune('t') {
						goto l735
					}
					position++
					if buffer[position] != rune(' ') {
						goto l735
					}
					position++
					if buffer[position] != rune('a') {
						goto l735
					}
					position++
					if buffer[position] != rune('l') {
						goto l735
					}
					position++
					if buffer[position] != rune('.') {
						goto l735
					}
					position++
					if buffer[position] != rune('{') {
						goto l735
					}
					position++
					if buffer[position] != rune('?') {
						goto l735
					}
					position++
					if buffer[position] != rune('}') {
						goto l735
					}
					position++
					goto l733
				l735:
					position, tokenIndex = position733, tokenIndex733
					{
						position736, tokenIndex736 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l737
						}
						position++
						if buffer[position] != rune('t') {
							goto l737
						}
						position++
						goto l736
					l737:
						position, tokenIndex = position736, tokenIndex736
						if buffer[position] != rune('&') {
							goto l731
						}
						position++
					}
				l736:
					if buffer[position] != rune(' ') {
						goto l731
					}
					position++
					if buffer[position] != rune('a') {
						goto l731
					}
					position++
					if buffer[position] != rune('l') {
						goto l731
					}
					position++
					{
						position738, tokenIndex738 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l738
						}
						position++
						goto l739
					l738:
						position, tokenIndex = position738, tokenIndex738
					}
				l739:
				}
			l733:
				add(ruleAuthorEtAl, position732)
			}
			return true
		l731:
			position, tokenIndex = position731, tokenIndex731
			return false
		},
		/* 100 AuthorWord1 <- <(('d' 'u' 'P' 'o' 'n' 't') / ('d' 'e' 'g' 'l' 'i'))> */
		func() bool {
			position740, tokenIndex740 := position, tokenIndex
			{
				position741 := position
				{
					position742, tokenIndex742 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l743
					}
					position++
					if buffer[position] != rune('u') {
						goto l743
					}
					position++
					if buffer[position] != rune('P') {
						goto l743
					}
					position++
					if buffer[position] != rune('o') {
						goto l743
					}
					position++
					if buffer[position] != rune('n') {
						goto l743
					}
					position++
					if buffer[position] != rune('t') {
						goto l743
					}
					position++
					goto l742
				l743:
					position, tokenIndex = position742, tokenIndex742
					if buffer[position] != rune('d') {
						goto l740
					}
					position++
					if buffer[position] != rune('e') {
						goto l740
					}
					position++
					if buffer[position] != rune('g') {
						goto l740
					}
					position++
					if buffer[position] != rune('l') {
						goto l740
					}
					position++
					if buffer[position] != rune('i') {
						goto l740
					}
					position++
				}
			l742:
				add(ruleAuthorWord1, position741)
			}
			return true
		l740:
			position, tokenIndex = position740, tokenIndex740
			return false
		},
		/* 101 AuthorWord2 <- <((AuthorWord3 / AuthorWord4) Dash (AuthorWordSoft / AuthorInitial))> */
		func() bool {
			position744, tokenIndex744 := position, tokenIndex
			{
				position745 := position
				{
					position746, tokenIndex746 := position, tokenIndex
					if !_rules[ruleAuthorWord3]() {
						goto l747
					}
					goto l746
				l747:
					position, tokenIndex = position746, tokenIndex746
					if !_rules[ruleAuthorWord4]() {
						goto l744
					}
				}
			l746:
				if !_rules[ruleDash]() {
					goto l744
				}
				{
					position748, tokenIndex748 := position, tokenIndex
					if !_rules[ruleAuthorWordSoft]() {
						goto l749
					}
					goto l748
				l749:
					position, tokenIndex = position748, tokenIndex748
					if !_rules[ruleAuthorInitial]() {
						goto l744
					}
				}
			l748:
				add(ruleAuthorWord2, position745)
			}
			return true
		l744:
			position, tokenIndex = position744, tokenIndex744
			return false
		},
		/* 102 AuthorWord3 <- <(AuthorPrefixGlued2 (CapAuthorWord / AuthorLowerChar+) '.'?)> */
		func() bool {
			position750, tokenIndex750 := position, tokenIndex
			{
				position751 := position
				if !_rules[ruleAuthorPrefixGlued2]() {
					goto l750
				}
				{
					position752, tokenIndex752 := position, tokenIndex
					if !_rules[ruleCapAuthorWord]() {
						goto l753
					}
					goto l752
				l753:
					position, tokenIndex = position752, tokenIndex752
					if !_rules[ruleAuthorLowerChar]() {
						goto l750
					}
				l754:
					{
						position755, tokenIndex755 := position, tokenIndex
						if !_rules[ruleAuthorLowerChar]() {
							goto l755
						}
						goto l754
					l755:
						position, tokenIndex = position755, tokenIndex755
					}
				}
			l752:
				{
					position756, tokenIndex756 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l756
					}
					position++
					goto l757
				l756:
					position, tokenIndex = position756, tokenIndex756
				}
			l757:
				add(ruleAuthorWord3, position751)
			}
			return true
		l750:
			position, tokenIndex = position750, tokenIndex750
			return false
		},
		/* 103 AuthorWord4 <- <(AuthorPrefixGlued1? (AllCapsAuthorWord / CapAuthorWord) '.'?)> */
		func() bool {
			position758, tokenIndex758 := position, tokenIndex
			{
				position759 := position
				{
					position760, tokenIndex760 := position, tokenIndex
					if !_rules[ruleAuthorPrefixGlued1]() {
						goto l760
					}
					goto l761
				l760:
					position, tokenIndex = position760, tokenIndex760
				}
			l761:
				{
					position762, tokenIndex762 := position, tokenIndex
					if !_rules[ruleAllCapsAuthorWord]() {
						goto l763
					}
					goto l762
				l763:
					position, tokenIndex = position762, tokenIndex762
					if !_rules[ruleCapAuthorWord]() {
						goto l758
					}
				}
			l762:
				{
					position764, tokenIndex764 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l764
					}
					position++
					goto l765
				l764:
					position, tokenIndex = position764, tokenIndex764
				}
			l765:
				add(ruleAuthorWord4, position759)
			}
			return true
		l758:
			position, tokenIndex = position758, tokenIndex758
			return false
		},
		/* 104 AuthorDashInitials <- <(AuthorUpperChar '.'? Dash AuthorUpperChar '.'?)> */
		func() bool {
			position766, tokenIndex766 := position, tokenIndex
			{
				position767 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l766
				}
				{
					position768, tokenIndex768 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l768
					}
					position++
					goto l769
				l768:
					position, tokenIndex = position768, tokenIndex768
				}
			l769:
				if !_rules[ruleDash]() {
					goto l766
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l766
				}
				{
					position770, tokenIndex770 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l770
					}
					position++
					goto l771
				l770:
					position, tokenIndex = position770, tokenIndex770
				}
			l771:
				add(ruleAuthorDashInitials, position767)
			}
			return true
		l766:
			position, tokenIndex = position766, tokenIndex766
			return false
		},
		/* 105 AuthorInitial <- <(AuthorUpperChar '.'?)> */
		func() bool {
			position772, tokenIndex772 := position, tokenIndex
			{
				position773 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l772
				}
				{
					position774, tokenIndex774 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l774
					}
					position++
					goto l775
				l774:
					position, tokenIndex = position774, tokenIndex774
				}
			l775:
				add(ruleAuthorInitial, position773)
			}
			return true
		l772:
			position, tokenIndex = position772, tokenIndex772
			return false
		},
		/* 106 AuthorWordSoft <- <(((AuthorUpperChar (AuthorUpperChar+ / AuthorLowerChar+)) / AuthorLowerChar+) '.'?)> */
		func() bool {
			position776, tokenIndex776 := position, tokenIndex
			{
				position777 := position
				{
					position778, tokenIndex778 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l779
					}
					{
						position780, tokenIndex780 := position, tokenIndex
						if !_rules[ruleAuthorUpperChar]() {
							goto l781
						}
					l782:
						{
							position783, tokenIndex783 := position, tokenIndex
							if !_rules[ruleAuthorUpperChar]() {
								goto l783
							}
							goto l782
						l783:
							position, tokenIndex = position783, tokenIndex783
						}
						goto l780
					l781:
						position, tokenIndex = position780, tokenIndex780
						if !_rules[ruleAuthorLowerChar]() {
							goto l779
						}
					l784:
						{
							position785, tokenIndex785 := position, tokenIndex
							if !_rules[ruleAuthorLowerChar]() {
								goto l785
							}
							goto l784
						l785:
							position, tokenIndex = position785, tokenIndex785
						}
					}
				l780:
					goto l778
				l779:
					position, tokenIndex = position778, tokenIndex778
					if !_rules[ruleAuthorLowerChar]() {
						goto l776
					}
				l786:
					{
						position787, tokenIndex787 := position, tokenIndex
						if !_rules[ruleAuthorLowerChar]() {
							goto l787
						}
						goto l786
					l787:
						position, tokenIndex = position787, tokenIndex787
					}
				}
			l778:
				{
					position788, tokenIndex788 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l788
					}
					position++
					goto l789
				l788:
					position, tokenIndex = position788, tokenIndex788
				}
			l789:
				add(ruleAuthorWordSoft, position777)
			}
			return true
		l776:
			position, tokenIndex = position776, tokenIndex776
			return false
		},
		/* 107 CapAuthorWord <- <(AuthorUpperChar AuthorLowerChar*)> */
		func() bool {
			position790, tokenIndex790 := position, tokenIndex
			{
				position791 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l790
				}
			l792:
				{
					position793, tokenIndex793 := position, tokenIndex
					if !_rules[ruleAuthorLowerChar]() {
						goto l793
					}
					goto l792
				l793:
					position, tokenIndex = position793, tokenIndex793
				}
				add(ruleCapAuthorWord, position791)
			}
			return true
		l790:
			position, tokenIndex = position790, tokenIndex790
			return false
		},
		/* 108 AllCapsAuthorWord <- <(AuthorUpperChar AuthorUpperChar+)> */
		func() bool {
			position794, tokenIndex794 := position, tokenIndex
			{
				position795 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l794
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l794
				}
			l796:
				{
					position797, tokenIndex797 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l797
					}
					goto l796
				l797:
					position, tokenIndex = position797, tokenIndex797
				}
				add(ruleAllCapsAuthorWord, position795)
			}
			return true
		l794:
			position, tokenIndex = position794, tokenIndex794
			return false
		},
		/* 109 Filius <- <(FiliusF / ('f' 'i' 'l' '.') / ('f' 'i' 'l' 'i' 'u' 's'))> */
		func() bool {
			position798, tokenIndex798 := position, tokenIndex
			{
				position799 := position
				{
					position800, tokenIndex800 := position, tokenIndex
					if !_rules[ruleFiliusF]() {
						goto l801
					}
					goto l800
				l801:
					position, tokenIndex = position800, tokenIndex800
					if buffer[position] != rune('f') {
						goto l802
					}
					position++
					if buffer[position] != rune('i') {
						goto l802
					}
					position++
					if buffer[position] != rune('l') {
						goto l802
					}
					position++
					if buffer[position] != rune('.') {
						goto l802
					}
					position++
					goto l800
				l802:
					position, tokenIndex = position800, tokenIndex800
					if buffer[position] != rune('f') {
						goto l798
					}
					position++
					if buffer[position] != rune('i') {
						goto l798
					}
					position++
					if buffer[position] != rune('l') {
						goto l798
					}
					position++
					if buffer[position] != rune('i') {
						goto l798
					}
					position++
					if buffer[position] != rune('u') {
						goto l798
					}
					position++
					if buffer[position] != rune('s') {
						goto l798
					}
					position++
				}
			l800:
				add(ruleFilius, position799)
			}
			return true
		l798:
			position, tokenIndex = position798, tokenIndex798
			return false
		},
		/* 110 FiliusF <- <('f' '.' !(_ Word))> */
		func() bool {
			position803, tokenIndex803 := position, tokenIndex
			{
				position804 := position
				if buffer[position] != rune('f') {
					goto l803
				}
				position++
				if buffer[position] != rune('.') {
					goto l803
				}
				position++
				{
					position805, tokenIndex805 := position, tokenIndex
					if !_rules[rule_]() {
						goto l805
					}
					if !_rules[ruleWord]() {
						goto l805
					}
					goto l803
				l805:
					position, tokenIndex = position805, tokenIndex805
				}
				add(ruleFiliusF, position804)
			}
			return true
		l803:
			position, tokenIndex = position803, tokenIndex803
			return false
		},
		/* 111 FiliusFNoSpace <- <('f' '.')> */
		func() bool {
			position806, tokenIndex806 := position, tokenIndex
			{
				position807 := position
				if buffer[position] != rune('f') {
					goto l806
				}
				position++
				if buffer[position] != rune('.') {
					goto l806
				}
				position++
				add(ruleFiliusFNoSpace, position807)
			}
			return true
		l806:
			position, tokenIndex = position806, tokenIndex806
			return false
		},
		/* 112 AuthorSuffix <- <(('b' 'i' 's') / ('t' 'e' 'r'))> */
		func() bool {
			position808, tokenIndex808 := position, tokenIndex
			{
				position809 := position
				{
					position810, tokenIndex810 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l811
					}
					position++
					if buffer[position] != rune('i') {
						goto l811
					}
					position++
					if buffer[position] != rune('s') {
						goto l811
					}
					position++
					goto l810
				l811:
					position, tokenIndex = position810, tokenIndex810
					if buffer[position] != rune('t') {
						goto l808
					}
					position++
					if buffer[position] != rune('e') {
						goto l808
					}
					position++
					if buffer[position] != rune('r') {
						goto l808
					}
					position++
				}
			l810:
				add(ruleAuthorSuffix, position809)
			}
			return true
		l808:
			position, tokenIndex = position808, tokenIndex808
			return false
		},
		/* 113 AuthorPrefixGlued1 <- <(('d' / 'O' / 'L' / 'M') Apostrophe)> */
		func() bool {
			position812, tokenIndex812 := position, tokenIndex
			{
				position813 := position
				{
					position814, tokenIndex814 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l815
					}
					position++
					goto l814
				l815:
					position, tokenIndex = position814, tokenIndex814
					if buffer[position] != rune('O') {
						goto l816
					}
					position++
					goto l814
				l816:
					position, tokenIndex = position814, tokenIndex814
					if buffer[position] != rune('L') {
						goto l817
					}
					position++
					goto l814
				l817:
					position, tokenIndex = position814, tokenIndex814
					if buffer[position] != rune('M') {
						goto l812
					}
					position++
				}
			l814:
				if !_rules[ruleApostrophe]() {
					goto l812
				}
				add(ruleAuthorPrefixGlued1, position813)
			}
			return true
		l812:
			position, tokenIndex = position812, tokenIndex812
			return false
		},
		/* 114 AuthorPrefixGlued2 <- <((('M' 'c') / ('M' 'a' 'c')) Apostrophe?)> */
		func() bool {
			position818, tokenIndex818 := position, tokenIndex
			{
				position819 := position
				{
					position820, tokenIndex820 := position, tokenIndex
					if buffer[position] != rune('M') {
						goto l821
					}
					position++
					if buffer[position] != rune('c') {
						goto l821
					}
					position++
					goto l820
				l821:
					position, tokenIndex = position820, tokenIndex820
					if buffer[position] != rune('M') {
						goto l818
					}
					position++
					if buffer[position] != rune('a') {
						goto l818
					}
					position++
					if buffer[position] != rune('c') {
						goto l818
					}
					position++
				}
			l820:
				{
					position822, tokenIndex822 := position, tokenIndex
					if !_rules[ruleApostrophe]() {
						goto l822
					}
					goto l823
				l822:
					position, tokenIndex = position822, tokenIndex822
				}
			l823:
				add(ruleAuthorPrefixGlued2, position819)
			}
			return true
		l818:
			position, tokenIndex = position818, tokenIndex818
			return false
		},
		/* 115 AuthorPrefix <- <(AuthorPrefix1 / AuthorPrefix2)> */
		func() bool {
			position824, tokenIndex824 := position, tokenIndex
			{
				position825 := position
				{
					position826, tokenIndex826 := position, tokenIndex
					if !_rules[ruleAuthorPrefix1]() {
						goto l827
					}
					goto l826
				l827:
					position, tokenIndex = position826, tokenIndex826
					if !_rules[ruleAuthorPrefix2]() {
						goto l824
					}
				}
			l826:
				add(ruleAuthorPrefix, position825)
			}
			return true
		l824:
			position, tokenIndex = position824, tokenIndex824
			return false
		},
		/* 116 AuthorPrefix2 <- <(('v' '.' (_? ('d' '.'))?) / (Apostrophe 't'))> */
		func() bool {
			position828, tokenIndex828 := position, tokenIndex
			{
				position829 := position
				{
					position830, tokenIndex830 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l831
					}
					position++
					if buffer[position] != rune('.') {
						goto l831
					}
					position++
					{
						position832, tokenIndex832 := position, tokenIndex
						{
							position834, tokenIndex834 := position, tokenIndex
							if !_rules[rule_]() {
								goto l834
							}
							goto l835
						l834:
							position, tokenIndex = position834, tokenIndex834
						}
					l835:
						if buffer[position] != rune('d') {
							goto l832
						}
						position++
						if buffer[position] != rune('.') {
							goto l832
						}
						position++
						goto l833
					l832:
						position, tokenIndex = position832, tokenIndex832
					}
				l833:
					goto l830
				l831:
					position, tokenIndex = position830, tokenIndex830
					if !_rules[ruleApostrophe]() {
						goto l828
					}
					if buffer[position] != rune('t') {
						goto l828
					}
					position++
				}
			l830:
				add(ruleAuthorPrefix2, position829)
			}
			return true
		l828:
			position, tokenIndex = position828, tokenIndex828
			return false
		},
		/* 117 AuthorPrefix1 <- <((('a' 'b') / ('a' 'f') / ('b' 'i' 's') / ('d' 'a') / ('d' 'e' 'r') / ('d' 'e' 's') / ('d' 'e' 'n') / ('d' 'e' 'l' 'l' 'a') / ('d' 'e' 'l' 'a') / ('d' 'e' 'l' 'l' 'e') / ('d' 'e' 'l') / ('d' 'e' ' ' 'l' 'o' 's') / ('d' 'e') / ('d' 'i') / ('d' 'o' 's') / ('d' 'u') / ('d' 'o') / ('e' 'l') / ('l' 'a') / ('l' 'e') / ('t' 'e' 'n') / ('t' 'e' 'r') / ('v' 'a' 'n') / ('v' 'e' 'r') / ('d' Apostrophe) / ('i' 'n' Apostrophe 't') / ('z' 'u' 'r') / ('z' 'u') / ('v' 'o' 'n' (_ (('d' '.') / ('d' 'e' 'm')))?) / ('v' (_ 'd')?)) &_)> */
		func() bool {
			position836, tokenIndex836 := position, tokenIndex
			{
				position837 := position
				{
					position838, tokenIndex838 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l839
					}
					position++
					if buffer[position] != rune('b') {
						goto l839
					}
					position++
					goto l838
				l839:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('a') {
						goto l840
					}
					position++
					if buffer[position] != rune('f') {
						goto l840
					}
					position++
					goto l838
				l840:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('b') {
						goto l841
					}
					position++
					if buffer[position] != rune('i') {
						goto l841
					}
					position++
					if buffer[position] != rune('s') {
						goto l841
					}
					position++
					goto l838
				l841:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('d') {
						goto l842
					}
					position++
					if buffer[position] != rune('a') {
						goto l842
					}
					position++
					goto l838
				l842:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('d') {
						goto l843
					}
					position++
					if buffer[position] != rune('e') {
						goto l843
					}
					position++
					if buffer[position] != rune('r') {
						goto l843
					}
					position++
					goto l838
				l843:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('d') {
						goto l844
					}
					position++
					if buffer[position] != rune('e') {
						goto l844
					}
					position++
					if buffer[position] != rune('s') {
						goto l844
					}
					position++
					goto l838
				l844:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('d') {
						goto l845
					}
					position++
					if buffer[position] != rune('e') {
						goto l845
					}
					position++
					if buffer[position] != rune('n') {
						goto l845
					}
					position++
					goto l838
				l845:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('d') {
						goto l846
					}
					position++
					if buffer[position] != rune('e') {
						goto l846
					}
					position++
					if buffer[position] != rune('l') {
						goto l846
					}
					position++
					if buffer[position] != rune('l') {
						goto l846
					}
					position++
					if buffer[position] != rune('a') {
						goto l846
					}
					position++
					goto l838
				l846:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('d') {
						goto l847
					}
					position++
					if buffer[position] != rune('e') {
						goto l847
					}
					position++
					if buffer[position] != rune('l') {
						goto l847
					}
					position++
					if buffer[position] != rune('a') {
						goto l847
					}
					position++
					goto l838
				l847:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('d') {
						goto l848
					}
					position++
					if buffer[position] != rune('e') {
						goto l848
					}
					position++
					if buffer[position] != rune('l') {
						goto l848
					}
					position++
					if buffer[position] != rune('l') {
						goto l848
					}
					position++
					if buffer[position] != rune('e') {
						goto l848
					}
					position++
					goto l838
				l848:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('d') {
						goto l849
					}
					position++
					if buffer[position] != rune('e') {
						goto l849
					}
					position++
					if buffer[position] != rune('l') {
						goto l849
					}
					position++
					goto l838
				l849:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('d') {
						goto l850
					}
					position++
					if buffer[position] != rune('e') {
						goto l850
					}
					position++
					if buffer[position] != rune(' ') {
						goto l850
					}
					position++
					if buffer[position] != rune('l') {
						goto l850
					}
					position++
					if buffer[position] != rune('o') {
						goto l850
					}
					position++
					if buffer[position] != rune('s') {
						goto l850
					}
					position++
					goto l838
				l850:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('d') {
						goto l851
					}
					position++
					if buffer[position] != rune('e') {
						goto l851
					}
					position++
					goto l838
				l851:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('d') {
						goto l852
					}
					position++
					if buffer[position] != rune('i') {
						goto l852
					}
					position++
					goto l838
				l852:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('d') {
						goto l853
					}
					position++
					if buffer[position] != rune('o') {
						goto l853
					}
					position++
					if buffer[position] != rune('s') {
						goto l853
					}
					position++
					goto l838
				l853:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('d') {
						goto l854
					}
					position++
					if buffer[position] != rune('u') {
						goto l854
					}
					position++
					goto l838
				l854:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('d') {
						goto l855
					}
					position++
					if buffer[position] != rune('o') {
						goto l855
					}
					position++
					goto l838
				l855:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('e') {
						goto l856
					}
					position++
					if buffer[position] != rune('l') {
						goto l856
					}
					position++
					goto l838
				l856:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('l') {
						goto l857
					}
					position++
					if buffer[position] != rune('a') {
						goto l857
					}
					position++
					goto l838
				l857:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('l') {
						goto l858
					}
					position++
					if buffer[position] != rune('e') {
						goto l858
					}
					position++
					goto l838
				l858:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('t') {
						goto l859
					}
					position++
					if buffer[position] != rune('e') {
						goto l859
					}
					position++
					if buffer[position] != rune('n') {
						goto l859
					}
					position++
					goto l838
				l859:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('t') {
						goto l860
					}
					position++
					if buffer[position] != rune('e') {
						goto l860
					}
					position++
					if buffer[position] != rune('r') {
						goto l860
					}
					position++
					goto l838
				l860:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('v') {
						goto l861
					}
					position++
					if buffer[position] != rune('a') {
						goto l861
					}
					position++
					if buffer[position] != rune('n') {
						goto l861
					}
					position++
					goto l838
				l861:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('v') {
						goto l862
					}
					position++
					if buffer[position] != rune('e') {
						goto l862
					}
					position++
					if buffer[position] != rune('r') {
						goto l862
					}
					position++
					goto l838
				l862:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('d') {
						goto l863
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l863
					}
					goto l838
				l863:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('i') {
						goto l864
					}
					position++
					if buffer[position] != rune('n') {
						goto l864
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l864
					}
					if buffer[position] != rune('t') {
						goto l864
					}
					position++
					goto l838
				l864:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('z') {
						goto l865
					}
					position++
					if buffer[position] != rune('u') {
						goto l865
					}
					position++
					if buffer[position] != rune('r') {
						goto l865
					}
					position++
					goto l838
				l865:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('z') {
						goto l866
					}
					position++
					if buffer[position] != rune('u') {
						goto l866
					}
					position++
					goto l838
				l866:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('v') {
						goto l867
					}
					position++
					if buffer[position] != rune('o') {
						goto l867
					}
					position++
					if buffer[position] != rune('n') {
						goto l867
					}
					position++
					{
						position868, tokenIndex868 := position, tokenIndex
						if !_rules[rule_]() {
							goto l868
						}
						{
							position870, tokenIndex870 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l871
							}
							position++
							if buffer[position] != rune('.') {
								goto l871
							}
							position++
							goto l870
						l871:
							position, tokenIndex = position870, tokenIndex870
							if buffer[position] != rune('d') {
								goto l868
							}
							position++
							if buffer[position] != rune('e') {
								goto l868
							}
							position++
							if buffer[position] != rune('m') {
								goto l868
							}
							position++
						}
					l870:
						goto l869
					l868:
						position, tokenIndex = position868, tokenIndex868
					}
				l869:
					goto l838
				l867:
					position, tokenIndex = position838, tokenIndex838
					if buffer[position] != rune('v') {
						goto l836
					}
					position++
					{
						position872, tokenIndex872 := position, tokenIndex
						if !_rules[rule_]() {
							goto l872
						}
						if buffer[position] != rune('d') {
							goto l872
						}
						position++
						goto l873
					l872:
						position, tokenIndex = position872, tokenIndex872
					}
				l873:
				}
			l838:
				{
					position874, tokenIndex874 := position, tokenIndex
					if !_rules[rule_]() {
						goto l836
					}
					position, tokenIndex = position874, tokenIndex874
				}
				add(ruleAuthorPrefix1, position837)
			}
			return true
		l836:
			position, tokenIndex = position836, tokenIndex836
			return false
		},
		/* 118 AuthorUpperChar <- <(UpperASCII / MiscodedChar / ('À' / 'Á' / 'Â' / 'Ã' / 'Ä' / 'Å' / 'Æ' / 'Ç' / 'È' / 'É' / 'Ê' / 'Ë' / 'Ì' / 'Í' / 'Î' / 'Ï' / 'Ð' / 'Ñ' / 'Ò' / 'Ó' / 'Ô' / 'Õ' / 'Ö' / 'Ø' / 'Ù' / 'Ú' / 'Û' / 'Ü' / 'Ý' / 'Ć' / 'Č' / 'Ď' / 'İ' / 'Ķ' / 'Ĺ' / 'ĺ' / 'Ľ' / 'ľ' / 'Ł' / 'ł' / 'Ņ' / 'Ō' / 'Ő' / 'Œ' / 'Ř' / 'Ś' / 'Ŝ' / 'Ş' / 'Š' / 'Ÿ' / 'Ź' / 'Ż' / 'Ž' / 'ƒ' / 'Ǿ' / 'Ș' / 'Ț'))> */
		func() bool {
			position875, tokenIndex875 := position, tokenIndex
			{
				position876 := position
				{
					position877, tokenIndex877 := position, tokenIndex
					if !_rules[ruleUpperASCII]() {
						goto l878
					}
					goto l877
				l878:
					position, tokenIndex = position877, tokenIndex877
					if !_rules[ruleMiscodedChar]() {
						goto l879
					}
					goto l877
				l879:
					position, tokenIndex = position877, tokenIndex877
					{
						position880, tokenIndex880 := position, tokenIndex
						if buffer[position] != rune('À') {
							goto l881
						}
						position++
						goto l880
					l881:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Á') {
							goto l882
						}
						position++
						goto l880
					l882:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Â') {
							goto l883
						}
						position++
						goto l880
					l883:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ã') {
							goto l884
						}
						position++
						goto l880
					l884:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ä') {
							goto l885
						}
						position++
						goto l880
					l885:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Å') {
							goto l886
						}
						position++
						goto l880
					l886:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Æ') {
							goto l887
						}
						position++
						goto l880
					l887:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ç') {
							goto l888
						}
						position++
						goto l880
					l888:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('È') {
							goto l889
						}
						position++
						goto l880
					l889:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('É') {
							goto l890
						}
						position++
						goto l880
					l890:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ê') {
							goto l891
						}
						position++
						goto l880
					l891:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ë') {
							goto l892
						}
						position++
						goto l880
					l892:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ì') {
							goto l893
						}
						position++
						goto l880
					l893:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Í') {
							goto l894
						}
						position++
						goto l880
					l894:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Î') {
							goto l895
						}
						position++
						goto l880
					l895:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ï') {
							goto l896
						}
						position++
						goto l880
					l896:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ð') {
							goto l897
						}
						position++
						goto l880
					l897:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ñ') {
							goto l898
						}
						position++
						goto l880
					l898:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ò') {
							goto l899
						}
						position++
						goto l880
					l899:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ó') {
							goto l900
						}
						position++
						goto l880
					l900:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ô') {
							goto l901
						}
						position++
						goto l880
					l901:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Õ') {
							goto l902
						}
						position++
						goto l880
					l902:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ö') {
							goto l903
						}
						position++
						goto l880
					l903:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ø') {
							goto l904
						}
						position++
						goto l880
					l904:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ù') {
							goto l905
						}
						position++
						goto l880
					l905:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ú') {
							goto l906
						}
						position++
						goto l880
					l906:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Û') {
							goto l907
						}
						position++
						goto l880
					l907:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ü') {
							goto l908
						}
						position++
						goto l880
					l908:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ý') {
							goto l909
						}
						position++
						goto l880
					l909:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ć') {
							goto l910
						}
						position++
						goto l880
					l910:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Č') {
							goto l911
						}
						position++
						goto l880
					l911:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ď') {
							goto l912
						}
						position++
						goto l880
					l912:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('İ') {
							goto l913
						}
						position++
						goto l880
					l913:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ķ') {
							goto l914
						}
						position++
						goto l880
					l914:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ĺ') {
							goto l915
						}
						position++
						goto l880
					l915:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('ĺ') {
							goto l916
						}
						position++
						goto l880
					l916:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ľ') {
							goto l917
						}
						position++
						goto l880
					l917:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('ľ') {
							goto l918
						}
						position++
						goto l880
					l918:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ł') {
							goto l919
						}
						position++
						goto l880
					l919:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('ł') {
							goto l920
						}
						position++
						goto l880
					l920:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ņ') {
							goto l921
						}
						position++
						goto l880
					l921:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ō') {
							goto l922
						}
						position++
						goto l880
					l922:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ő') {
							goto l923
						}
						position++
						goto l880
					l923:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Œ') {
							goto l924
						}
						position++
						goto l880
					l924:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ř') {
							goto l925
						}
						position++
						goto l880
					l925:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ś') {
							goto l926
						}
						position++
						goto l880
					l926:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ŝ') {
							goto l927
						}
						position++
						goto l880
					l927:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ş') {
							goto l928
						}
						position++
						goto l880
					l928:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Š') {
							goto l929
						}
						position++
						goto l880
					l929:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ÿ') {
							goto l930
						}
						position++
						goto l880
					l930:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ź') {
							goto l931
						}
						position++
						goto l880
					l931:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ż') {
							goto l932
						}
						position++
						goto l880
					l932:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ž') {
							goto l933
						}
						position++
						goto l880
					l933:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('ƒ') {
							goto l934
						}
						position++
						goto l880
					l934:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ǿ') {
							goto l935
						}
						position++
						goto l880
					l935:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ș') {
							goto l936
						}
						position++
						goto l880
					l936:
						position, tokenIndex = position880, tokenIndex880
						if buffer[position] != rune('Ț') {
							goto l875
						}
						position++
					}
				l880:
				}
			l877:
				add(ruleAuthorUpperChar, position876)
			}
			return true
		l875:
			position, tokenIndex = position875, tokenIndex875
			return false
		},
		/* 119 AuthorLowerChar <- <(LowerASCII / MiscodedChar / Apostrophe / ('à' / 'á' / 'â' / 'ã' / 'ä' / 'å' / 'æ' / 'ç' / 'è' / 'é' / 'ê' / 'ë' / 'ì' / 'í' / 'î' / 'ï' / 'ð' / 'ñ' / 'ò' / 'ó' / 'ó' / 'ô' / 'õ' / 'ö' / 'ø' / 'ù' / 'ú' / 'û' / 'ü' / 'ý' / 'ÿ' / 'ā' / 'ă' / 'ą' / 'ć' / 'ĉ' / 'č' / 'ď' / 'đ' / 'ē' / 'ĕ' / 'ė' / 'ę' / 'ě' / 'ğ' / 'ī' / 'ĭ' / 'İ' / 'ı' / 'ĺ' / 'ľ' / 'ł' / 'ń' / 'ņ' / 'ň' / 'ŏ' / 'ő' / 'œ' / 'ŕ' / 'ř' / 'ś' / 'ş' / 'š' / 'ţ' / 'ť' / 'ũ' / 'ū' / 'ŭ' / 'ů' / 'ű' / 'ź' / 'ż' / 'ž' / 'ſ' / 'ǎ' / 'ǔ' / 'ǧ' / 'ș' / 'ț' / 'ȳ' / 'ß'))> */
		func() bool {
			position937, tokenIndex937 := position, tokenIndex
			{
				position938 := position
				{
					position939, tokenIndex939 := position, tokenIndex
					if !_rules[ruleLowerASCII]() {
						goto l940
					}
					goto l939
				l940:
					position, tokenIndex = position939, tokenIndex939
					if !_rules[ruleMiscodedChar]() {
						goto l941
					}
					goto l939
				l941:
					position, tokenIndex = position939, tokenIndex939
					if !_rules[ruleApostrophe]() {
						goto l942
					}
					goto l939
				l942:
					position, tokenIndex = position939, tokenIndex939
					{
						position943, tokenIndex943 := position, tokenIndex
						if buffer[position] != rune('à') {
							goto l944
						}
						position++
						goto l943
					l944:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('á') {
							goto l945
						}
						position++
						goto l943
					l945:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('â') {
							goto l946
						}
						position++
						goto l943
					l946:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ã') {
							goto l947
						}
						position++
						goto l943
					l947:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ä') {
							goto l948
						}
						position++
						goto l943
					l948:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('å') {
							goto l949
						}
						position++
						goto l943
					l949:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('æ') {
							goto l950
						}
						position++
						goto l943
					l950:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ç') {
							goto l951
						}
						position++
						goto l943
					l951:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('è') {
							goto l952
						}
						position++
						goto l943
					l952:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('é') {
							goto l953
						}
						position++
						goto l943
					l953:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ê') {
							goto l954
						}
						position++
						goto l943
					l954:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ë') {
							goto l955
						}
						position++
						goto l943
					l955:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ì') {
							goto l956
						}
						position++
						goto l943
					l956:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('í') {
							goto l957
						}
						position++
						goto l943
					l957:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('î') {
							goto l958
						}
						position++
						goto l943
					l958:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ï') {
							goto l959
						}
						position++
						goto l943
					l959:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ð') {
							goto l960
						}
						position++
						goto l943
					l960:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ñ') {
							goto l961
						}
						position++
						goto l943
					l961:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ò') {
							goto l962
						}
						position++
						goto l943
					l962:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ó') {
							goto l963
						}
						position++
						goto l943
					l963:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ó') {
							goto l964
						}
						position++
						goto l943
					l964:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ô') {
							goto l965
						}
						position++
						goto l943
					l965:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('õ') {
							goto l966
						}
						position++
						goto l943
					l966:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ö') {
							goto l967
						}
						position++
						goto l943
					l967:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ø') {
							goto l968
						}
						position++
						goto l943
					l968:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ù') {
							goto l969
						}
						position++
						goto l943
					l969:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ú') {
							goto l970
						}
						position++
						goto l943
					l970:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('û') {
							goto l971
						}
						position++
						goto l943
					l971:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ü') {
							goto l972
						}
						position++
						goto l943
					l972:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ý') {
							goto l973
						}
						position++
						goto l943
					l973:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ÿ') {
							goto l974
						}
						position++
						goto l943
					l974:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ā') {
							goto l975
						}
						position++
						goto l943
					l975:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ă') {
							goto l976
						}
						position++
						goto l943
					l976:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ą') {
							goto l977
						}
						position++
						goto l943
					l977:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ć') {
							goto l978
						}
						position++
						goto l943
					l978:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ĉ') {
							goto l979
						}
						position++
						goto l943
					l979:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('č') {
							goto l980
						}
						position++
						goto l943
					l980:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ď') {
							goto l981
						}
						position++
						goto l943
					l981:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('đ') {
							goto l982
						}
						position++
						goto l943
					l982:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ē') {
							goto l983
						}
						position++
						goto l943
					l983:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ĕ') {
							goto l984
						}
						position++
						goto l943
					l984:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ė') {
							goto l985
						}
						position++
						goto l943
					l985:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ę') {
							goto l986
						}
						position++
						goto l943
					l986:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ě') {
							goto l987
						}
						position++
						goto l943
					l987:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ğ') {
							goto l988
						}
						position++
						goto l943
					l988:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ī') {
							goto l989
						}
						position++
						goto l943
					l989:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ĭ') {
							goto l990
						}
						position++
						goto l943
					l990:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('İ') {
							goto l991
						}
						position++
						goto l943
					l991:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ı') {
							goto l992
						}
						position++
						goto l943
					l992:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ĺ') {
							goto l993
						}
						position++
						goto l943
					l993:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ľ') {
							goto l994
						}
						position++
						goto l943
					l994:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ł') {
							goto l995
						}
						position++
						goto l943
					l995:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ń') {
							goto l996
						}
						position++
						goto l943
					l996:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ņ') {
							goto l997
						}
						position++
						goto l943
					l997:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ň') {
							goto l998
						}
						position++
						goto l943
					l998:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ŏ') {
							goto l999
						}
						position++
						goto l943
					l999:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ő') {
							goto l1000
						}
						position++
						goto l943
					l1000:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('œ') {
							goto l1001
						}
						position++
						goto l943
					l1001:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ŕ') {
							goto l1002
						}
						position++
						goto l943
					l1002:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ř') {
							goto l1003
						}
						position++
						goto l943
					l1003:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ś') {
							goto l1004
						}
						position++
						goto l943
					l1004:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ş') {
							goto l1005
						}
						position++
						goto l943
					l1005:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('š') {
							goto l1006
						}
						position++
						goto l943
					l1006:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ţ') {
							goto l1007
						}
						position++
						goto l943
					l1007:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ť') {
							goto l1008
						}
						position++
						goto l943
					l1008:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ũ') {
							goto l1009
						}
						position++
						goto l943
					l1009:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ū') {
							goto l1010
						}
						position++
						goto l943
					l1010:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ŭ') {
							goto l1011
						}
						position++
						goto l943
					l1011:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ů') {
							goto l1012
						}
						position++
						goto l943
					l1012:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ű') {
							goto l1013
						}
						position++
						goto l943
					l1013:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ź') {
							goto l1014
						}
						position++
						goto l943
					l1014:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ż') {
							goto l1015
						}
						position++
						goto l943
					l1015:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ž') {
							goto l1016
						}
						position++
						goto l943
					l1016:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ſ') {
							goto l1017
						}
						position++
						goto l943
					l1017:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ǎ') {
							goto l1018
						}
						position++
						goto l943
					l1018:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ǔ') {
							goto l1019
						}
						position++
						goto l943
					l1019:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ǧ') {
							goto l1020
						}
						position++
						goto l943
					l1020:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ș') {
							goto l1021
						}
						position++
						goto l943
					l1021:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ț') {
							goto l1022
						}
						position++
						goto l943
					l1022:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ȳ') {
							goto l1023
						}
						position++
						goto l943
					l1023:
						position, tokenIndex = position943, tokenIndex943
						if buffer[position] != rune('ß') {
							goto l937
						}
						position++
					}
				l943:
				}
			l939:
				add(ruleAuthorLowerChar, position938)
			}
			return true
		l937:
			position, tokenIndex = position937, tokenIndex937
			return false
		},
		/* 120 Year <- <(YearRange / YearApprox / YearWithParens / YearWithPage / YearWithDot / YearWithChar / YearNum)> */
		func() bool {
			position1024, tokenIndex1024 := position, tokenIndex
			{
				position1025 := position
				{
					position1026, tokenIndex1026 := position, tokenIndex
					if !_rules[ruleYearRange]() {
						goto l1027
					}
					goto l1026
				l1027:
					position, tokenIndex = position1026, tokenIndex1026
					if !_rules[ruleYearApprox]() {
						goto l1028
					}
					goto l1026
				l1028:
					position, tokenIndex = position1026, tokenIndex1026
					if !_rules[ruleYearWithParens]() {
						goto l1029
					}
					goto l1026
				l1029:
					position, tokenIndex = position1026, tokenIndex1026
					if !_rules[ruleYearWithPage]() {
						goto l1030
					}
					goto l1026
				l1030:
					position, tokenIndex = position1026, tokenIndex1026
					if !_rules[ruleYearWithDot]() {
						goto l1031
					}
					goto l1026
				l1031:
					position, tokenIndex = position1026, tokenIndex1026
					if !_rules[ruleYearWithChar]() {
						goto l1032
					}
					goto l1026
				l1032:
					position, tokenIndex = position1026, tokenIndex1026
					if !_rules[ruleYearNum]() {
						goto l1024
					}
				}
			l1026:
				add(ruleYear, position1025)
			}
			return true
		l1024:
			position, tokenIndex = position1024, tokenIndex1024
			return false
		},
		/* 121 YearRange <- <(YearNum (Dash / Slash) (Nums+ ('a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '?')*))> */
		func() bool {
			position1033, tokenIndex1033 := position, tokenIndex
			{
				position1034 := position
				if !_rules[ruleYearNum]() {
					goto l1033
				}
				{
					position1035, tokenIndex1035 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l1036
					}
					goto l1035
				l1036:
					position, tokenIndex = position1035, tokenIndex1035
					if !_rules[ruleSlash]() {
						goto l1033
					}
				}
			l1035:
				if !_rules[ruleNums]() {
					goto l1033
				}
			l1037:
				{
					position1038, tokenIndex1038 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1038
					}
					goto l1037
				l1038:
					position, tokenIndex = position1038, tokenIndex1038
				}
			l1039:
				{
					position1040, tokenIndex1040 := position, tokenIndex
					{
						position1041, tokenIndex1041 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l1042
						}
						position++
						goto l1041
					l1042:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('b') {
							goto l1043
						}
						position++
						goto l1041
					l1043:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('c') {
							goto l1044
						}
						position++
						goto l1041
					l1044:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('d') {
							goto l1045
						}
						position++
						goto l1041
					l1045:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('e') {
							goto l1046
						}
						position++
						goto l1041
					l1046:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('f') {
							goto l1047
						}
						position++
						goto l1041
					l1047:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('g') {
							goto l1048
						}
						position++
						goto l1041
					l1048:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('h') {
							goto l1049
						}
						position++
						goto l1041
					l1049:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('i') {
							goto l1050
						}
						position++
						goto l1041
					l1050:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('j') {
							goto l1051
						}
						position++
						goto l1041
					l1051:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('k') {
							goto l1052
						}
						position++
						goto l1041
					l1052:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('l') {
							goto l1053
						}
						position++
						goto l1041
					l1053:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('m') {
							goto l1054
						}
						position++
						goto l1041
					l1054:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('n') {
							goto l1055
						}
						position++
						goto l1041
					l1055:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('o') {
							goto l1056
						}
						position++
						goto l1041
					l1056:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('p') {
							goto l1057
						}
						position++
						goto l1041
					l1057:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('q') {
							goto l1058
						}
						position++
						goto l1041
					l1058:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('r') {
							goto l1059
						}
						position++
						goto l1041
					l1059:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('s') {
							goto l1060
						}
						position++
						goto l1041
					l1060:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('t') {
							goto l1061
						}
						position++
						goto l1041
					l1061:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('u') {
							goto l1062
						}
						position++
						goto l1041
					l1062:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('v') {
							goto l1063
						}
						position++
						goto l1041
					l1063:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('w') {
							goto l1064
						}
						position++
						goto l1041
					l1064:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('x') {
							goto l1065
						}
						position++
						goto l1041
					l1065:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('y') {
							goto l1066
						}
						position++
						goto l1041
					l1066:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('z') {
							goto l1067
						}
						position++
						goto l1041
					l1067:
						position, tokenIndex = position1041, tokenIndex1041
						if buffer[position] != rune('?') {
							goto l1040
						}
						position++
					}
				l1041:
					goto l1039
				l1040:
					position, tokenIndex = position1040, tokenIndex1040
				}
				add(ruleYearRange, position1034)
			}
			return true
		l1033:
			position, tokenIndex = position1033, tokenIndex1033
			return false
		},
		/* 122 YearWithDot <- <(YearNum '.')> */
		func() bool {
			position1068, tokenIndex1068 := position, tokenIndex
			{
				position1069 := position
				if !_rules[ruleYearNum]() {
					goto l1068
				}
				if buffer[position] != rune('.') {
					goto l1068
				}
				position++
				add(ruleYearWithDot, position1069)
			}
			return true
		l1068:
			position, tokenIndex = position1068, tokenIndex1068
			return false
		},
		/* 123 YearApprox <- <('[' _? YearNum _? ']')> */
		func() bool {
			position1070, tokenIndex1070 := position, tokenIndex
			{
				position1071 := position
				if buffer[position] != rune('[') {
					goto l1070
				}
				position++
				{
					position1072, tokenIndex1072 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1072
					}
					goto l1073
				l1072:
					position, tokenIndex = position1072, tokenIndex1072
				}
			l1073:
				if !_rules[ruleYearNum]() {
					goto l1070
				}
				{
					position1074, tokenIndex1074 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1074
					}
					goto l1075
				l1074:
					position, tokenIndex = position1074, tokenIndex1074
				}
			l1075:
				if buffer[position] != rune(']') {
					goto l1070
				}
				position++
				add(ruleYearApprox, position1071)
			}
			return true
		l1070:
			position, tokenIndex = position1070, tokenIndex1070
			return false
		},
		/* 124 YearWithPage <- <((YearWithChar / YearNum) _? ':' _? Nums+)> */
		func() bool {
			position1076, tokenIndex1076 := position, tokenIndex
			{
				position1077 := position
				{
					position1078, tokenIndex1078 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1079
					}
					goto l1078
				l1079:
					position, tokenIndex = position1078, tokenIndex1078
					if !_rules[ruleYearNum]() {
						goto l1076
					}
				}
			l1078:
				{
					position1080, tokenIndex1080 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1080
					}
					goto l1081
				l1080:
					position, tokenIndex = position1080, tokenIndex1080
				}
			l1081:
				if buffer[position] != rune(':') {
					goto l1076
				}
				position++
				{
					position1082, tokenIndex1082 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1082
					}
					goto l1083
				l1082:
					position, tokenIndex = position1082, tokenIndex1082
				}
			l1083:
				if !_rules[ruleNums]() {
					goto l1076
				}
			l1084:
				{
					position1085, tokenIndex1085 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1085
					}
					goto l1084
				l1085:
					position, tokenIndex = position1085, tokenIndex1085
				}
				add(ruleYearWithPage, position1077)
			}
			return true
		l1076:
			position, tokenIndex = position1076, tokenIndex1076
			return false
		},
		/* 125 YearWithParens <- <('(' (YearWithChar / YearNum) ')')> */
		func() bool {
			position1086, tokenIndex1086 := position, tokenIndex
			{
				position1087 := position
				if buffer[position] != rune('(') {
					goto l1086
				}
				position++
				{
					position1088, tokenIndex1088 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1089
					}
					goto l1088
				l1089:
					position, tokenIndex = position1088, tokenIndex1088
					if !_rules[ruleYearNum]() {
						goto l1086
					}
				}
			l1088:
				if buffer[position] != rune(')') {
					goto l1086
				}
				position++
				add(ruleYearWithParens, position1087)
			}
			return true
		l1086:
			position, tokenIndex = position1086, tokenIndex1086
			return false
		},
		/* 126 YearWithChar <- <(YearNum LowerASCII)> */
		func() bool {
			position1090, tokenIndex1090 := position, tokenIndex
			{
				position1091 := position
				if !_rules[ruleYearNum]() {
					goto l1090
				}
				if !_rules[ruleLowerASCII]() {
					goto l1090
				}
				add(ruleYearWithChar, position1091)
			}
			return true
		l1090:
			position, tokenIndex = position1090, tokenIndex1090
			return false
		},
		/* 127 YearNum <- <(('1' / '2') ('0' / '7' / '8' / '9') Nums (Nums / '?') '?'*)> */
		func() bool {
			position1092, tokenIndex1092 := position, tokenIndex
			{
				position1093 := position
				{
					position1094, tokenIndex1094 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l1095
					}
					position++
					goto l1094
				l1095:
					position, tokenIndex = position1094, tokenIndex1094
					if buffer[position] != rune('2') {
						goto l1092
					}
					position++
				}
			l1094:
				{
					position1096, tokenIndex1096 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l1097
					}
					position++
					goto l1096
				l1097:
					position, tokenIndex = position1096, tokenIndex1096
					if buffer[position] != rune('7') {
						goto l1098
					}
					position++
					goto l1096
				l1098:
					position, tokenIndex = position1096, tokenIndex1096
					if buffer[position] != rune('8') {
						goto l1099
					}
					position++
					goto l1096
				l1099:
					position, tokenIndex = position1096, tokenIndex1096
					if buffer[position] != rune('9') {
						goto l1092
					}
					position++
				}
			l1096:
				if !_rules[ruleNums]() {
					goto l1092
				}
				{
					position1100, tokenIndex1100 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1101
					}
					goto l1100
				l1101:
					position, tokenIndex = position1100, tokenIndex1100
					if buffer[position] != rune('?') {
						goto l1092
					}
					position++
				}
			l1100:
			l1102:
				{
					position1103, tokenIndex1103 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l1103
					}
					position++
					goto l1102
				l1103:
					position, tokenIndex = position1103, tokenIndex1103
				}
				add(ruleYearNum, position1093)
			}
			return true
		l1092:
			position, tokenIndex = position1092, tokenIndex1092
			return false
		},
		/* 128 NameUpperChar <- <(UpperChar / UpperCharExtended)> */
		func() bool {
			position1104, tokenIndex1104 := position, tokenIndex
			{
				position1105 := position
				{
					position1106, tokenIndex1106 := position, tokenIndex
					if !_rules[ruleUpperChar]() {
						goto l1107
					}
					goto l1106
				l1107:
					position, tokenIndex = position1106, tokenIndex1106
					if !_rules[ruleUpperCharExtended]() {
						goto l1104
					}
				}
			l1106:
				add(ruleNameUpperChar, position1105)
			}
			return true
		l1104:
			position, tokenIndex = position1104, tokenIndex1104
			return false
		},
		/* 129 UpperCharExtended <- <('Æ' / 'Œ' / 'Ö')> */
		func() bool {
			position1108, tokenIndex1108 := position, tokenIndex
			{
				position1109 := position
				{
					position1110, tokenIndex1110 := position, tokenIndex
					if buffer[position] != rune('Æ') {
						goto l1111
					}
					position++
					goto l1110
				l1111:
					position, tokenIndex = position1110, tokenIndex1110
					if buffer[position] != rune('Œ') {
						goto l1112
					}
					position++
					goto l1110
				l1112:
					position, tokenIndex = position1110, tokenIndex1110
					if buffer[position] != rune('Ö') {
						goto l1108
					}
					position++
				}
			l1110:
				add(ruleUpperCharExtended, position1109)
			}
			return true
		l1108:
			position, tokenIndex = position1108, tokenIndex1108
			return false
		},
		/* 130 UpperChar <- <UpperASCII> */
		func() bool {
			position1113, tokenIndex1113 := position, tokenIndex
			{
				position1114 := position
				if !_rules[ruleUpperASCII]() {
					goto l1113
				}
				add(ruleUpperChar, position1114)
			}
			return true
		l1113:
			position, tokenIndex = position1113, tokenIndex1113
			return false
		},
		/* 131 NameLowerChar <- <(LowerChar / LowerCharExtended / MiscodedChar)> */
		func() bool {
			position1115, tokenIndex1115 := position, tokenIndex
			{
				position1116 := position
				{
					position1117, tokenIndex1117 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l1118
					}
					goto l1117
				l1118:
					position, tokenIndex = position1117, tokenIndex1117
					if !_rules[ruleLowerCharExtended]() {
						goto l1119
					}
					goto l1117
				l1119:
					position, tokenIndex = position1117, tokenIndex1117
					if !_rules[ruleMiscodedChar]() {
						goto l1115
					}
				}
			l1117:
				add(ruleNameLowerChar, position1116)
			}
			return true
		l1115:
			position, tokenIndex = position1115, tokenIndex1115
			return false
		},
		/* 132 MiscodedChar <- <'�'> */
		func() bool {
			position1120, tokenIndex1120 := position, tokenIndex
			{
				position1121 := position
				if buffer[position] != rune('�') {
					goto l1120
				}
				position++
				add(ruleMiscodedChar, position1121)
			}
			return true
		l1120:
			position, tokenIndex = position1120, tokenIndex1120
			return false
		},
		/* 133 LowerCharExtended <- <('æ' / 'œ' / 'à' / 'â' / 'å' / 'ã' / 'ä' / 'á' / 'ç' / 'č' / 'é' / 'è' / 'ë' / 'í' / 'ì' / 'ï' / 'ň' / 'ñ' / 'ñ' / 'ó' / 'ò' / 'ô' / 'ø' / 'õ' / 'ö' / 'ú' / 'û' / 'ù' / 'ü' / 'ŕ' / 'ř' / 'ŗ' / 'ſ' / 'š' / 'š' / 'ş' / 'ß' / 'ž')> */
		func() bool {
			position1122, tokenIndex1122 := position, tokenIndex
			{
				position1123 := position
				{
					position1124, tokenIndex1124 := position, tokenIndex
					if buffer[position] != rune('æ') {
						goto l1125
					}
					position++
					goto l1124
				l1125:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('œ') {
						goto l1126
					}
					position++
					goto l1124
				l1126:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('à') {
						goto l1127
					}
					position++
					goto l1124
				l1127:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('â') {
						goto l1128
					}
					position++
					goto l1124
				l1128:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('å') {
						goto l1129
					}
					position++
					goto l1124
				l1129:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ã') {
						goto l1130
					}
					position++
					goto l1124
				l1130:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ä') {
						goto l1131
					}
					position++
					goto l1124
				l1131:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('á') {
						goto l1132
					}
					position++
					goto l1124
				l1132:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ç') {
						goto l1133
					}
					position++
					goto l1124
				l1133:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('č') {
						goto l1134
					}
					position++
					goto l1124
				l1134:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('é') {
						goto l1135
					}
					position++
					goto l1124
				l1135:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('è') {
						goto l1136
					}
					position++
					goto l1124
				l1136:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ë') {
						goto l1137
					}
					position++
					goto l1124
				l1137:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('í') {
						goto l1138
					}
					position++
					goto l1124
				l1138:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ì') {
						goto l1139
					}
					position++
					goto l1124
				l1139:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ï') {
						goto l1140
					}
					position++
					goto l1124
				l1140:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ň') {
						goto l1141
					}
					position++
					goto l1124
				l1141:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ñ') {
						goto l1142
					}
					position++
					goto l1124
				l1142:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ñ') {
						goto l1143
					}
					position++
					goto l1124
				l1143:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ó') {
						goto l1144
					}
					position++
					goto l1124
				l1144:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ò') {
						goto l1145
					}
					position++
					goto l1124
				l1145:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ô') {
						goto l1146
					}
					position++
					goto l1124
				l1146:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ø') {
						goto l1147
					}
					position++
					goto l1124
				l1147:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('õ') {
						goto l1148
					}
					position++
					goto l1124
				l1148:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ö') {
						goto l1149
					}
					position++
					goto l1124
				l1149:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ú') {
						goto l1150
					}
					position++
					goto l1124
				l1150:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('û') {
						goto l1151
					}
					position++
					goto l1124
				l1151:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ù') {
						goto l1152
					}
					position++
					goto l1124
				l1152:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ü') {
						goto l1153
					}
					position++
					goto l1124
				l1153:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ŕ') {
						goto l1154
					}
					position++
					goto l1124
				l1154:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ř') {
						goto l1155
					}
					position++
					goto l1124
				l1155:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ŗ') {
						goto l1156
					}
					position++
					goto l1124
				l1156:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ſ') {
						goto l1157
					}
					position++
					goto l1124
				l1157:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('š') {
						goto l1158
					}
					position++
					goto l1124
				l1158:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('š') {
						goto l1159
					}
					position++
					goto l1124
				l1159:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ş') {
						goto l1160
					}
					position++
					goto l1124
				l1160:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ß') {
						goto l1161
					}
					position++
					goto l1124
				l1161:
					position, tokenIndex = position1124, tokenIndex1124
					if buffer[position] != rune('ž') {
						goto l1122
					}
					position++
				}
			l1124:
				add(ruleLowerCharExtended, position1123)
			}
			return true
		l1122:
			position, tokenIndex = position1122, tokenIndex1122
			return false
		},
		/* 134 LowerChar <- <LowerASCII> */
		func() bool {
			position1162, tokenIndex1162 := position, tokenIndex
			{
				position1163 := position
				if !_rules[ruleLowerASCII]() {
					goto l1162
				}
				add(ruleLowerChar, position1163)
			}
			return true
		l1162:
			position, tokenIndex = position1162, tokenIndex1162
			return false
		},
		/* 135 SpaceCharEOI <- <(_ / !.)> */
		func() bool {
			position1164, tokenIndex1164 := position, tokenIndex
			{
				position1165 := position
				{
					position1166, tokenIndex1166 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1167
					}
					goto l1166
				l1167:
					position, tokenIndex = position1166, tokenIndex1166
					{
						position1168, tokenIndex1168 := position, tokenIndex
						if !matchDot() {
							goto l1168
						}
						goto l1164
					l1168:
						position, tokenIndex = position1168, tokenIndex1168
					}
				}
			l1166:
				add(ruleSpaceCharEOI, position1165)
			}
			return true
		l1164:
			position, tokenIndex = position1164, tokenIndex1164
			return false
		},
		/* 136 Nums <- <[0-9]> */
		func() bool {
			position1169, tokenIndex1169 := position, tokenIndex
			{
				position1170 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l1169
				}
				position++
				add(ruleNums, position1170)
			}
			return true
		l1169:
			position, tokenIndex = position1169, tokenIndex1169
			return false
		},
		/* 137 LowerGreek <- <[α-ω]> */
		func() bool {
			position1171, tokenIndex1171 := position, tokenIndex
			{
				position1172 := position
				if c := buffer[position]; c < rune('α') || c > rune('ω') {
					goto l1171
				}
				position++
				add(ruleLowerGreek, position1172)
			}
			return true
		l1171:
			position, tokenIndex = position1171, tokenIndex1171
			return false
		},
		/* 138 LowerASCII <- <[a-z]> */
		func() bool {
			position1173, tokenIndex1173 := position, tokenIndex
			{
				position1174 := position
				if c := buffer[position]; c < rune('a') || c > rune('z') {
					goto l1173
				}
				position++
				add(ruleLowerASCII, position1174)
			}
			return true
		l1173:
			position, tokenIndex = position1173, tokenIndex1173
			return false
		},
		/* 139 UpperASCII <- <[A-Z]> */
		func() bool {
			position1175, tokenIndex1175 := position, tokenIndex
			{
				position1176 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l1175
				}
				position++
				add(ruleUpperASCII, position1176)
			}
			return true
		l1175:
			position, tokenIndex = position1175, tokenIndex1175
			return false
		},
		/* 140 Apostrophe <- <(ApostrOther / ApostrASCII)> */
		func() bool {
			position1177, tokenIndex1177 := position, tokenIndex
			{
				position1178 := position
				{
					position1179, tokenIndex1179 := position, tokenIndex
					if !_rules[ruleApostrOther]() {
						goto l1180
					}
					goto l1179
				l1180:
					position, tokenIndex = position1179, tokenIndex1179
					if !_rules[ruleApostrASCII]() {
						goto l1177
					}
				}
			l1179:
				add(ruleApostrophe, position1178)
			}
			return true
		l1177:
			position, tokenIndex = position1177, tokenIndex1177
			return false
		},
		/* 141 ApostrASCII <- <'\''> */
		func() bool {
			position1181, tokenIndex1181 := position, tokenIndex
			{
				position1182 := position
				if buffer[position] != rune('\'') {
					goto l1181
				}
				position++
				add(ruleApostrASCII, position1182)
			}
			return true
		l1181:
			position, tokenIndex = position1181, tokenIndex1181
			return false
		},
		/* 142 ApostrOther <- <('‘' / '’' / '`' / '´')> */
		func() bool {
			position1183, tokenIndex1183 := position, tokenIndex
			{
				position1184 := position
				{
					position1185, tokenIndex1185 := position, tokenIndex
					if buffer[position] != rune('‘') {
						goto l1186
					}
					position++
					goto l1185
				l1186:
					position, tokenIndex = position1185, tokenIndex1185
					if buffer[position] != rune('’') {
						goto l1187
					}
					position++
					goto l1185
				l1187:
					position, tokenIndex = position1185, tokenIndex1185
					if buffer[position] != rune('`') {
						goto l1188
					}
					position++
					goto l1185
				l1188:
					position, tokenIndex = position1185, tokenIndex1185
					if buffer[position] != rune('´') {
						goto l1183
					}
					position++
				}
			l1185:
				add(ruleApostrOther, position1184)
			}
			return true
		l1183:
			position, tokenIndex = position1183, tokenIndex1183
			return false
		},
		/* 143 Dash <- <'-'> */
		func() bool {
			position1189, tokenIndex1189 := position, tokenIndex
			{
				position1190 := position
				if buffer[position] != rune('-') {
					goto l1189
				}
				position++
				add(ruleDash, position1190)
			}
			return true
		l1189:
			position, tokenIndex = position1189, tokenIndex1189
			return false
		},
		/* 144 Slash <- <'/'> */
		func() bool {
			position1191, tokenIndex1191 := position, tokenIndex
			{
				position1192 := position
				if buffer[position] != rune('/') {
					goto l1191
				}
				position++
				add(ruleSlash, position1192)
			}
			return true
		l1191:
			position, tokenIndex = position1191, tokenIndex1191
			return false
		},
		/* 145 _ <- <(MultipleSpace / SingleSpace)> */
		func() bool {
			position1193, tokenIndex1193 := position, tokenIndex
			{
				position1194 := position
				{
					position1195, tokenIndex1195 := position, tokenIndex
					if !_rules[ruleMultipleSpace]() {
						goto l1196
					}
					goto l1195
				l1196:
					position, tokenIndex = position1195, tokenIndex1195
					if !_rules[ruleSingleSpace]() {
						goto l1193
					}
				}
			l1195:
				add(rule_, position1194)
			}
			return true
		l1193:
			position, tokenIndex = position1193, tokenIndex1193
			return false
		},
		/* 146 MultipleSpace <- <(SingleSpace SingleSpace+)> */
		func() bool {
			position1197, tokenIndex1197 := position, tokenIndex
			{
				position1198 := position
				if !_rules[ruleSingleSpace]() {
					goto l1197
				}
				if !_rules[ruleSingleSpace]() {
					goto l1197
				}
			l1199:
				{
					position1200, tokenIndex1200 := position, tokenIndex
					if !_rules[ruleSingleSpace]() {
						goto l1200
					}
					goto l1199
				l1200:
					position, tokenIndex = position1200, tokenIndex1200
				}
				add(ruleMultipleSpace, position1198)
			}
			return true
		l1197:
			position, tokenIndex = position1197, tokenIndex1197
			return false
		},
		/* 147 SingleSpace <- <(' ' / OtherSpace)> */
		func() bool {
			position1201, tokenIndex1201 := position, tokenIndex
			{
				position1202 := position
				{
					position1203, tokenIndex1203 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l1204
					}
					position++
					goto l1203
				l1204:
					position, tokenIndex = position1203, tokenIndex1203
					if !_rules[ruleOtherSpace]() {
						goto l1201
					}
				}
			l1203:
				add(ruleSingleSpace, position1202)
			}
			return true
		l1201:
			position, tokenIndex = position1201, tokenIndex1201
			return false
		},
		/* 148 OtherSpace <- <('\u3000' / '\u00a0' / '\t' / '\r' / '\n' / '\f' / '\v')> */
		func() bool {
			position1205, tokenIndex1205 := position, tokenIndex
			{
				position1206 := position
				{
					position1207, tokenIndex1207 := position, tokenIndex
					if buffer[position] != rune('\u3000') {
						goto l1208
					}
					position++
					goto l1207
				l1208:
					position, tokenIndex = position1207, tokenIndex1207
					if buffer[position] != rune('\u00a0') {
						goto l1209
					}
					position++
					goto l1207
				l1209:
					position, tokenIndex = position1207, tokenIndex1207
					if buffer[position] != rune('\t') {
						goto l1210
					}
					position++
					goto l1207
				l1210:
					position, tokenIndex = position1207, tokenIndex1207
					if buffer[position] != rune('\r') {
						goto l1211
					}
					position++
					goto l1207
				l1211:
					position, tokenIndex = position1207, tokenIndex1207
					if buffer[position] != rune('\n') {
						goto l1212
					}
					position++
					goto l1207
				l1212:
					position, tokenIndex = position1207, tokenIndex1207
					if buffer[position] != rune('\f') {
						goto l1213
					}
					position++
					goto l1207
				l1213:
					position, tokenIndex = position1207, tokenIndex1207
					if buffer[position] != rune('\v') {
						goto l1205
					}
					position++
				}
			l1207:
				add(ruleOtherSpace, position1206)
			}
			return true
		l1205:
			position, tokenIndex = position1205, tokenIndex1205
			return false
		},
		/* 149 END <- <!.> */
		func() bool {
			position1214, tokenIndex1214 := position, tokenIndex
			{
				position1215 := position
				{
					position1216, tokenIndex1216 := position, tokenIndex
					if !matchDot() {
						goto l1216
					}
					goto l1214
				l1216:
					position, tokenIndex = position1216, tokenIndex1216
				}
				add(ruleEND, position1215)
			}
			return true
		l1214:
			position, tokenIndex = position1214, tokenIndex1214
			return false
		},
	}
	p.rules = _rules
	return nil
}
