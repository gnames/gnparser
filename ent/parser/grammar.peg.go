package parser

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleSciName
	ruleTail
	ruleName
	ruleHybridFormula
	ruleHybridFormulaFull
	ruleHybridFormulaPart
	ruleNamedHybrid
	ruleNamedSpeciesHybrid
	ruleNamedGenusHybrid
	ruleGraftChimeraFormula
	ruleGraftChimeraFormulaFull
	ruleGraftChimeraFormulaPart
	ruleNamedGenusGraftChimera
	ruleCandidatusName
	ruleCandidatus
	ruleSingleName
	ruleNameUninomial
	ruleNameApprox
	ruleNameComp
	ruleNameSpecies
	ruleGenusWord
	ruleInfraspGroup
	ruleInfraspEpithet
	ruleCultivarWordGroup
	ruleCultivar
	ruleRankCultivar
	ruleNotHybridChar
	ruleCultivarRecursive
	ruleCultivarApostrophe
	ruleSpeciesEpithet
	ruleIgnoredWord
	ruleComparison
	ruleRank
	ruleRankNotho
	ruleRankOtherUncommon
	ruleRankOther
	ruleRankVar
	ruleRankForma
	ruleRankSsp
	ruleRankAgamo
	ruleSubgenusOrSuperspecies
	ruleSubgenus
	ruleSubgenus2
	ruleSubgenus1
	ruleUninomialCombo
	ruleUninomialCombo1
	ruleUninomialCombo2
	ruleRankUninomial
	ruleRankUninomialPlain
	ruleRankUninomialNotho
	ruleUninomial
	ruleUninomialWord
	ruleAbbrSubgenus
	ruleAbbrGenus
	ruleCapWord
	ruleCapWord1
	ruleCapWordWithDash
	ruleTwoLetterGenusDashedSegment
	ruleWordAfterDash
	ruleUpperAfterDash
	ruleLowerAfterDash
	ruleTwoLetterGenus
	ruleWord
	ruleWord1
	ruleWordStartsWithDigit
	ruleWord2
	ruleWordApostr
	ruleWord4
	ruleDotPrefix
	ruleMultiDashedWord
	ruleHybridChar
	ruleGraftChimeraChar
	ruleApproxNameIgnored
	ruleApproximation
	ruleAuthorship
	ruleAuthorshipCombo
	ruleOriginalAuthorship
	ruleOriginalAuthorshipComb
	ruleCombinationAuthorship
	ruleBasionymAuthorshipMissingParens
	ruleMissingParensStart
	ruleMissingParensEnd
	ruleBasionymAuthorshipYearMisformed
	ruleBasionymAuthorship
	ruleBasionymAuthorship1
	ruleBasionymAuthorship2Parens
	ruleAuthorsGroup
	ruleAuthorsTeam
	ruleAuthorSep
	ruleAuthorSep1
	ruleAuthorSep2
	ruleAuthorSepSpanish
	ruleAuthorEx
	ruleAuthorEmend
	ruleAuthor
	ruleAuthor0
	ruleAuthor1
	ruleAuthor2
	ruleUnknownAuthor
	ruleAuthorWord
	ruleAuthorEtAl
	ruleAuthorWord1
	ruleAuthorWord2
	ruleAuthorWord3
	ruleAuthorWord4
	ruleAuthorDashInitials
	ruleAuthorInitial
	ruleAuthorWordSoft
	ruleCapAuthorWord
	ruleAllCapsAuthorWord
	ruleFilius
	ruleFiliusF
	ruleFiliusFNoSpace
	ruleAuthorSuffix
	ruleAuthorPrefixGlued1
	ruleAuthorPrefixGlued2
	ruleAuthorPrefix
	ruleAuthorPrefix2
	ruleAuthorPrefix1
	ruleAuthorUpperChar
	ruleAuthorLowerChar
	ruleYear
	ruleYearRange
	ruleYearWithDot
	ruleYearApprox
	ruleYearWithPage
	ruleYearWithParens
	ruleYearWithChar
	ruleYearNum
	ruleNameUpperChar
	ruleUpperCharExtended
	ruleUpperChar
	ruleNameLowerChar
	ruleMiscodedChar
	ruleLowerCharExtended
	ruleLowerChar
	ruleSpaceCharEOI
	ruleNums
	ruleLowerGreek
	ruleLowerASCII
	ruleUpperASCII
	ruleApostrophe
	ruleApostrASCII
	ruleApostrOther
	ruleDash
	ruleDashOther
	ruleSlash
	rule_
	ruleMultipleSpace
	ruleSingleSpace
	ruleOtherSpace
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"SciName",
	"Tail",
	"Name",
	"HybridFormula",
	"HybridFormulaFull",
	"HybridFormulaPart",
	"NamedHybrid",
	"NamedSpeciesHybrid",
	"NamedGenusHybrid",
	"GraftChimeraFormula",
	"GraftChimeraFormulaFull",
	"GraftChimeraFormulaPart",
	"NamedGenusGraftChimera",
	"CandidatusName",
	"Candidatus",
	"SingleName",
	"NameUninomial",
	"NameApprox",
	"NameComp",
	"NameSpecies",
	"GenusWord",
	"InfraspGroup",
	"InfraspEpithet",
	"CultivarWordGroup",
	"Cultivar",
	"RankCultivar",
	"NotHybridChar",
	"CultivarRecursive",
	"CultivarApostrophe",
	"SpeciesEpithet",
	"IgnoredWord",
	"Comparison",
	"Rank",
	"RankNotho",
	"RankOtherUncommon",
	"RankOther",
	"RankVar",
	"RankForma",
	"RankSsp",
	"RankAgamo",
	"SubgenusOrSuperspecies",
	"Subgenus",
	"Subgenus2",
	"Subgenus1",
	"UninomialCombo",
	"UninomialCombo1",
	"UninomialCombo2",
	"RankUninomial",
	"RankUninomialPlain",
	"RankUninomialNotho",
	"Uninomial",
	"UninomialWord",
	"AbbrSubgenus",
	"AbbrGenus",
	"CapWord",
	"CapWord1",
	"CapWordWithDash",
	"TwoLetterGenusDashedSegment",
	"WordAfterDash",
	"UpperAfterDash",
	"LowerAfterDash",
	"TwoLetterGenus",
	"Word",
	"Word1",
	"WordStartsWithDigit",
	"Word2",
	"WordApostr",
	"Word4",
	"DotPrefix",
	"MultiDashedWord",
	"HybridChar",
	"GraftChimeraChar",
	"ApproxNameIgnored",
	"Approximation",
	"Authorship",
	"AuthorshipCombo",
	"OriginalAuthorship",
	"OriginalAuthorshipComb",
	"CombinationAuthorship",
	"BasionymAuthorshipMissingParens",
	"MissingParensStart",
	"MissingParensEnd",
	"BasionymAuthorshipYearMisformed",
	"BasionymAuthorship",
	"BasionymAuthorship1",
	"BasionymAuthorship2Parens",
	"AuthorsGroup",
	"AuthorsTeam",
	"AuthorSep",
	"AuthorSep1",
	"AuthorSep2",
	"AuthorSepSpanish",
	"AuthorEx",
	"AuthorEmend",
	"Author",
	"Author0",
	"Author1",
	"Author2",
	"UnknownAuthor",
	"AuthorWord",
	"AuthorEtAl",
	"AuthorWord1",
	"AuthorWord2",
	"AuthorWord3",
	"AuthorWord4",
	"AuthorDashInitials",
	"AuthorInitial",
	"AuthorWordSoft",
	"CapAuthorWord",
	"AllCapsAuthorWord",
	"Filius",
	"FiliusF",
	"FiliusFNoSpace",
	"AuthorSuffix",
	"AuthorPrefixGlued1",
	"AuthorPrefixGlued2",
	"AuthorPrefix",
	"AuthorPrefix2",
	"AuthorPrefix1",
	"AuthorUpperChar",
	"AuthorLowerChar",
	"Year",
	"YearRange",
	"YearWithDot",
	"YearApprox",
	"YearWithPage",
	"YearWithParens",
	"YearWithChar",
	"YearNum",
	"NameUpperChar",
	"UpperCharExtended",
	"UpperChar",
	"NameLowerChar",
	"MiscodedChar",
	"LowerCharExtended",
	"LowerChar",
	"SpaceCharEOI",
	"Nums",
	"LowerGreek",
	"LowerASCII",
	"UpperASCII",
	"Apostrophe",
	"ApostrASCII",
	"ApostrOther",
	"Dash",
	"DashOther",
	"Slash",
	"_",
	"MultipleSpace",
	"SingleSpace",
	"OtherSpace",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Engine struct {
	baseEngine

	Buffer string
	buffer []rune
	rules  [153]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Engine) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Engine) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Engine
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Engine) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Engine) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Engine) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Engine) error {
	return func(p *Engine) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Engine) error {
	return func(p *Engine) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Engine) Init(options ...func(*Engine) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 SciName <- <(_? Name Tail END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rule_]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				if !_rules[ruleName]() {
					goto l0
				}
				if !_rules[ruleTail]() {
					goto l0
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleSciName, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Tail <- <((_ / ';' / ',') .*)?> */
		func() bool {
			{
				position5 := position
				{
					position6, tokenIndex6 := position, tokenIndex
					{
						position8, tokenIndex8 := position, tokenIndex
						if !_rules[rule_]() {
							goto l9
						}
						goto l8
					l9:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(';') {
							goto l10
						}
						position++
						goto l8
					l10:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(',') {
							goto l6
						}
						position++
					}
				l8:
				l11:
					{
						position12, tokenIndex12 := position, tokenIndex
						if !matchDot() {
							goto l12
						}
						goto l11
					l12:
						position, tokenIndex = position12, tokenIndex12
					}
					goto l7
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
			l7:
				add(ruleTail, position5)
			}
			return true
		},
		/* 2 Name <- <(NamedGenusGraftChimera / GraftChimeraFormula / NamedHybrid / HybridFormula / CandidatusName / SingleName)> */
		func() bool {
			position13, tokenIndex13 := position, tokenIndex
			{
				position14 := position
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleNamedGenusGraftChimera]() {
						goto l16
					}
					goto l15
				l16:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleGraftChimeraFormula]() {
						goto l17
					}
					goto l15
				l17:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleNamedHybrid]() {
						goto l18
					}
					goto l15
				l18:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleHybridFormula]() {
						goto l19
					}
					goto l15
				l19:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleCandidatusName]() {
						goto l20
					}
					goto l15
				l20:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleSingleName]() {
						goto l13
					}
				}
			l15:
				add(ruleName, position14)
			}
			return true
		l13:
			position, tokenIndex = position13, tokenIndex13
			return false
		},
		/* 3 HybridFormula <- <(SingleName (_ (HybridFormulaPart / HybridFormulaFull))+)> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				if !_rules[ruleSingleName]() {
					goto l21
				}
				if !_rules[rule_]() {
					goto l21
				}
				{
					position25, tokenIndex25 := position, tokenIndex
					if !_rules[ruleHybridFormulaPart]() {
						goto l26
					}
					goto l25
				l26:
					position, tokenIndex = position25, tokenIndex25
					if !_rules[ruleHybridFormulaFull]() {
						goto l21
					}
				}
			l25:
			l23:
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[rule_]() {
						goto l24
					}
					{
						position27, tokenIndex27 := position, tokenIndex
						if !_rules[ruleHybridFormulaPart]() {
							goto l28
						}
						goto l27
					l28:
						position, tokenIndex = position27, tokenIndex27
						if !_rules[ruleHybridFormulaFull]() {
							goto l24
						}
					}
				l27:
					goto l23
				l24:
					position, tokenIndex = position24, tokenIndex24
				}
				add(ruleHybridFormula, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 4 HybridFormulaFull <- <(HybridChar (_ SingleName)?)> */
		func() bool {
			position29, tokenIndex29 := position, tokenIndex
			{
				position30 := position
				if !_rules[ruleHybridChar]() {
					goto l29
				}
				{
					position31, tokenIndex31 := position, tokenIndex
					if !_rules[rule_]() {
						goto l31
					}
					if !_rules[ruleSingleName]() {
						goto l31
					}
					goto l32
				l31:
					position, tokenIndex = position31, tokenIndex31
				}
			l32:
				add(ruleHybridFormulaFull, position30)
			}
			return true
		l29:
			position, tokenIndex = position29, tokenIndex29
			return false
		},
		/* 5 HybridFormulaPart <- <(HybridChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position33, tokenIndex33 := position, tokenIndex
			{
				position34 := position
				if !_rules[ruleHybridChar]() {
					goto l33
				}
				if !_rules[rule_]() {
					goto l33
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l33
				}
				{
					position35, tokenIndex35 := position, tokenIndex
					if !_rules[rule_]() {
						goto l35
					}
					if !_rules[ruleInfraspGroup]() {
						goto l35
					}
					goto l36
				l35:
					position, tokenIndex = position35, tokenIndex35
				}
			l36:
				add(ruleHybridFormulaPart, position34)
			}
			return true
		l33:
			position, tokenIndex = position33, tokenIndex33
			return false
		},
		/* 6 NamedHybrid <- <(NamedGenusHybrid / NamedSpeciesHybrid)> */
		func() bool {
			position37, tokenIndex37 := position, tokenIndex
			{
				position38 := position
				{
					position39, tokenIndex39 := position, tokenIndex
					if !_rules[ruleNamedGenusHybrid]() {
						goto l40
					}
					goto l39
				l40:
					position, tokenIndex = position39, tokenIndex39
					if !_rules[ruleNamedSpeciesHybrid]() {
						goto l37
					}
				}
			l39:
				add(ruleNamedHybrid, position38)
			}
			return true
		l37:
			position, tokenIndex = position37, tokenIndex37
			return false
		},
		/* 7 NamedSpeciesHybrid <- <(GenusWord (_ Subgenus)? (_ Comparison)? _ HybridChar _? SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position41, tokenIndex41 := position, tokenIndex
			{
				position42 := position
				if !_rules[ruleGenusWord]() {
					goto l41
				}
				{
					position43, tokenIndex43 := position, tokenIndex
					if !_rules[rule_]() {
						goto l43
					}
					if !_rules[ruleSubgenus]() {
						goto l43
					}
					goto l44
				l43:
					position, tokenIndex = position43, tokenIndex43
				}
			l44:
				{
					position45, tokenIndex45 := position, tokenIndex
					if !_rules[rule_]() {
						goto l45
					}
					if !_rules[ruleComparison]() {
						goto l45
					}
					goto l46
				l45:
					position, tokenIndex = position45, tokenIndex45
				}
			l46:
				if !_rules[rule_]() {
					goto l41
				}
				if !_rules[ruleHybridChar]() {
					goto l41
				}
				{
					position47, tokenIndex47 := position, tokenIndex
					if !_rules[rule_]() {
						goto l47
					}
					goto l48
				l47:
					position, tokenIndex = position47, tokenIndex47
				}
			l48:
				if !_rules[ruleSpeciesEpithet]() {
					goto l41
				}
				{
					position49, tokenIndex49 := position, tokenIndex
					if !_rules[rule_]() {
						goto l49
					}
					if !_rules[ruleInfraspGroup]() {
						goto l49
					}
					goto l50
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
			l50:
				add(ruleNamedSpeciesHybrid, position42)
			}
			return true
		l41:
			position, tokenIndex = position41, tokenIndex41
			return false
		},
		/* 8 NamedGenusHybrid <- <(HybridChar _? SingleName)> */
		func() bool {
			position51, tokenIndex51 := position, tokenIndex
			{
				position52 := position
				if !_rules[ruleHybridChar]() {
					goto l51
				}
				{
					position53, tokenIndex53 := position, tokenIndex
					if !_rules[rule_]() {
						goto l53
					}
					goto l54
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
			l54:
				if !_rules[ruleSingleName]() {
					goto l51
				}
				add(ruleNamedGenusHybrid, position52)
			}
			return true
		l51:
			position, tokenIndex = position51, tokenIndex51
			return false
		},
		/* 9 GraftChimeraFormula <- <(SingleName (_ (GraftChimeraFormulaPart / GraftChimeraFormulaFull))+)> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				if !_rules[ruleSingleName]() {
					goto l55
				}
				if !_rules[rule_]() {
					goto l55
				}
				{
					position59, tokenIndex59 := position, tokenIndex
					if !_rules[ruleGraftChimeraFormulaPart]() {
						goto l60
					}
					goto l59
				l60:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleGraftChimeraFormulaFull]() {
						goto l55
					}
				}
			l59:
			l57:
				{
					position58, tokenIndex58 := position, tokenIndex
					if !_rules[rule_]() {
						goto l58
					}
					{
						position61, tokenIndex61 := position, tokenIndex
						if !_rules[ruleGraftChimeraFormulaPart]() {
							goto l62
						}
						goto l61
					l62:
						position, tokenIndex = position61, tokenIndex61
						if !_rules[ruleGraftChimeraFormulaFull]() {
							goto l58
						}
					}
				l61:
					goto l57
				l58:
					position, tokenIndex = position58, tokenIndex58
				}
				add(ruleGraftChimeraFormula, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 10 GraftChimeraFormulaFull <- <(GraftChimeraChar (_ SingleName)?)> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l63
				}
				{
					position65, tokenIndex65 := position, tokenIndex
					if !_rules[rule_]() {
						goto l65
					}
					if !_rules[ruleSingleName]() {
						goto l65
					}
					goto l66
				l65:
					position, tokenIndex = position65, tokenIndex65
				}
			l66:
				add(ruleGraftChimeraFormulaFull, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 11 GraftChimeraFormulaPart <- <(GraftChimeraChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position67, tokenIndex67 := position, tokenIndex
			{
				position68 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l67
				}
				if !_rules[rule_]() {
					goto l67
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l67
				}
				{
					position69, tokenIndex69 := position, tokenIndex
					if !_rules[rule_]() {
						goto l69
					}
					if !_rules[ruleInfraspGroup]() {
						goto l69
					}
					goto l70
				l69:
					position, tokenIndex = position69, tokenIndex69
				}
			l70:
				add(ruleGraftChimeraFormulaPart, position68)
			}
			return true
		l67:
			position, tokenIndex = position67, tokenIndex67
			return false
		},
		/* 12 NamedGenusGraftChimera <- <(GraftChimeraChar _? SingleName)> */
		func() bool {
			position71, tokenIndex71 := position, tokenIndex
			{
				position72 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l71
				}
				{
					position73, tokenIndex73 := position, tokenIndex
					if !_rules[rule_]() {
						goto l73
					}
					goto l74
				l73:
					position, tokenIndex = position73, tokenIndex73
				}
			l74:
				if !_rules[ruleSingleName]() {
					goto l71
				}
				add(ruleNamedGenusGraftChimera, position72)
			}
			return true
		l71:
			position, tokenIndex = position71, tokenIndex71
			return false
		},
		/* 13 CandidatusName <- <(Candidatus _ SingleName)> */
		func() bool {
			position75, tokenIndex75 := position, tokenIndex
			{
				position76 := position
				if !_rules[ruleCandidatus]() {
					goto l75
				}
				if !_rules[rule_]() {
					goto l75
				}
				if !_rules[ruleSingleName]() {
					goto l75
				}
				add(ruleCandidatusName, position76)
			}
			return true
		l75:
			position, tokenIndex = position75, tokenIndex75
			return false
		},
		/* 14 Candidatus <- <('C' 'a' 'n' 'd' 'i' 'd' 'a' 't' 'u' 's')> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if buffer[position] != rune('C') {
					goto l77
				}
				position++
				if buffer[position] != rune('a') {
					goto l77
				}
				position++
				if buffer[position] != rune('n') {
					goto l77
				}
				position++
				if buffer[position] != rune('d') {
					goto l77
				}
				position++
				if buffer[position] != rune('i') {
					goto l77
				}
				position++
				if buffer[position] != rune('d') {
					goto l77
				}
				position++
				if buffer[position] != rune('a') {
					goto l77
				}
				position++
				if buffer[position] != rune('t') {
					goto l77
				}
				position++
				if buffer[position] != rune('u') {
					goto l77
				}
				position++
				if buffer[position] != rune('s') {
					goto l77
				}
				position++
				add(ruleCandidatus, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 15 SingleName <- <(NameComp / NameApprox / NameSpecies / NameUninomial)> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				{
					position81, tokenIndex81 := position, tokenIndex
					if !_rules[ruleNameComp]() {
						goto l82
					}
					goto l81
				l82:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameApprox]() {
						goto l83
					}
					goto l81
				l83:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameSpecies]() {
						goto l84
					}
					goto l81
				l84:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameUninomial]() {
						goto l79
					}
				}
			l81:
				add(ruleSingleName, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 16 NameUninomial <- <((UninomialCombo / Uninomial) (_ CultivarWordGroup)?)> */
		func() bool {
			position85, tokenIndex85 := position, tokenIndex
			{
				position86 := position
				{
					position87, tokenIndex87 := position, tokenIndex
					if !_rules[ruleUninomialCombo]() {
						goto l88
					}
					goto l87
				l88:
					position, tokenIndex = position87, tokenIndex87
					if !_rules[ruleUninomial]() {
						goto l85
					}
				}
			l87:
				{
					position89, tokenIndex89 := position, tokenIndex
					if !_rules[rule_]() {
						goto l89
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l89
					}
					goto l90
				l89:
					position, tokenIndex = position89, tokenIndex89
				}
			l90:
				add(ruleNameUninomial, position86)
			}
			return true
		l85:
			position, tokenIndex = position85, tokenIndex85
			return false
		},
		/* 17 NameApprox <- <(GenusWord (_ SpeciesEpithet)? _ Approximation ApproxNameIgnored)> */
		func() bool {
			position91, tokenIndex91 := position, tokenIndex
			{
				position92 := position
				if !_rules[ruleGenusWord]() {
					goto l91
				}
				{
					position93, tokenIndex93 := position, tokenIndex
					if !_rules[rule_]() {
						goto l93
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l93
					}
					goto l94
				l93:
					position, tokenIndex = position93, tokenIndex93
				}
			l94:
				if !_rules[rule_]() {
					goto l91
				}
				if !_rules[ruleApproximation]() {
					goto l91
				}
				if !_rules[ruleApproxNameIgnored]() {
					goto l91
				}
				add(ruleNameApprox, position92)
			}
			return true
		l91:
			position, tokenIndex = position91, tokenIndex91
			return false
		},
		/* 18 NameComp <- <(GenusWord _ Comparison (_ SpeciesEpithet)?)> */
		func() bool {
			position95, tokenIndex95 := position, tokenIndex
			{
				position96 := position
				if !_rules[ruleGenusWord]() {
					goto l95
				}
				if !_rules[rule_]() {
					goto l95
				}
				if !_rules[ruleComparison]() {
					goto l95
				}
				{
					position97, tokenIndex97 := position, tokenIndex
					if !_rules[rule_]() {
						goto l97
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l97
					}
					goto l98
				l97:
					position, tokenIndex = position97, tokenIndex97
				}
			l98:
				add(ruleNameComp, position96)
			}
			return true
		l95:
			position, tokenIndex = position95, tokenIndex95
			return false
		},
		/* 19 NameSpecies <- <(GenusWord (_? (Subgenus / SubgenusOrSuperspecies))? _ SpeciesEpithet (_ InfraspGroup)? (_ CultivarWordGroup)?)> */
		func() bool {
			position99, tokenIndex99 := position, tokenIndex
			{
				position100 := position
				if !_rules[ruleGenusWord]() {
					goto l99
				}
				{
					position101, tokenIndex101 := position, tokenIndex
					{
						position103, tokenIndex103 := position, tokenIndex
						if !_rules[rule_]() {
							goto l103
						}
						goto l104
					l103:
						position, tokenIndex = position103, tokenIndex103
					}
				l104:
					{
						position105, tokenIndex105 := position, tokenIndex
						if !_rules[ruleSubgenus]() {
							goto l106
						}
						goto l105
					l106:
						position, tokenIndex = position105, tokenIndex105
						if !_rules[ruleSubgenusOrSuperspecies]() {
							goto l101
						}
					}
				l105:
					goto l102
				l101:
					position, tokenIndex = position101, tokenIndex101
				}
			l102:
				if !_rules[rule_]() {
					goto l99
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l99
				}
				{
					position107, tokenIndex107 := position, tokenIndex
					if !_rules[rule_]() {
						goto l107
					}
					if !_rules[ruleInfraspGroup]() {
						goto l107
					}
					goto l108
				l107:
					position, tokenIndex = position107, tokenIndex107
				}
			l108:
				{
					position109, tokenIndex109 := position, tokenIndex
					if !_rules[rule_]() {
						goto l109
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l109
					}
					goto l110
				l109:
					position, tokenIndex = position109, tokenIndex109
				}
			l110:
				add(ruleNameSpecies, position100)
			}
			return true
		l99:
			position, tokenIndex = position99, tokenIndex99
			return false
		},
		/* 20 GenusWord <- <((AbbrGenus / UninomialWord) !(_ AuthorWord))> */
		func() bool {
			position111, tokenIndex111 := position, tokenIndex
			{
				position112 := position
				{
					position113, tokenIndex113 := position, tokenIndex
					if !_rules[ruleAbbrGenus]() {
						goto l114
					}
					goto l113
				l114:
					position, tokenIndex = position113, tokenIndex113
					if !_rules[ruleUninomialWord]() {
						goto l111
					}
				}
			l113:
				{
					position115, tokenIndex115 := position, tokenIndex
					if !_rules[rule_]() {
						goto l115
					}
					if !_rules[ruleAuthorWord]() {
						goto l115
					}
					goto l111
				l115:
					position, tokenIndex = position115, tokenIndex115
				}
				add(ruleGenusWord, position112)
			}
			return true
		l111:
			position, tokenIndex = position111, tokenIndex111
			return false
		},
		/* 21 InfraspGroup <- <(InfraspEpithet (_ InfraspEpithet)? (_ InfraspEpithet)?)> */
		func() bool {
			position116, tokenIndex116 := position, tokenIndex
			{
				position117 := position
				if !_rules[ruleInfraspEpithet]() {
					goto l116
				}
				{
					position118, tokenIndex118 := position, tokenIndex
					if !_rules[rule_]() {
						goto l118
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l118
					}
					goto l119
				l118:
					position, tokenIndex = position118, tokenIndex118
				}
			l119:
				{
					position120, tokenIndex120 := position, tokenIndex
					if !_rules[rule_]() {
						goto l120
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l120
					}
					goto l121
				l120:
					position, tokenIndex = position120, tokenIndex120
				}
			l121:
				add(ruleInfraspGroup, position117)
			}
			return true
		l116:
			position, tokenIndex = position116, tokenIndex116
			return false
		},
		/* 22 InfraspEpithet <- <((Rank _?)? !AuthorEx Word (_ IgnoredWord)? (_? Authorship)?)> */
		func() bool {
			position122, tokenIndex122 := position, tokenIndex
			{
				position123 := position
				{
					position124, tokenIndex124 := position, tokenIndex
					if !_rules[ruleRank]() {
						goto l124
					}
					{
						position126, tokenIndex126 := position, tokenIndex
						if !_rules[rule_]() {
							goto l126
						}
						goto l127
					l126:
						position, tokenIndex = position126, tokenIndex126
					}
				l127:
					goto l125
				l124:
					position, tokenIndex = position124, tokenIndex124
				}
			l125:
				{
					position128, tokenIndex128 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l128
					}
					goto l122
				l128:
					position, tokenIndex = position128, tokenIndex128
				}
				if !_rules[ruleWord]() {
					goto l122
				}
				{
					position129, tokenIndex129 := position, tokenIndex
					if !_rules[rule_]() {
						goto l129
					}
					if !_rules[ruleIgnoredWord]() {
						goto l129
					}
					goto l130
				l129:
					position, tokenIndex = position129, tokenIndex129
				}
			l130:
				{
					position131, tokenIndex131 := position, tokenIndex
					{
						position133, tokenIndex133 := position, tokenIndex
						if !_rules[rule_]() {
							goto l133
						}
						goto l134
					l133:
						position, tokenIndex = position133, tokenIndex133
					}
				l134:
					if !_rules[ruleAuthorship]() {
						goto l131
					}
					goto l132
				l131:
					position, tokenIndex = position131, tokenIndex131
				}
			l132:
				add(ruleInfraspEpithet, position123)
			}
			return true
		l122:
			position, tokenIndex = position122, tokenIndex122
			return false
		},
		/* 23 CultivarWordGroup <- <(((RankCultivar _)? CultivarApostrophe CultivarRecursive CultivarApostrophe) / (RankCultivar _ Cultivar))> */
		func() bool {
			position135, tokenIndex135 := position, tokenIndex
			{
				position136 := position
				{
					position137, tokenIndex137 := position, tokenIndex
					{
						position139, tokenIndex139 := position, tokenIndex
						if !_rules[ruleRankCultivar]() {
							goto l139
						}
						if !_rules[rule_]() {
							goto l139
						}
						goto l140
					l139:
						position, tokenIndex = position139, tokenIndex139
					}
				l140:
					if !_rules[ruleCultivarApostrophe]() {
						goto l138
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l138
					}
					if !_rules[ruleCultivarApostrophe]() {
						goto l138
					}
					goto l137
				l138:
					position, tokenIndex = position137, tokenIndex137
					if !_rules[ruleRankCultivar]() {
						goto l135
					}
					if !_rules[rule_]() {
						goto l135
					}
					if !_rules[ruleCultivar]() {
						goto l135
					}
				}
			l137:
				add(ruleCultivarWordGroup, position136)
			}
			return true
		l135:
			position, tokenIndex = position135, tokenIndex135
			return false
		},
		/* 24 Cultivar <- <NotHybridChar+> */
		func() bool {
			position141, tokenIndex141 := position, tokenIndex
			{
				position142 := position
				if !_rules[ruleNotHybridChar]() {
					goto l141
				}
			l143:
				{
					position144, tokenIndex144 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l144
					}
					goto l143
				l144:
					position, tokenIndex = position144, tokenIndex144
				}
				add(ruleCultivar, position142)
			}
			return true
		l141:
			position, tokenIndex = position141, tokenIndex141
			return false
		},
		/* 25 RankCultivar <- <('c' 'v' '.'?)> */
		func() bool {
			position145, tokenIndex145 := position, tokenIndex
			{
				position146 := position
				if buffer[position] != rune('c') {
					goto l145
				}
				position++
				if buffer[position] != rune('v') {
					goto l145
				}
				position++
				{
					position147, tokenIndex147 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l147
					}
					position++
					goto l148
				l147:
					position, tokenIndex = position147, tokenIndex147
				}
			l148:
				add(ruleRankCultivar, position146)
			}
			return true
		l145:
			position, tokenIndex = position145, tokenIndex145
			return false
		},
		/* 26 NotHybridChar <- <(!(_ HybridChar) .)> */
		func() bool {
			position149, tokenIndex149 := position, tokenIndex
			{
				position150 := position
				{
					position151, tokenIndex151 := position, tokenIndex
					if !_rules[rule_]() {
						goto l151
					}
					if !_rules[ruleHybridChar]() {
						goto l151
					}
					goto l149
				l151:
					position, tokenIndex = position151, tokenIndex151
				}
				if !matchDot() {
					goto l149
				}
				add(ruleNotHybridChar, position150)
			}
			return true
		l149:
			position, tokenIndex = position149, tokenIndex149
			return false
		},
		/* 27 CultivarRecursive <- <((NotHybridChar CultivarRecursive) / &CultivarApostrophe)> */
		func() bool {
			position152, tokenIndex152 := position, tokenIndex
			{
				position153 := position
				{
					position154, tokenIndex154 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l155
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l155
					}
					goto l154
				l155:
					position, tokenIndex = position154, tokenIndex154
					{
						position156, tokenIndex156 := position, tokenIndex
						if !_rules[ruleCultivarApostrophe]() {
							goto l152
						}
						position, tokenIndex = position156, tokenIndex156
					}
				}
			l154:
				add(ruleCultivarRecursive, position153)
			}
			return true
		l152:
			position, tokenIndex = position152, tokenIndex152
			return false
		},
		/* 28 CultivarApostrophe <- <('\'' / '‘' / '’' / '"' / '“' / '”')> */
		func() bool {
			position157, tokenIndex157 := position, tokenIndex
			{
				position158 := position
				{
					position159, tokenIndex159 := position, tokenIndex
					if buffer[position] != rune('\'') {
						goto l160
					}
					position++
					goto l159
				l160:
					position, tokenIndex = position159, tokenIndex159
					if buffer[position] != rune('‘') {
						goto l161
					}
					position++
					goto l159
				l161:
					position, tokenIndex = position159, tokenIndex159
					if buffer[position] != rune('’') {
						goto l162
					}
					position++
					goto l159
				l162:
					position, tokenIndex = position159, tokenIndex159
					if buffer[position] != rune('"') {
						goto l163
					}
					position++
					goto l159
				l163:
					position, tokenIndex = position159, tokenIndex159
					if buffer[position] != rune('“') {
						goto l164
					}
					position++
					goto l159
				l164:
					position, tokenIndex = position159, tokenIndex159
					if buffer[position] != rune('”') {
						goto l157
					}
					position++
				}
			l159:
				add(ruleCultivarApostrophe, position158)
			}
			return true
		l157:
			position, tokenIndex = position157, tokenIndex157
			return false
		},
		/* 29 SpeciesEpithet <- <(!AuthorEx Word (_ IgnoredWord)? (_? Authorship)?)> */
		func() bool {
			position165, tokenIndex165 := position, tokenIndex
			{
				position166 := position
				{
					position167, tokenIndex167 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l167
					}
					goto l165
				l167:
					position, tokenIndex = position167, tokenIndex167
				}
				if !_rules[ruleWord]() {
					goto l165
				}
				{
					position168, tokenIndex168 := position, tokenIndex
					if !_rules[rule_]() {
						goto l168
					}
					if !_rules[ruleIgnoredWord]() {
						goto l168
					}
					goto l169
				l168:
					position, tokenIndex = position168, tokenIndex168
				}
			l169:
				{
					position170, tokenIndex170 := position, tokenIndex
					{
						position172, tokenIndex172 := position, tokenIndex
						if !_rules[rule_]() {
							goto l172
						}
						goto l173
					l172:
						position, tokenIndex = position172, tokenIndex172
					}
				l173:
					if !_rules[ruleAuthorship]() {
						goto l170
					}
					goto l171
				l170:
					position, tokenIndex = position170, tokenIndex170
				}
			l171:
				add(ruleSpeciesEpithet, position166)
			}
			return true
		l165:
			position, tokenIndex = position165, tokenIndex165
			return false
		},
		/* 30 IgnoredWord <- <(('m' 'i' 'h' 'i' '.') / ('m' 'i' 'h' 'i'))> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				{
					position176, tokenIndex176 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l177
					}
					position++
					if buffer[position] != rune('i') {
						goto l177
					}
					position++
					if buffer[position] != rune('h') {
						goto l177
					}
					position++
					if buffer[position] != rune('i') {
						goto l177
					}
					position++
					if buffer[position] != rune('.') {
						goto l177
					}
					position++
					goto l176
				l177:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('m') {
						goto l174
					}
					position++
					if buffer[position] != rune('i') {
						goto l174
					}
					position++
					if buffer[position] != rune('h') {
						goto l174
					}
					position++
					if buffer[position] != rune('i') {
						goto l174
					}
					position++
				}
			l176:
				add(ruleIgnoredWord, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 31 Comparison <- <('c' 'f' '.'? &SpaceCharEOI)> */
		func() bool {
			position178, tokenIndex178 := position, tokenIndex
			{
				position179 := position
				if buffer[position] != rune('c') {
					goto l178
				}
				position++
				if buffer[position] != rune('f') {
					goto l178
				}
				position++
				{
					position180, tokenIndex180 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l180
					}
					position++
					goto l181
				l180:
					position, tokenIndex = position180, tokenIndex180
				}
			l181:
				{
					position182, tokenIndex182 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l178
					}
					position, tokenIndex = position182, tokenIndex182
				}
				add(ruleComparison, position179)
			}
			return true
		l178:
			position, tokenIndex = position178, tokenIndex178
			return false
		},
		/* 32 Rank <- <((RankForma / RankVar / RankSsp / RankOther / RankOtherUncommon / RankAgamo / RankNotho) (_? LowerGreek ('.' / &SpaceCharEOI))?)> */
		func() bool {
			position183, tokenIndex183 := position, tokenIndex
			{
				position184 := position
				{
					position185, tokenIndex185 := position, tokenIndex
					if !_rules[ruleRankForma]() {
						goto l186
					}
					goto l185
				l186:
					position, tokenIndex = position185, tokenIndex185
					if !_rules[ruleRankVar]() {
						goto l187
					}
					goto l185
				l187:
					position, tokenIndex = position185, tokenIndex185
					if !_rules[ruleRankSsp]() {
						goto l188
					}
					goto l185
				l188:
					position, tokenIndex = position185, tokenIndex185
					if !_rules[ruleRankOther]() {
						goto l189
					}
					goto l185
				l189:
					position, tokenIndex = position185, tokenIndex185
					if !_rules[ruleRankOtherUncommon]() {
						goto l190
					}
					goto l185
				l190:
					position, tokenIndex = position185, tokenIndex185
					if !_rules[ruleRankAgamo]() {
						goto l191
					}
					goto l185
				l191:
					position, tokenIndex = position185, tokenIndex185
					if !_rules[ruleRankNotho]() {
						goto l183
					}
				}
			l185:
				{
					position192, tokenIndex192 := position, tokenIndex
					{
						position194, tokenIndex194 := position, tokenIndex
						if !_rules[rule_]() {
							goto l194
						}
						goto l195
					l194:
						position, tokenIndex = position194, tokenIndex194
					}
				l195:
					if !_rules[ruleLowerGreek]() {
						goto l192
					}
					{
						position196, tokenIndex196 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l197
						}
						position++
						goto l196
					l197:
						position, tokenIndex = position196, tokenIndex196
						{
							position198, tokenIndex198 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l192
							}
							position, tokenIndex = position198, tokenIndex198
						}
					}
				l196:
					goto l193
				l192:
					position, tokenIndex = position192, tokenIndex192
				}
			l193:
				add(ruleRank, position184)
			}
			return true
		l183:
			position, tokenIndex = position183, tokenIndex183
			return false
		},
		/* 33 RankNotho <- <((('n' 'o' 't' 'h' 'o' (('v' 'a' 'r') / ('f' 'o') / 'f' / ('s' 'u' 'b' 's' 'p') / ('s' 's' 'p') / ('s' 'p') / ('m' 'o' 'r' 't' 'h') / ('s' 'u' 'p' 's' 'p') / ('s' 'u'))) / ('n' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position199, tokenIndex199 := position, tokenIndex
			{
				position200 := position
				{
					position201, tokenIndex201 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l202
					}
					position++
					if buffer[position] != rune('o') {
						goto l202
					}
					position++
					if buffer[position] != rune('t') {
						goto l202
					}
					position++
					if buffer[position] != rune('h') {
						goto l202
					}
					position++
					if buffer[position] != rune('o') {
						goto l202
					}
					position++
					{
						position203, tokenIndex203 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l204
						}
						position++
						if buffer[position] != rune('a') {
							goto l204
						}
						position++
						if buffer[position] != rune('r') {
							goto l204
						}
						position++
						goto l203
					l204:
						position, tokenIndex = position203, tokenIndex203
						if buffer[position] != rune('f') {
							goto l205
						}
						position++
						if buffer[position] != rune('o') {
							goto l205
						}
						position++
						goto l203
					l205:
						position, tokenIndex = position203, tokenIndex203
						if buffer[position] != rune('f') {
							goto l206
						}
						position++
						goto l203
					l206:
						position, tokenIndex = position203, tokenIndex203
						if buffer[position] != rune('s') {
							goto l207
						}
						position++
						if buffer[position] != rune('u') {
							goto l207
						}
						position++
						if buffer[position] != rune('b') {
							goto l207
						}
						position++
						if buffer[position] != rune('s') {
							goto l207
						}
						position++
						if buffer[position] != rune('p') {
							goto l207
						}
						position++
						goto l203
					l207:
						position, tokenIndex = position203, tokenIndex203
						if buffer[position] != rune('s') {
							goto l208
						}
						position++
						if buffer[position] != rune('s') {
							goto l208
						}
						position++
						if buffer[position] != rune('p') {
							goto l208
						}
						position++
						goto l203
					l208:
						position, tokenIndex = position203, tokenIndex203
						if buffer[position] != rune('s') {
							goto l209
						}
						position++
						if buffer[position] != rune('p') {
							goto l209
						}
						position++
						goto l203
					l209:
						position, tokenIndex = position203, tokenIndex203
						if buffer[position] != rune('m') {
							goto l210
						}
						position++
						if buffer[position] != rune('o') {
							goto l210
						}
						position++
						if buffer[position] != rune('r') {
							goto l210
						}
						position++
						if buffer[position] != rune('t') {
							goto l210
						}
						position++
						if buffer[position] != rune('h') {
							goto l210
						}
						position++
						goto l203
					l210:
						position, tokenIndex = position203, tokenIndex203
						if buffer[position] != rune('s') {
							goto l211
						}
						position++
						if buffer[position] != rune('u') {
							goto l211
						}
						position++
						if buffer[position] != rune('p') {
							goto l211
						}
						position++
						if buffer[position] != rune('s') {
							goto l211
						}
						position++
						if buffer[position] != rune('p') {
							goto l211
						}
						position++
						goto l203
					l211:
						position, tokenIndex = position203, tokenIndex203
						if buffer[position] != rune('s') {
							goto l202
						}
						position++
						if buffer[position] != rune('u') {
							goto l202
						}
						position++
					}
				l203:
					goto l201
				l202:
					position, tokenIndex = position201, tokenIndex201
					if buffer[position] != rune('n') {
						goto l199
					}
					position++
					if buffer[position] != rune('v') {
						goto l199
					}
					position++
					if buffer[position] != rune('a') {
						goto l199
					}
					position++
					if buffer[position] != rune('r') {
						goto l199
					}
					position++
				}
			l201:
				{
					position212, tokenIndex212 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l213
					}
					position++
					goto l212
				l213:
					position, tokenIndex = position212, tokenIndex212
					{
						position214, tokenIndex214 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l199
						}
						position, tokenIndex = position214, tokenIndex214
					}
				}
			l212:
				add(ruleRankNotho, position200)
			}
			return true
		l199:
			position, tokenIndex = position199, tokenIndex199
			return false
		},
		/* 34 RankOtherUncommon <- <(('*' / ('n' 'a' 't' 'i' 'o') / ('n' 'a' 't' '.') / ('n' 'a' 't') / ('f' '.' 's' 'p') / 'α' / ('β' 'β') / 'β' / 'γ' / 'δ' / 'ε' / 'φ' / 'θ' / 'μ' / ('a' '.') / ('b' '.') / ('c' '.') / ('d' '.') / ('e' '.') / ('g' '.') / ('k' '.') / ('m' 'u' 't' '.')) &SpaceCharEOI)> */
		func() bool {
			position215, tokenIndex215 := position, tokenIndex
			{
				position216 := position
				{
					position217, tokenIndex217 := position, tokenIndex
					if buffer[position] != rune('*') {
						goto l218
					}
					position++
					goto l217
				l218:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('n') {
						goto l219
					}
					position++
					if buffer[position] != rune('a') {
						goto l219
					}
					position++
					if buffer[position] != rune('t') {
						goto l219
					}
					position++
					if buffer[position] != rune('i') {
						goto l219
					}
					position++
					if buffer[position] != rune('o') {
						goto l219
					}
					position++
					goto l217
				l219:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('n') {
						goto l220
					}
					position++
					if buffer[position] != rune('a') {
						goto l220
					}
					position++
					if buffer[position] != rune('t') {
						goto l220
					}
					position++
					if buffer[position] != rune('.') {
						goto l220
					}
					position++
					goto l217
				l220:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('n') {
						goto l221
					}
					position++
					if buffer[position] != rune('a') {
						goto l221
					}
					position++
					if buffer[position] != rune('t') {
						goto l221
					}
					position++
					goto l217
				l221:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('f') {
						goto l222
					}
					position++
					if buffer[position] != rune('.') {
						goto l222
					}
					position++
					if buffer[position] != rune('s') {
						goto l222
					}
					position++
					if buffer[position] != rune('p') {
						goto l222
					}
					position++
					goto l217
				l222:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('α') {
						goto l223
					}
					position++
					goto l217
				l223:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('β') {
						goto l224
					}
					position++
					if buffer[position] != rune('β') {
						goto l224
					}
					position++
					goto l217
				l224:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('β') {
						goto l225
					}
					position++
					goto l217
				l225:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('γ') {
						goto l226
					}
					position++
					goto l217
				l226:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('δ') {
						goto l227
					}
					position++
					goto l217
				l227:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('ε') {
						goto l228
					}
					position++
					goto l217
				l228:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('φ') {
						goto l229
					}
					position++
					goto l217
				l229:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('θ') {
						goto l230
					}
					position++
					goto l217
				l230:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('μ') {
						goto l231
					}
					position++
					goto l217
				l231:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('a') {
						goto l232
					}
					position++
					if buffer[position] != rune('.') {
						goto l232
					}
					position++
					goto l217
				l232:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('b') {
						goto l233
					}
					position++
					if buffer[position] != rune('.') {
						goto l233
					}
					position++
					goto l217
				l233:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('c') {
						goto l234
					}
					position++
					if buffer[position] != rune('.') {
						goto l234
					}
					position++
					goto l217
				l234:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('d') {
						goto l235
					}
					position++
					if buffer[position] != rune('.') {
						goto l235
					}
					position++
					goto l217
				l235:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('e') {
						goto l236
					}
					position++
					if buffer[position] != rune('.') {
						goto l236
					}
					position++
					goto l217
				l236:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('g') {
						goto l237
					}
					position++
					if buffer[position] != rune('.') {
						goto l237
					}
					position++
					goto l217
				l237:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('k') {
						goto l238
					}
					position++
					if buffer[position] != rune('.') {
						goto l238
					}
					position++
					goto l217
				l238:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('m') {
						goto l215
					}
					position++
					if buffer[position] != rune('u') {
						goto l215
					}
					position++
					if buffer[position] != rune('t') {
						goto l215
					}
					position++
					if buffer[position] != rune('.') {
						goto l215
					}
					position++
				}
			l217:
				{
					position239, tokenIndex239 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l215
					}
					position, tokenIndex = position239, tokenIndex239
				}
				add(ruleRankOtherUncommon, position216)
			}
			return true
		l215:
			position, tokenIndex = position215, tokenIndex215
			return false
		},
		/* 35 RankOther <- <((('m' 'o' 'r' 'p' 'h') / ('c' 'o' 'n' 'v' 'a' 'r') / ('p' 's' 'e' 'u' 'd' 'o' 'v' 'a' 'r') / ('s' 'e' 'c' 't') / ('s' 'e' 'r') / ('s' 'u' 'b' 'v' 'a' 'r') / ('s' 'u' 'b' 'f') / ('r' 'a' 'c' 'e') / ('p' 'v') / ('p' 'a' 't' 'h' 'o' 'v' 'a' 'r') / ('a' 'b' '.' (_? ('n' '.'))?) / ('s' 't')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position240, tokenIndex240 := position, tokenIndex
			{
				position241 := position
				{
					position242, tokenIndex242 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l243
					}
					position++
					if buffer[position] != rune('o') {
						goto l243
					}
					position++
					if buffer[position] != rune('r') {
						goto l243
					}
					position++
					if buffer[position] != rune('p') {
						goto l243
					}
					position++
					if buffer[position] != rune('h') {
						goto l243
					}
					position++
					goto l242
				l243:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('c') {
						goto l244
					}
					position++
					if buffer[position] != rune('o') {
						goto l244
					}
					position++
					if buffer[position] != rune('n') {
						goto l244
					}
					position++
					if buffer[position] != rune('v') {
						goto l244
					}
					position++
					if buffer[position] != rune('a') {
						goto l244
					}
					position++
					if buffer[position] != rune('r') {
						goto l244
					}
					position++
					goto l242
				l244:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('p') {
						goto l245
					}
					position++
					if buffer[position] != rune('s') {
						goto l245
					}
					position++
					if buffer[position] != rune('e') {
						goto l245
					}
					position++
					if buffer[position] != rune('u') {
						goto l245
					}
					position++
					if buffer[position] != rune('d') {
						goto l245
					}
					position++
					if buffer[position] != rune('o') {
						goto l245
					}
					position++
					if buffer[position] != rune('v') {
						goto l245
					}
					position++
					if buffer[position] != rune('a') {
						goto l245
					}
					position++
					if buffer[position] != rune('r') {
						goto l245
					}
					position++
					goto l242
				l245:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('s') {
						goto l246
					}
					position++
					if buffer[position] != rune('e') {
						goto l246
					}
					position++
					if buffer[position] != rune('c') {
						goto l246
					}
					position++
					if buffer[position] != rune('t') {
						goto l246
					}
					position++
					goto l242
				l246:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('s') {
						goto l247
					}
					position++
					if buffer[position] != rune('e') {
						goto l247
					}
					position++
					if buffer[position] != rune('r') {
						goto l247
					}
					position++
					goto l242
				l247:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('s') {
						goto l248
					}
					position++
					if buffer[position] != rune('u') {
						goto l248
					}
					position++
					if buffer[position] != rune('b') {
						goto l248
					}
					position++
					if buffer[position] != rune('v') {
						goto l248
					}
					position++
					if buffer[position] != rune('a') {
						goto l248
					}
					position++
					if buffer[position] != rune('r') {
						goto l248
					}
					position++
					goto l242
				l248:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('s') {
						goto l249
					}
					position++
					if buffer[position] != rune('u') {
						goto l249
					}
					position++
					if buffer[position] != rune('b') {
						goto l249
					}
					position++
					if buffer[position] != rune('f') {
						goto l249
					}
					position++
					goto l242
				l249:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('r') {
						goto l250
					}
					position++
					if buffer[position] != rune('a') {
						goto l250
					}
					position++
					if buffer[position] != rune('c') {
						goto l250
					}
					position++
					if buffer[position] != rune('e') {
						goto l250
					}
					position++
					goto l242
				l250:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('p') {
						goto l251
					}
					position++
					if buffer[position] != rune('v') {
						goto l251
					}
					position++
					goto l242
				l251:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('p') {
						goto l252
					}
					position++
					if buffer[position] != rune('a') {
						goto l252
					}
					position++
					if buffer[position] != rune('t') {
						goto l252
					}
					position++
					if buffer[position] != rune('h') {
						goto l252
					}
					position++
					if buffer[position] != rune('o') {
						goto l252
					}
					position++
					if buffer[position] != rune('v') {
						goto l252
					}
					position++
					if buffer[position] != rune('a') {
						goto l252
					}
					position++
					if buffer[position] != rune('r') {
						goto l252
					}
					position++
					goto l242
				l252:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('a') {
						goto l253
					}
					position++
					if buffer[position] != rune('b') {
						goto l253
					}
					position++
					if buffer[position] != rune('.') {
						goto l253
					}
					position++
					{
						position254, tokenIndex254 := position, tokenIndex
						{
							position256, tokenIndex256 := position, tokenIndex
							if !_rules[rule_]() {
								goto l256
							}
							goto l257
						l256:
							position, tokenIndex = position256, tokenIndex256
						}
					l257:
						if buffer[position] != rune('n') {
							goto l254
						}
						position++
						if buffer[position] != rune('.') {
							goto l254
						}
						position++
						goto l255
					l254:
						position, tokenIndex = position254, tokenIndex254
					}
				l255:
					goto l242
				l253:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('s') {
						goto l240
					}
					position++
					if buffer[position] != rune('t') {
						goto l240
					}
					position++
				}
			l242:
				{
					position258, tokenIndex258 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l259
					}
					position++
					goto l258
				l259:
					position, tokenIndex = position258, tokenIndex258
					{
						position260, tokenIndex260 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l240
						}
						position, tokenIndex = position260, tokenIndex260
					}
				}
			l258:
				add(ruleRankOther, position241)
			}
			return true
		l240:
			position, tokenIndex = position240, tokenIndex240
			return false
		},
		/* 36 RankVar <- <((('v' 'a' 'r' 'i' 'e' 't' 'y') / ('[' 'v' 'a' 'r' '.' ']') / ('v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position261, tokenIndex261 := position, tokenIndex
			{
				position262 := position
				{
					position263, tokenIndex263 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l264
					}
					position++
					if buffer[position] != rune('a') {
						goto l264
					}
					position++
					if buffer[position] != rune('r') {
						goto l264
					}
					position++
					if buffer[position] != rune('i') {
						goto l264
					}
					position++
					if buffer[position] != rune('e') {
						goto l264
					}
					position++
					if buffer[position] != rune('t') {
						goto l264
					}
					position++
					if buffer[position] != rune('y') {
						goto l264
					}
					position++
					goto l263
				l264:
					position, tokenIndex = position263, tokenIndex263
					if buffer[position] != rune('[') {
						goto l265
					}
					position++
					if buffer[position] != rune('v') {
						goto l265
					}
					position++
					if buffer[position] != rune('a') {
						goto l265
					}
					position++
					if buffer[position] != rune('r') {
						goto l265
					}
					position++
					if buffer[position] != rune('.') {
						goto l265
					}
					position++
					if buffer[position] != rune(']') {
						goto l265
					}
					position++
					goto l263
				l265:
					position, tokenIndex = position263, tokenIndex263
					if buffer[position] != rune('v') {
						goto l261
					}
					position++
					if buffer[position] != rune('a') {
						goto l261
					}
					position++
					if buffer[position] != rune('r') {
						goto l261
					}
					position++
				}
			l263:
				{
					position266, tokenIndex266 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l267
					}
					position++
					goto l266
				l267:
					position, tokenIndex = position266, tokenIndex266
					{
						position268, tokenIndex268 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l261
						}
						position, tokenIndex = position268, tokenIndex268
					}
				}
			l266:
				add(ruleRankVar, position262)
			}
			return true
		l261:
			position, tokenIndex = position261, tokenIndex261
			return false
		},
		/* 37 RankForma <- <((('f' 'o' 'r' 'm' 'a') / ('f' 'm' 'a') / ('f' 'm') / ('f' 'o' 'r' 'm') / ('f' 'o') / 'f') ('.' / &SpaceCharEOI))> */
		func() bool {
			position269, tokenIndex269 := position, tokenIndex
			{
				position270 := position
				{
					position271, tokenIndex271 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l272
					}
					position++
					if buffer[position] != rune('o') {
						goto l272
					}
					position++
					if buffer[position] != rune('r') {
						goto l272
					}
					position++
					if buffer[position] != rune('m') {
						goto l272
					}
					position++
					if buffer[position] != rune('a') {
						goto l272
					}
					position++
					goto l271
				l272:
					position, tokenIndex = position271, tokenIndex271
					if buffer[position] != rune('f') {
						goto l273
					}
					position++
					if buffer[position] != rune('m') {
						goto l273
					}
					position++
					if buffer[position] != rune('a') {
						goto l273
					}
					position++
					goto l271
				l273:
					position, tokenIndex = position271, tokenIndex271
					if buffer[position] != rune('f') {
						goto l274
					}
					position++
					if buffer[position] != rune('m') {
						goto l274
					}
					position++
					goto l271
				l274:
					position, tokenIndex = position271, tokenIndex271
					if buffer[position] != rune('f') {
						goto l275
					}
					position++
					if buffer[position] != rune('o') {
						goto l275
					}
					position++
					if buffer[position] != rune('r') {
						goto l275
					}
					position++
					if buffer[position] != rune('m') {
						goto l275
					}
					position++
					goto l271
				l275:
					position, tokenIndex = position271, tokenIndex271
					if buffer[position] != rune('f') {
						goto l276
					}
					position++
					if buffer[position] != rune('o') {
						goto l276
					}
					position++
					goto l271
				l276:
					position, tokenIndex = position271, tokenIndex271
					if buffer[position] != rune('f') {
						goto l269
					}
					position++
				}
			l271:
				{
					position277, tokenIndex277 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l278
					}
					position++
					goto l277
				l278:
					position, tokenIndex = position277, tokenIndex277
					{
						position279, tokenIndex279 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l269
						}
						position, tokenIndex = position279, tokenIndex279
					}
				}
			l277:
				add(ruleRankForma, position270)
			}
			return true
		l269:
			position, tokenIndex = position269, tokenIndex269
			return false
		},
		/* 38 RankSsp <- <((('s' 's' 'p') / ('s' 'u' 'b' 's' 'p' 'e' 'c') / ('s' 'u' 'b' 's' 'p')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position280, tokenIndex280 := position, tokenIndex
			{
				position281 := position
				{
					position282, tokenIndex282 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l283
					}
					position++
					if buffer[position] != rune('s') {
						goto l283
					}
					position++
					if buffer[position] != rune('p') {
						goto l283
					}
					position++
					goto l282
				l283:
					position, tokenIndex = position282, tokenIndex282
					if buffer[position] != rune('s') {
						goto l284
					}
					position++
					if buffer[position] != rune('u') {
						goto l284
					}
					position++
					if buffer[position] != rune('b') {
						goto l284
					}
					position++
					if buffer[position] != rune('s') {
						goto l284
					}
					position++
					if buffer[position] != rune('p') {
						goto l284
					}
					position++
					if buffer[position] != rune('e') {
						goto l284
					}
					position++
					if buffer[position] != rune('c') {
						goto l284
					}
					position++
					goto l282
				l284:
					position, tokenIndex = position282, tokenIndex282
					if buffer[position] != rune('s') {
						goto l280
					}
					position++
					if buffer[position] != rune('u') {
						goto l280
					}
					position++
					if buffer[position] != rune('b') {
						goto l280
					}
					position++
					if buffer[position] != rune('s') {
						goto l280
					}
					position++
					if buffer[position] != rune('p') {
						goto l280
					}
					position++
				}
			l282:
				{
					position285, tokenIndex285 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l286
					}
					position++
					goto l285
				l286:
					position, tokenIndex = position285, tokenIndex285
					{
						position287, tokenIndex287 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l280
						}
						position, tokenIndex = position287, tokenIndex287
					}
				}
			l285:
				add(ruleRankSsp, position281)
			}
			return true
		l280:
			position, tokenIndex = position280, tokenIndex280
			return false
		},
		/* 39 RankAgamo <- <((('a' 'g' 'a' 'm' 'o' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 's' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position288, tokenIndex288 := position, tokenIndex
			{
				position289 := position
				{
					position290, tokenIndex290 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l291
					}
					position++
					if buffer[position] != rune('g') {
						goto l291
					}
					position++
					if buffer[position] != rune('a') {
						goto l291
					}
					position++
					if buffer[position] != rune('m') {
						goto l291
					}
					position++
					if buffer[position] != rune('o') {
						goto l291
					}
					position++
					if buffer[position] != rune('s') {
						goto l291
					}
					position++
					if buffer[position] != rune('p') {
						goto l291
					}
					position++
					goto l290
				l291:
					position, tokenIndex = position290, tokenIndex290
					if buffer[position] != rune('a') {
						goto l292
					}
					position++
					if buffer[position] != rune('g') {
						goto l292
					}
					position++
					if buffer[position] != rune('a') {
						goto l292
					}
					position++
					if buffer[position] != rune('m') {
						goto l292
					}
					position++
					if buffer[position] != rune('o') {
						goto l292
					}
					position++
					if buffer[position] != rune('s') {
						goto l292
					}
					position++
					if buffer[position] != rune('s') {
						goto l292
					}
					position++
					if buffer[position] != rune('p') {
						goto l292
					}
					position++
					goto l290
				l292:
					position, tokenIndex = position290, tokenIndex290
					if buffer[position] != rune('a') {
						goto l288
					}
					position++
					if buffer[position] != rune('g') {
						goto l288
					}
					position++
					if buffer[position] != rune('a') {
						goto l288
					}
					position++
					if buffer[position] != rune('m') {
						goto l288
					}
					position++
					if buffer[position] != rune('o') {
						goto l288
					}
					position++
					if buffer[position] != rune('v') {
						goto l288
					}
					position++
					if buffer[position] != rune('a') {
						goto l288
					}
					position++
					if buffer[position] != rune('r') {
						goto l288
					}
					position++
				}
			l290:
				{
					position293, tokenIndex293 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l294
					}
					position++
					goto l293
				l294:
					position, tokenIndex = position293, tokenIndex293
					{
						position295, tokenIndex295 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l288
						}
						position, tokenIndex = position295, tokenIndex295
					}
				}
			l293:
				add(ruleRankAgamo, position289)
			}
			return true
		l288:
			position, tokenIndex = position288, tokenIndex288
			return false
		},
		/* 40 SubgenusOrSuperspecies <- <('(' _? NameLowerChar+ _? ')')> */
		func() bool {
			position296, tokenIndex296 := position, tokenIndex
			{
				position297 := position
				if buffer[position] != rune('(') {
					goto l296
				}
				position++
				{
					position298, tokenIndex298 := position, tokenIndex
					if !_rules[rule_]() {
						goto l298
					}
					goto l299
				l298:
					position, tokenIndex = position298, tokenIndex298
				}
			l299:
				if !_rules[ruleNameLowerChar]() {
					goto l296
				}
			l300:
				{
					position301, tokenIndex301 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l301
					}
					goto l300
				l301:
					position, tokenIndex = position301, tokenIndex301
				}
				{
					position302, tokenIndex302 := position, tokenIndex
					if !_rules[rule_]() {
						goto l302
					}
					goto l303
				l302:
					position, tokenIndex = position302, tokenIndex302
				}
			l303:
				if buffer[position] != rune(')') {
					goto l296
				}
				position++
				add(ruleSubgenusOrSuperspecies, position297)
			}
			return true
		l296:
			position, tokenIndex = position296, tokenIndex296
			return false
		},
		/* 41 Subgenus <- <(Subgenus2 / Subgenus1)> */
		func() bool {
			position304, tokenIndex304 := position, tokenIndex
			{
				position305 := position
				{
					position306, tokenIndex306 := position, tokenIndex
					if !_rules[ruleSubgenus2]() {
						goto l307
					}
					goto l306
				l307:
					position, tokenIndex = position306, tokenIndex306
					if !_rules[ruleSubgenus1]() {
						goto l304
					}
				}
			l306:
				add(ruleSubgenus, position305)
			}
			return true
		l304:
			position, tokenIndex = position304, tokenIndex304
			return false
		},
		/* 42 Subgenus2 <- <('(' _? AbbrSubgenus _? ')' !(_? NameUpperChar))> */
		func() bool {
			position308, tokenIndex308 := position, tokenIndex
			{
				position309 := position
				if buffer[position] != rune('(') {
					goto l308
				}
				position++
				{
					position310, tokenIndex310 := position, tokenIndex
					if !_rules[rule_]() {
						goto l310
					}
					goto l311
				l310:
					position, tokenIndex = position310, tokenIndex310
				}
			l311:
				if !_rules[ruleAbbrSubgenus]() {
					goto l308
				}
				{
					position312, tokenIndex312 := position, tokenIndex
					if !_rules[rule_]() {
						goto l312
					}
					goto l313
				l312:
					position, tokenIndex = position312, tokenIndex312
				}
			l313:
				if buffer[position] != rune(')') {
					goto l308
				}
				position++
				{
					position314, tokenIndex314 := position, tokenIndex
					{
						position315, tokenIndex315 := position, tokenIndex
						if !_rules[rule_]() {
							goto l315
						}
						goto l316
					l315:
						position, tokenIndex = position315, tokenIndex315
					}
				l316:
					if !_rules[ruleNameUpperChar]() {
						goto l314
					}
					goto l308
				l314:
					position, tokenIndex = position314, tokenIndex314
				}
				add(ruleSubgenus2, position309)
			}
			return true
		l308:
			position, tokenIndex = position308, tokenIndex308
			return false
		},
		/* 43 Subgenus1 <- <('(' _? UninomialWord _? ')')> */
		func() bool {
			position317, tokenIndex317 := position, tokenIndex
			{
				position318 := position
				if buffer[position] != rune('(') {
					goto l317
				}
				position++
				{
					position319, tokenIndex319 := position, tokenIndex
					if !_rules[rule_]() {
						goto l319
					}
					goto l320
				l319:
					position, tokenIndex = position319, tokenIndex319
				}
			l320:
				if !_rules[ruleUninomialWord]() {
					goto l317
				}
				{
					position321, tokenIndex321 := position, tokenIndex
					if !_rules[rule_]() {
						goto l321
					}
					goto l322
				l321:
					position, tokenIndex = position321, tokenIndex321
				}
			l322:
				if buffer[position] != rune(')') {
					goto l317
				}
				position++
				add(ruleSubgenus1, position318)
			}
			return true
		l317:
			position, tokenIndex = position317, tokenIndex317
			return false
		},
		/* 44 UninomialCombo <- <(UninomialCombo1 / UninomialCombo2)> */
		func() bool {
			position323, tokenIndex323 := position, tokenIndex
			{
				position324 := position
				{
					position325, tokenIndex325 := position, tokenIndex
					if !_rules[ruleUninomialCombo1]() {
						goto l326
					}
					goto l325
				l326:
					position, tokenIndex = position325, tokenIndex325
					if !_rules[ruleUninomialCombo2]() {
						goto l323
					}
				}
			l325:
				add(ruleUninomialCombo, position324)
			}
			return true
		l323:
			position, tokenIndex = position323, tokenIndex323
			return false
		},
		/* 45 UninomialCombo1 <- <(UninomialWord _? Subgenus (_? Authorship)?)> */
		func() bool {
			position327, tokenIndex327 := position, tokenIndex
			{
				position328 := position
				if !_rules[ruleUninomialWord]() {
					goto l327
				}
				{
					position329, tokenIndex329 := position, tokenIndex
					if !_rules[rule_]() {
						goto l329
					}
					goto l330
				l329:
					position, tokenIndex = position329, tokenIndex329
				}
			l330:
				if !_rules[ruleSubgenus]() {
					goto l327
				}
				{
					position331, tokenIndex331 := position, tokenIndex
					{
						position333, tokenIndex333 := position, tokenIndex
						if !_rules[rule_]() {
							goto l333
						}
						goto l334
					l333:
						position, tokenIndex = position333, tokenIndex333
					}
				l334:
					if !_rules[ruleAuthorship]() {
						goto l331
					}
					goto l332
				l331:
					position, tokenIndex = position331, tokenIndex331
				}
			l332:
				add(ruleUninomialCombo1, position328)
			}
			return true
		l327:
			position, tokenIndex = position327, tokenIndex327
			return false
		},
		/* 46 UninomialCombo2 <- <(Uninomial _ RankUninomial _ Uninomial)> */
		func() bool {
			position335, tokenIndex335 := position, tokenIndex
			{
				position336 := position
				if !_rules[ruleUninomial]() {
					goto l335
				}
				if !_rules[rule_]() {
					goto l335
				}
				if !_rules[ruleRankUninomial]() {
					goto l335
				}
				if !_rules[rule_]() {
					goto l335
				}
				if !_rules[ruleUninomial]() {
					goto l335
				}
				add(ruleUninomialCombo2, position336)
			}
			return true
		l335:
			position, tokenIndex = position335, tokenIndex335
			return false
		},
		/* 47 RankUninomial <- <(RankUninomialPlain / RankUninomialNotho)> */
		func() bool {
			position337, tokenIndex337 := position, tokenIndex
			{
				position338 := position
				{
					position339, tokenIndex339 := position, tokenIndex
					if !_rules[ruleRankUninomialPlain]() {
						goto l340
					}
					goto l339
				l340:
					position, tokenIndex = position339, tokenIndex339
					if !_rules[ruleRankUninomialNotho]() {
						goto l337
					}
				}
			l339:
				add(ruleRankUninomial, position338)
			}
			return true
		l337:
			position, tokenIndex = position337, tokenIndex337
			return false
		},
		/* 48 RankUninomialPlain <- <((('s' 'e' 'c' 't') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('t' 'r' 'i' 'b') / ('t' 'r') / ('s' 'u' 'b' 't' 'r' 'i' 'b') / ('s' 'u' 'b' 't' 'r') / ('s' 'u' 'b' 's' 'e' 'r') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('f' 'a' 'm') / ('s' 'u' 'b' 'f' 'a' 'm') / ('d' 'i' 'v') / ('s' 'u' 'p' 'e' 'r' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position341, tokenIndex341 := position, tokenIndex
			{
				position342 := position
				{
					position343, tokenIndex343 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l344
					}
					position++
					if buffer[position] != rune('e') {
						goto l344
					}
					position++
					if buffer[position] != rune('c') {
						goto l344
					}
					position++
					if buffer[position] != rune('t') {
						goto l344
					}
					position++
					goto l343
				l344:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('s') {
						goto l345
					}
					position++
					if buffer[position] != rune('u') {
						goto l345
					}
					position++
					if buffer[position] != rune('b') {
						goto l345
					}
					position++
					if buffer[position] != rune('s') {
						goto l345
					}
					position++
					if buffer[position] != rune('e') {
						goto l345
					}
					position++
					if buffer[position] != rune('c') {
						goto l345
					}
					position++
					if buffer[position] != rune('t') {
						goto l345
					}
					position++
					goto l343
				l345:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('t') {
						goto l346
					}
					position++
					if buffer[position] != rune('r') {
						goto l346
					}
					position++
					if buffer[position] != rune('i') {
						goto l346
					}
					position++
					if buffer[position] != rune('b') {
						goto l346
					}
					position++
					goto l343
				l346:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('t') {
						goto l347
					}
					position++
					if buffer[position] != rune('r') {
						goto l347
					}
					position++
					goto l343
				l347:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('s') {
						goto l348
					}
					position++
					if buffer[position] != rune('u') {
						goto l348
					}
					position++
					if buffer[position] != rune('b') {
						goto l348
					}
					position++
					if buffer[position] != rune('t') {
						goto l348
					}
					position++
					if buffer[position] != rune('r') {
						goto l348
					}
					position++
					if buffer[position] != rune('i') {
						goto l348
					}
					position++
					if buffer[position] != rune('b') {
						goto l348
					}
					position++
					goto l343
				l348:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('s') {
						goto l349
					}
					position++
					if buffer[position] != rune('u') {
						goto l349
					}
					position++
					if buffer[position] != rune('b') {
						goto l349
					}
					position++
					if buffer[position] != rune('t') {
						goto l349
					}
					position++
					if buffer[position] != rune('r') {
						goto l349
					}
					position++
					goto l343
				l349:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('s') {
						goto l350
					}
					position++
					if buffer[position] != rune('u') {
						goto l350
					}
					position++
					if buffer[position] != rune('b') {
						goto l350
					}
					position++
					if buffer[position] != rune('s') {
						goto l350
					}
					position++
					if buffer[position] != rune('e') {
						goto l350
					}
					position++
					if buffer[position] != rune('r') {
						goto l350
					}
					position++
					goto l343
				l350:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('s') {
						goto l351
					}
					position++
					if buffer[position] != rune('e') {
						goto l351
					}
					position++
					if buffer[position] != rune('r') {
						goto l351
					}
					position++
					goto l343
				l351:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('s') {
						goto l352
					}
					position++
					if buffer[position] != rune('u') {
						goto l352
					}
					position++
					if buffer[position] != rune('b') {
						goto l352
					}
					position++
					if buffer[position] != rune('g') {
						goto l352
					}
					position++
					if buffer[position] != rune('e') {
						goto l352
					}
					position++
					if buffer[position] != rune('n') {
						goto l352
					}
					position++
					goto l343
				l352:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('s') {
						goto l353
					}
					position++
					if buffer[position] != rune('u') {
						goto l353
					}
					position++
					if buffer[position] != rune('b') {
						goto l353
					}
					position++
					if buffer[position] != rune('g') {
						goto l353
					}
					position++
					goto l343
				l353:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('f') {
						goto l354
					}
					position++
					if buffer[position] != rune('a') {
						goto l354
					}
					position++
					if buffer[position] != rune('m') {
						goto l354
					}
					position++
					goto l343
				l354:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('s') {
						goto l355
					}
					position++
					if buffer[position] != rune('u') {
						goto l355
					}
					position++
					if buffer[position] != rune('b') {
						goto l355
					}
					position++
					if buffer[position] != rune('f') {
						goto l355
					}
					position++
					if buffer[position] != rune('a') {
						goto l355
					}
					position++
					if buffer[position] != rune('m') {
						goto l355
					}
					position++
					goto l343
				l355:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('d') {
						goto l356
					}
					position++
					if buffer[position] != rune('i') {
						goto l356
					}
					position++
					if buffer[position] != rune('v') {
						goto l356
					}
					position++
					goto l343
				l356:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('s') {
						goto l341
					}
					position++
					if buffer[position] != rune('u') {
						goto l341
					}
					position++
					if buffer[position] != rune('p') {
						goto l341
					}
					position++
					if buffer[position] != rune('e') {
						goto l341
					}
					position++
					if buffer[position] != rune('r') {
						goto l341
					}
					position++
					if buffer[position] != rune('t') {
						goto l341
					}
					position++
					if buffer[position] != rune('r') {
						goto l341
					}
					position++
					if buffer[position] != rune('i') {
						goto l341
					}
					position++
					if buffer[position] != rune('b') {
						goto l341
					}
					position++
				}
			l343:
				{
					position357, tokenIndex357 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l358
					}
					position++
					goto l357
				l358:
					position, tokenIndex = position357, tokenIndex357
					{
						position359, tokenIndex359 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l341
						}
						position, tokenIndex = position359, tokenIndex359
					}
				}
			l357:
				add(ruleRankUninomialPlain, position342)
			}
			return true
		l341:
			position, tokenIndex = position341, tokenIndex341
			return false
		},
		/* 49 RankUninomialNotho <- <('n' 'o' 't' 'h' 'o' _? (('s' 'e' 'c' 't') / ('g' 'e' 'n') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'e' 'n') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('s' 'u' 'b' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position360, tokenIndex360 := position, tokenIndex
			{
				position361 := position
				if buffer[position] != rune('n') {
					goto l360
				}
				position++
				if buffer[position] != rune('o') {
					goto l360
				}
				position++
				if buffer[position] != rune('t') {
					goto l360
				}
				position++
				if buffer[position] != rune('h') {
					goto l360
				}
				position++
				if buffer[position] != rune('o') {
					goto l360
				}
				position++
				{
					position362, tokenIndex362 := position, tokenIndex
					if !_rules[rule_]() {
						goto l362
					}
					goto l363
				l362:
					position, tokenIndex = position362, tokenIndex362
				}
			l363:
				{
					position364, tokenIndex364 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l365
					}
					position++
					if buffer[position] != rune('e') {
						goto l365
					}
					position++
					if buffer[position] != rune('c') {
						goto l365
					}
					position++
					if buffer[position] != rune('t') {
						goto l365
					}
					position++
					goto l364
				l365:
					position, tokenIndex = position364, tokenIndex364
					if buffer[position] != rune('g') {
						goto l366
					}
					position++
					if buffer[position] != rune('e') {
						goto l366
					}
					position++
					if buffer[position] != rune('n') {
						goto l366
					}
					position++
					goto l364
				l366:
					position, tokenIndex = position364, tokenIndex364
					if buffer[position] != rune('s') {
						goto l367
					}
					position++
					if buffer[position] != rune('e') {
						goto l367
					}
					position++
					if buffer[position] != rune('r') {
						goto l367
					}
					position++
					goto l364
				l367:
					position, tokenIndex = position364, tokenIndex364
					if buffer[position] != rune('s') {
						goto l368
					}
					position++
					if buffer[position] != rune('u') {
						goto l368
					}
					position++
					if buffer[position] != rune('b') {
						goto l368
					}
					position++
					if buffer[position] != rune('g') {
						goto l368
					}
					position++
					if buffer[position] != rune('e') {
						goto l368
					}
					position++
					if buffer[position] != rune('e') {
						goto l368
					}
					position++
					if buffer[position] != rune('n') {
						goto l368
					}
					position++
					goto l364
				l368:
					position, tokenIndex = position364, tokenIndex364
					if buffer[position] != rune('s') {
						goto l369
					}
					position++
					if buffer[position] != rune('u') {
						goto l369
					}
					position++
					if buffer[position] != rune('b') {
						goto l369
					}
					position++
					if buffer[position] != rune('g') {
						goto l369
					}
					position++
					if buffer[position] != rune('e') {
						goto l369
					}
					position++
					if buffer[position] != rune('n') {
						goto l369
					}
					position++
					goto l364
				l369:
					position, tokenIndex = position364, tokenIndex364
					if buffer[position] != rune('s') {
						goto l370
					}
					position++
					if buffer[position] != rune('u') {
						goto l370
					}
					position++
					if buffer[position] != rune('b') {
						goto l370
					}
					position++
					if buffer[position] != rune('g') {
						goto l370
					}
					position++
					goto l364
				l370:
					position, tokenIndex = position364, tokenIndex364
					if buffer[position] != rune('s') {
						goto l371
					}
					position++
					if buffer[position] != rune('u') {
						goto l371
					}
					position++
					if buffer[position] != rune('b') {
						goto l371
					}
					position++
					if buffer[position] != rune('s') {
						goto l371
					}
					position++
					if buffer[position] != rune('e') {
						goto l371
					}
					position++
					if buffer[position] != rune('c') {
						goto l371
					}
					position++
					if buffer[position] != rune('t') {
						goto l371
					}
					position++
					goto l364
				l371:
					position, tokenIndex = position364, tokenIndex364
					if buffer[position] != rune('s') {
						goto l360
					}
					position++
					if buffer[position] != rune('u') {
						goto l360
					}
					position++
					if buffer[position] != rune('b') {
						goto l360
					}
					position++
					if buffer[position] != rune('t') {
						goto l360
					}
					position++
					if buffer[position] != rune('r') {
						goto l360
					}
					position++
					if buffer[position] != rune('i') {
						goto l360
					}
					position++
					if buffer[position] != rune('b') {
						goto l360
					}
					position++
				}
			l364:
				{
					position372, tokenIndex372 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l373
					}
					position++
					goto l372
				l373:
					position, tokenIndex = position372, tokenIndex372
					{
						position374, tokenIndex374 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l360
						}
						position, tokenIndex = position374, tokenIndex374
					}
				}
			l372:
				add(ruleRankUninomialNotho, position361)
			}
			return true
		l360:
			position, tokenIndex = position360, tokenIndex360
			return false
		},
		/* 50 Uninomial <- <(UninomialWord (_ Authorship !(_ LowerCharExtended LowerCharExtended LowerCharExtended))?)> */
		func() bool {
			position375, tokenIndex375 := position, tokenIndex
			{
				position376 := position
				if !_rules[ruleUninomialWord]() {
					goto l375
				}
				{
					position377, tokenIndex377 := position, tokenIndex
					if !_rules[rule_]() {
						goto l377
					}
					if !_rules[ruleAuthorship]() {
						goto l377
					}
					{
						position379, tokenIndex379 := position, tokenIndex
						if !_rules[rule_]() {
							goto l379
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l379
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l379
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l379
						}
						goto l377
					l379:
						position, tokenIndex = position379, tokenIndex379
					}
					goto l378
				l377:
					position, tokenIndex = position377, tokenIndex377
				}
			l378:
				add(ruleUninomial, position376)
			}
			return true
		l375:
			position, tokenIndex = position375, tokenIndex375
			return false
		},
		/* 51 UninomialWord <- <(CapWord / TwoLetterGenus)> */
		func() bool {
			position380, tokenIndex380 := position, tokenIndex
			{
				position381 := position
				{
					position382, tokenIndex382 := position, tokenIndex
					if !_rules[ruleCapWord]() {
						goto l383
					}
					goto l382
				l383:
					position, tokenIndex = position382, tokenIndex382
					if !_rules[ruleTwoLetterGenus]() {
						goto l380
					}
				}
			l382:
				add(ruleUninomialWord, position381)
			}
			return true
		l380:
			position, tokenIndex = position380, tokenIndex380
			return false
		},
		/* 52 AbbrSubgenus <- <(UpperChar LowerChar* '.')> */
		func() bool {
			position384, tokenIndex384 := position, tokenIndex
			{
				position385 := position
				if !_rules[ruleUpperChar]() {
					goto l384
				}
			l386:
				{
					position387, tokenIndex387 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l387
					}
					goto l386
				l387:
					position, tokenIndex = position387, tokenIndex387
				}
				if buffer[position] != rune('.') {
					goto l384
				}
				position++
				add(ruleAbbrSubgenus, position385)
			}
			return true
		l384:
			position, tokenIndex = position384, tokenIndex384
			return false
		},
		/* 53 AbbrGenus <- <(UpperChar LowerChar? '.')> */
		func() bool {
			position388, tokenIndex388 := position, tokenIndex
			{
				position389 := position
				if !_rules[ruleUpperChar]() {
					goto l388
				}
				{
					position390, tokenIndex390 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l390
					}
					goto l391
				l390:
					position, tokenIndex = position390, tokenIndex390
				}
			l391:
				if buffer[position] != rune('.') {
					goto l388
				}
				position++
				add(ruleAbbrGenus, position389)
			}
			return true
		l388:
			position, tokenIndex = position388, tokenIndex388
			return false
		},
		/* 54 CapWord <- <(CapWordWithDash / CapWord1)> */
		func() bool {
			position392, tokenIndex392 := position, tokenIndex
			{
				position393 := position
				{
					position394, tokenIndex394 := position, tokenIndex
					if !_rules[ruleCapWordWithDash]() {
						goto l395
					}
					goto l394
				l395:
					position, tokenIndex = position394, tokenIndex394
					if !_rules[ruleCapWord1]() {
						goto l392
					}
				}
			l394:
				add(ruleCapWord, position393)
			}
			return true
		l392:
			position, tokenIndex = position392, tokenIndex392
			return false
		},
		/* 55 CapWord1 <- <(NameUpperChar NameLowerChar NameLowerChar+ '?'?)> */
		func() bool {
			position396, tokenIndex396 := position, tokenIndex
			{
				position397 := position
				if !_rules[ruleNameUpperChar]() {
					goto l396
				}
				if !_rules[ruleNameLowerChar]() {
					goto l396
				}
				if !_rules[ruleNameLowerChar]() {
					goto l396
				}
			l398:
				{
					position399, tokenIndex399 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l399
					}
					goto l398
				l399:
					position, tokenIndex = position399, tokenIndex399
				}
				{
					position400, tokenIndex400 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l400
					}
					position++
					goto l401
				l400:
					position, tokenIndex = position400, tokenIndex400
				}
			l401:
				add(ruleCapWord1, position397)
			}
			return true
		l396:
			position, tokenIndex = position396, tokenIndex396
			return false
		},
		/* 56 CapWordWithDash <- <((CapWord1 / TwoLetterGenusDashedSegment) Dash WordAfterDash (Dash WordAfterDash)?)> */
		func() bool {
			position402, tokenIndex402 := position, tokenIndex
			{
				position403 := position
				{
					position404, tokenIndex404 := position, tokenIndex
					if !_rules[ruleCapWord1]() {
						goto l405
					}
					goto l404
				l405:
					position, tokenIndex = position404, tokenIndex404
					if !_rules[ruleTwoLetterGenusDashedSegment]() {
						goto l402
					}
				}
			l404:
				if !_rules[ruleDash]() {
					goto l402
				}
				if !_rules[ruleWordAfterDash]() {
					goto l402
				}
				{
					position406, tokenIndex406 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l406
					}
					if !_rules[ruleWordAfterDash]() {
						goto l406
					}
					goto l407
				l406:
					position, tokenIndex = position406, tokenIndex406
				}
			l407:
				add(ruleCapWordWithDash, position403)
			}
			return true
		l402:
			position, tokenIndex = position402, tokenIndex402
			return false
		},
		/* 57 TwoLetterGenusDashedSegment <- <(('D' 'e') / ('E' 'u') / ('L' 'e') / ('N' 'e'))> */
		func() bool {
			position408, tokenIndex408 := position, tokenIndex
			{
				position409 := position
				{
					position410, tokenIndex410 := position, tokenIndex
					if buffer[position] != rune('D') {
						goto l411
					}
					position++
					if buffer[position] != rune('e') {
						goto l411
					}
					position++
					goto l410
				l411:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('E') {
						goto l412
					}
					position++
					if buffer[position] != rune('u') {
						goto l412
					}
					position++
					goto l410
				l412:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('L') {
						goto l413
					}
					position++
					if buffer[position] != rune('e') {
						goto l413
					}
					position++
					goto l410
				l413:
					position, tokenIndex = position410, tokenIndex410
					if buffer[position] != rune('N') {
						goto l408
					}
					position++
					if buffer[position] != rune('e') {
						goto l408
					}
					position++
				}
			l410:
				add(ruleTwoLetterGenusDashedSegment, position409)
			}
			return true
		l408:
			position, tokenIndex = position408, tokenIndex408
			return false
		},
		/* 58 WordAfterDash <- <(UpperAfterDash / LowerAfterDash)> */
		func() bool {
			position414, tokenIndex414 := position, tokenIndex
			{
				position415 := position
				{
					position416, tokenIndex416 := position, tokenIndex
					if !_rules[ruleUpperAfterDash]() {
						goto l417
					}
					goto l416
				l417:
					position, tokenIndex = position416, tokenIndex416
					if !_rules[ruleLowerAfterDash]() {
						goto l414
					}
				}
			l416:
				add(ruleWordAfterDash, position415)
			}
			return true
		l414:
			position, tokenIndex = position414, tokenIndex414
			return false
		},
		/* 59 UpperAfterDash <- <CapWord1> */
		func() bool {
			position418, tokenIndex418 := position, tokenIndex
			{
				position419 := position
				if !_rules[ruleCapWord1]() {
					goto l418
				}
				add(ruleUpperAfterDash, position419)
			}
			return true
		l418:
			position, tokenIndex = position418, tokenIndex418
			return false
		},
		/* 60 LowerAfterDash <- <Word1> */
		func() bool {
			position420, tokenIndex420 := position, tokenIndex
			{
				position421 := position
				if !_rules[ruleWord1]() {
					goto l420
				}
				add(ruleLowerAfterDash, position421)
			}
			return true
		l420:
			position, tokenIndex = position420, tokenIndex420
			return false
		},
		/* 61 TwoLetterGenus <- <(('C' 'a') / ('D' 'o') / ('E' 'a') / ('G' 'e') / ('I' 'a') / ('I' 'o') / ('I' 'x') / ('L' 'o') / ('O' 'a') / ('O' 'o') / ('N' 'u') / ('R' 'a') / ('T' 'y') / ('U' 'a') / ('A' 'a') / ('J' 'a') / ('Z' 'u') / ('L' 'a') / ('Q' 'u') / ('A' 's') / ('B' 'a'))> */
		func() bool {
			position422, tokenIndex422 := position, tokenIndex
			{
				position423 := position
				{
					position424, tokenIndex424 := position, tokenIndex
					if buffer[position] != rune('C') {
						goto l425
					}
					position++
					if buffer[position] != rune('a') {
						goto l425
					}
					position++
					goto l424
				l425:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('D') {
						goto l426
					}
					position++
					if buffer[position] != rune('o') {
						goto l426
					}
					position++
					goto l424
				l426:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('E') {
						goto l427
					}
					position++
					if buffer[position] != rune('a') {
						goto l427
					}
					position++
					goto l424
				l427:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('G') {
						goto l428
					}
					position++
					if buffer[position] != rune('e') {
						goto l428
					}
					position++
					goto l424
				l428:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('I') {
						goto l429
					}
					position++
					if buffer[position] != rune('a') {
						goto l429
					}
					position++
					goto l424
				l429:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('I') {
						goto l430
					}
					position++
					if buffer[position] != rune('o') {
						goto l430
					}
					position++
					goto l424
				l430:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('I') {
						goto l431
					}
					position++
					if buffer[position] != rune('x') {
						goto l431
					}
					position++
					goto l424
				l431:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('L') {
						goto l432
					}
					position++
					if buffer[position] != rune('o') {
						goto l432
					}
					position++
					goto l424
				l432:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('O') {
						goto l433
					}
					position++
					if buffer[position] != rune('a') {
						goto l433
					}
					position++
					goto l424
				l433:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('O') {
						goto l434
					}
					position++
					if buffer[position] != rune('o') {
						goto l434
					}
					position++
					goto l424
				l434:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('N') {
						goto l435
					}
					position++
					if buffer[position] != rune('u') {
						goto l435
					}
					position++
					goto l424
				l435:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('R') {
						goto l436
					}
					position++
					if buffer[position] != rune('a') {
						goto l436
					}
					position++
					goto l424
				l436:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('T') {
						goto l437
					}
					position++
					if buffer[position] != rune('y') {
						goto l437
					}
					position++
					goto l424
				l437:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('U') {
						goto l438
					}
					position++
					if buffer[position] != rune('a') {
						goto l438
					}
					position++
					goto l424
				l438:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('A') {
						goto l439
					}
					position++
					if buffer[position] != rune('a') {
						goto l439
					}
					position++
					goto l424
				l439:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('J') {
						goto l440
					}
					position++
					if buffer[position] != rune('a') {
						goto l440
					}
					position++
					goto l424
				l440:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('Z') {
						goto l441
					}
					position++
					if buffer[position] != rune('u') {
						goto l441
					}
					position++
					goto l424
				l441:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('L') {
						goto l442
					}
					position++
					if buffer[position] != rune('a') {
						goto l442
					}
					position++
					goto l424
				l442:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('Q') {
						goto l443
					}
					position++
					if buffer[position] != rune('u') {
						goto l443
					}
					position++
					goto l424
				l443:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('A') {
						goto l444
					}
					position++
					if buffer[position] != rune('s') {
						goto l444
					}
					position++
					goto l424
				l444:
					position, tokenIndex = position424, tokenIndex424
					if buffer[position] != rune('B') {
						goto l422
					}
					position++
					if buffer[position] != rune('a') {
						goto l422
					}
					position++
				}
			l424:
				add(ruleTwoLetterGenus, position423)
			}
			return true
		l422:
			position, tokenIndex = position422, tokenIndex422
			return false
		},
		/* 62 Word <- <(!((('e' 'x') / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd') / ('p' 'r' 'o') / ('c' 'v') / ('c' 'u' 'l' 't' 'i' 'v' 'a' 'r') / AuthorPrefix / RankUninomial / Approximation / Word4) SpaceCharEOI) (WordApostr / WordStartsWithDigit / MultiDashedWord / Word2 / Word1) &(SpaceCharEOI / '('))> */
		func() bool {
			position445, tokenIndex445 := position, tokenIndex
			{
				position446 := position
				{
					position447, tokenIndex447 := position, tokenIndex
					{
						position448, tokenIndex448 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l449
						}
						position++
						if buffer[position] != rune('x') {
							goto l449
						}
						position++
						goto l448
					l449:
						position, tokenIndex = position448, tokenIndex448
						if buffer[position] != rune('e') {
							goto l450
						}
						position++
						if buffer[position] != rune('t') {
							goto l450
						}
						position++
						goto l448
					l450:
						position, tokenIndex = position448, tokenIndex448
						if buffer[position] != rune('a') {
							goto l451
						}
						position++
						if buffer[position] != rune('n') {
							goto l451
						}
						position++
						if buffer[position] != rune('d') {
							goto l451
						}
						position++
						goto l448
					l451:
						position, tokenIndex = position448, tokenIndex448
						if buffer[position] != rune('a') {
							goto l452
						}
						position++
						if buffer[position] != rune('p') {
							goto l452
						}
						position++
						if buffer[position] != rune('u') {
							goto l452
						}
						position++
						if buffer[position] != rune('d') {
							goto l452
						}
						position++
						goto l448
					l452:
						position, tokenIndex = position448, tokenIndex448
						if buffer[position] != rune('p') {
							goto l453
						}
						position++
						if buffer[position] != rune('r') {
							goto l453
						}
						position++
						if buffer[position] != rune('o') {
							goto l453
						}
						position++
						goto l448
					l453:
						position, tokenIndex = position448, tokenIndex448
						if buffer[position] != rune('c') {
							goto l454
						}
						position++
						if buffer[position] != rune('v') {
							goto l454
						}
						position++
						goto l448
					l454:
						position, tokenIndex = position448, tokenIndex448
						if buffer[position] != rune('c') {
							goto l455
						}
						position++
						if buffer[position] != rune('u') {
							goto l455
						}
						position++
						if buffer[position] != rune('l') {
							goto l455
						}
						position++
						if buffer[position] != rune('t') {
							goto l455
						}
						position++
						if buffer[position] != rune('i') {
							goto l455
						}
						position++
						if buffer[position] != rune('v') {
							goto l455
						}
						position++
						if buffer[position] != rune('a') {
							goto l455
						}
						position++
						if buffer[position] != rune('r') {
							goto l455
						}
						position++
						goto l448
					l455:
						position, tokenIndex = position448, tokenIndex448
						if !_rules[ruleAuthorPrefix]() {
							goto l456
						}
						goto l448
					l456:
						position, tokenIndex = position448, tokenIndex448
						if !_rules[ruleRankUninomial]() {
							goto l457
						}
						goto l448
					l457:
						position, tokenIndex = position448, tokenIndex448
						if !_rules[ruleApproximation]() {
							goto l458
						}
						goto l448
					l458:
						position, tokenIndex = position448, tokenIndex448
						if !_rules[ruleWord4]() {
							goto l447
						}
					}
				l448:
					if !_rules[ruleSpaceCharEOI]() {
						goto l447
					}
					goto l445
				l447:
					position, tokenIndex = position447, tokenIndex447
				}
				{
					position459, tokenIndex459 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l460
					}
					goto l459
				l460:
					position, tokenIndex = position459, tokenIndex459
					if !_rules[ruleWordStartsWithDigit]() {
						goto l461
					}
					goto l459
				l461:
					position, tokenIndex = position459, tokenIndex459
					if !_rules[ruleMultiDashedWord]() {
						goto l462
					}
					goto l459
				l462:
					position, tokenIndex = position459, tokenIndex459
					if !_rules[ruleWord2]() {
						goto l463
					}
					goto l459
				l463:
					position, tokenIndex = position459, tokenIndex459
					if !_rules[ruleWord1]() {
						goto l445
					}
				}
			l459:
				{
					position464, tokenIndex464 := position, tokenIndex
					{
						position465, tokenIndex465 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l466
						}
						goto l465
					l466:
						position, tokenIndex = position465, tokenIndex465
						if buffer[position] != rune('(') {
							goto l445
						}
						position++
					}
				l465:
					position, tokenIndex = position464, tokenIndex464
				}
				add(ruleWord, position446)
			}
			return true
		l445:
			position, tokenIndex = position445, tokenIndex445
			return false
		},
		/* 63 Word1 <- <(((DotPrefix / LowerASCII) Dash)? NameLowerChar NameLowerChar+)> */
		func() bool {
			position467, tokenIndex467 := position, tokenIndex
			{
				position468 := position
				{
					position469, tokenIndex469 := position, tokenIndex
					{
						position471, tokenIndex471 := position, tokenIndex
						if !_rules[ruleDotPrefix]() {
							goto l472
						}
						goto l471
					l472:
						position, tokenIndex = position471, tokenIndex471
						if !_rules[ruleLowerASCII]() {
							goto l469
						}
					}
				l471:
					if !_rules[ruleDash]() {
						goto l469
					}
					goto l470
				l469:
					position, tokenIndex = position469, tokenIndex469
				}
			l470:
				if !_rules[ruleNameLowerChar]() {
					goto l467
				}
				if !_rules[ruleNameLowerChar]() {
					goto l467
				}
			l473:
				{
					position474, tokenIndex474 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l474
					}
					goto l473
				l474:
					position, tokenIndex = position474, tokenIndex474
				}
				add(ruleWord1, position468)
			}
			return true
		l467:
			position, tokenIndex = position467, tokenIndex467
			return false
		},
		/* 64 WordStartsWithDigit <- <(('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9') Nums? ('.' / Dash)? NameLowerChar NameLowerChar NameLowerChar NameLowerChar+)> */
		func() bool {
			position475, tokenIndex475 := position, tokenIndex
			{
				position476 := position
				{
					position477, tokenIndex477 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l478
					}
					position++
					goto l477
				l478:
					position, tokenIndex = position477, tokenIndex477
					if buffer[position] != rune('2') {
						goto l479
					}
					position++
					goto l477
				l479:
					position, tokenIndex = position477, tokenIndex477
					if buffer[position] != rune('3') {
						goto l480
					}
					position++
					goto l477
				l480:
					position, tokenIndex = position477, tokenIndex477
					if buffer[position] != rune('4') {
						goto l481
					}
					position++
					goto l477
				l481:
					position, tokenIndex = position477, tokenIndex477
					if buffer[position] != rune('5') {
						goto l482
					}
					position++
					goto l477
				l482:
					position, tokenIndex = position477, tokenIndex477
					if buffer[position] != rune('6') {
						goto l483
					}
					position++
					goto l477
				l483:
					position, tokenIndex = position477, tokenIndex477
					if buffer[position] != rune('7') {
						goto l484
					}
					position++
					goto l477
				l484:
					position, tokenIndex = position477, tokenIndex477
					if buffer[position] != rune('8') {
						goto l485
					}
					position++
					goto l477
				l485:
					position, tokenIndex = position477, tokenIndex477
					if buffer[position] != rune('9') {
						goto l475
					}
					position++
				}
			l477:
				{
					position486, tokenIndex486 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l486
					}
					goto l487
				l486:
					position, tokenIndex = position486, tokenIndex486
				}
			l487:
				{
					position488, tokenIndex488 := position, tokenIndex
					{
						position490, tokenIndex490 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l491
						}
						position++
						goto l490
					l491:
						position, tokenIndex = position490, tokenIndex490
						if !_rules[ruleDash]() {
							goto l488
						}
					}
				l490:
					goto l489
				l488:
					position, tokenIndex = position488, tokenIndex488
				}
			l489:
				if !_rules[ruleNameLowerChar]() {
					goto l475
				}
				if !_rules[ruleNameLowerChar]() {
					goto l475
				}
				if !_rules[ruleNameLowerChar]() {
					goto l475
				}
				if !_rules[ruleNameLowerChar]() {
					goto l475
				}
			l492:
				{
					position493, tokenIndex493 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l493
					}
					goto l492
				l493:
					position, tokenIndex = position493, tokenIndex493
				}
				add(ruleWordStartsWithDigit, position476)
			}
			return true
		l475:
			position, tokenIndex = position475, tokenIndex475
			return false
		},
		/* 65 Word2 <- <(NameLowerChar+ Dash? (WordApostr / NameLowerChar+))> */
		func() bool {
			position494, tokenIndex494 := position, tokenIndex
			{
				position495 := position
				if !_rules[ruleNameLowerChar]() {
					goto l494
				}
			l496:
				{
					position497, tokenIndex497 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l497
					}
					goto l496
				l497:
					position, tokenIndex = position497, tokenIndex497
				}
				{
					position498, tokenIndex498 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l498
					}
					goto l499
				l498:
					position, tokenIndex = position498, tokenIndex498
				}
			l499:
				{
					position500, tokenIndex500 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l501
					}
					goto l500
				l501:
					position, tokenIndex = position500, tokenIndex500
					if !_rules[ruleNameLowerChar]() {
						goto l494
					}
				l502:
					{
						position503, tokenIndex503 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l503
						}
						goto l502
					l503:
						position, tokenIndex = position503, tokenIndex503
					}
				}
			l500:
				add(ruleWord2, position495)
			}
			return true
		l494:
			position, tokenIndex = position494, tokenIndex494
			return false
		},
		/* 66 WordApostr <- <(NameLowerChar NameLowerChar* Apostrophe Word1)> */
		func() bool {
			position504, tokenIndex504 := position, tokenIndex
			{
				position505 := position
				if !_rules[ruleNameLowerChar]() {
					goto l504
				}
			l506:
				{
					position507, tokenIndex507 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l507
					}
					goto l506
				l507:
					position, tokenIndex = position507, tokenIndex507
				}
				if !_rules[ruleApostrophe]() {
					goto l504
				}
				if !_rules[ruleWord1]() {
					goto l504
				}
				add(ruleWordApostr, position505)
			}
			return true
		l504:
			position, tokenIndex = position504, tokenIndex504
			return false
		},
		/* 67 Word4 <- <(NameLowerChar+ '.' NameLowerChar)> */
		func() bool {
			position508, tokenIndex508 := position, tokenIndex
			{
				position509 := position
				if !_rules[ruleNameLowerChar]() {
					goto l508
				}
			l510:
				{
					position511, tokenIndex511 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l511
					}
					goto l510
				l511:
					position, tokenIndex = position511, tokenIndex511
				}
				if buffer[position] != rune('.') {
					goto l508
				}
				position++
				if !_rules[ruleNameLowerChar]() {
					goto l508
				}
				add(ruleWord4, position509)
			}
			return true
		l508:
			position, tokenIndex = position508, tokenIndex508
			return false
		},
		/* 68 DotPrefix <- <('s' 't' '.')> */
		func() bool {
			position512, tokenIndex512 := position, tokenIndex
			{
				position513 := position
				if buffer[position] != rune('s') {
					goto l512
				}
				position++
				if buffer[position] != rune('t') {
					goto l512
				}
				position++
				if buffer[position] != rune('.') {
					goto l512
				}
				position++
				add(ruleDotPrefix, position513)
			}
			return true
		l512:
			position, tokenIndex = position512, tokenIndex512
			return false
		},
		/* 69 MultiDashedWord <- <(NameLowerChar+ Dash NameLowerChar+ Dash NameLowerChar+ (Dash NameLowerChar+)?)> */
		func() bool {
			position514, tokenIndex514 := position, tokenIndex
			{
				position515 := position
				if !_rules[ruleNameLowerChar]() {
					goto l514
				}
			l516:
				{
					position517, tokenIndex517 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l517
					}
					goto l516
				l517:
					position, tokenIndex = position517, tokenIndex517
				}
				if !_rules[ruleDash]() {
					goto l514
				}
				if !_rules[ruleNameLowerChar]() {
					goto l514
				}
			l518:
				{
					position519, tokenIndex519 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l519
					}
					goto l518
				l519:
					position, tokenIndex = position519, tokenIndex519
				}
				if !_rules[ruleDash]() {
					goto l514
				}
				if !_rules[ruleNameLowerChar]() {
					goto l514
				}
			l520:
				{
					position521, tokenIndex521 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l521
					}
					goto l520
				l521:
					position, tokenIndex = position521, tokenIndex521
				}
				{
					position522, tokenIndex522 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l522
					}
					if !_rules[ruleNameLowerChar]() {
						goto l522
					}
				l524:
					{
						position525, tokenIndex525 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l525
						}
						goto l524
					l525:
						position, tokenIndex = position525, tokenIndex525
					}
					goto l523
				l522:
					position, tokenIndex = position522, tokenIndex522
				}
			l523:
				add(ruleMultiDashedWord, position515)
			}
			return true
		l514:
			position, tokenIndex = position514, tokenIndex514
			return false
		},
		/* 70 HybridChar <- <('×' / (('x' / 'X') &_) / (('x' / 'X') &UninomialWord) / (('x' / 'X') &END))> */
		func() bool {
			position526, tokenIndex526 := position, tokenIndex
			{
				position527 := position
				{
					position528, tokenIndex528 := position, tokenIndex
					if buffer[position] != rune('×') {
						goto l529
					}
					position++
					goto l528
				l529:
					position, tokenIndex = position528, tokenIndex528
					{
						position531, tokenIndex531 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l532
						}
						position++
						goto l531
					l532:
						position, tokenIndex = position531, tokenIndex531
						if buffer[position] != rune('X') {
							goto l530
						}
						position++
					}
				l531:
					{
						position533, tokenIndex533 := position, tokenIndex
						if !_rules[rule_]() {
							goto l530
						}
						position, tokenIndex = position533, tokenIndex533
					}
					goto l528
				l530:
					position, tokenIndex = position528, tokenIndex528
					{
						position535, tokenIndex535 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l536
						}
						position++
						goto l535
					l536:
						position, tokenIndex = position535, tokenIndex535
						if buffer[position] != rune('X') {
							goto l534
						}
						position++
					}
				l535:
					{
						position537, tokenIndex537 := position, tokenIndex
						if !_rules[ruleUninomialWord]() {
							goto l534
						}
						position, tokenIndex = position537, tokenIndex537
					}
					goto l528
				l534:
					position, tokenIndex = position528, tokenIndex528
					{
						position538, tokenIndex538 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l539
						}
						position++
						goto l538
					l539:
						position, tokenIndex = position538, tokenIndex538
						if buffer[position] != rune('X') {
							goto l526
						}
						position++
					}
				l538:
					{
						position540, tokenIndex540 := position, tokenIndex
						if !_rules[ruleEND]() {
							goto l526
						}
						position, tokenIndex = position540, tokenIndex540
					}
				}
			l528:
				add(ruleHybridChar, position527)
			}
			return true
		l526:
			position, tokenIndex = position526, tokenIndex526
			return false
		},
		/* 71 GraftChimeraChar <- <'+'> */
		func() bool {
			position541, tokenIndex541 := position, tokenIndex
			{
				position542 := position
				if buffer[position] != rune('+') {
					goto l541
				}
				position++
				add(ruleGraftChimeraChar, position542)
			}
			return true
		l541:
			position, tokenIndex = position541, tokenIndex541
			return false
		},
		/* 72 ApproxNameIgnored <- <.*> */
		func() bool {
			{
				position544 := position
			l545:
				{
					position546, tokenIndex546 := position, tokenIndex
					if !matchDot() {
						goto l546
					}
					goto l545
				l546:
					position, tokenIndex = position546, tokenIndex546
				}
				add(ruleApproxNameIgnored, position544)
			}
			return true
		},
		/* 73 Approximation <- <(('s' 'p' '.' _? ('n' 'r' '.')) / ('s' 'p' '.' _? ('a' 'f' 'f' '.')) / ('m' 'o' 'n' 's' 't' '.') / '?' / ((('s' 'p' 'p') / ('n' 'r') / ('s' 'p') / ('a' 'f' 'f') / ('s' 'p' 'e' 'c' 'i' 'e' 's')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position547, tokenIndex547 := position, tokenIndex
			{
				position548 := position
				{
					position549, tokenIndex549 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l550
					}
					position++
					if buffer[position] != rune('p') {
						goto l550
					}
					position++
					if buffer[position] != rune('.') {
						goto l550
					}
					position++
					{
						position551, tokenIndex551 := position, tokenIndex
						if !_rules[rule_]() {
							goto l551
						}
						goto l552
					l551:
						position, tokenIndex = position551, tokenIndex551
					}
				l552:
					if buffer[position] != rune('n') {
						goto l550
					}
					position++
					if buffer[position] != rune('r') {
						goto l550
					}
					position++
					if buffer[position] != rune('.') {
						goto l550
					}
					position++
					goto l549
				l550:
					position, tokenIndex = position549, tokenIndex549
					if buffer[position] != rune('s') {
						goto l553
					}
					position++
					if buffer[position] != rune('p') {
						goto l553
					}
					position++
					if buffer[position] != rune('.') {
						goto l553
					}
					position++
					{
						position554, tokenIndex554 := position, tokenIndex
						if !_rules[rule_]() {
							goto l554
						}
						goto l555
					l554:
						position, tokenIndex = position554, tokenIndex554
					}
				l555:
					if buffer[position] != rune('a') {
						goto l553
					}
					position++
					if buffer[position] != rune('f') {
						goto l553
					}
					position++
					if buffer[position] != rune('f') {
						goto l553
					}
					position++
					if buffer[position] != rune('.') {
						goto l553
					}
					position++
					goto l549
				l553:
					position, tokenIndex = position549, tokenIndex549
					if buffer[position] != rune('m') {
						goto l556
					}
					position++
					if buffer[position] != rune('o') {
						goto l556
					}
					position++
					if buffer[position] != rune('n') {
						goto l556
					}
					position++
					if buffer[position] != rune('s') {
						goto l556
					}
					position++
					if buffer[position] != rune('t') {
						goto l556
					}
					position++
					if buffer[position] != rune('.') {
						goto l556
					}
					position++
					goto l549
				l556:
					position, tokenIndex = position549, tokenIndex549
					if buffer[position] != rune('?') {
						goto l557
					}
					position++
					goto l549
				l557:
					position, tokenIndex = position549, tokenIndex549
					{
						position558, tokenIndex558 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l559
						}
						position++
						if buffer[position] != rune('p') {
							goto l559
						}
						position++
						if buffer[position] != rune('p') {
							goto l559
						}
						position++
						goto l558
					l559:
						position, tokenIndex = position558, tokenIndex558
						if buffer[position] != rune('n') {
							goto l560
						}
						position++
						if buffer[position] != rune('r') {
							goto l560
						}
						position++
						goto l558
					l560:
						position, tokenIndex = position558, tokenIndex558
						if buffer[position] != rune('s') {
							goto l561
						}
						position++
						if buffer[position] != rune('p') {
							goto l561
						}
						position++
						goto l558
					l561:
						position, tokenIndex = position558, tokenIndex558
						if buffer[position] != rune('a') {
							goto l562
						}
						position++
						if buffer[position] != rune('f') {
							goto l562
						}
						position++
						if buffer[position] != rune('f') {
							goto l562
						}
						position++
						goto l558
					l562:
						position, tokenIndex = position558, tokenIndex558
						if buffer[position] != rune('s') {
							goto l547
						}
						position++
						if buffer[position] != rune('p') {
							goto l547
						}
						position++
						if buffer[position] != rune('e') {
							goto l547
						}
						position++
						if buffer[position] != rune('c') {
							goto l547
						}
						position++
						if buffer[position] != rune('i') {
							goto l547
						}
						position++
						if buffer[position] != rune('e') {
							goto l547
						}
						position++
						if buffer[position] != rune('s') {
							goto l547
						}
						position++
					}
				l558:
					{
						position563, tokenIndex563 := position, tokenIndex
						{
							position565, tokenIndex565 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l564
							}
							position, tokenIndex = position565, tokenIndex565
						}
						goto l563
					l564:
						position, tokenIndex = position563, tokenIndex563
						if buffer[position] != rune('.') {
							goto l547
						}
						position++
					}
				l563:
				}
			l549:
				add(ruleApproximation, position548)
			}
			return true
		l547:
			position, tokenIndex = position547, tokenIndex547
			return false
		},
		/* 74 Authorship <- <((AuthorshipCombo / OriginalAuthorship) &(SpaceCharEOI / ';' / ','))> */
		func() bool {
			position566, tokenIndex566 := position, tokenIndex
			{
				position567 := position
				{
					position568, tokenIndex568 := position, tokenIndex
					if !_rules[ruleAuthorshipCombo]() {
						goto l569
					}
					goto l568
				l569:
					position, tokenIndex = position568, tokenIndex568
					if !_rules[ruleOriginalAuthorship]() {
						goto l566
					}
				}
			l568:
				{
					position570, tokenIndex570 := position, tokenIndex
					{
						position571, tokenIndex571 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l572
						}
						goto l571
					l572:
						position, tokenIndex = position571, tokenIndex571
						if buffer[position] != rune(';') {
							goto l573
						}
						position++
						goto l571
					l573:
						position, tokenIndex = position571, tokenIndex571
						if buffer[position] != rune(',') {
							goto l566
						}
						position++
					}
				l571:
					position, tokenIndex = position570, tokenIndex570
				}
				add(ruleAuthorship, position567)
			}
			return true
		l566:
			position, tokenIndex = position566, tokenIndex566
			return false
		},
		/* 75 AuthorshipCombo <- <(OriginalAuthorshipComb (_? CombinationAuthorship)?)> */
		func() bool {
			position574, tokenIndex574 := position, tokenIndex
			{
				position575 := position
				if !_rules[ruleOriginalAuthorshipComb]() {
					goto l574
				}
				{
					position576, tokenIndex576 := position, tokenIndex
					{
						position578, tokenIndex578 := position, tokenIndex
						if !_rules[rule_]() {
							goto l578
						}
						goto l579
					l578:
						position, tokenIndex = position578, tokenIndex578
					}
				l579:
					if !_rules[ruleCombinationAuthorship]() {
						goto l576
					}
					goto l577
				l576:
					position, tokenIndex = position576, tokenIndex576
				}
			l577:
				add(ruleAuthorshipCombo, position575)
			}
			return true
		l574:
			position, tokenIndex = position574, tokenIndex574
			return false
		},
		/* 76 OriginalAuthorship <- <AuthorsGroup> */
		func() bool {
			position580, tokenIndex580 := position, tokenIndex
			{
				position581 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l580
				}
				add(ruleOriginalAuthorship, position581)
			}
			return true
		l580:
			position, tokenIndex = position580, tokenIndex580
			return false
		},
		/* 77 OriginalAuthorshipComb <- <(BasionymAuthorshipYearMisformed / BasionymAuthorship / BasionymAuthorshipMissingParens)> */
		func() bool {
			position582, tokenIndex582 := position, tokenIndex
			{
				position583 := position
				{
					position584, tokenIndex584 := position, tokenIndex
					if !_rules[ruleBasionymAuthorshipYearMisformed]() {
						goto l585
					}
					goto l584
				l585:
					position, tokenIndex = position584, tokenIndex584
					if !_rules[ruleBasionymAuthorship]() {
						goto l586
					}
					goto l584
				l586:
					position, tokenIndex = position584, tokenIndex584
					if !_rules[ruleBasionymAuthorshipMissingParens]() {
						goto l582
					}
				}
			l584:
				add(ruleOriginalAuthorshipComb, position583)
			}
			return true
		l582:
			position, tokenIndex = position582, tokenIndex582
			return false
		},
		/* 78 CombinationAuthorship <- <AuthorsGroup> */
		func() bool {
			position587, tokenIndex587 := position, tokenIndex
			{
				position588 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l587
				}
				add(ruleCombinationAuthorship, position588)
			}
			return true
		l587:
			position, tokenIndex = position587, tokenIndex587
			return false
		},
		/* 79 BasionymAuthorshipMissingParens <- <(MissingParensStart / MissingParensEnd)> */
		func() bool {
			position589, tokenIndex589 := position, tokenIndex
			{
				position590 := position
				{
					position591, tokenIndex591 := position, tokenIndex
					if !_rules[ruleMissingParensStart]() {
						goto l592
					}
					goto l591
				l592:
					position, tokenIndex = position591, tokenIndex591
					if !_rules[ruleMissingParensEnd]() {
						goto l589
					}
				}
			l591:
				add(ruleBasionymAuthorshipMissingParens, position590)
			}
			return true
		l589:
			position, tokenIndex = position589, tokenIndex589
			return false
		},
		/* 80 MissingParensStart <- <('(' _? AuthorsGroup)> */
		func() bool {
			position593, tokenIndex593 := position, tokenIndex
			{
				position594 := position
				if buffer[position] != rune('(') {
					goto l593
				}
				position++
				{
					position595, tokenIndex595 := position, tokenIndex
					if !_rules[rule_]() {
						goto l595
					}
					goto l596
				l595:
					position, tokenIndex = position595, tokenIndex595
				}
			l596:
				if !_rules[ruleAuthorsGroup]() {
					goto l593
				}
				add(ruleMissingParensStart, position594)
			}
			return true
		l593:
			position, tokenIndex = position593, tokenIndex593
			return false
		},
		/* 81 MissingParensEnd <- <(AuthorsGroup _? ')')> */
		func() bool {
			position597, tokenIndex597 := position, tokenIndex
			{
				position598 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l597
				}
				{
					position599, tokenIndex599 := position, tokenIndex
					if !_rules[rule_]() {
						goto l599
					}
					goto l600
				l599:
					position, tokenIndex = position599, tokenIndex599
				}
			l600:
				if buffer[position] != rune(')') {
					goto l597
				}
				position++
				add(ruleMissingParensEnd, position598)
			}
			return true
		l597:
			position, tokenIndex = position597, tokenIndex597
			return false
		},
		/* 82 BasionymAuthorshipYearMisformed <- <('(' _? AuthorsGroup _? ')' (_? ',')? _? Year)> */
		func() bool {
			position601, tokenIndex601 := position, tokenIndex
			{
				position602 := position
				if buffer[position] != rune('(') {
					goto l601
				}
				position++
				{
					position603, tokenIndex603 := position, tokenIndex
					if !_rules[rule_]() {
						goto l603
					}
					goto l604
				l603:
					position, tokenIndex = position603, tokenIndex603
				}
			l604:
				if !_rules[ruleAuthorsGroup]() {
					goto l601
				}
				{
					position605, tokenIndex605 := position, tokenIndex
					if !_rules[rule_]() {
						goto l605
					}
					goto l606
				l605:
					position, tokenIndex = position605, tokenIndex605
				}
			l606:
				if buffer[position] != rune(')') {
					goto l601
				}
				position++
				{
					position607, tokenIndex607 := position, tokenIndex
					{
						position609, tokenIndex609 := position, tokenIndex
						if !_rules[rule_]() {
							goto l609
						}
						goto l610
					l609:
						position, tokenIndex = position609, tokenIndex609
					}
				l610:
					if buffer[position] != rune(',') {
						goto l607
					}
					position++
					goto l608
				l607:
					position, tokenIndex = position607, tokenIndex607
				}
			l608:
				{
					position611, tokenIndex611 := position, tokenIndex
					if !_rules[rule_]() {
						goto l611
					}
					goto l612
				l611:
					position, tokenIndex = position611, tokenIndex611
				}
			l612:
				if !_rules[ruleYear]() {
					goto l601
				}
				add(ruleBasionymAuthorshipYearMisformed, position602)
			}
			return true
		l601:
			position, tokenIndex = position601, tokenIndex601
			return false
		},
		/* 83 BasionymAuthorship <- <(BasionymAuthorship1 / BasionymAuthorship2Parens)> */
		func() bool {
			position613, tokenIndex613 := position, tokenIndex
			{
				position614 := position
				{
					position615, tokenIndex615 := position, tokenIndex
					if !_rules[ruleBasionymAuthorship1]() {
						goto l616
					}
					goto l615
				l616:
					position, tokenIndex = position615, tokenIndex615
					if !_rules[ruleBasionymAuthorship2Parens]() {
						goto l613
					}
				}
			l615:
				add(ruleBasionymAuthorship, position614)
			}
			return true
		l613:
			position, tokenIndex = position613, tokenIndex613
			return false
		},
		/* 84 BasionymAuthorship1 <- <('(' _? AuthorsGroup _? ')')> */
		func() bool {
			position617, tokenIndex617 := position, tokenIndex
			{
				position618 := position
				if buffer[position] != rune('(') {
					goto l617
				}
				position++
				{
					position619, tokenIndex619 := position, tokenIndex
					if !_rules[rule_]() {
						goto l619
					}
					goto l620
				l619:
					position, tokenIndex = position619, tokenIndex619
				}
			l620:
				if !_rules[ruleAuthorsGroup]() {
					goto l617
				}
				{
					position621, tokenIndex621 := position, tokenIndex
					if !_rules[rule_]() {
						goto l621
					}
					goto l622
				l621:
					position, tokenIndex = position621, tokenIndex621
				}
			l622:
				if buffer[position] != rune(')') {
					goto l617
				}
				position++
				add(ruleBasionymAuthorship1, position618)
			}
			return true
		l617:
			position, tokenIndex = position617, tokenIndex617
			return false
		},
		/* 85 BasionymAuthorship2Parens <- <('(' _? '(' _? AuthorsGroup _? ')' _? ')')> */
		func() bool {
			position623, tokenIndex623 := position, tokenIndex
			{
				position624 := position
				if buffer[position] != rune('(') {
					goto l623
				}
				position++
				{
					position625, tokenIndex625 := position, tokenIndex
					if !_rules[rule_]() {
						goto l625
					}
					goto l626
				l625:
					position, tokenIndex = position625, tokenIndex625
				}
			l626:
				if buffer[position] != rune('(') {
					goto l623
				}
				position++
				{
					position627, tokenIndex627 := position, tokenIndex
					if !_rules[rule_]() {
						goto l627
					}
					goto l628
				l627:
					position, tokenIndex = position627, tokenIndex627
				}
			l628:
				if !_rules[ruleAuthorsGroup]() {
					goto l623
				}
				{
					position629, tokenIndex629 := position, tokenIndex
					if !_rules[rule_]() {
						goto l629
					}
					goto l630
				l629:
					position, tokenIndex = position629, tokenIndex629
				}
			l630:
				if buffer[position] != rune(')') {
					goto l623
				}
				position++
				{
					position631, tokenIndex631 := position, tokenIndex
					if !_rules[rule_]() {
						goto l631
					}
					goto l632
				l631:
					position, tokenIndex = position631, tokenIndex631
				}
			l632:
				if buffer[position] != rune(')') {
					goto l623
				}
				position++
				add(ruleBasionymAuthorship2Parens, position624)
			}
			return true
		l623:
			position, tokenIndex = position623, tokenIndex623
			return false
		},
		/* 86 AuthorsGroup <- <(AuthorsTeam (_ (AuthorEmend / AuthorEx) AuthorsTeam)?)> */
		func() bool {
			position633, tokenIndex633 := position, tokenIndex
			{
				position634 := position
				if !_rules[ruleAuthorsTeam]() {
					goto l633
				}
				{
					position635, tokenIndex635 := position, tokenIndex
					if !_rules[rule_]() {
						goto l635
					}
					{
						position637, tokenIndex637 := position, tokenIndex
						if !_rules[ruleAuthorEmend]() {
							goto l638
						}
						goto l637
					l638:
						position, tokenIndex = position637, tokenIndex637
						if !_rules[ruleAuthorEx]() {
							goto l635
						}
					}
				l637:
					if !_rules[ruleAuthorsTeam]() {
						goto l635
					}
					goto l636
				l635:
					position, tokenIndex = position635, tokenIndex635
				}
			l636:
				add(ruleAuthorsGroup, position634)
			}
			return true
		l633:
			position, tokenIndex = position633, tokenIndex633
			return false
		},
		/* 87 AuthorsTeam <- <(Author (AuthorSep Author)* (_? ','? _? Year)?)> */
		func() bool {
			position639, tokenIndex639 := position, tokenIndex
			{
				position640 := position
				if !_rules[ruleAuthor]() {
					goto l639
				}
			l641:
				{
					position642, tokenIndex642 := position, tokenIndex
					if !_rules[ruleAuthorSep]() {
						goto l642
					}
					if !_rules[ruleAuthor]() {
						goto l642
					}
					goto l641
				l642:
					position, tokenIndex = position642, tokenIndex642
				}
				{
					position643, tokenIndex643 := position, tokenIndex
					{
						position645, tokenIndex645 := position, tokenIndex
						if !_rules[rule_]() {
							goto l645
						}
						goto l646
					l645:
						position, tokenIndex = position645, tokenIndex645
					}
				l646:
					{
						position647, tokenIndex647 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l647
						}
						position++
						goto l648
					l647:
						position, tokenIndex = position647, tokenIndex647
					}
				l648:
					{
						position649, tokenIndex649 := position, tokenIndex
						if !_rules[rule_]() {
							goto l649
						}
						goto l650
					l649:
						position, tokenIndex = position649, tokenIndex649
					}
				l650:
					if !_rules[ruleYear]() {
						goto l643
					}
					goto l644
				l643:
					position, tokenIndex = position643, tokenIndex643
				}
			l644:
				add(ruleAuthorsTeam, position640)
			}
			return true
		l639:
			position, tokenIndex = position639, tokenIndex639
			return false
		},
		/* 88 AuthorSep <- <(AuthorSep1 / AuthorSep2)> */
		func() bool {
			position651, tokenIndex651 := position, tokenIndex
			{
				position652 := position
				{
					position653, tokenIndex653 := position, tokenIndex
					if !_rules[ruleAuthorSep1]() {
						goto l654
					}
					goto l653
				l654:
					position, tokenIndex = position653, tokenIndex653
					if !_rules[ruleAuthorSep2]() {
						goto l651
					}
				}
			l653:
				add(ruleAuthorSep, position652)
			}
			return true
		l651:
			position, tokenIndex = position651, tokenIndex651
			return false
		},
		/* 89 AuthorSep1 <- <(_? (',' _)? ('&' / AuthorSepSpanish / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd')) _?)> */
		func() bool {
			position655, tokenIndex655 := position, tokenIndex
			{
				position656 := position
				{
					position657, tokenIndex657 := position, tokenIndex
					if !_rules[rule_]() {
						goto l657
					}
					goto l658
				l657:
					position, tokenIndex = position657, tokenIndex657
				}
			l658:
				{
					position659, tokenIndex659 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l659
					}
					position++
					if !_rules[rule_]() {
						goto l659
					}
					goto l660
				l659:
					position, tokenIndex = position659, tokenIndex659
				}
			l660:
				{
					position661, tokenIndex661 := position, tokenIndex
					if buffer[position] != rune('&') {
						goto l662
					}
					position++
					goto l661
				l662:
					position, tokenIndex = position661, tokenIndex661
					if !_rules[ruleAuthorSepSpanish]() {
						goto l663
					}
					goto l661
				l663:
					position, tokenIndex = position661, tokenIndex661
					if buffer[position] != rune('e') {
						goto l664
					}
					position++
					if buffer[position] != rune('t') {
						goto l664
					}
					position++
					goto l661
				l664:
					position, tokenIndex = position661, tokenIndex661
					if buffer[position] != rune('a') {
						goto l665
					}
					position++
					if buffer[position] != rune('n') {
						goto l665
					}
					position++
					if buffer[position] != rune('d') {
						goto l665
					}
					position++
					goto l661
				l665:
					position, tokenIndex = position661, tokenIndex661
					if buffer[position] != rune('a') {
						goto l655
					}
					position++
					if buffer[position] != rune('p') {
						goto l655
					}
					position++
					if buffer[position] != rune('u') {
						goto l655
					}
					position++
					if buffer[position] != rune('d') {
						goto l655
					}
					position++
				}
			l661:
				{
					position666, tokenIndex666 := position, tokenIndex
					if !_rules[rule_]() {
						goto l666
					}
					goto l667
				l666:
					position, tokenIndex = position666, tokenIndex666
				}
			l667:
				add(ruleAuthorSep1, position656)
			}
			return true
		l655:
			position, tokenIndex = position655, tokenIndex655
			return false
		},
		/* 90 AuthorSep2 <- <(_? ',' _?)> */
		func() bool {
			position668, tokenIndex668 := position, tokenIndex
			{
				position669 := position
				{
					position670, tokenIndex670 := position, tokenIndex
					if !_rules[rule_]() {
						goto l670
					}
					goto l671
				l670:
					position, tokenIndex = position670, tokenIndex670
				}
			l671:
				if buffer[position] != rune(',') {
					goto l668
				}
				position++
				{
					position672, tokenIndex672 := position, tokenIndex
					if !_rules[rule_]() {
						goto l672
					}
					goto l673
				l672:
					position, tokenIndex = position672, tokenIndex672
				}
			l673:
				add(ruleAuthorSep2, position669)
			}
			return true
		l668:
			position, tokenIndex = position668, tokenIndex668
			return false
		},
		/* 91 AuthorSepSpanish <- <(_? 'y' _?)> */
		func() bool {
			position674, tokenIndex674 := position, tokenIndex
			{
				position675 := position
				{
					position676, tokenIndex676 := position, tokenIndex
					if !_rules[rule_]() {
						goto l676
					}
					goto l677
				l676:
					position, tokenIndex = position676, tokenIndex676
				}
			l677:
				if buffer[position] != rune('y') {
					goto l674
				}
				position++
				{
					position678, tokenIndex678 := position, tokenIndex
					if !_rules[rule_]() {
						goto l678
					}
					goto l679
				l678:
					position, tokenIndex = position678, tokenIndex678
				}
			l679:
				add(ruleAuthorSepSpanish, position675)
			}
			return true
		l674:
			position, tokenIndex = position674, tokenIndex674
			return false
		},
		/* 92 AuthorEx <- <((('e' 'x' '.'?) / ('m' 's' _ ('i' 'n')) / ('i' 'n')) _)> */
		func() bool {
			position680, tokenIndex680 := position, tokenIndex
			{
				position681 := position
				{
					position682, tokenIndex682 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l683
					}
					position++
					if buffer[position] != rune('x') {
						goto l683
					}
					position++
					{
						position684, tokenIndex684 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l684
						}
						position++
						goto l685
					l684:
						position, tokenIndex = position684, tokenIndex684
					}
				l685:
					goto l682
				l683:
					position, tokenIndex = position682, tokenIndex682
					if buffer[position] != rune('m') {
						goto l686
					}
					position++
					if buffer[position] != rune('s') {
						goto l686
					}
					position++
					if !_rules[rule_]() {
						goto l686
					}
					if buffer[position] != rune('i') {
						goto l686
					}
					position++
					if buffer[position] != rune('n') {
						goto l686
					}
					position++
					goto l682
				l686:
					position, tokenIndex = position682, tokenIndex682
					if buffer[position] != rune('i') {
						goto l680
					}
					position++
					if buffer[position] != rune('n') {
						goto l680
					}
					position++
				}
			l682:
				if !_rules[rule_]() {
					goto l680
				}
				add(ruleAuthorEx, position681)
			}
			return true
		l680:
			position, tokenIndex = position680, tokenIndex680
			return false
		},
		/* 93 AuthorEmend <- <('e' 'm' 'e' 'n' 'd' '.'? _)> */
		func() bool {
			position687, tokenIndex687 := position, tokenIndex
			{
				position688 := position
				if buffer[position] != rune('e') {
					goto l687
				}
				position++
				if buffer[position] != rune('m') {
					goto l687
				}
				position++
				if buffer[position] != rune('e') {
					goto l687
				}
				position++
				if buffer[position] != rune('n') {
					goto l687
				}
				position++
				if buffer[position] != rune('d') {
					goto l687
				}
				position++
				{
					position689, tokenIndex689 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l689
					}
					position++
					goto l690
				l689:
					position, tokenIndex = position689, tokenIndex689
				}
			l690:
				if !_rules[rule_]() {
					goto l687
				}
				add(ruleAuthorEmend, position688)
			}
			return true
		l687:
			position, tokenIndex = position687, tokenIndex687
			return false
		},
		/* 94 Author <- <((Author0 / Author1 / Author2 / UnknownAuthor) (_ AuthorEtAl)?)> */
		func() bool {
			position691, tokenIndex691 := position, tokenIndex
			{
				position692 := position
				{
					position693, tokenIndex693 := position, tokenIndex
					if !_rules[ruleAuthor0]() {
						goto l694
					}
					goto l693
				l694:
					position, tokenIndex = position693, tokenIndex693
					if !_rules[ruleAuthor1]() {
						goto l695
					}
					goto l693
				l695:
					position, tokenIndex = position693, tokenIndex693
					if !_rules[ruleAuthor2]() {
						goto l696
					}
					goto l693
				l696:
					position, tokenIndex = position693, tokenIndex693
					if !_rules[ruleUnknownAuthor]() {
						goto l691
					}
				}
			l693:
				{
					position697, tokenIndex697 := position, tokenIndex
					if !_rules[rule_]() {
						goto l697
					}
					if !_rules[ruleAuthorEtAl]() {
						goto l697
					}
					goto l698
				l697:
					position, tokenIndex = position697, tokenIndex697
				}
			l698:
				add(ruleAuthor, position692)
			}
			return true
		l691:
			position, tokenIndex = position691, tokenIndex691
			return false
		},
		/* 95 Author0 <- <(Author2 FiliusFNoSpace)> */
		func() bool {
			position699, tokenIndex699 := position, tokenIndex
			{
				position700 := position
				if !_rules[ruleAuthor2]() {
					goto l699
				}
				if !_rules[ruleFiliusFNoSpace]() {
					goto l699
				}
				add(ruleAuthor0, position700)
			}
			return true
		l699:
			position, tokenIndex = position699, tokenIndex699
			return false
		},
		/* 96 Author1 <- <(Author2 _? (Filius / AuthorSuffix))> */
		func() bool {
			position701, tokenIndex701 := position, tokenIndex
			{
				position702 := position
				if !_rules[ruleAuthor2]() {
					goto l701
				}
				{
					position703, tokenIndex703 := position, tokenIndex
					if !_rules[rule_]() {
						goto l703
					}
					goto l704
				l703:
					position, tokenIndex = position703, tokenIndex703
				}
			l704:
				{
					position705, tokenIndex705 := position, tokenIndex
					if !_rules[ruleFilius]() {
						goto l706
					}
					goto l705
				l706:
					position, tokenIndex = position705, tokenIndex705
					if !_rules[ruleAuthorSuffix]() {
						goto l701
					}
				}
			l705:
				add(ruleAuthor1, position702)
			}
			return true
		l701:
			position, tokenIndex = position701, tokenIndex701
			return false
		},
		/* 97 Author2 <- <(AuthorWord (_? AuthorWord)*)> */
		func() bool {
			position707, tokenIndex707 := position, tokenIndex
			{
				position708 := position
				if !_rules[ruleAuthorWord]() {
					goto l707
				}
			l709:
				{
					position710, tokenIndex710 := position, tokenIndex
					{
						position711, tokenIndex711 := position, tokenIndex
						if !_rules[rule_]() {
							goto l711
						}
						goto l712
					l711:
						position, tokenIndex = position711, tokenIndex711
					}
				l712:
					if !_rules[ruleAuthorWord]() {
						goto l710
					}
					goto l709
				l710:
					position, tokenIndex = position710, tokenIndex710
				}
				add(ruleAuthor2, position708)
			}
			return true
		l707:
			position, tokenIndex = position707, tokenIndex707
			return false
		},
		/* 98 UnknownAuthor <- <('?' / ((('a' 'u' 'c' 't') / ('a' 'n' 'o' 'n')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position713, tokenIndex713 := position, tokenIndex
			{
				position714 := position
				{
					position715, tokenIndex715 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l716
					}
					position++
					goto l715
				l716:
					position, tokenIndex = position715, tokenIndex715
					{
						position717, tokenIndex717 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l718
						}
						position++
						if buffer[position] != rune('u') {
							goto l718
						}
						position++
						if buffer[position] != rune('c') {
							goto l718
						}
						position++
						if buffer[position] != rune('t') {
							goto l718
						}
						position++
						goto l717
					l718:
						position, tokenIndex = position717, tokenIndex717
						if buffer[position] != rune('a') {
							goto l713
						}
						position++
						if buffer[position] != rune('n') {
							goto l713
						}
						position++
						if buffer[position] != rune('o') {
							goto l713
						}
						position++
						if buffer[position] != rune('n') {
							goto l713
						}
						position++
					}
				l717:
					{
						position719, tokenIndex719 := position, tokenIndex
						{
							position721, tokenIndex721 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l720
							}
							position, tokenIndex = position721, tokenIndex721
						}
						goto l719
					l720:
						position, tokenIndex = position719, tokenIndex719
						if buffer[position] != rune('.') {
							goto l713
						}
						position++
					}
				l719:
				}
			l715:
				add(ruleUnknownAuthor, position714)
			}
			return true
		l713:
			position, tokenIndex = position713, tokenIndex713
			return false
		},
		/* 99 AuthorWord <- <(!(HybridChar / (('b' / 'B') ('o' / 'O') ('l' / 'L') ('d' / 'D') ':')) (AuthorDashInitials / AuthorWord1 / AuthorWord2 / AuthorWord3 / AuthorWord4 / AuthorPrefix))> */
		func() bool {
			position722, tokenIndex722 := position, tokenIndex
			{
				position723 := position
				{
					position724, tokenIndex724 := position, tokenIndex
					{
						position725, tokenIndex725 := position, tokenIndex
						if !_rules[ruleHybridChar]() {
							goto l726
						}
						goto l725
					l726:
						position, tokenIndex = position725, tokenIndex725
						{
							position727, tokenIndex727 := position, tokenIndex
							if buffer[position] != rune('b') {
								goto l728
							}
							position++
							goto l727
						l728:
							position, tokenIndex = position727, tokenIndex727
							if buffer[position] != rune('B') {
								goto l724
							}
							position++
						}
					l727:
						{
							position729, tokenIndex729 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l730
							}
							position++
							goto l729
						l730:
							position, tokenIndex = position729, tokenIndex729
							if buffer[position] != rune('O') {
								goto l724
							}
							position++
						}
					l729:
						{
							position731, tokenIndex731 := position, tokenIndex
							if buffer[position] != rune('l') {
								goto l732
							}
							position++
							goto l731
						l732:
							position, tokenIndex = position731, tokenIndex731
							if buffer[position] != rune('L') {
								goto l724
							}
							position++
						}
					l731:
						{
							position733, tokenIndex733 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l734
							}
							position++
							goto l733
						l734:
							position, tokenIndex = position733, tokenIndex733
							if buffer[position] != rune('D') {
								goto l724
							}
							position++
						}
					l733:
						if buffer[position] != rune(':') {
							goto l724
						}
						position++
					}
				l725:
					goto l722
				l724:
					position, tokenIndex = position724, tokenIndex724
				}
				{
					position735, tokenIndex735 := position, tokenIndex
					if !_rules[ruleAuthorDashInitials]() {
						goto l736
					}
					goto l735
				l736:
					position, tokenIndex = position735, tokenIndex735
					if !_rules[ruleAuthorWord1]() {
						goto l737
					}
					goto l735
				l737:
					position, tokenIndex = position735, tokenIndex735
					if !_rules[ruleAuthorWord2]() {
						goto l738
					}
					goto l735
				l738:
					position, tokenIndex = position735, tokenIndex735
					if !_rules[ruleAuthorWord3]() {
						goto l739
					}
					goto l735
				l739:
					position, tokenIndex = position735, tokenIndex735
					if !_rules[ruleAuthorWord4]() {
						goto l740
					}
					goto l735
				l740:
					position, tokenIndex = position735, tokenIndex735
					if !_rules[ruleAuthorPrefix]() {
						goto l722
					}
				}
			l735:
				add(ruleAuthorWord, position723)
			}
			return true
		l722:
			position, tokenIndex = position722, tokenIndex722
			return false
		},
		/* 100 AuthorEtAl <- <(('a' 'r' 'g' '.') / ('e' 't' ' ' 'a' 'l' '.' '{' '?' '}') / ((('e' 't') / '&') (' ' 'a' 'l') '.'?))> */
		func() bool {
			position741, tokenIndex741 := position, tokenIndex
			{
				position742 := position
				{
					position743, tokenIndex743 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l744
					}
					position++
					if buffer[position] != rune('r') {
						goto l744
					}
					position++
					if buffer[position] != rune('g') {
						goto l744
					}
					position++
					if buffer[position] != rune('.') {
						goto l744
					}
					position++
					goto l743
				l744:
					position, tokenIndex = position743, tokenIndex743
					if buffer[position] != rune('e') {
						goto l745
					}
					position++
					if buffer[position] != rune('t') {
						goto l745
					}
					position++
					if buffer[position] != rune(' ') {
						goto l745
					}
					position++
					if buffer[position] != rune('a') {
						goto l745
					}
					position++
					if buffer[position] != rune('l') {
						goto l745
					}
					position++
					if buffer[position] != rune('.') {
						goto l745
					}
					position++
					if buffer[position] != rune('{') {
						goto l745
					}
					position++
					if buffer[position] != rune('?') {
						goto l745
					}
					position++
					if buffer[position] != rune('}') {
						goto l745
					}
					position++
					goto l743
				l745:
					position, tokenIndex = position743, tokenIndex743
					{
						position746, tokenIndex746 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l747
						}
						position++
						if buffer[position] != rune('t') {
							goto l747
						}
						position++
						goto l746
					l747:
						position, tokenIndex = position746, tokenIndex746
						if buffer[position] != rune('&') {
							goto l741
						}
						position++
					}
				l746:
					if buffer[position] != rune(' ') {
						goto l741
					}
					position++
					if buffer[position] != rune('a') {
						goto l741
					}
					position++
					if buffer[position] != rune('l') {
						goto l741
					}
					position++
					{
						position748, tokenIndex748 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l748
						}
						position++
						goto l749
					l748:
						position, tokenIndex = position748, tokenIndex748
					}
				l749:
				}
			l743:
				add(ruleAuthorEtAl, position742)
			}
			return true
		l741:
			position, tokenIndex = position741, tokenIndex741
			return false
		},
		/* 101 AuthorWord1 <- <(('d' 'u' 'P' 'o' 'n' 't') / ('d' 'e' 'g' 'l' 'i'))> */
		func() bool {
			position750, tokenIndex750 := position, tokenIndex
			{
				position751 := position
				{
					position752, tokenIndex752 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l753
					}
					position++
					if buffer[position] != rune('u') {
						goto l753
					}
					position++
					if buffer[position] != rune('P') {
						goto l753
					}
					position++
					if buffer[position] != rune('o') {
						goto l753
					}
					position++
					if buffer[position] != rune('n') {
						goto l753
					}
					position++
					if buffer[position] != rune('t') {
						goto l753
					}
					position++
					goto l752
				l753:
					position, tokenIndex = position752, tokenIndex752
					if buffer[position] != rune('d') {
						goto l750
					}
					position++
					if buffer[position] != rune('e') {
						goto l750
					}
					position++
					if buffer[position] != rune('g') {
						goto l750
					}
					position++
					if buffer[position] != rune('l') {
						goto l750
					}
					position++
					if buffer[position] != rune('i') {
						goto l750
					}
					position++
				}
			l752:
				add(ruleAuthorWord1, position751)
			}
			return true
		l750:
			position, tokenIndex = position750, tokenIndex750
			return false
		},
		/* 102 AuthorWord2 <- <((AuthorWord3 / AuthorWord4) Dash (AuthorWordSoft / AuthorInitial))> */
		func() bool {
			position754, tokenIndex754 := position, tokenIndex
			{
				position755 := position
				{
					position756, tokenIndex756 := position, tokenIndex
					if !_rules[ruleAuthorWord3]() {
						goto l757
					}
					goto l756
				l757:
					position, tokenIndex = position756, tokenIndex756
					if !_rules[ruleAuthorWord4]() {
						goto l754
					}
				}
			l756:
				if !_rules[ruleDash]() {
					goto l754
				}
				{
					position758, tokenIndex758 := position, tokenIndex
					if !_rules[ruleAuthorWordSoft]() {
						goto l759
					}
					goto l758
				l759:
					position, tokenIndex = position758, tokenIndex758
					if !_rules[ruleAuthorInitial]() {
						goto l754
					}
				}
			l758:
				add(ruleAuthorWord2, position755)
			}
			return true
		l754:
			position, tokenIndex = position754, tokenIndex754
			return false
		},
		/* 103 AuthorWord3 <- <(AuthorPrefixGlued2 (CapAuthorWord / AuthorLowerChar+) '.'?)> */
		func() bool {
			position760, tokenIndex760 := position, tokenIndex
			{
				position761 := position
				if !_rules[ruleAuthorPrefixGlued2]() {
					goto l760
				}
				{
					position762, tokenIndex762 := position, tokenIndex
					if !_rules[ruleCapAuthorWord]() {
						goto l763
					}
					goto l762
				l763:
					position, tokenIndex = position762, tokenIndex762
					if !_rules[ruleAuthorLowerChar]() {
						goto l760
					}
				l764:
					{
						position765, tokenIndex765 := position, tokenIndex
						if !_rules[ruleAuthorLowerChar]() {
							goto l765
						}
						goto l764
					l765:
						position, tokenIndex = position765, tokenIndex765
					}
				}
			l762:
				{
					position766, tokenIndex766 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l766
					}
					position++
					goto l767
				l766:
					position, tokenIndex = position766, tokenIndex766
				}
			l767:
				add(ruleAuthorWord3, position761)
			}
			return true
		l760:
			position, tokenIndex = position760, tokenIndex760
			return false
		},
		/* 104 AuthorWord4 <- <(AuthorPrefixGlued1? (AllCapsAuthorWord / CapAuthorWord) '.'?)> */
		func() bool {
			position768, tokenIndex768 := position, tokenIndex
			{
				position769 := position
				{
					position770, tokenIndex770 := position, tokenIndex
					if !_rules[ruleAuthorPrefixGlued1]() {
						goto l770
					}
					goto l771
				l770:
					position, tokenIndex = position770, tokenIndex770
				}
			l771:
				{
					position772, tokenIndex772 := position, tokenIndex
					if !_rules[ruleAllCapsAuthorWord]() {
						goto l773
					}
					goto l772
				l773:
					position, tokenIndex = position772, tokenIndex772
					if !_rules[ruleCapAuthorWord]() {
						goto l768
					}
				}
			l772:
				{
					position774, tokenIndex774 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l774
					}
					position++
					goto l775
				l774:
					position, tokenIndex = position774, tokenIndex774
				}
			l775:
				add(ruleAuthorWord4, position769)
			}
			return true
		l768:
			position, tokenIndex = position768, tokenIndex768
			return false
		},
		/* 105 AuthorDashInitials <- <(AuthorUpperChar '.'? Dash AuthorUpperChar '.'?)> */
		func() bool {
			position776, tokenIndex776 := position, tokenIndex
			{
				position777 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l776
				}
				{
					position778, tokenIndex778 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l778
					}
					position++
					goto l779
				l778:
					position, tokenIndex = position778, tokenIndex778
				}
			l779:
				if !_rules[ruleDash]() {
					goto l776
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l776
				}
				{
					position780, tokenIndex780 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l780
					}
					position++
					goto l781
				l780:
					position, tokenIndex = position780, tokenIndex780
				}
			l781:
				add(ruleAuthorDashInitials, position777)
			}
			return true
		l776:
			position, tokenIndex = position776, tokenIndex776
			return false
		},
		/* 106 AuthorInitial <- <(AuthorUpperChar '.'?)> */
		func() bool {
			position782, tokenIndex782 := position, tokenIndex
			{
				position783 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l782
				}
				{
					position784, tokenIndex784 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l784
					}
					position++
					goto l785
				l784:
					position, tokenIndex = position784, tokenIndex784
				}
			l785:
				add(ruleAuthorInitial, position783)
			}
			return true
		l782:
			position, tokenIndex = position782, tokenIndex782
			return false
		},
		/* 107 AuthorWordSoft <- <(((AuthorUpperChar (AuthorUpperChar+ / AuthorLowerChar+)) / AuthorLowerChar+) '.'?)> */
		func() bool {
			position786, tokenIndex786 := position, tokenIndex
			{
				position787 := position
				{
					position788, tokenIndex788 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l789
					}
					{
						position790, tokenIndex790 := position, tokenIndex
						if !_rules[ruleAuthorUpperChar]() {
							goto l791
						}
					l792:
						{
							position793, tokenIndex793 := position, tokenIndex
							if !_rules[ruleAuthorUpperChar]() {
								goto l793
							}
							goto l792
						l793:
							position, tokenIndex = position793, tokenIndex793
						}
						goto l790
					l791:
						position, tokenIndex = position790, tokenIndex790
						if !_rules[ruleAuthorLowerChar]() {
							goto l789
						}
					l794:
						{
							position795, tokenIndex795 := position, tokenIndex
							if !_rules[ruleAuthorLowerChar]() {
								goto l795
							}
							goto l794
						l795:
							position, tokenIndex = position795, tokenIndex795
						}
					}
				l790:
					goto l788
				l789:
					position, tokenIndex = position788, tokenIndex788
					if !_rules[ruleAuthorLowerChar]() {
						goto l786
					}
				l796:
					{
						position797, tokenIndex797 := position, tokenIndex
						if !_rules[ruleAuthorLowerChar]() {
							goto l797
						}
						goto l796
					l797:
						position, tokenIndex = position797, tokenIndex797
					}
				}
			l788:
				{
					position798, tokenIndex798 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l798
					}
					position++
					goto l799
				l798:
					position, tokenIndex = position798, tokenIndex798
				}
			l799:
				add(ruleAuthorWordSoft, position787)
			}
			return true
		l786:
			position, tokenIndex = position786, tokenIndex786
			return false
		},
		/* 108 CapAuthorWord <- <(AuthorUpperChar AuthorLowerChar*)> */
		func() bool {
			position800, tokenIndex800 := position, tokenIndex
			{
				position801 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l800
				}
			l802:
				{
					position803, tokenIndex803 := position, tokenIndex
					if !_rules[ruleAuthorLowerChar]() {
						goto l803
					}
					goto l802
				l803:
					position, tokenIndex = position803, tokenIndex803
				}
				add(ruleCapAuthorWord, position801)
			}
			return true
		l800:
			position, tokenIndex = position800, tokenIndex800
			return false
		},
		/* 109 AllCapsAuthorWord <- <(AuthorUpperChar AuthorUpperChar+)> */
		func() bool {
			position804, tokenIndex804 := position, tokenIndex
			{
				position805 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l804
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l804
				}
			l806:
				{
					position807, tokenIndex807 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l807
					}
					goto l806
				l807:
					position, tokenIndex = position807, tokenIndex807
				}
				add(ruleAllCapsAuthorWord, position805)
			}
			return true
		l804:
			position, tokenIndex = position804, tokenIndex804
			return false
		},
		/* 110 Filius <- <(FiliusF / ('f' 'i' 'l' '.') / ('f' 'i' 'l' 'i' 'u' 's'))> */
		func() bool {
			position808, tokenIndex808 := position, tokenIndex
			{
				position809 := position
				{
					position810, tokenIndex810 := position, tokenIndex
					if !_rules[ruleFiliusF]() {
						goto l811
					}
					goto l810
				l811:
					position, tokenIndex = position810, tokenIndex810
					if buffer[position] != rune('f') {
						goto l812
					}
					position++
					if buffer[position] != rune('i') {
						goto l812
					}
					position++
					if buffer[position] != rune('l') {
						goto l812
					}
					position++
					if buffer[position] != rune('.') {
						goto l812
					}
					position++
					goto l810
				l812:
					position, tokenIndex = position810, tokenIndex810
					if buffer[position] != rune('f') {
						goto l808
					}
					position++
					if buffer[position] != rune('i') {
						goto l808
					}
					position++
					if buffer[position] != rune('l') {
						goto l808
					}
					position++
					if buffer[position] != rune('i') {
						goto l808
					}
					position++
					if buffer[position] != rune('u') {
						goto l808
					}
					position++
					if buffer[position] != rune('s') {
						goto l808
					}
					position++
				}
			l810:
				add(ruleFilius, position809)
			}
			return true
		l808:
			position, tokenIndex = position808, tokenIndex808
			return false
		},
		/* 111 FiliusF <- <('f' '.' !(_ Word))> */
		func() bool {
			position813, tokenIndex813 := position, tokenIndex
			{
				position814 := position
				if buffer[position] != rune('f') {
					goto l813
				}
				position++
				if buffer[position] != rune('.') {
					goto l813
				}
				position++
				{
					position815, tokenIndex815 := position, tokenIndex
					if !_rules[rule_]() {
						goto l815
					}
					if !_rules[ruleWord]() {
						goto l815
					}
					goto l813
				l815:
					position, tokenIndex = position815, tokenIndex815
				}
				add(ruleFiliusF, position814)
			}
			return true
		l813:
			position, tokenIndex = position813, tokenIndex813
			return false
		},
		/* 112 FiliusFNoSpace <- <('f' '.')> */
		func() bool {
			position816, tokenIndex816 := position, tokenIndex
			{
				position817 := position
				if buffer[position] != rune('f') {
					goto l816
				}
				position++
				if buffer[position] != rune('.') {
					goto l816
				}
				position++
				add(ruleFiliusFNoSpace, position817)
			}
			return true
		l816:
			position, tokenIndex = position816, tokenIndex816
			return false
		},
		/* 113 AuthorSuffix <- <(('b' 'i' 's') / ('t' 'e' 'r'))> */
		func() bool {
			position818, tokenIndex818 := position, tokenIndex
			{
				position819 := position
				{
					position820, tokenIndex820 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l821
					}
					position++
					if buffer[position] != rune('i') {
						goto l821
					}
					position++
					if buffer[position] != rune('s') {
						goto l821
					}
					position++
					goto l820
				l821:
					position, tokenIndex = position820, tokenIndex820
					if buffer[position] != rune('t') {
						goto l818
					}
					position++
					if buffer[position] != rune('e') {
						goto l818
					}
					position++
					if buffer[position] != rune('r') {
						goto l818
					}
					position++
				}
			l820:
				add(ruleAuthorSuffix, position819)
			}
			return true
		l818:
			position, tokenIndex = position818, tokenIndex818
			return false
		},
		/* 114 AuthorPrefixGlued1 <- <(('d' / 'O' / 'L' / 'M') Apostrophe)> */
		func() bool {
			position822, tokenIndex822 := position, tokenIndex
			{
				position823 := position
				{
					position824, tokenIndex824 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l825
					}
					position++
					goto l824
				l825:
					position, tokenIndex = position824, tokenIndex824
					if buffer[position] != rune('O') {
						goto l826
					}
					position++
					goto l824
				l826:
					position, tokenIndex = position824, tokenIndex824
					if buffer[position] != rune('L') {
						goto l827
					}
					position++
					goto l824
				l827:
					position, tokenIndex = position824, tokenIndex824
					if buffer[position] != rune('M') {
						goto l822
					}
					position++
				}
			l824:
				if !_rules[ruleApostrophe]() {
					goto l822
				}
				add(ruleAuthorPrefixGlued1, position823)
			}
			return true
		l822:
			position, tokenIndex = position822, tokenIndex822
			return false
		},
		/* 115 AuthorPrefixGlued2 <- <((('M' 'c') / ('M' 'a' 'c')) Apostrophe?)> */
		func() bool {
			position828, tokenIndex828 := position, tokenIndex
			{
				position829 := position
				{
					position830, tokenIndex830 := position, tokenIndex
					if buffer[position] != rune('M') {
						goto l831
					}
					position++
					if buffer[position] != rune('c') {
						goto l831
					}
					position++
					goto l830
				l831:
					position, tokenIndex = position830, tokenIndex830
					if buffer[position] != rune('M') {
						goto l828
					}
					position++
					if buffer[position] != rune('a') {
						goto l828
					}
					position++
					if buffer[position] != rune('c') {
						goto l828
					}
					position++
				}
			l830:
				{
					position832, tokenIndex832 := position, tokenIndex
					if !_rules[ruleApostrophe]() {
						goto l832
					}
					goto l833
				l832:
					position, tokenIndex = position832, tokenIndex832
				}
			l833:
				add(ruleAuthorPrefixGlued2, position829)
			}
			return true
		l828:
			position, tokenIndex = position828, tokenIndex828
			return false
		},
		/* 116 AuthorPrefix <- <(AuthorPrefix1 / AuthorPrefix2)> */
		func() bool {
			position834, tokenIndex834 := position, tokenIndex
			{
				position835 := position
				{
					position836, tokenIndex836 := position, tokenIndex
					if !_rules[ruleAuthorPrefix1]() {
						goto l837
					}
					goto l836
				l837:
					position, tokenIndex = position836, tokenIndex836
					if !_rules[ruleAuthorPrefix2]() {
						goto l834
					}
				}
			l836:
				add(ruleAuthorPrefix, position835)
			}
			return true
		l834:
			position, tokenIndex = position834, tokenIndex834
			return false
		},
		/* 117 AuthorPrefix2 <- <(('v' '.' (_? ('d' '.'))?) / (Apostrophe 't'))> */
		func() bool {
			position838, tokenIndex838 := position, tokenIndex
			{
				position839 := position
				{
					position840, tokenIndex840 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l841
					}
					position++
					if buffer[position] != rune('.') {
						goto l841
					}
					position++
					{
						position842, tokenIndex842 := position, tokenIndex
						{
							position844, tokenIndex844 := position, tokenIndex
							if !_rules[rule_]() {
								goto l844
							}
							goto l845
						l844:
							position, tokenIndex = position844, tokenIndex844
						}
					l845:
						if buffer[position] != rune('d') {
							goto l842
						}
						position++
						if buffer[position] != rune('.') {
							goto l842
						}
						position++
						goto l843
					l842:
						position, tokenIndex = position842, tokenIndex842
					}
				l843:
					goto l840
				l841:
					position, tokenIndex = position840, tokenIndex840
					if !_rules[ruleApostrophe]() {
						goto l838
					}
					if buffer[position] != rune('t') {
						goto l838
					}
					position++
				}
			l840:
				add(ruleAuthorPrefix2, position839)
			}
			return true
		l838:
			position, tokenIndex = position838, tokenIndex838
			return false
		},
		/* 118 AuthorPrefix1 <- <((('a' 'b') / ('a' 'f') / ('b' 'i' 's') / ('d' 'a') / ('d' 'e' 'r') / ('d' 'e' 's') / ('d' 'e' 'n') / ('d' 'e' 'l' 'l' 'a') / ('d' 'e' 'l' 'a') / ('d' 'e' 'l' 'l' 'e') / ('d' 'e' 'l') / ('d' 'e' ' ' 'l' 'o' 's') / ('d' 'e') / ('d' 'i') / ('d' 'o' 's') / ('d' 'u') / ('d' 'o') / ('e' 'l') / ('l' 'a') / ('l' 'e') / ('t' 'e' 'n') / ('t' 'e' 'r') / ('v' 'a' 'n') / ('v' 'e' 'r') / ('d' Apostrophe) / ('i' 'n' Apostrophe 't') / ('z' 'u' 'r') / ('z' 'u') / ('v' 'o' 'n' (_ (('d' '.') / ('d' 'e' 'm')))?) / ('v' (_ 'd')?)) &_)> */
		func() bool {
			position846, tokenIndex846 := position, tokenIndex
			{
				position847 := position
				{
					position848, tokenIndex848 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l849
					}
					position++
					if buffer[position] != rune('b') {
						goto l849
					}
					position++
					goto l848
				l849:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('a') {
						goto l850
					}
					position++
					if buffer[position] != rune('f') {
						goto l850
					}
					position++
					goto l848
				l850:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('b') {
						goto l851
					}
					position++
					if buffer[position] != rune('i') {
						goto l851
					}
					position++
					if buffer[position] != rune('s') {
						goto l851
					}
					position++
					goto l848
				l851:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('d') {
						goto l852
					}
					position++
					if buffer[position] != rune('a') {
						goto l852
					}
					position++
					goto l848
				l852:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('d') {
						goto l853
					}
					position++
					if buffer[position] != rune('e') {
						goto l853
					}
					position++
					if buffer[position] != rune('r') {
						goto l853
					}
					position++
					goto l848
				l853:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('d') {
						goto l854
					}
					position++
					if buffer[position] != rune('e') {
						goto l854
					}
					position++
					if buffer[position] != rune('s') {
						goto l854
					}
					position++
					goto l848
				l854:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('d') {
						goto l855
					}
					position++
					if buffer[position] != rune('e') {
						goto l855
					}
					position++
					if buffer[position] != rune('n') {
						goto l855
					}
					position++
					goto l848
				l855:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('d') {
						goto l856
					}
					position++
					if buffer[position] != rune('e') {
						goto l856
					}
					position++
					if buffer[position] != rune('l') {
						goto l856
					}
					position++
					if buffer[position] != rune('l') {
						goto l856
					}
					position++
					if buffer[position] != rune('a') {
						goto l856
					}
					position++
					goto l848
				l856:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('d') {
						goto l857
					}
					position++
					if buffer[position] != rune('e') {
						goto l857
					}
					position++
					if buffer[position] != rune('l') {
						goto l857
					}
					position++
					if buffer[position] != rune('a') {
						goto l857
					}
					position++
					goto l848
				l857:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('d') {
						goto l858
					}
					position++
					if buffer[position] != rune('e') {
						goto l858
					}
					position++
					if buffer[position] != rune('l') {
						goto l858
					}
					position++
					if buffer[position] != rune('l') {
						goto l858
					}
					position++
					if buffer[position] != rune('e') {
						goto l858
					}
					position++
					goto l848
				l858:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('d') {
						goto l859
					}
					position++
					if buffer[position] != rune('e') {
						goto l859
					}
					position++
					if buffer[position] != rune('l') {
						goto l859
					}
					position++
					goto l848
				l859:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('d') {
						goto l860
					}
					position++
					if buffer[position] != rune('e') {
						goto l860
					}
					position++
					if buffer[position] != rune(' ') {
						goto l860
					}
					position++
					if buffer[position] != rune('l') {
						goto l860
					}
					position++
					if buffer[position] != rune('o') {
						goto l860
					}
					position++
					if buffer[position] != rune('s') {
						goto l860
					}
					position++
					goto l848
				l860:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('d') {
						goto l861
					}
					position++
					if buffer[position] != rune('e') {
						goto l861
					}
					position++
					goto l848
				l861:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('d') {
						goto l862
					}
					position++
					if buffer[position] != rune('i') {
						goto l862
					}
					position++
					goto l848
				l862:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('d') {
						goto l863
					}
					position++
					if buffer[position] != rune('o') {
						goto l863
					}
					position++
					if buffer[position] != rune('s') {
						goto l863
					}
					position++
					goto l848
				l863:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('d') {
						goto l864
					}
					position++
					if buffer[position] != rune('u') {
						goto l864
					}
					position++
					goto l848
				l864:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('d') {
						goto l865
					}
					position++
					if buffer[position] != rune('o') {
						goto l865
					}
					position++
					goto l848
				l865:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('e') {
						goto l866
					}
					position++
					if buffer[position] != rune('l') {
						goto l866
					}
					position++
					goto l848
				l866:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('l') {
						goto l867
					}
					position++
					if buffer[position] != rune('a') {
						goto l867
					}
					position++
					goto l848
				l867:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('l') {
						goto l868
					}
					position++
					if buffer[position] != rune('e') {
						goto l868
					}
					position++
					goto l848
				l868:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('t') {
						goto l869
					}
					position++
					if buffer[position] != rune('e') {
						goto l869
					}
					position++
					if buffer[position] != rune('n') {
						goto l869
					}
					position++
					goto l848
				l869:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('t') {
						goto l870
					}
					position++
					if buffer[position] != rune('e') {
						goto l870
					}
					position++
					if buffer[position] != rune('r') {
						goto l870
					}
					position++
					goto l848
				l870:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('v') {
						goto l871
					}
					position++
					if buffer[position] != rune('a') {
						goto l871
					}
					position++
					if buffer[position] != rune('n') {
						goto l871
					}
					position++
					goto l848
				l871:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('v') {
						goto l872
					}
					position++
					if buffer[position] != rune('e') {
						goto l872
					}
					position++
					if buffer[position] != rune('r') {
						goto l872
					}
					position++
					goto l848
				l872:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('d') {
						goto l873
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l873
					}
					goto l848
				l873:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('i') {
						goto l874
					}
					position++
					if buffer[position] != rune('n') {
						goto l874
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l874
					}
					if buffer[position] != rune('t') {
						goto l874
					}
					position++
					goto l848
				l874:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('z') {
						goto l875
					}
					position++
					if buffer[position] != rune('u') {
						goto l875
					}
					position++
					if buffer[position] != rune('r') {
						goto l875
					}
					position++
					goto l848
				l875:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('z') {
						goto l876
					}
					position++
					if buffer[position] != rune('u') {
						goto l876
					}
					position++
					goto l848
				l876:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('v') {
						goto l877
					}
					position++
					if buffer[position] != rune('o') {
						goto l877
					}
					position++
					if buffer[position] != rune('n') {
						goto l877
					}
					position++
					{
						position878, tokenIndex878 := position, tokenIndex
						if !_rules[rule_]() {
							goto l878
						}
						{
							position880, tokenIndex880 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l881
							}
							position++
							if buffer[position] != rune('.') {
								goto l881
							}
							position++
							goto l880
						l881:
							position, tokenIndex = position880, tokenIndex880
							if buffer[position] != rune('d') {
								goto l878
							}
							position++
							if buffer[position] != rune('e') {
								goto l878
							}
							position++
							if buffer[position] != rune('m') {
								goto l878
							}
							position++
						}
					l880:
						goto l879
					l878:
						position, tokenIndex = position878, tokenIndex878
					}
				l879:
					goto l848
				l877:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('v') {
						goto l846
					}
					position++
					{
						position882, tokenIndex882 := position, tokenIndex
						if !_rules[rule_]() {
							goto l882
						}
						if buffer[position] != rune('d') {
							goto l882
						}
						position++
						goto l883
					l882:
						position, tokenIndex = position882, tokenIndex882
					}
				l883:
				}
			l848:
				{
					position884, tokenIndex884 := position, tokenIndex
					if !_rules[rule_]() {
						goto l846
					}
					position, tokenIndex = position884, tokenIndex884
				}
				add(ruleAuthorPrefix1, position847)
			}
			return true
		l846:
			position, tokenIndex = position846, tokenIndex846
			return false
		},
		/* 119 AuthorUpperChar <- <(UpperASCII / MiscodedChar / ('À' / 'Á' / 'Â' / 'Ã' / 'Ä' / 'Å' / 'Æ' / 'Ç' / 'È' / 'É' / 'Ê' / 'Ë' / 'Ì' / 'Í' / 'Î' / 'Ï' / 'Ð' / 'Ñ' / 'Ò' / 'Ó' / 'Ô' / 'Õ' / 'Ö' / 'Ø' / 'Ù' / 'Ú' / 'Û' / 'Ü' / 'Ý' / 'Ć' / 'Č' / 'Ď' / 'İ' / 'Ķ' / 'Ĺ' / 'ĺ' / 'Ľ' / 'ľ' / 'Ł' / 'ł' / 'Ņ' / 'Ō' / 'Ő' / 'Œ' / 'Ř' / 'Ś' / 'Ŝ' / 'Ş' / 'Š' / 'Ÿ' / 'Ź' / 'Ż' / 'Ž' / 'ƒ' / 'Ǿ' / 'Ș' / 'Ț'))> */
		func() bool {
			position885, tokenIndex885 := position, tokenIndex
			{
				position886 := position
				{
					position887, tokenIndex887 := position, tokenIndex
					if !_rules[ruleUpperASCII]() {
						goto l888
					}
					goto l887
				l888:
					position, tokenIndex = position887, tokenIndex887
					if !_rules[ruleMiscodedChar]() {
						goto l889
					}
					goto l887
				l889:
					position, tokenIndex = position887, tokenIndex887
					{
						position890, tokenIndex890 := position, tokenIndex
						if buffer[position] != rune('À') {
							goto l891
						}
						position++
						goto l890
					l891:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Á') {
							goto l892
						}
						position++
						goto l890
					l892:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Â') {
							goto l893
						}
						position++
						goto l890
					l893:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ã') {
							goto l894
						}
						position++
						goto l890
					l894:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ä') {
							goto l895
						}
						position++
						goto l890
					l895:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Å') {
							goto l896
						}
						position++
						goto l890
					l896:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Æ') {
							goto l897
						}
						position++
						goto l890
					l897:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ç') {
							goto l898
						}
						position++
						goto l890
					l898:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('È') {
							goto l899
						}
						position++
						goto l890
					l899:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('É') {
							goto l900
						}
						position++
						goto l890
					l900:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ê') {
							goto l901
						}
						position++
						goto l890
					l901:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ë') {
							goto l902
						}
						position++
						goto l890
					l902:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ì') {
							goto l903
						}
						position++
						goto l890
					l903:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Í') {
							goto l904
						}
						position++
						goto l890
					l904:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Î') {
							goto l905
						}
						position++
						goto l890
					l905:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ï') {
							goto l906
						}
						position++
						goto l890
					l906:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ð') {
							goto l907
						}
						position++
						goto l890
					l907:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ñ') {
							goto l908
						}
						position++
						goto l890
					l908:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ò') {
							goto l909
						}
						position++
						goto l890
					l909:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ó') {
							goto l910
						}
						position++
						goto l890
					l910:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ô') {
							goto l911
						}
						position++
						goto l890
					l911:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Õ') {
							goto l912
						}
						position++
						goto l890
					l912:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ö') {
							goto l913
						}
						position++
						goto l890
					l913:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ø') {
							goto l914
						}
						position++
						goto l890
					l914:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ù') {
							goto l915
						}
						position++
						goto l890
					l915:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ú') {
							goto l916
						}
						position++
						goto l890
					l916:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Û') {
							goto l917
						}
						position++
						goto l890
					l917:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ü') {
							goto l918
						}
						position++
						goto l890
					l918:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ý') {
							goto l919
						}
						position++
						goto l890
					l919:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ć') {
							goto l920
						}
						position++
						goto l890
					l920:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Č') {
							goto l921
						}
						position++
						goto l890
					l921:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ď') {
							goto l922
						}
						position++
						goto l890
					l922:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('İ') {
							goto l923
						}
						position++
						goto l890
					l923:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ķ') {
							goto l924
						}
						position++
						goto l890
					l924:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ĺ') {
							goto l925
						}
						position++
						goto l890
					l925:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('ĺ') {
							goto l926
						}
						position++
						goto l890
					l926:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ľ') {
							goto l927
						}
						position++
						goto l890
					l927:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('ľ') {
							goto l928
						}
						position++
						goto l890
					l928:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ł') {
							goto l929
						}
						position++
						goto l890
					l929:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('ł') {
							goto l930
						}
						position++
						goto l890
					l930:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ņ') {
							goto l931
						}
						position++
						goto l890
					l931:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ō') {
							goto l932
						}
						position++
						goto l890
					l932:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ő') {
							goto l933
						}
						position++
						goto l890
					l933:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Œ') {
							goto l934
						}
						position++
						goto l890
					l934:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ř') {
							goto l935
						}
						position++
						goto l890
					l935:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ś') {
							goto l936
						}
						position++
						goto l890
					l936:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ŝ') {
							goto l937
						}
						position++
						goto l890
					l937:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ş') {
							goto l938
						}
						position++
						goto l890
					l938:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Š') {
							goto l939
						}
						position++
						goto l890
					l939:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ÿ') {
							goto l940
						}
						position++
						goto l890
					l940:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ź') {
							goto l941
						}
						position++
						goto l890
					l941:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ż') {
							goto l942
						}
						position++
						goto l890
					l942:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ž') {
							goto l943
						}
						position++
						goto l890
					l943:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('ƒ') {
							goto l944
						}
						position++
						goto l890
					l944:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ǿ') {
							goto l945
						}
						position++
						goto l890
					l945:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ș') {
							goto l946
						}
						position++
						goto l890
					l946:
						position, tokenIndex = position890, tokenIndex890
						if buffer[position] != rune('Ț') {
							goto l885
						}
						position++
					}
				l890:
				}
			l887:
				add(ruleAuthorUpperChar, position886)
			}
			return true
		l885:
			position, tokenIndex = position885, tokenIndex885
			return false
		},
		/* 120 AuthorLowerChar <- <(LowerASCII / MiscodedChar / Apostrophe / ('à' / 'á' / 'â' / 'ã' / 'ä' / 'å' / 'æ' / 'ç' / 'è' / 'é' / 'ê' / 'ë' / 'ì' / 'í' / 'î' / 'ï' / 'ð' / 'ñ' / 'ò' / 'ó' / 'ó' / 'ô' / 'õ' / 'ö' / 'ø' / 'ù' / 'ú' / 'û' / 'ü' / 'ý' / 'ÿ' / 'ā' / 'ă' / 'ą' / 'ć' / 'ĉ' / 'č' / 'ď' / 'đ' / 'ē' / 'ĕ' / 'ė' / 'ę' / 'ě' / 'ğ' / 'ī' / 'ĭ' / 'İ' / 'ı' / 'ĺ' / 'ľ' / 'ł' / 'ń' / 'ņ' / 'ň' / 'ŏ' / 'ő' / 'œ' / 'ŕ' / 'ř' / 'ś' / 'ş' / 'š' / 'ţ' / 'ť' / 'ũ' / 'ū' / 'ŭ' / 'ů' / 'ű' / 'ź' / 'ż' / 'ž' / 'ſ' / 'ǎ' / 'ǔ' / 'ǧ' / 'ș' / 'ț' / 'ȳ' / 'ß'))> */
		func() bool {
			position947, tokenIndex947 := position, tokenIndex
			{
				position948 := position
				{
					position949, tokenIndex949 := position, tokenIndex
					if !_rules[ruleLowerASCII]() {
						goto l950
					}
					goto l949
				l950:
					position, tokenIndex = position949, tokenIndex949
					if !_rules[ruleMiscodedChar]() {
						goto l951
					}
					goto l949
				l951:
					position, tokenIndex = position949, tokenIndex949
					if !_rules[ruleApostrophe]() {
						goto l952
					}
					goto l949
				l952:
					position, tokenIndex = position949, tokenIndex949
					{
						position953, tokenIndex953 := position, tokenIndex
						if buffer[position] != rune('à') {
							goto l954
						}
						position++
						goto l953
					l954:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('á') {
							goto l955
						}
						position++
						goto l953
					l955:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('â') {
							goto l956
						}
						position++
						goto l953
					l956:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ã') {
							goto l957
						}
						position++
						goto l953
					l957:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ä') {
							goto l958
						}
						position++
						goto l953
					l958:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('å') {
							goto l959
						}
						position++
						goto l953
					l959:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('æ') {
							goto l960
						}
						position++
						goto l953
					l960:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ç') {
							goto l961
						}
						position++
						goto l953
					l961:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('è') {
							goto l962
						}
						position++
						goto l953
					l962:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('é') {
							goto l963
						}
						position++
						goto l953
					l963:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ê') {
							goto l964
						}
						position++
						goto l953
					l964:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ë') {
							goto l965
						}
						position++
						goto l953
					l965:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ì') {
							goto l966
						}
						position++
						goto l953
					l966:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('í') {
							goto l967
						}
						position++
						goto l953
					l967:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('î') {
							goto l968
						}
						position++
						goto l953
					l968:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ï') {
							goto l969
						}
						position++
						goto l953
					l969:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ð') {
							goto l970
						}
						position++
						goto l953
					l970:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ñ') {
							goto l971
						}
						position++
						goto l953
					l971:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ò') {
							goto l972
						}
						position++
						goto l953
					l972:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ó') {
							goto l973
						}
						position++
						goto l953
					l973:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ó') {
							goto l974
						}
						position++
						goto l953
					l974:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ô') {
							goto l975
						}
						position++
						goto l953
					l975:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('õ') {
							goto l976
						}
						position++
						goto l953
					l976:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ö') {
							goto l977
						}
						position++
						goto l953
					l977:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ø') {
							goto l978
						}
						position++
						goto l953
					l978:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ù') {
							goto l979
						}
						position++
						goto l953
					l979:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ú') {
							goto l980
						}
						position++
						goto l953
					l980:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('û') {
							goto l981
						}
						position++
						goto l953
					l981:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ü') {
							goto l982
						}
						position++
						goto l953
					l982:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ý') {
							goto l983
						}
						position++
						goto l953
					l983:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ÿ') {
							goto l984
						}
						position++
						goto l953
					l984:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ā') {
							goto l985
						}
						position++
						goto l953
					l985:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ă') {
							goto l986
						}
						position++
						goto l953
					l986:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ą') {
							goto l987
						}
						position++
						goto l953
					l987:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ć') {
							goto l988
						}
						position++
						goto l953
					l988:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ĉ') {
							goto l989
						}
						position++
						goto l953
					l989:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('č') {
							goto l990
						}
						position++
						goto l953
					l990:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ď') {
							goto l991
						}
						position++
						goto l953
					l991:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('đ') {
							goto l992
						}
						position++
						goto l953
					l992:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ē') {
							goto l993
						}
						position++
						goto l953
					l993:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ĕ') {
							goto l994
						}
						position++
						goto l953
					l994:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ė') {
							goto l995
						}
						position++
						goto l953
					l995:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ę') {
							goto l996
						}
						position++
						goto l953
					l996:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ě') {
							goto l997
						}
						position++
						goto l953
					l997:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ğ') {
							goto l998
						}
						position++
						goto l953
					l998:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ī') {
							goto l999
						}
						position++
						goto l953
					l999:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ĭ') {
							goto l1000
						}
						position++
						goto l953
					l1000:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('İ') {
							goto l1001
						}
						position++
						goto l953
					l1001:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ı') {
							goto l1002
						}
						position++
						goto l953
					l1002:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ĺ') {
							goto l1003
						}
						position++
						goto l953
					l1003:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ľ') {
							goto l1004
						}
						position++
						goto l953
					l1004:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ł') {
							goto l1005
						}
						position++
						goto l953
					l1005:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ń') {
							goto l1006
						}
						position++
						goto l953
					l1006:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ņ') {
							goto l1007
						}
						position++
						goto l953
					l1007:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ň') {
							goto l1008
						}
						position++
						goto l953
					l1008:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ŏ') {
							goto l1009
						}
						position++
						goto l953
					l1009:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ő') {
							goto l1010
						}
						position++
						goto l953
					l1010:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('œ') {
							goto l1011
						}
						position++
						goto l953
					l1011:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ŕ') {
							goto l1012
						}
						position++
						goto l953
					l1012:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ř') {
							goto l1013
						}
						position++
						goto l953
					l1013:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ś') {
							goto l1014
						}
						position++
						goto l953
					l1014:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ş') {
							goto l1015
						}
						position++
						goto l953
					l1015:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('š') {
							goto l1016
						}
						position++
						goto l953
					l1016:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ţ') {
							goto l1017
						}
						position++
						goto l953
					l1017:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ť') {
							goto l1018
						}
						position++
						goto l953
					l1018:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ũ') {
							goto l1019
						}
						position++
						goto l953
					l1019:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ū') {
							goto l1020
						}
						position++
						goto l953
					l1020:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ŭ') {
							goto l1021
						}
						position++
						goto l953
					l1021:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ů') {
							goto l1022
						}
						position++
						goto l953
					l1022:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ű') {
							goto l1023
						}
						position++
						goto l953
					l1023:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ź') {
							goto l1024
						}
						position++
						goto l953
					l1024:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ż') {
							goto l1025
						}
						position++
						goto l953
					l1025:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ž') {
							goto l1026
						}
						position++
						goto l953
					l1026:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ſ') {
							goto l1027
						}
						position++
						goto l953
					l1027:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ǎ') {
							goto l1028
						}
						position++
						goto l953
					l1028:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ǔ') {
							goto l1029
						}
						position++
						goto l953
					l1029:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ǧ') {
							goto l1030
						}
						position++
						goto l953
					l1030:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ș') {
							goto l1031
						}
						position++
						goto l953
					l1031:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ț') {
							goto l1032
						}
						position++
						goto l953
					l1032:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ȳ') {
							goto l1033
						}
						position++
						goto l953
					l1033:
						position, tokenIndex = position953, tokenIndex953
						if buffer[position] != rune('ß') {
							goto l947
						}
						position++
					}
				l953:
				}
			l949:
				add(ruleAuthorLowerChar, position948)
			}
			return true
		l947:
			position, tokenIndex = position947, tokenIndex947
			return false
		},
		/* 121 Year <- <(YearRange / YearApprox / YearWithParens / YearWithPage / YearWithDot / YearWithChar / YearNum)> */
		func() bool {
			position1034, tokenIndex1034 := position, tokenIndex
			{
				position1035 := position
				{
					position1036, tokenIndex1036 := position, tokenIndex
					if !_rules[ruleYearRange]() {
						goto l1037
					}
					goto l1036
				l1037:
					position, tokenIndex = position1036, tokenIndex1036
					if !_rules[ruleYearApprox]() {
						goto l1038
					}
					goto l1036
				l1038:
					position, tokenIndex = position1036, tokenIndex1036
					if !_rules[ruleYearWithParens]() {
						goto l1039
					}
					goto l1036
				l1039:
					position, tokenIndex = position1036, tokenIndex1036
					if !_rules[ruleYearWithPage]() {
						goto l1040
					}
					goto l1036
				l1040:
					position, tokenIndex = position1036, tokenIndex1036
					if !_rules[ruleYearWithDot]() {
						goto l1041
					}
					goto l1036
				l1041:
					position, tokenIndex = position1036, tokenIndex1036
					if !_rules[ruleYearWithChar]() {
						goto l1042
					}
					goto l1036
				l1042:
					position, tokenIndex = position1036, tokenIndex1036
					if !_rules[ruleYearNum]() {
						goto l1034
					}
				}
			l1036:
				add(ruleYear, position1035)
			}
			return true
		l1034:
			position, tokenIndex = position1034, tokenIndex1034
			return false
		},
		/* 122 YearRange <- <(YearNum (Dash / Slash) (Nums+ ('a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '?')*))> */
		func() bool {
			position1043, tokenIndex1043 := position, tokenIndex
			{
				position1044 := position
				if !_rules[ruleYearNum]() {
					goto l1043
				}
				{
					position1045, tokenIndex1045 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l1046
					}
					goto l1045
				l1046:
					position, tokenIndex = position1045, tokenIndex1045
					if !_rules[ruleSlash]() {
						goto l1043
					}
				}
			l1045:
				if !_rules[ruleNums]() {
					goto l1043
				}
			l1047:
				{
					position1048, tokenIndex1048 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1048
					}
					goto l1047
				l1048:
					position, tokenIndex = position1048, tokenIndex1048
				}
			l1049:
				{
					position1050, tokenIndex1050 := position, tokenIndex
					{
						position1051, tokenIndex1051 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l1052
						}
						position++
						goto l1051
					l1052:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('b') {
							goto l1053
						}
						position++
						goto l1051
					l1053:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('c') {
							goto l1054
						}
						position++
						goto l1051
					l1054:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('d') {
							goto l1055
						}
						position++
						goto l1051
					l1055:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('e') {
							goto l1056
						}
						position++
						goto l1051
					l1056:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('f') {
							goto l1057
						}
						position++
						goto l1051
					l1057:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('g') {
							goto l1058
						}
						position++
						goto l1051
					l1058:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('h') {
							goto l1059
						}
						position++
						goto l1051
					l1059:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('i') {
							goto l1060
						}
						position++
						goto l1051
					l1060:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('j') {
							goto l1061
						}
						position++
						goto l1051
					l1061:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('k') {
							goto l1062
						}
						position++
						goto l1051
					l1062:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('l') {
							goto l1063
						}
						position++
						goto l1051
					l1063:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('m') {
							goto l1064
						}
						position++
						goto l1051
					l1064:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('n') {
							goto l1065
						}
						position++
						goto l1051
					l1065:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('o') {
							goto l1066
						}
						position++
						goto l1051
					l1066:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('p') {
							goto l1067
						}
						position++
						goto l1051
					l1067:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('q') {
							goto l1068
						}
						position++
						goto l1051
					l1068:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('r') {
							goto l1069
						}
						position++
						goto l1051
					l1069:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('s') {
							goto l1070
						}
						position++
						goto l1051
					l1070:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('t') {
							goto l1071
						}
						position++
						goto l1051
					l1071:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('u') {
							goto l1072
						}
						position++
						goto l1051
					l1072:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('v') {
							goto l1073
						}
						position++
						goto l1051
					l1073:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('w') {
							goto l1074
						}
						position++
						goto l1051
					l1074:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('x') {
							goto l1075
						}
						position++
						goto l1051
					l1075:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('y') {
							goto l1076
						}
						position++
						goto l1051
					l1076:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('z') {
							goto l1077
						}
						position++
						goto l1051
					l1077:
						position, tokenIndex = position1051, tokenIndex1051
						if buffer[position] != rune('?') {
							goto l1050
						}
						position++
					}
				l1051:
					goto l1049
				l1050:
					position, tokenIndex = position1050, tokenIndex1050
				}
				add(ruleYearRange, position1044)
			}
			return true
		l1043:
			position, tokenIndex = position1043, tokenIndex1043
			return false
		},
		/* 123 YearWithDot <- <(YearNum '.')> */
		func() bool {
			position1078, tokenIndex1078 := position, tokenIndex
			{
				position1079 := position
				if !_rules[ruleYearNum]() {
					goto l1078
				}
				if buffer[position] != rune('.') {
					goto l1078
				}
				position++
				add(ruleYearWithDot, position1079)
			}
			return true
		l1078:
			position, tokenIndex = position1078, tokenIndex1078
			return false
		},
		/* 124 YearApprox <- <('[' _? YearNum _? ']')> */
		func() bool {
			position1080, tokenIndex1080 := position, tokenIndex
			{
				position1081 := position
				if buffer[position] != rune('[') {
					goto l1080
				}
				position++
				{
					position1082, tokenIndex1082 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1082
					}
					goto l1083
				l1082:
					position, tokenIndex = position1082, tokenIndex1082
				}
			l1083:
				if !_rules[ruleYearNum]() {
					goto l1080
				}
				{
					position1084, tokenIndex1084 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1084
					}
					goto l1085
				l1084:
					position, tokenIndex = position1084, tokenIndex1084
				}
			l1085:
				if buffer[position] != rune(']') {
					goto l1080
				}
				position++
				add(ruleYearApprox, position1081)
			}
			return true
		l1080:
			position, tokenIndex = position1080, tokenIndex1080
			return false
		},
		/* 125 YearWithPage <- <((YearWithChar / YearNum) _? ':' _? Nums+)> */
		func() bool {
			position1086, tokenIndex1086 := position, tokenIndex
			{
				position1087 := position
				{
					position1088, tokenIndex1088 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1089
					}
					goto l1088
				l1089:
					position, tokenIndex = position1088, tokenIndex1088
					if !_rules[ruleYearNum]() {
						goto l1086
					}
				}
			l1088:
				{
					position1090, tokenIndex1090 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1090
					}
					goto l1091
				l1090:
					position, tokenIndex = position1090, tokenIndex1090
				}
			l1091:
				if buffer[position] != rune(':') {
					goto l1086
				}
				position++
				{
					position1092, tokenIndex1092 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1092
					}
					goto l1093
				l1092:
					position, tokenIndex = position1092, tokenIndex1092
				}
			l1093:
				if !_rules[ruleNums]() {
					goto l1086
				}
			l1094:
				{
					position1095, tokenIndex1095 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1095
					}
					goto l1094
				l1095:
					position, tokenIndex = position1095, tokenIndex1095
				}
				add(ruleYearWithPage, position1087)
			}
			return true
		l1086:
			position, tokenIndex = position1086, tokenIndex1086
			return false
		},
		/* 126 YearWithParens <- <('(' (YearWithChar / YearNum) ')')> */
		func() bool {
			position1096, tokenIndex1096 := position, tokenIndex
			{
				position1097 := position
				if buffer[position] != rune('(') {
					goto l1096
				}
				position++
				{
					position1098, tokenIndex1098 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1099
					}
					goto l1098
				l1099:
					position, tokenIndex = position1098, tokenIndex1098
					if !_rules[ruleYearNum]() {
						goto l1096
					}
				}
			l1098:
				if buffer[position] != rune(')') {
					goto l1096
				}
				position++
				add(ruleYearWithParens, position1097)
			}
			return true
		l1096:
			position, tokenIndex = position1096, tokenIndex1096
			return false
		},
		/* 127 YearWithChar <- <(YearNum LowerASCII)> */
		func() bool {
			position1100, tokenIndex1100 := position, tokenIndex
			{
				position1101 := position
				if !_rules[ruleYearNum]() {
					goto l1100
				}
				if !_rules[ruleLowerASCII]() {
					goto l1100
				}
				add(ruleYearWithChar, position1101)
			}
			return true
		l1100:
			position, tokenIndex = position1100, tokenIndex1100
			return false
		},
		/* 128 YearNum <- <(('1' / '2') ('0' / '7' / '8' / '9') Nums (Nums / '?') '?'*)> */
		func() bool {
			position1102, tokenIndex1102 := position, tokenIndex
			{
				position1103 := position
				{
					position1104, tokenIndex1104 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l1105
					}
					position++
					goto l1104
				l1105:
					position, tokenIndex = position1104, tokenIndex1104
					if buffer[position] != rune('2') {
						goto l1102
					}
					position++
				}
			l1104:
				{
					position1106, tokenIndex1106 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l1107
					}
					position++
					goto l1106
				l1107:
					position, tokenIndex = position1106, tokenIndex1106
					if buffer[position] != rune('7') {
						goto l1108
					}
					position++
					goto l1106
				l1108:
					position, tokenIndex = position1106, tokenIndex1106
					if buffer[position] != rune('8') {
						goto l1109
					}
					position++
					goto l1106
				l1109:
					position, tokenIndex = position1106, tokenIndex1106
					if buffer[position] != rune('9') {
						goto l1102
					}
					position++
				}
			l1106:
				if !_rules[ruleNums]() {
					goto l1102
				}
				{
					position1110, tokenIndex1110 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1111
					}
					goto l1110
				l1111:
					position, tokenIndex = position1110, tokenIndex1110
					if buffer[position] != rune('?') {
						goto l1102
					}
					position++
				}
			l1110:
			l1112:
				{
					position1113, tokenIndex1113 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l1113
					}
					position++
					goto l1112
				l1113:
					position, tokenIndex = position1113, tokenIndex1113
				}
				add(ruleYearNum, position1103)
			}
			return true
		l1102:
			position, tokenIndex = position1102, tokenIndex1102
			return false
		},
		/* 129 NameUpperChar <- <(UpperChar / UpperCharExtended)> */
		func() bool {
			position1114, tokenIndex1114 := position, tokenIndex
			{
				position1115 := position
				{
					position1116, tokenIndex1116 := position, tokenIndex
					if !_rules[ruleUpperChar]() {
						goto l1117
					}
					goto l1116
				l1117:
					position, tokenIndex = position1116, tokenIndex1116
					if !_rules[ruleUpperCharExtended]() {
						goto l1114
					}
				}
			l1116:
				add(ruleNameUpperChar, position1115)
			}
			return true
		l1114:
			position, tokenIndex = position1114, tokenIndex1114
			return false
		},
		/* 130 UpperCharExtended <- <('Æ' / 'Œ' / 'Ö')> */
		func() bool {
			position1118, tokenIndex1118 := position, tokenIndex
			{
				position1119 := position
				{
					position1120, tokenIndex1120 := position, tokenIndex
					if buffer[position] != rune('Æ') {
						goto l1121
					}
					position++
					goto l1120
				l1121:
					position, tokenIndex = position1120, tokenIndex1120
					if buffer[position] != rune('Œ') {
						goto l1122
					}
					position++
					goto l1120
				l1122:
					position, tokenIndex = position1120, tokenIndex1120
					if buffer[position] != rune('Ö') {
						goto l1118
					}
					position++
				}
			l1120:
				add(ruleUpperCharExtended, position1119)
			}
			return true
		l1118:
			position, tokenIndex = position1118, tokenIndex1118
			return false
		},
		/* 131 UpperChar <- <UpperASCII> */
		func() bool {
			position1123, tokenIndex1123 := position, tokenIndex
			{
				position1124 := position
				if !_rules[ruleUpperASCII]() {
					goto l1123
				}
				add(ruleUpperChar, position1124)
			}
			return true
		l1123:
			position, tokenIndex = position1123, tokenIndex1123
			return false
		},
		/* 132 NameLowerChar <- <(LowerChar / LowerCharExtended / MiscodedChar)> */
		func() bool {
			position1125, tokenIndex1125 := position, tokenIndex
			{
				position1126 := position
				{
					position1127, tokenIndex1127 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l1128
					}
					goto l1127
				l1128:
					position, tokenIndex = position1127, tokenIndex1127
					if !_rules[ruleLowerCharExtended]() {
						goto l1129
					}
					goto l1127
				l1129:
					position, tokenIndex = position1127, tokenIndex1127
					if !_rules[ruleMiscodedChar]() {
						goto l1125
					}
				}
			l1127:
				add(ruleNameLowerChar, position1126)
			}
			return true
		l1125:
			position, tokenIndex = position1125, tokenIndex1125
			return false
		},
		/* 133 MiscodedChar <- <'�'> */
		func() bool {
			position1130, tokenIndex1130 := position, tokenIndex
			{
				position1131 := position
				if buffer[position] != rune('�') {
					goto l1130
				}
				position++
				add(ruleMiscodedChar, position1131)
			}
			return true
		l1130:
			position, tokenIndex = position1130, tokenIndex1130
			return false
		},
		/* 134 LowerCharExtended <- <('æ' / 'œ' / 'à' / 'â' / 'å' / 'ã' / 'ä' / 'á' / 'ç' / 'č' / 'é' / 'è' / 'ë' / 'í' / 'ì' / 'ï' / 'ň' / 'ñ' / 'ñ' / 'ó' / 'ò' / 'ô' / 'ø' / 'õ' / 'ö' / 'ú' / 'û' / 'ù' / 'ü' / 'ŕ' / 'ř' / 'ŗ' / 'ſ' / 'š' / 'š' / 'ş' / 'ß' / 'ž')> */
		func() bool {
			position1132, tokenIndex1132 := position, tokenIndex
			{
				position1133 := position
				{
					position1134, tokenIndex1134 := position, tokenIndex
					if buffer[position] != rune('æ') {
						goto l1135
					}
					position++
					goto l1134
				l1135:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('œ') {
						goto l1136
					}
					position++
					goto l1134
				l1136:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('à') {
						goto l1137
					}
					position++
					goto l1134
				l1137:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('â') {
						goto l1138
					}
					position++
					goto l1134
				l1138:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('å') {
						goto l1139
					}
					position++
					goto l1134
				l1139:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ã') {
						goto l1140
					}
					position++
					goto l1134
				l1140:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ä') {
						goto l1141
					}
					position++
					goto l1134
				l1141:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('á') {
						goto l1142
					}
					position++
					goto l1134
				l1142:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ç') {
						goto l1143
					}
					position++
					goto l1134
				l1143:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('č') {
						goto l1144
					}
					position++
					goto l1134
				l1144:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('é') {
						goto l1145
					}
					position++
					goto l1134
				l1145:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('è') {
						goto l1146
					}
					position++
					goto l1134
				l1146:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ë') {
						goto l1147
					}
					position++
					goto l1134
				l1147:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('í') {
						goto l1148
					}
					position++
					goto l1134
				l1148:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ì') {
						goto l1149
					}
					position++
					goto l1134
				l1149:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ï') {
						goto l1150
					}
					position++
					goto l1134
				l1150:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ň') {
						goto l1151
					}
					position++
					goto l1134
				l1151:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ñ') {
						goto l1152
					}
					position++
					goto l1134
				l1152:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ñ') {
						goto l1153
					}
					position++
					goto l1134
				l1153:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ó') {
						goto l1154
					}
					position++
					goto l1134
				l1154:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ò') {
						goto l1155
					}
					position++
					goto l1134
				l1155:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ô') {
						goto l1156
					}
					position++
					goto l1134
				l1156:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ø') {
						goto l1157
					}
					position++
					goto l1134
				l1157:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('õ') {
						goto l1158
					}
					position++
					goto l1134
				l1158:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ö') {
						goto l1159
					}
					position++
					goto l1134
				l1159:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ú') {
						goto l1160
					}
					position++
					goto l1134
				l1160:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('û') {
						goto l1161
					}
					position++
					goto l1134
				l1161:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ù') {
						goto l1162
					}
					position++
					goto l1134
				l1162:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ü') {
						goto l1163
					}
					position++
					goto l1134
				l1163:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ŕ') {
						goto l1164
					}
					position++
					goto l1134
				l1164:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ř') {
						goto l1165
					}
					position++
					goto l1134
				l1165:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ŗ') {
						goto l1166
					}
					position++
					goto l1134
				l1166:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ſ') {
						goto l1167
					}
					position++
					goto l1134
				l1167:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('š') {
						goto l1168
					}
					position++
					goto l1134
				l1168:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('š') {
						goto l1169
					}
					position++
					goto l1134
				l1169:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ş') {
						goto l1170
					}
					position++
					goto l1134
				l1170:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ß') {
						goto l1171
					}
					position++
					goto l1134
				l1171:
					position, tokenIndex = position1134, tokenIndex1134
					if buffer[position] != rune('ž') {
						goto l1132
					}
					position++
				}
			l1134:
				add(ruleLowerCharExtended, position1133)
			}
			return true
		l1132:
			position, tokenIndex = position1132, tokenIndex1132
			return false
		},
		/* 135 LowerChar <- <LowerASCII> */
		func() bool {
			position1172, tokenIndex1172 := position, tokenIndex
			{
				position1173 := position
				if !_rules[ruleLowerASCII]() {
					goto l1172
				}
				add(ruleLowerChar, position1173)
			}
			return true
		l1172:
			position, tokenIndex = position1172, tokenIndex1172
			return false
		},
		/* 136 SpaceCharEOI <- <(_ / !.)> */
		func() bool {
			position1174, tokenIndex1174 := position, tokenIndex
			{
				position1175 := position
				{
					position1176, tokenIndex1176 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1177
					}
					goto l1176
				l1177:
					position, tokenIndex = position1176, tokenIndex1176
					{
						position1178, tokenIndex1178 := position, tokenIndex
						if !matchDot() {
							goto l1178
						}
						goto l1174
					l1178:
						position, tokenIndex = position1178, tokenIndex1178
					}
				}
			l1176:
				add(ruleSpaceCharEOI, position1175)
			}
			return true
		l1174:
			position, tokenIndex = position1174, tokenIndex1174
			return false
		},
		/* 137 Nums <- <[0-9]> */
		func() bool {
			position1179, tokenIndex1179 := position, tokenIndex
			{
				position1180 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l1179
				}
				position++
				add(ruleNums, position1180)
			}
			return true
		l1179:
			position, tokenIndex = position1179, tokenIndex1179
			return false
		},
		/* 138 LowerGreek <- <[α-ω]> */
		func() bool {
			position1181, tokenIndex1181 := position, tokenIndex
			{
				position1182 := position
				if c := buffer[position]; c < rune('α') || c > rune('ω') {
					goto l1181
				}
				position++
				add(ruleLowerGreek, position1182)
			}
			return true
		l1181:
			position, tokenIndex = position1181, tokenIndex1181
			return false
		},
		/* 139 LowerASCII <- <[a-z]> */
		func() bool {
			position1183, tokenIndex1183 := position, tokenIndex
			{
				position1184 := position
				if c := buffer[position]; c < rune('a') || c > rune('z') {
					goto l1183
				}
				position++
				add(ruleLowerASCII, position1184)
			}
			return true
		l1183:
			position, tokenIndex = position1183, tokenIndex1183
			return false
		},
		/* 140 UpperASCII <- <[A-Z]> */
		func() bool {
			position1185, tokenIndex1185 := position, tokenIndex
			{
				position1186 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l1185
				}
				position++
				add(ruleUpperASCII, position1186)
			}
			return true
		l1185:
			position, tokenIndex = position1185, tokenIndex1185
			return false
		},
		/* 141 Apostrophe <- <(ApostrOther / ApostrASCII)> */
		func() bool {
			position1187, tokenIndex1187 := position, tokenIndex
			{
				position1188 := position
				{
					position1189, tokenIndex1189 := position, tokenIndex
					if !_rules[ruleApostrOther]() {
						goto l1190
					}
					goto l1189
				l1190:
					position, tokenIndex = position1189, tokenIndex1189
					if !_rules[ruleApostrASCII]() {
						goto l1187
					}
				}
			l1189:
				add(ruleApostrophe, position1188)
			}
			return true
		l1187:
			position, tokenIndex = position1187, tokenIndex1187
			return false
		},
		/* 142 ApostrASCII <- <'\''> */
		func() bool {
			position1191, tokenIndex1191 := position, tokenIndex
			{
				position1192 := position
				if buffer[position] != rune('\'') {
					goto l1191
				}
				position++
				add(ruleApostrASCII, position1192)
			}
			return true
		l1191:
			position, tokenIndex = position1191, tokenIndex1191
			return false
		},
		/* 143 ApostrOther <- <('‘' / '’' / '`' / '´')> */
		func() bool {
			position1193, tokenIndex1193 := position, tokenIndex
			{
				position1194 := position
				{
					position1195, tokenIndex1195 := position, tokenIndex
					if buffer[position] != rune('‘') {
						goto l1196
					}
					position++
					goto l1195
				l1196:
					position, tokenIndex = position1195, tokenIndex1195
					if buffer[position] != rune('’') {
						goto l1197
					}
					position++
					goto l1195
				l1197:
					position, tokenIndex = position1195, tokenIndex1195
					if buffer[position] != rune('`') {
						goto l1198
					}
					position++
					goto l1195
				l1198:
					position, tokenIndex = position1195, tokenIndex1195
					if buffer[position] != rune('´') {
						goto l1193
					}
					position++
				}
			l1195:
				add(ruleApostrOther, position1194)
			}
			return true
		l1193:
			position, tokenIndex = position1193, tokenIndex1193
			return false
		},
		/* 144 Dash <- <('-' / DashOther)> */
		func() bool {
			position1199, tokenIndex1199 := position, tokenIndex
			{
				position1200 := position
				{
					position1201, tokenIndex1201 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l1202
					}
					position++
					goto l1201
				l1202:
					position, tokenIndex = position1201, tokenIndex1201
					if !_rules[ruleDashOther]() {
						goto l1199
					}
				}
			l1201:
				add(ruleDash, position1200)
			}
			return true
		l1199:
			position, tokenIndex = position1199, tokenIndex1199
			return false
		},
		/* 145 DashOther <- <'‑'> */
		func() bool {
			position1203, tokenIndex1203 := position, tokenIndex
			{
				position1204 := position
				if buffer[position] != rune('‑') {
					goto l1203
				}
				position++
				add(ruleDashOther, position1204)
			}
			return true
		l1203:
			position, tokenIndex = position1203, tokenIndex1203
			return false
		},
		/* 146 Slash <- <'/'> */
		func() bool {
			position1205, tokenIndex1205 := position, tokenIndex
			{
				position1206 := position
				if buffer[position] != rune('/') {
					goto l1205
				}
				position++
				add(ruleSlash, position1206)
			}
			return true
		l1205:
			position, tokenIndex = position1205, tokenIndex1205
			return false
		},
		/* 147 _ <- <(MultipleSpace / SingleSpace)> */
		func() bool {
			position1207, tokenIndex1207 := position, tokenIndex
			{
				position1208 := position
				{
					position1209, tokenIndex1209 := position, tokenIndex
					if !_rules[ruleMultipleSpace]() {
						goto l1210
					}
					goto l1209
				l1210:
					position, tokenIndex = position1209, tokenIndex1209
					if !_rules[ruleSingleSpace]() {
						goto l1207
					}
				}
			l1209:
				add(rule_, position1208)
			}
			return true
		l1207:
			position, tokenIndex = position1207, tokenIndex1207
			return false
		},
		/* 148 MultipleSpace <- <(SingleSpace SingleSpace+)> */
		func() bool {
			position1211, tokenIndex1211 := position, tokenIndex
			{
				position1212 := position
				if !_rules[ruleSingleSpace]() {
					goto l1211
				}
				if !_rules[ruleSingleSpace]() {
					goto l1211
				}
			l1213:
				{
					position1214, tokenIndex1214 := position, tokenIndex
					if !_rules[ruleSingleSpace]() {
						goto l1214
					}
					goto l1213
				l1214:
					position, tokenIndex = position1214, tokenIndex1214
				}
				add(ruleMultipleSpace, position1212)
			}
			return true
		l1211:
			position, tokenIndex = position1211, tokenIndex1211
			return false
		},
		/* 149 SingleSpace <- <(' ' / OtherSpace)> */
		func() bool {
			position1215, tokenIndex1215 := position, tokenIndex
			{
				position1216 := position
				{
					position1217, tokenIndex1217 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l1218
					}
					position++
					goto l1217
				l1218:
					position, tokenIndex = position1217, tokenIndex1217
					if !_rules[ruleOtherSpace]() {
						goto l1215
					}
				}
			l1217:
				add(ruleSingleSpace, position1216)
			}
			return true
		l1215:
			position, tokenIndex = position1215, tokenIndex1215
			return false
		},
		/* 150 OtherSpace <- <('\u3000' / '\u00a0' / '\t' / '\r' / '\n' / '\f' / '\v')> */
		func() bool {
			position1219, tokenIndex1219 := position, tokenIndex
			{
				position1220 := position
				{
					position1221, tokenIndex1221 := position, tokenIndex
					if buffer[position] != rune('\u3000') {
						goto l1222
					}
					position++
					goto l1221
				l1222:
					position, tokenIndex = position1221, tokenIndex1221
					if buffer[position] != rune('\u00a0') {
						goto l1223
					}
					position++
					goto l1221
				l1223:
					position, tokenIndex = position1221, tokenIndex1221
					if buffer[position] != rune('\t') {
						goto l1224
					}
					position++
					goto l1221
				l1224:
					position, tokenIndex = position1221, tokenIndex1221
					if buffer[position] != rune('\r') {
						goto l1225
					}
					position++
					goto l1221
				l1225:
					position, tokenIndex = position1221, tokenIndex1221
					if buffer[position] != rune('\n') {
						goto l1226
					}
					position++
					goto l1221
				l1226:
					position, tokenIndex = position1221, tokenIndex1221
					if buffer[position] != rune('\f') {
						goto l1227
					}
					position++
					goto l1221
				l1227:
					position, tokenIndex = position1221, tokenIndex1221
					if buffer[position] != rune('\v') {
						goto l1219
					}
					position++
				}
			l1221:
				add(ruleOtherSpace, position1220)
			}
			return true
		l1219:
			position, tokenIndex = position1219, tokenIndex1219
			return false
		},
		/* 151 END <- <!.> */
		func() bool {
			position1228, tokenIndex1228 := position, tokenIndex
			{
				position1229 := position
				{
					position1230, tokenIndex1230 := position, tokenIndex
					if !matchDot() {
						goto l1230
					}
					goto l1228
				l1230:
					position, tokenIndex = position1230, tokenIndex1230
				}
				add(ruleEND, position1229)
			}
			return true
		l1228:
			position, tokenIndex = position1228, tokenIndex1228
			return false
		},
	}
	p.rules = _rules
	return nil
}
