package parser

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleSciName
	ruleTail
	ruleName
	ruleHybridFormula
	ruleHybridFormulaFull
	ruleHybridFormulaPart
	ruleNamedHybrid
	ruleNamedSpeciesHybrid
	ruleNamedGenusHybrid
	ruleGraftChimeraFormula
	ruleGraftChimeraFormulaFull
	ruleGraftChimeraFormulaPart
	ruleNamedGenusGraftChimera
	ruleCandidatusName
	ruleCandidatus
	ruleSingleName
	ruleNameUninomial
	ruleNameApprox
	ruleNameComp
	ruleNameCompSp
	ruleNameCompIsp
	ruleNameSpecies
	ruleGenusWord
	ruleInfraspGroup
	ruleInfraspEpithet
	ruleCultivarWordGroup
	ruleCultivar
	ruleRankCultivar
	ruleNotHybridChar
	ruleCultivarRecursive
	ruleCultivarApostrophe
	ruleSpeciesEpithet
	ruleIgnoredWord
	ruleComparison
	ruleRank
	ruleRankNotho
	ruleRankOtherUncommon
	ruleRankOther
	ruleRankVar
	ruleRankForma
	ruleRankSsp
	ruleRankAgamo
	ruleSubgenusOrSuperspecies
	ruleUninomialCombo
	ruleUninomialCombo1
	ruleUninomialCombo2
	ruleSubgenus
	ruleSubgenus2
	ruleSubgenus1
	ruleRankUninomial
	ruleRankUninomialPlain
	ruleRankUninomialNotho
	ruleUninomial
	ruleUninomialWord
	ruleAbbrSubgenus
	ruleAbbrGenus
	ruleCapWord
	ruleCapWord1
	ruleCapWordWithDash
	ruleTwoLetterGenusDashedSegment
	ruleWordAfterDash
	ruleUpperAfterDash
	ruleLowerAfterDash
	ruleTwoLetterGenus
	ruleWord
	ruleWord1
	ruleWordStartsWithDigit
	ruleWord2
	ruleWordApostr
	ruleWord4
	ruleDotPrefix
	ruleMultiDashedWord
	ruleHybridChar
	ruleGraftChimeraChar
	ruleApproxNameIgnored
	ruleApproximation
	ruleAuthorship
	ruleAuthorshipCombo
	ruleOriginalAuthorship
	ruleOriginalAuthorshipComb
	ruleCombinationAuthorship
	ruleBasionymAuthorshipMissingParens
	ruleMissingParensStart
	ruleMissingParensEnd
	ruleBasionymAuthorshipYearMisformed
	ruleBasionymAuthorship
	ruleBasionymAuthorship1
	ruleBasionymAuthorship2Parens
	ruleAuthorsGroup
	ruleAuthorsTeam
	ruleAuthorSep
	ruleAuthorSep1
	ruleAuthorSep2
	ruleAuthorSepSpanish
	ruleAuthorEx
	ruleAuthorIn
	ruleAuthorEmend
	ruleAuthor
	ruleAuthor0
	ruleAuthor1
	ruleAuthor2
	ruleUnknownAuthor
	ruleAuthorWord
	ruleAuthorEtAl
	ruleAuthorWord1
	ruleAuthorWord2
	ruleAuthorWord3
	ruleAuthorWord4
	ruleAuthorDashInitials
	ruleAuthorInitial
	ruleAuthorWordSoft
	ruleCapAuthorWord
	ruleAllCapsAuthorWord
	ruleFilius
	ruleFiliusF
	ruleFiliusFNoSpace
	ruleAuthorSuffix
	ruleAuthorPrefixGlued1
	ruleAuthorPrefixGlued2
	ruleAuthorPrefix
	ruleAuthorPrefix2
	ruleAuthorPrefix1
	ruleAuthorUpperChar
	ruleAuthorLowerChar
	ruleYear
	ruleYearRange
	ruleYearWithDot
	ruleYearApprox
	ruleYearWithPage
	ruleYearWithParens
	ruleYearWithChar
	ruleYearNum
	ruleNameUpperChar
	ruleUpperCharExtended
	ruleUpperChar
	ruleNameLowerChar
	ruleMiscodedChar
	ruleLowerCharExtended
	ruleLowerChar
	ruleSpaceCharEOI
	ruleNums
	ruleLowerGreek
	ruleLowerASCII
	ruleUpperASCII
	ruleApostrophe
	ruleApostrASCII
	ruleApostrOther
	ruleDash
	ruleDashOther
	ruleSlash
	rule_
	ruleMultipleSpace
	ruleSingleSpace
	ruleOtherSpace
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"SciName",
	"Tail",
	"Name",
	"HybridFormula",
	"HybridFormulaFull",
	"HybridFormulaPart",
	"NamedHybrid",
	"NamedSpeciesHybrid",
	"NamedGenusHybrid",
	"GraftChimeraFormula",
	"GraftChimeraFormulaFull",
	"GraftChimeraFormulaPart",
	"NamedGenusGraftChimera",
	"CandidatusName",
	"Candidatus",
	"SingleName",
	"NameUninomial",
	"NameApprox",
	"NameComp",
	"NameCompSp",
	"NameCompIsp",
	"NameSpecies",
	"GenusWord",
	"InfraspGroup",
	"InfraspEpithet",
	"CultivarWordGroup",
	"Cultivar",
	"RankCultivar",
	"NotHybridChar",
	"CultivarRecursive",
	"CultivarApostrophe",
	"SpeciesEpithet",
	"IgnoredWord",
	"Comparison",
	"Rank",
	"RankNotho",
	"RankOtherUncommon",
	"RankOther",
	"RankVar",
	"RankForma",
	"RankSsp",
	"RankAgamo",
	"SubgenusOrSuperspecies",
	"UninomialCombo",
	"UninomialCombo1",
	"UninomialCombo2",
	"Subgenus",
	"Subgenus2",
	"Subgenus1",
	"RankUninomial",
	"RankUninomialPlain",
	"RankUninomialNotho",
	"Uninomial",
	"UninomialWord",
	"AbbrSubgenus",
	"AbbrGenus",
	"CapWord",
	"CapWord1",
	"CapWordWithDash",
	"TwoLetterGenusDashedSegment",
	"WordAfterDash",
	"UpperAfterDash",
	"LowerAfterDash",
	"TwoLetterGenus",
	"Word",
	"Word1",
	"WordStartsWithDigit",
	"Word2",
	"WordApostr",
	"Word4",
	"DotPrefix",
	"MultiDashedWord",
	"HybridChar",
	"GraftChimeraChar",
	"ApproxNameIgnored",
	"Approximation",
	"Authorship",
	"AuthorshipCombo",
	"OriginalAuthorship",
	"OriginalAuthorshipComb",
	"CombinationAuthorship",
	"BasionymAuthorshipMissingParens",
	"MissingParensStart",
	"MissingParensEnd",
	"BasionymAuthorshipYearMisformed",
	"BasionymAuthorship",
	"BasionymAuthorship1",
	"BasionymAuthorship2Parens",
	"AuthorsGroup",
	"AuthorsTeam",
	"AuthorSep",
	"AuthorSep1",
	"AuthorSep2",
	"AuthorSepSpanish",
	"AuthorEx",
	"AuthorIn",
	"AuthorEmend",
	"Author",
	"Author0",
	"Author1",
	"Author2",
	"UnknownAuthor",
	"AuthorWord",
	"AuthorEtAl",
	"AuthorWord1",
	"AuthorWord2",
	"AuthorWord3",
	"AuthorWord4",
	"AuthorDashInitials",
	"AuthorInitial",
	"AuthorWordSoft",
	"CapAuthorWord",
	"AllCapsAuthorWord",
	"Filius",
	"FiliusF",
	"FiliusFNoSpace",
	"AuthorSuffix",
	"AuthorPrefixGlued1",
	"AuthorPrefixGlued2",
	"AuthorPrefix",
	"AuthorPrefix2",
	"AuthorPrefix1",
	"AuthorUpperChar",
	"AuthorLowerChar",
	"Year",
	"YearRange",
	"YearWithDot",
	"YearApprox",
	"YearWithPage",
	"YearWithParens",
	"YearWithChar",
	"YearNum",
	"NameUpperChar",
	"UpperCharExtended",
	"UpperChar",
	"NameLowerChar",
	"MiscodedChar",
	"LowerCharExtended",
	"LowerChar",
	"SpaceCharEOI",
	"Nums",
	"LowerGreek",
	"LowerASCII",
	"UpperASCII",
	"Apostrophe",
	"ApostrASCII",
	"ApostrOther",
	"Dash",
	"DashOther",
	"Slash",
	"_",
	"MultipleSpace",
	"SingleSpace",
	"OtherSpace",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Engine struct {
	baseEngine

	Buffer string
	buffer []rune
	rules  [156]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Engine) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Engine) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Engine
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Engine) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Engine) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Engine) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Engine) error {
	return func(p *Engine) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Engine) error {
	return func(p *Engine) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Engine) Init(options ...func(*Engine) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 SciName <- <(_? Name Tail END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rule_]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				if !_rules[ruleName]() {
					goto l0
				}
				if !_rules[ruleTail]() {
					goto l0
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleSciName, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Tail <- <((_ / ';' / ',') .*)?> */
		func() bool {
			{
				position5 := position
				{
					position6, tokenIndex6 := position, tokenIndex
					{
						position8, tokenIndex8 := position, tokenIndex
						if !_rules[rule_]() {
							goto l9
						}
						goto l8
					l9:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(';') {
							goto l10
						}
						position++
						goto l8
					l10:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(',') {
							goto l6
						}
						position++
					}
				l8:
				l11:
					{
						position12, tokenIndex12 := position, tokenIndex
						if !matchDot() {
							goto l12
						}
						goto l11
					l12:
						position, tokenIndex = position12, tokenIndex12
					}
					goto l7
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
			l7:
				add(ruleTail, position5)
			}
			return true
		},
		/* 2 Name <- <(NamedGenusGraftChimera / GraftChimeraFormula / NamedHybrid / HybridFormula / CandidatusName / SingleName)> */
		func() bool {
			position13, tokenIndex13 := position, tokenIndex
			{
				position14 := position
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleNamedGenusGraftChimera]() {
						goto l16
					}
					goto l15
				l16:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleGraftChimeraFormula]() {
						goto l17
					}
					goto l15
				l17:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleNamedHybrid]() {
						goto l18
					}
					goto l15
				l18:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleHybridFormula]() {
						goto l19
					}
					goto l15
				l19:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleCandidatusName]() {
						goto l20
					}
					goto l15
				l20:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleSingleName]() {
						goto l13
					}
				}
			l15:
				add(ruleName, position14)
			}
			return true
		l13:
			position, tokenIndex = position13, tokenIndex13
			return false
		},
		/* 3 HybridFormula <- <(SingleName (_ (HybridFormulaPart / HybridFormulaFull))+)> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				if !_rules[ruleSingleName]() {
					goto l21
				}
				if !_rules[rule_]() {
					goto l21
				}
				{
					position25, tokenIndex25 := position, tokenIndex
					if !_rules[ruleHybridFormulaPart]() {
						goto l26
					}
					goto l25
				l26:
					position, tokenIndex = position25, tokenIndex25
					if !_rules[ruleHybridFormulaFull]() {
						goto l21
					}
				}
			l25:
			l23:
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[rule_]() {
						goto l24
					}
					{
						position27, tokenIndex27 := position, tokenIndex
						if !_rules[ruleHybridFormulaPart]() {
							goto l28
						}
						goto l27
					l28:
						position, tokenIndex = position27, tokenIndex27
						if !_rules[ruleHybridFormulaFull]() {
							goto l24
						}
					}
				l27:
					goto l23
				l24:
					position, tokenIndex = position24, tokenIndex24
				}
				add(ruleHybridFormula, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 4 HybridFormulaFull <- <(HybridChar (_ SingleName)?)> */
		func() bool {
			position29, tokenIndex29 := position, tokenIndex
			{
				position30 := position
				if !_rules[ruleHybridChar]() {
					goto l29
				}
				{
					position31, tokenIndex31 := position, tokenIndex
					if !_rules[rule_]() {
						goto l31
					}
					if !_rules[ruleSingleName]() {
						goto l31
					}
					goto l32
				l31:
					position, tokenIndex = position31, tokenIndex31
				}
			l32:
				add(ruleHybridFormulaFull, position30)
			}
			return true
		l29:
			position, tokenIndex = position29, tokenIndex29
			return false
		},
		/* 5 HybridFormulaPart <- <(HybridChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position33, tokenIndex33 := position, tokenIndex
			{
				position34 := position
				if !_rules[ruleHybridChar]() {
					goto l33
				}
				if !_rules[rule_]() {
					goto l33
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l33
				}
				{
					position35, tokenIndex35 := position, tokenIndex
					if !_rules[rule_]() {
						goto l35
					}
					if !_rules[ruleInfraspGroup]() {
						goto l35
					}
					goto l36
				l35:
					position, tokenIndex = position35, tokenIndex35
				}
			l36:
				add(ruleHybridFormulaPart, position34)
			}
			return true
		l33:
			position, tokenIndex = position33, tokenIndex33
			return false
		},
		/* 6 NamedHybrid <- <(NamedGenusHybrid / NamedSpeciesHybrid)> */
		func() bool {
			position37, tokenIndex37 := position, tokenIndex
			{
				position38 := position
				{
					position39, tokenIndex39 := position, tokenIndex
					if !_rules[ruleNamedGenusHybrid]() {
						goto l40
					}
					goto l39
				l40:
					position, tokenIndex = position39, tokenIndex39
					if !_rules[ruleNamedSpeciesHybrid]() {
						goto l37
					}
				}
			l39:
				add(ruleNamedHybrid, position38)
			}
			return true
		l37:
			position, tokenIndex = position37, tokenIndex37
			return false
		},
		/* 7 NamedSpeciesHybrid <- <(GenusWord (_ Subgenus)? (_ Comparison)? _ HybridChar _? SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position41, tokenIndex41 := position, tokenIndex
			{
				position42 := position
				if !_rules[ruleGenusWord]() {
					goto l41
				}
				{
					position43, tokenIndex43 := position, tokenIndex
					if !_rules[rule_]() {
						goto l43
					}
					if !_rules[ruleSubgenus]() {
						goto l43
					}
					goto l44
				l43:
					position, tokenIndex = position43, tokenIndex43
				}
			l44:
				{
					position45, tokenIndex45 := position, tokenIndex
					if !_rules[rule_]() {
						goto l45
					}
					if !_rules[ruleComparison]() {
						goto l45
					}
					goto l46
				l45:
					position, tokenIndex = position45, tokenIndex45
				}
			l46:
				if !_rules[rule_]() {
					goto l41
				}
				if !_rules[ruleHybridChar]() {
					goto l41
				}
				{
					position47, tokenIndex47 := position, tokenIndex
					if !_rules[rule_]() {
						goto l47
					}
					goto l48
				l47:
					position, tokenIndex = position47, tokenIndex47
				}
			l48:
				if !_rules[ruleSpeciesEpithet]() {
					goto l41
				}
				{
					position49, tokenIndex49 := position, tokenIndex
					if !_rules[rule_]() {
						goto l49
					}
					if !_rules[ruleInfraspGroup]() {
						goto l49
					}
					goto l50
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
			l50:
				add(ruleNamedSpeciesHybrid, position42)
			}
			return true
		l41:
			position, tokenIndex = position41, tokenIndex41
			return false
		},
		/* 8 NamedGenusHybrid <- <(HybridChar _? SingleName)> */
		func() bool {
			position51, tokenIndex51 := position, tokenIndex
			{
				position52 := position
				if !_rules[ruleHybridChar]() {
					goto l51
				}
				{
					position53, tokenIndex53 := position, tokenIndex
					if !_rules[rule_]() {
						goto l53
					}
					goto l54
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
			l54:
				if !_rules[ruleSingleName]() {
					goto l51
				}
				add(ruleNamedGenusHybrid, position52)
			}
			return true
		l51:
			position, tokenIndex = position51, tokenIndex51
			return false
		},
		/* 9 GraftChimeraFormula <- <(SingleName (_ (GraftChimeraFormulaPart / GraftChimeraFormulaFull))+)> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				if !_rules[ruleSingleName]() {
					goto l55
				}
				if !_rules[rule_]() {
					goto l55
				}
				{
					position59, tokenIndex59 := position, tokenIndex
					if !_rules[ruleGraftChimeraFormulaPart]() {
						goto l60
					}
					goto l59
				l60:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleGraftChimeraFormulaFull]() {
						goto l55
					}
				}
			l59:
			l57:
				{
					position58, tokenIndex58 := position, tokenIndex
					if !_rules[rule_]() {
						goto l58
					}
					{
						position61, tokenIndex61 := position, tokenIndex
						if !_rules[ruleGraftChimeraFormulaPart]() {
							goto l62
						}
						goto l61
					l62:
						position, tokenIndex = position61, tokenIndex61
						if !_rules[ruleGraftChimeraFormulaFull]() {
							goto l58
						}
					}
				l61:
					goto l57
				l58:
					position, tokenIndex = position58, tokenIndex58
				}
				add(ruleGraftChimeraFormula, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 10 GraftChimeraFormulaFull <- <(GraftChimeraChar (_ SingleName)?)> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l63
				}
				{
					position65, tokenIndex65 := position, tokenIndex
					if !_rules[rule_]() {
						goto l65
					}
					if !_rules[ruleSingleName]() {
						goto l65
					}
					goto l66
				l65:
					position, tokenIndex = position65, tokenIndex65
				}
			l66:
				add(ruleGraftChimeraFormulaFull, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 11 GraftChimeraFormulaPart <- <(GraftChimeraChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position67, tokenIndex67 := position, tokenIndex
			{
				position68 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l67
				}
				if !_rules[rule_]() {
					goto l67
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l67
				}
				{
					position69, tokenIndex69 := position, tokenIndex
					if !_rules[rule_]() {
						goto l69
					}
					if !_rules[ruleInfraspGroup]() {
						goto l69
					}
					goto l70
				l69:
					position, tokenIndex = position69, tokenIndex69
				}
			l70:
				add(ruleGraftChimeraFormulaPart, position68)
			}
			return true
		l67:
			position, tokenIndex = position67, tokenIndex67
			return false
		},
		/* 12 NamedGenusGraftChimera <- <(GraftChimeraChar _? SingleName)> */
		func() bool {
			position71, tokenIndex71 := position, tokenIndex
			{
				position72 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l71
				}
				{
					position73, tokenIndex73 := position, tokenIndex
					if !_rules[rule_]() {
						goto l73
					}
					goto l74
				l73:
					position, tokenIndex = position73, tokenIndex73
				}
			l74:
				if !_rules[ruleSingleName]() {
					goto l71
				}
				add(ruleNamedGenusGraftChimera, position72)
			}
			return true
		l71:
			position, tokenIndex = position71, tokenIndex71
			return false
		},
		/* 13 CandidatusName <- <(Candidatus _ SingleName)> */
		func() bool {
			position75, tokenIndex75 := position, tokenIndex
			{
				position76 := position
				if !_rules[ruleCandidatus]() {
					goto l75
				}
				if !_rules[rule_]() {
					goto l75
				}
				if !_rules[ruleSingleName]() {
					goto l75
				}
				add(ruleCandidatusName, position76)
			}
			return true
		l75:
			position, tokenIndex = position75, tokenIndex75
			return false
		},
		/* 14 Candidatus <- <('C' 'a' 'n' 'd' 'i' 'd' 'a' 't' 'u' 's')> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if buffer[position] != rune('C') {
					goto l77
				}
				position++
				if buffer[position] != rune('a') {
					goto l77
				}
				position++
				if buffer[position] != rune('n') {
					goto l77
				}
				position++
				if buffer[position] != rune('d') {
					goto l77
				}
				position++
				if buffer[position] != rune('i') {
					goto l77
				}
				position++
				if buffer[position] != rune('d') {
					goto l77
				}
				position++
				if buffer[position] != rune('a') {
					goto l77
				}
				position++
				if buffer[position] != rune('t') {
					goto l77
				}
				position++
				if buffer[position] != rune('u') {
					goto l77
				}
				position++
				if buffer[position] != rune('s') {
					goto l77
				}
				position++
				add(ruleCandidatus, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 15 SingleName <- <(NameComp / NameApprox / NameSpecies / NameUninomial)> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				{
					position81, tokenIndex81 := position, tokenIndex
					if !_rules[ruleNameComp]() {
						goto l82
					}
					goto l81
				l82:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameApprox]() {
						goto l83
					}
					goto l81
				l83:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameSpecies]() {
						goto l84
					}
					goto l81
				l84:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameUninomial]() {
						goto l79
					}
				}
			l81:
				add(ruleSingleName, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 16 NameUninomial <- <((UninomialCombo / Uninomial) (_ CultivarWordGroup)?)> */
		func() bool {
			position85, tokenIndex85 := position, tokenIndex
			{
				position86 := position
				{
					position87, tokenIndex87 := position, tokenIndex
					if !_rules[ruleUninomialCombo]() {
						goto l88
					}
					goto l87
				l88:
					position, tokenIndex = position87, tokenIndex87
					if !_rules[ruleUninomial]() {
						goto l85
					}
				}
			l87:
				{
					position89, tokenIndex89 := position, tokenIndex
					if !_rules[rule_]() {
						goto l89
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l89
					}
					goto l90
				l89:
					position, tokenIndex = position89, tokenIndex89
				}
			l90:
				add(ruleNameUninomial, position86)
			}
			return true
		l85:
			position, tokenIndex = position85, tokenIndex85
			return false
		},
		/* 17 NameApprox <- <(GenusWord (_ SpeciesEpithet)? _ Approximation ApproxNameIgnored)> */
		func() bool {
			position91, tokenIndex91 := position, tokenIndex
			{
				position92 := position
				if !_rules[ruleGenusWord]() {
					goto l91
				}
				{
					position93, tokenIndex93 := position, tokenIndex
					if !_rules[rule_]() {
						goto l93
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l93
					}
					goto l94
				l93:
					position, tokenIndex = position93, tokenIndex93
				}
			l94:
				if !_rules[rule_]() {
					goto l91
				}
				if !_rules[ruleApproximation]() {
					goto l91
				}
				if !_rules[ruleApproxNameIgnored]() {
					goto l91
				}
				add(ruleNameApprox, position92)
			}
			return true
		l91:
			position, tokenIndex = position91, tokenIndex91
			return false
		},
		/* 18 NameComp <- <(NameCompIsp / NameCompSp)> */
		func() bool {
			position95, tokenIndex95 := position, tokenIndex
			{
				position96 := position
				{
					position97, tokenIndex97 := position, tokenIndex
					if !_rules[ruleNameCompIsp]() {
						goto l98
					}
					goto l97
				l98:
					position, tokenIndex = position97, tokenIndex97
					if !_rules[ruleNameCompSp]() {
						goto l95
					}
				}
			l97:
				add(ruleNameComp, position96)
			}
			return true
		l95:
			position, tokenIndex = position95, tokenIndex95
			return false
		},
		/* 19 NameCompSp <- <(GenusWord _ Comparison (_ SpeciesEpithet)?)> */
		func() bool {
			position99, tokenIndex99 := position, tokenIndex
			{
				position100 := position
				if !_rules[ruleGenusWord]() {
					goto l99
				}
				if !_rules[rule_]() {
					goto l99
				}
				if !_rules[ruleComparison]() {
					goto l99
				}
				{
					position101, tokenIndex101 := position, tokenIndex
					if !_rules[rule_]() {
						goto l101
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l101
					}
					goto l102
				l101:
					position, tokenIndex = position101, tokenIndex101
				}
			l102:
				add(ruleNameCompSp, position100)
			}
			return true
		l99:
			position, tokenIndex = position99, tokenIndex99
			return false
		},
		/* 20 NameCompIsp <- <(GenusWord _ SpeciesEpithet _ Comparison (_ InfraspEpithet)?)> */
		func() bool {
			position103, tokenIndex103 := position, tokenIndex
			{
				position104 := position
				if !_rules[ruleGenusWord]() {
					goto l103
				}
				if !_rules[rule_]() {
					goto l103
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l103
				}
				if !_rules[rule_]() {
					goto l103
				}
				if !_rules[ruleComparison]() {
					goto l103
				}
				{
					position105, tokenIndex105 := position, tokenIndex
					if !_rules[rule_]() {
						goto l105
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l105
					}
					goto l106
				l105:
					position, tokenIndex = position105, tokenIndex105
				}
			l106:
				add(ruleNameCompIsp, position104)
			}
			return true
		l103:
			position, tokenIndex = position103, tokenIndex103
			return false
		},
		/* 21 NameSpecies <- <(GenusWord (_? (Subgenus / SubgenusOrSuperspecies))? _ SpeciesEpithet (_ InfraspGroup)? (_ CultivarWordGroup)?)> */
		func() bool {
			position107, tokenIndex107 := position, tokenIndex
			{
				position108 := position
				if !_rules[ruleGenusWord]() {
					goto l107
				}
				{
					position109, tokenIndex109 := position, tokenIndex
					{
						position111, tokenIndex111 := position, tokenIndex
						if !_rules[rule_]() {
							goto l111
						}
						goto l112
					l111:
						position, tokenIndex = position111, tokenIndex111
					}
				l112:
					{
						position113, tokenIndex113 := position, tokenIndex
						if !_rules[ruleSubgenus]() {
							goto l114
						}
						goto l113
					l114:
						position, tokenIndex = position113, tokenIndex113
						if !_rules[ruleSubgenusOrSuperspecies]() {
							goto l109
						}
					}
				l113:
					goto l110
				l109:
					position, tokenIndex = position109, tokenIndex109
				}
			l110:
				if !_rules[rule_]() {
					goto l107
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l107
				}
				{
					position115, tokenIndex115 := position, tokenIndex
					if !_rules[rule_]() {
						goto l115
					}
					if !_rules[ruleInfraspGroup]() {
						goto l115
					}
					goto l116
				l115:
					position, tokenIndex = position115, tokenIndex115
				}
			l116:
				{
					position117, tokenIndex117 := position, tokenIndex
					if !_rules[rule_]() {
						goto l117
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l117
					}
					goto l118
				l117:
					position, tokenIndex = position117, tokenIndex117
				}
			l118:
				add(ruleNameSpecies, position108)
			}
			return true
		l107:
			position, tokenIndex = position107, tokenIndex107
			return false
		},
		/* 22 GenusWord <- <((AbbrGenus / UninomialWord) !(_ AuthorWord))> */
		func() bool {
			position119, tokenIndex119 := position, tokenIndex
			{
				position120 := position
				{
					position121, tokenIndex121 := position, tokenIndex
					if !_rules[ruleAbbrGenus]() {
						goto l122
					}
					goto l121
				l122:
					position, tokenIndex = position121, tokenIndex121
					if !_rules[ruleUninomialWord]() {
						goto l119
					}
				}
			l121:
				{
					position123, tokenIndex123 := position, tokenIndex
					if !_rules[rule_]() {
						goto l123
					}
					if !_rules[ruleAuthorWord]() {
						goto l123
					}
					goto l119
				l123:
					position, tokenIndex = position123, tokenIndex123
				}
				add(ruleGenusWord, position120)
			}
			return true
		l119:
			position, tokenIndex = position119, tokenIndex119
			return false
		},
		/* 23 InfraspGroup <- <(InfraspEpithet (_ InfraspEpithet)? (_ InfraspEpithet)?)> */
		func() bool {
			position124, tokenIndex124 := position, tokenIndex
			{
				position125 := position
				if !_rules[ruleInfraspEpithet]() {
					goto l124
				}
				{
					position126, tokenIndex126 := position, tokenIndex
					if !_rules[rule_]() {
						goto l126
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l126
					}
					goto l127
				l126:
					position, tokenIndex = position126, tokenIndex126
				}
			l127:
				{
					position128, tokenIndex128 := position, tokenIndex
					if !_rules[rule_]() {
						goto l128
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l128
					}
					goto l129
				l128:
					position, tokenIndex = position128, tokenIndex128
				}
			l129:
				add(ruleInfraspGroup, position125)
			}
			return true
		l124:
			position, tokenIndex = position124, tokenIndex124
			return false
		},
		/* 24 InfraspEpithet <- <((Rank _?)? !(AuthorEx / AuthorIn) Word (_ IgnoredWord)? (_? Authorship)?)> */
		func() bool {
			position130, tokenIndex130 := position, tokenIndex
			{
				position131 := position
				{
					position132, tokenIndex132 := position, tokenIndex
					if !_rules[ruleRank]() {
						goto l132
					}
					{
						position134, tokenIndex134 := position, tokenIndex
						if !_rules[rule_]() {
							goto l134
						}
						goto l135
					l134:
						position, tokenIndex = position134, tokenIndex134
					}
				l135:
					goto l133
				l132:
					position, tokenIndex = position132, tokenIndex132
				}
			l133:
				{
					position136, tokenIndex136 := position, tokenIndex
					{
						position137, tokenIndex137 := position, tokenIndex
						if !_rules[ruleAuthorEx]() {
							goto l138
						}
						goto l137
					l138:
						position, tokenIndex = position137, tokenIndex137
						if !_rules[ruleAuthorIn]() {
							goto l136
						}
					}
				l137:
					goto l130
				l136:
					position, tokenIndex = position136, tokenIndex136
				}
				if !_rules[ruleWord]() {
					goto l130
				}
				{
					position139, tokenIndex139 := position, tokenIndex
					if !_rules[rule_]() {
						goto l139
					}
					if !_rules[ruleIgnoredWord]() {
						goto l139
					}
					goto l140
				l139:
					position, tokenIndex = position139, tokenIndex139
				}
			l140:
				{
					position141, tokenIndex141 := position, tokenIndex
					{
						position143, tokenIndex143 := position, tokenIndex
						if !_rules[rule_]() {
							goto l143
						}
						goto l144
					l143:
						position, tokenIndex = position143, tokenIndex143
					}
				l144:
					if !_rules[ruleAuthorship]() {
						goto l141
					}
					goto l142
				l141:
					position, tokenIndex = position141, tokenIndex141
				}
			l142:
				add(ruleInfraspEpithet, position131)
			}
			return true
		l130:
			position, tokenIndex = position130, tokenIndex130
			return false
		},
		/* 25 CultivarWordGroup <- <(((RankCultivar _)? CultivarApostrophe CultivarRecursive CultivarApostrophe) / (RankCultivar _ Cultivar))> */
		func() bool {
			position145, tokenIndex145 := position, tokenIndex
			{
				position146 := position
				{
					position147, tokenIndex147 := position, tokenIndex
					{
						position149, tokenIndex149 := position, tokenIndex
						if !_rules[ruleRankCultivar]() {
							goto l149
						}
						if !_rules[rule_]() {
							goto l149
						}
						goto l150
					l149:
						position, tokenIndex = position149, tokenIndex149
					}
				l150:
					if !_rules[ruleCultivarApostrophe]() {
						goto l148
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l148
					}
					if !_rules[ruleCultivarApostrophe]() {
						goto l148
					}
					goto l147
				l148:
					position, tokenIndex = position147, tokenIndex147
					if !_rules[ruleRankCultivar]() {
						goto l145
					}
					if !_rules[rule_]() {
						goto l145
					}
					if !_rules[ruleCultivar]() {
						goto l145
					}
				}
			l147:
				add(ruleCultivarWordGroup, position146)
			}
			return true
		l145:
			position, tokenIndex = position145, tokenIndex145
			return false
		},
		/* 26 Cultivar <- <NotHybridChar+> */
		func() bool {
			position151, tokenIndex151 := position, tokenIndex
			{
				position152 := position
				if !_rules[ruleNotHybridChar]() {
					goto l151
				}
			l153:
				{
					position154, tokenIndex154 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l154
					}
					goto l153
				l154:
					position, tokenIndex = position154, tokenIndex154
				}
				add(ruleCultivar, position152)
			}
			return true
		l151:
			position, tokenIndex = position151, tokenIndex151
			return false
		},
		/* 27 RankCultivar <- <('c' 'v' '.'?)> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				if buffer[position] != rune('c') {
					goto l155
				}
				position++
				if buffer[position] != rune('v') {
					goto l155
				}
				position++
				{
					position157, tokenIndex157 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l157
					}
					position++
					goto l158
				l157:
					position, tokenIndex = position157, tokenIndex157
				}
			l158:
				add(ruleRankCultivar, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 28 NotHybridChar <- <(!(_ HybridChar) .)> */
		func() bool {
			position159, tokenIndex159 := position, tokenIndex
			{
				position160 := position
				{
					position161, tokenIndex161 := position, tokenIndex
					if !_rules[rule_]() {
						goto l161
					}
					if !_rules[ruleHybridChar]() {
						goto l161
					}
					goto l159
				l161:
					position, tokenIndex = position161, tokenIndex161
				}
				if !matchDot() {
					goto l159
				}
				add(ruleNotHybridChar, position160)
			}
			return true
		l159:
			position, tokenIndex = position159, tokenIndex159
			return false
		},
		/* 29 CultivarRecursive <- <((NotHybridChar CultivarRecursive) / &CultivarApostrophe)> */
		func() bool {
			position162, tokenIndex162 := position, tokenIndex
			{
				position163 := position
				{
					position164, tokenIndex164 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l165
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l165
					}
					goto l164
				l165:
					position, tokenIndex = position164, tokenIndex164
					{
						position166, tokenIndex166 := position, tokenIndex
						if !_rules[ruleCultivarApostrophe]() {
							goto l162
						}
						position, tokenIndex = position166, tokenIndex166
					}
				}
			l164:
				add(ruleCultivarRecursive, position163)
			}
			return true
		l162:
			position, tokenIndex = position162, tokenIndex162
			return false
		},
		/* 30 CultivarApostrophe <- <('\'' / '‘' / '’' / '"' / '“' / '”')> */
		func() bool {
			position167, tokenIndex167 := position, tokenIndex
			{
				position168 := position
				{
					position169, tokenIndex169 := position, tokenIndex
					if buffer[position] != rune('\'') {
						goto l170
					}
					position++
					goto l169
				l170:
					position, tokenIndex = position169, tokenIndex169
					if buffer[position] != rune('‘') {
						goto l171
					}
					position++
					goto l169
				l171:
					position, tokenIndex = position169, tokenIndex169
					if buffer[position] != rune('’') {
						goto l172
					}
					position++
					goto l169
				l172:
					position, tokenIndex = position169, tokenIndex169
					if buffer[position] != rune('"') {
						goto l173
					}
					position++
					goto l169
				l173:
					position, tokenIndex = position169, tokenIndex169
					if buffer[position] != rune('“') {
						goto l174
					}
					position++
					goto l169
				l174:
					position, tokenIndex = position169, tokenIndex169
					if buffer[position] != rune('”') {
						goto l167
					}
					position++
				}
			l169:
				add(ruleCultivarApostrophe, position168)
			}
			return true
		l167:
			position, tokenIndex = position167, tokenIndex167
			return false
		},
		/* 31 SpeciesEpithet <- <(!(AuthorEx / AuthorIn) Word (_ IgnoredWord)? (_? Authorship)?)> */
		func() bool {
			position175, tokenIndex175 := position, tokenIndex
			{
				position176 := position
				{
					position177, tokenIndex177 := position, tokenIndex
					{
						position178, tokenIndex178 := position, tokenIndex
						if !_rules[ruleAuthorEx]() {
							goto l179
						}
						goto l178
					l179:
						position, tokenIndex = position178, tokenIndex178
						if !_rules[ruleAuthorIn]() {
							goto l177
						}
					}
				l178:
					goto l175
				l177:
					position, tokenIndex = position177, tokenIndex177
				}
				if !_rules[ruleWord]() {
					goto l175
				}
				{
					position180, tokenIndex180 := position, tokenIndex
					if !_rules[rule_]() {
						goto l180
					}
					if !_rules[ruleIgnoredWord]() {
						goto l180
					}
					goto l181
				l180:
					position, tokenIndex = position180, tokenIndex180
				}
			l181:
				{
					position182, tokenIndex182 := position, tokenIndex
					{
						position184, tokenIndex184 := position, tokenIndex
						if !_rules[rule_]() {
							goto l184
						}
						goto l185
					l184:
						position, tokenIndex = position184, tokenIndex184
					}
				l185:
					if !_rules[ruleAuthorship]() {
						goto l182
					}
					goto l183
				l182:
					position, tokenIndex = position182, tokenIndex182
				}
			l183:
				add(ruleSpeciesEpithet, position176)
			}
			return true
		l175:
			position, tokenIndex = position175, tokenIndex175
			return false
		},
		/* 32 IgnoredWord <- <(('m' 'i' 'h' 'i' '.') / ('m' 'i' 'h' 'i'))> */
		func() bool {
			position186, tokenIndex186 := position, tokenIndex
			{
				position187 := position
				{
					position188, tokenIndex188 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l189
					}
					position++
					if buffer[position] != rune('i') {
						goto l189
					}
					position++
					if buffer[position] != rune('h') {
						goto l189
					}
					position++
					if buffer[position] != rune('i') {
						goto l189
					}
					position++
					if buffer[position] != rune('.') {
						goto l189
					}
					position++
					goto l188
				l189:
					position, tokenIndex = position188, tokenIndex188
					if buffer[position] != rune('m') {
						goto l186
					}
					position++
					if buffer[position] != rune('i') {
						goto l186
					}
					position++
					if buffer[position] != rune('h') {
						goto l186
					}
					position++
					if buffer[position] != rune('i') {
						goto l186
					}
					position++
				}
			l188:
				add(ruleIgnoredWord, position187)
			}
			return true
		l186:
			position, tokenIndex = position186, tokenIndex186
			return false
		},
		/* 33 Comparison <- <('c' 'f' '.'? &SpaceCharEOI)> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				if buffer[position] != rune('c') {
					goto l190
				}
				position++
				if buffer[position] != rune('f') {
					goto l190
				}
				position++
				{
					position192, tokenIndex192 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l192
					}
					position++
					goto l193
				l192:
					position, tokenIndex = position192, tokenIndex192
				}
			l193:
				{
					position194, tokenIndex194 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l190
					}
					position, tokenIndex = position194, tokenIndex194
				}
				add(ruleComparison, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 34 Rank <- <((RankForma / RankVar / RankSsp / RankOther / RankOtherUncommon / RankAgamo / RankNotho) (_? LowerGreek ('.' / &SpaceCharEOI))?)> */
		func() bool {
			position195, tokenIndex195 := position, tokenIndex
			{
				position196 := position
				{
					position197, tokenIndex197 := position, tokenIndex
					if !_rules[ruleRankForma]() {
						goto l198
					}
					goto l197
				l198:
					position, tokenIndex = position197, tokenIndex197
					if !_rules[ruleRankVar]() {
						goto l199
					}
					goto l197
				l199:
					position, tokenIndex = position197, tokenIndex197
					if !_rules[ruleRankSsp]() {
						goto l200
					}
					goto l197
				l200:
					position, tokenIndex = position197, tokenIndex197
					if !_rules[ruleRankOther]() {
						goto l201
					}
					goto l197
				l201:
					position, tokenIndex = position197, tokenIndex197
					if !_rules[ruleRankOtherUncommon]() {
						goto l202
					}
					goto l197
				l202:
					position, tokenIndex = position197, tokenIndex197
					if !_rules[ruleRankAgamo]() {
						goto l203
					}
					goto l197
				l203:
					position, tokenIndex = position197, tokenIndex197
					if !_rules[ruleRankNotho]() {
						goto l195
					}
				}
			l197:
				{
					position204, tokenIndex204 := position, tokenIndex
					{
						position206, tokenIndex206 := position, tokenIndex
						if !_rules[rule_]() {
							goto l206
						}
						goto l207
					l206:
						position, tokenIndex = position206, tokenIndex206
					}
				l207:
					if !_rules[ruleLowerGreek]() {
						goto l204
					}
					{
						position208, tokenIndex208 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l209
						}
						position++
						goto l208
					l209:
						position, tokenIndex = position208, tokenIndex208
						{
							position210, tokenIndex210 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l204
							}
							position, tokenIndex = position210, tokenIndex210
						}
					}
				l208:
					goto l205
				l204:
					position, tokenIndex = position204, tokenIndex204
				}
			l205:
				add(ruleRank, position196)
			}
			return true
		l195:
			position, tokenIndex = position195, tokenIndex195
			return false
		},
		/* 35 RankNotho <- <((('n' 'o' 't' 'h' 'o' (('v' 'a' 'r') / ('f' 'o') / 'f' / ('s' 'u' 'b' 's' 'p') / ('s' 's' 'p') / ('s' 'p') / ('m' 'o' 'r' 't' 'h') / ('s' 'u' 'p' 's' 'p') / ('s' 'u'))) / ('n' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position211, tokenIndex211 := position, tokenIndex
			{
				position212 := position
				{
					position213, tokenIndex213 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l214
					}
					position++
					if buffer[position] != rune('o') {
						goto l214
					}
					position++
					if buffer[position] != rune('t') {
						goto l214
					}
					position++
					if buffer[position] != rune('h') {
						goto l214
					}
					position++
					if buffer[position] != rune('o') {
						goto l214
					}
					position++
					{
						position215, tokenIndex215 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l216
						}
						position++
						if buffer[position] != rune('a') {
							goto l216
						}
						position++
						if buffer[position] != rune('r') {
							goto l216
						}
						position++
						goto l215
					l216:
						position, tokenIndex = position215, tokenIndex215
						if buffer[position] != rune('f') {
							goto l217
						}
						position++
						if buffer[position] != rune('o') {
							goto l217
						}
						position++
						goto l215
					l217:
						position, tokenIndex = position215, tokenIndex215
						if buffer[position] != rune('f') {
							goto l218
						}
						position++
						goto l215
					l218:
						position, tokenIndex = position215, tokenIndex215
						if buffer[position] != rune('s') {
							goto l219
						}
						position++
						if buffer[position] != rune('u') {
							goto l219
						}
						position++
						if buffer[position] != rune('b') {
							goto l219
						}
						position++
						if buffer[position] != rune('s') {
							goto l219
						}
						position++
						if buffer[position] != rune('p') {
							goto l219
						}
						position++
						goto l215
					l219:
						position, tokenIndex = position215, tokenIndex215
						if buffer[position] != rune('s') {
							goto l220
						}
						position++
						if buffer[position] != rune('s') {
							goto l220
						}
						position++
						if buffer[position] != rune('p') {
							goto l220
						}
						position++
						goto l215
					l220:
						position, tokenIndex = position215, tokenIndex215
						if buffer[position] != rune('s') {
							goto l221
						}
						position++
						if buffer[position] != rune('p') {
							goto l221
						}
						position++
						goto l215
					l221:
						position, tokenIndex = position215, tokenIndex215
						if buffer[position] != rune('m') {
							goto l222
						}
						position++
						if buffer[position] != rune('o') {
							goto l222
						}
						position++
						if buffer[position] != rune('r') {
							goto l222
						}
						position++
						if buffer[position] != rune('t') {
							goto l222
						}
						position++
						if buffer[position] != rune('h') {
							goto l222
						}
						position++
						goto l215
					l222:
						position, tokenIndex = position215, tokenIndex215
						if buffer[position] != rune('s') {
							goto l223
						}
						position++
						if buffer[position] != rune('u') {
							goto l223
						}
						position++
						if buffer[position] != rune('p') {
							goto l223
						}
						position++
						if buffer[position] != rune('s') {
							goto l223
						}
						position++
						if buffer[position] != rune('p') {
							goto l223
						}
						position++
						goto l215
					l223:
						position, tokenIndex = position215, tokenIndex215
						if buffer[position] != rune('s') {
							goto l214
						}
						position++
						if buffer[position] != rune('u') {
							goto l214
						}
						position++
					}
				l215:
					goto l213
				l214:
					position, tokenIndex = position213, tokenIndex213
					if buffer[position] != rune('n') {
						goto l211
					}
					position++
					if buffer[position] != rune('v') {
						goto l211
					}
					position++
					if buffer[position] != rune('a') {
						goto l211
					}
					position++
					if buffer[position] != rune('r') {
						goto l211
					}
					position++
				}
			l213:
				{
					position224, tokenIndex224 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l225
					}
					position++
					goto l224
				l225:
					position, tokenIndex = position224, tokenIndex224
					{
						position226, tokenIndex226 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l211
						}
						position, tokenIndex = position226, tokenIndex226
					}
				}
			l224:
				add(ruleRankNotho, position212)
			}
			return true
		l211:
			position, tokenIndex = position211, tokenIndex211
			return false
		},
		/* 36 RankOtherUncommon <- <(('*' / ('n' 'a' 't' 'i' 'o') / ('n' 'a' 't' '.') / ('n' 'a' 't') / ('f' '.' 's' 'p') / 'α' / ('β' 'β') / 'β' / 'γ' / 'δ' / 'ε' / 'φ' / 'θ' / 'μ' / ('a' '.') / ('b' '.') / ('c' '.') / ('d' '.') / ('e' '.') / ('g' '.') / ('k' '.') / ('m' 'u' 't' '.')) &SpaceCharEOI)> */
		func() bool {
			position227, tokenIndex227 := position, tokenIndex
			{
				position228 := position
				{
					position229, tokenIndex229 := position, tokenIndex
					if buffer[position] != rune('*') {
						goto l230
					}
					position++
					goto l229
				l230:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('n') {
						goto l231
					}
					position++
					if buffer[position] != rune('a') {
						goto l231
					}
					position++
					if buffer[position] != rune('t') {
						goto l231
					}
					position++
					if buffer[position] != rune('i') {
						goto l231
					}
					position++
					if buffer[position] != rune('o') {
						goto l231
					}
					position++
					goto l229
				l231:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('n') {
						goto l232
					}
					position++
					if buffer[position] != rune('a') {
						goto l232
					}
					position++
					if buffer[position] != rune('t') {
						goto l232
					}
					position++
					if buffer[position] != rune('.') {
						goto l232
					}
					position++
					goto l229
				l232:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('n') {
						goto l233
					}
					position++
					if buffer[position] != rune('a') {
						goto l233
					}
					position++
					if buffer[position] != rune('t') {
						goto l233
					}
					position++
					goto l229
				l233:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('f') {
						goto l234
					}
					position++
					if buffer[position] != rune('.') {
						goto l234
					}
					position++
					if buffer[position] != rune('s') {
						goto l234
					}
					position++
					if buffer[position] != rune('p') {
						goto l234
					}
					position++
					goto l229
				l234:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('α') {
						goto l235
					}
					position++
					goto l229
				l235:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('β') {
						goto l236
					}
					position++
					if buffer[position] != rune('β') {
						goto l236
					}
					position++
					goto l229
				l236:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('β') {
						goto l237
					}
					position++
					goto l229
				l237:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('γ') {
						goto l238
					}
					position++
					goto l229
				l238:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('δ') {
						goto l239
					}
					position++
					goto l229
				l239:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('ε') {
						goto l240
					}
					position++
					goto l229
				l240:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('φ') {
						goto l241
					}
					position++
					goto l229
				l241:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('θ') {
						goto l242
					}
					position++
					goto l229
				l242:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('μ') {
						goto l243
					}
					position++
					goto l229
				l243:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('a') {
						goto l244
					}
					position++
					if buffer[position] != rune('.') {
						goto l244
					}
					position++
					goto l229
				l244:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('b') {
						goto l245
					}
					position++
					if buffer[position] != rune('.') {
						goto l245
					}
					position++
					goto l229
				l245:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('c') {
						goto l246
					}
					position++
					if buffer[position] != rune('.') {
						goto l246
					}
					position++
					goto l229
				l246:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('d') {
						goto l247
					}
					position++
					if buffer[position] != rune('.') {
						goto l247
					}
					position++
					goto l229
				l247:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('e') {
						goto l248
					}
					position++
					if buffer[position] != rune('.') {
						goto l248
					}
					position++
					goto l229
				l248:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('g') {
						goto l249
					}
					position++
					if buffer[position] != rune('.') {
						goto l249
					}
					position++
					goto l229
				l249:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('k') {
						goto l250
					}
					position++
					if buffer[position] != rune('.') {
						goto l250
					}
					position++
					goto l229
				l250:
					position, tokenIndex = position229, tokenIndex229
					if buffer[position] != rune('m') {
						goto l227
					}
					position++
					if buffer[position] != rune('u') {
						goto l227
					}
					position++
					if buffer[position] != rune('t') {
						goto l227
					}
					position++
					if buffer[position] != rune('.') {
						goto l227
					}
					position++
				}
			l229:
				{
					position251, tokenIndex251 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l227
					}
					position, tokenIndex = position251, tokenIndex251
				}
				add(ruleRankOtherUncommon, position228)
			}
			return true
		l227:
			position, tokenIndex = position227, tokenIndex227
			return false
		},
		/* 37 RankOther <- <((('m' 'o' 'r' 'p' 'h') / ('c' 'o' 'n' 'v' 'a' 'r') / ('p' 's' 'e' 'u' 'd' 'o' 'v' 'a' 'r') / ('s' 'e' 'c' 't') / ('s' 'e' 'r') / ('s' 'u' 'b' 'v' 'a' 'r') / ('s' 'u' 'b' 'f') / ('r' 'a' 'c' 'e') / ('p' 'v') / ('p' 'a' 't' 'h' 'o' 'v' 'a' 'r') / ('a' 'b' '.' (_? ('n' '.'))?) / ('s' 't')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position252, tokenIndex252 := position, tokenIndex
			{
				position253 := position
				{
					position254, tokenIndex254 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l255
					}
					position++
					if buffer[position] != rune('o') {
						goto l255
					}
					position++
					if buffer[position] != rune('r') {
						goto l255
					}
					position++
					if buffer[position] != rune('p') {
						goto l255
					}
					position++
					if buffer[position] != rune('h') {
						goto l255
					}
					position++
					goto l254
				l255:
					position, tokenIndex = position254, tokenIndex254
					if buffer[position] != rune('c') {
						goto l256
					}
					position++
					if buffer[position] != rune('o') {
						goto l256
					}
					position++
					if buffer[position] != rune('n') {
						goto l256
					}
					position++
					if buffer[position] != rune('v') {
						goto l256
					}
					position++
					if buffer[position] != rune('a') {
						goto l256
					}
					position++
					if buffer[position] != rune('r') {
						goto l256
					}
					position++
					goto l254
				l256:
					position, tokenIndex = position254, tokenIndex254
					if buffer[position] != rune('p') {
						goto l257
					}
					position++
					if buffer[position] != rune('s') {
						goto l257
					}
					position++
					if buffer[position] != rune('e') {
						goto l257
					}
					position++
					if buffer[position] != rune('u') {
						goto l257
					}
					position++
					if buffer[position] != rune('d') {
						goto l257
					}
					position++
					if buffer[position] != rune('o') {
						goto l257
					}
					position++
					if buffer[position] != rune('v') {
						goto l257
					}
					position++
					if buffer[position] != rune('a') {
						goto l257
					}
					position++
					if buffer[position] != rune('r') {
						goto l257
					}
					position++
					goto l254
				l257:
					position, tokenIndex = position254, tokenIndex254
					if buffer[position] != rune('s') {
						goto l258
					}
					position++
					if buffer[position] != rune('e') {
						goto l258
					}
					position++
					if buffer[position] != rune('c') {
						goto l258
					}
					position++
					if buffer[position] != rune('t') {
						goto l258
					}
					position++
					goto l254
				l258:
					position, tokenIndex = position254, tokenIndex254
					if buffer[position] != rune('s') {
						goto l259
					}
					position++
					if buffer[position] != rune('e') {
						goto l259
					}
					position++
					if buffer[position] != rune('r') {
						goto l259
					}
					position++
					goto l254
				l259:
					position, tokenIndex = position254, tokenIndex254
					if buffer[position] != rune('s') {
						goto l260
					}
					position++
					if buffer[position] != rune('u') {
						goto l260
					}
					position++
					if buffer[position] != rune('b') {
						goto l260
					}
					position++
					if buffer[position] != rune('v') {
						goto l260
					}
					position++
					if buffer[position] != rune('a') {
						goto l260
					}
					position++
					if buffer[position] != rune('r') {
						goto l260
					}
					position++
					goto l254
				l260:
					position, tokenIndex = position254, tokenIndex254
					if buffer[position] != rune('s') {
						goto l261
					}
					position++
					if buffer[position] != rune('u') {
						goto l261
					}
					position++
					if buffer[position] != rune('b') {
						goto l261
					}
					position++
					if buffer[position] != rune('f') {
						goto l261
					}
					position++
					goto l254
				l261:
					position, tokenIndex = position254, tokenIndex254
					if buffer[position] != rune('r') {
						goto l262
					}
					position++
					if buffer[position] != rune('a') {
						goto l262
					}
					position++
					if buffer[position] != rune('c') {
						goto l262
					}
					position++
					if buffer[position] != rune('e') {
						goto l262
					}
					position++
					goto l254
				l262:
					position, tokenIndex = position254, tokenIndex254
					if buffer[position] != rune('p') {
						goto l263
					}
					position++
					if buffer[position] != rune('v') {
						goto l263
					}
					position++
					goto l254
				l263:
					position, tokenIndex = position254, tokenIndex254
					if buffer[position] != rune('p') {
						goto l264
					}
					position++
					if buffer[position] != rune('a') {
						goto l264
					}
					position++
					if buffer[position] != rune('t') {
						goto l264
					}
					position++
					if buffer[position] != rune('h') {
						goto l264
					}
					position++
					if buffer[position] != rune('o') {
						goto l264
					}
					position++
					if buffer[position] != rune('v') {
						goto l264
					}
					position++
					if buffer[position] != rune('a') {
						goto l264
					}
					position++
					if buffer[position] != rune('r') {
						goto l264
					}
					position++
					goto l254
				l264:
					position, tokenIndex = position254, tokenIndex254
					if buffer[position] != rune('a') {
						goto l265
					}
					position++
					if buffer[position] != rune('b') {
						goto l265
					}
					position++
					if buffer[position] != rune('.') {
						goto l265
					}
					position++
					{
						position266, tokenIndex266 := position, tokenIndex
						{
							position268, tokenIndex268 := position, tokenIndex
							if !_rules[rule_]() {
								goto l268
							}
							goto l269
						l268:
							position, tokenIndex = position268, tokenIndex268
						}
					l269:
						if buffer[position] != rune('n') {
							goto l266
						}
						position++
						if buffer[position] != rune('.') {
							goto l266
						}
						position++
						goto l267
					l266:
						position, tokenIndex = position266, tokenIndex266
					}
				l267:
					goto l254
				l265:
					position, tokenIndex = position254, tokenIndex254
					if buffer[position] != rune('s') {
						goto l252
					}
					position++
					if buffer[position] != rune('t') {
						goto l252
					}
					position++
				}
			l254:
				{
					position270, tokenIndex270 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l271
					}
					position++
					goto l270
				l271:
					position, tokenIndex = position270, tokenIndex270
					{
						position272, tokenIndex272 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l252
						}
						position, tokenIndex = position272, tokenIndex272
					}
				}
			l270:
				add(ruleRankOther, position253)
			}
			return true
		l252:
			position, tokenIndex = position252, tokenIndex252
			return false
		},
		/* 38 RankVar <- <((('v' 'a' 'r' 'i' 'e' 't' 'y') / ('[' 'v' 'a' 'r' '.' ']') / ('v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position273, tokenIndex273 := position, tokenIndex
			{
				position274 := position
				{
					position275, tokenIndex275 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l276
					}
					position++
					if buffer[position] != rune('a') {
						goto l276
					}
					position++
					if buffer[position] != rune('r') {
						goto l276
					}
					position++
					if buffer[position] != rune('i') {
						goto l276
					}
					position++
					if buffer[position] != rune('e') {
						goto l276
					}
					position++
					if buffer[position] != rune('t') {
						goto l276
					}
					position++
					if buffer[position] != rune('y') {
						goto l276
					}
					position++
					goto l275
				l276:
					position, tokenIndex = position275, tokenIndex275
					if buffer[position] != rune('[') {
						goto l277
					}
					position++
					if buffer[position] != rune('v') {
						goto l277
					}
					position++
					if buffer[position] != rune('a') {
						goto l277
					}
					position++
					if buffer[position] != rune('r') {
						goto l277
					}
					position++
					if buffer[position] != rune('.') {
						goto l277
					}
					position++
					if buffer[position] != rune(']') {
						goto l277
					}
					position++
					goto l275
				l277:
					position, tokenIndex = position275, tokenIndex275
					if buffer[position] != rune('v') {
						goto l273
					}
					position++
					if buffer[position] != rune('a') {
						goto l273
					}
					position++
					if buffer[position] != rune('r') {
						goto l273
					}
					position++
				}
			l275:
				{
					position278, tokenIndex278 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l279
					}
					position++
					goto l278
				l279:
					position, tokenIndex = position278, tokenIndex278
					{
						position280, tokenIndex280 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l273
						}
						position, tokenIndex = position280, tokenIndex280
					}
				}
			l278:
				add(ruleRankVar, position274)
			}
			return true
		l273:
			position, tokenIndex = position273, tokenIndex273
			return false
		},
		/* 39 RankForma <- <((('f' 'a') / ('f' 'o' 'r' 'm' 'a') / ('f' 'm' 'a') / ('f' 'm') / ('f' 'o' 'r' 'm') / ('f' 'o') / 'f') ('.' / &SpaceCharEOI))> */
		func() bool {
			position281, tokenIndex281 := position, tokenIndex
			{
				position282 := position
				{
					position283, tokenIndex283 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l284
					}
					position++
					if buffer[position] != rune('a') {
						goto l284
					}
					position++
					goto l283
				l284:
					position, tokenIndex = position283, tokenIndex283
					if buffer[position] != rune('f') {
						goto l285
					}
					position++
					if buffer[position] != rune('o') {
						goto l285
					}
					position++
					if buffer[position] != rune('r') {
						goto l285
					}
					position++
					if buffer[position] != rune('m') {
						goto l285
					}
					position++
					if buffer[position] != rune('a') {
						goto l285
					}
					position++
					goto l283
				l285:
					position, tokenIndex = position283, tokenIndex283
					if buffer[position] != rune('f') {
						goto l286
					}
					position++
					if buffer[position] != rune('m') {
						goto l286
					}
					position++
					if buffer[position] != rune('a') {
						goto l286
					}
					position++
					goto l283
				l286:
					position, tokenIndex = position283, tokenIndex283
					if buffer[position] != rune('f') {
						goto l287
					}
					position++
					if buffer[position] != rune('m') {
						goto l287
					}
					position++
					goto l283
				l287:
					position, tokenIndex = position283, tokenIndex283
					if buffer[position] != rune('f') {
						goto l288
					}
					position++
					if buffer[position] != rune('o') {
						goto l288
					}
					position++
					if buffer[position] != rune('r') {
						goto l288
					}
					position++
					if buffer[position] != rune('m') {
						goto l288
					}
					position++
					goto l283
				l288:
					position, tokenIndex = position283, tokenIndex283
					if buffer[position] != rune('f') {
						goto l289
					}
					position++
					if buffer[position] != rune('o') {
						goto l289
					}
					position++
					goto l283
				l289:
					position, tokenIndex = position283, tokenIndex283
					if buffer[position] != rune('f') {
						goto l281
					}
					position++
				}
			l283:
				{
					position290, tokenIndex290 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l291
					}
					position++
					goto l290
				l291:
					position, tokenIndex = position290, tokenIndex290
					{
						position292, tokenIndex292 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l281
						}
						position, tokenIndex = position292, tokenIndex292
					}
				}
			l290:
				add(ruleRankForma, position282)
			}
			return true
		l281:
			position, tokenIndex = position281, tokenIndex281
			return false
		},
		/* 40 RankSsp <- <((('s' 's' 'p') / ('s' 'u' 'b' 's' 'p' 'e' 'c') / ('s' 'u' 'b' 's' 'p')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position293, tokenIndex293 := position, tokenIndex
			{
				position294 := position
				{
					position295, tokenIndex295 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l296
					}
					position++
					if buffer[position] != rune('s') {
						goto l296
					}
					position++
					if buffer[position] != rune('p') {
						goto l296
					}
					position++
					goto l295
				l296:
					position, tokenIndex = position295, tokenIndex295
					if buffer[position] != rune('s') {
						goto l297
					}
					position++
					if buffer[position] != rune('u') {
						goto l297
					}
					position++
					if buffer[position] != rune('b') {
						goto l297
					}
					position++
					if buffer[position] != rune('s') {
						goto l297
					}
					position++
					if buffer[position] != rune('p') {
						goto l297
					}
					position++
					if buffer[position] != rune('e') {
						goto l297
					}
					position++
					if buffer[position] != rune('c') {
						goto l297
					}
					position++
					goto l295
				l297:
					position, tokenIndex = position295, tokenIndex295
					if buffer[position] != rune('s') {
						goto l293
					}
					position++
					if buffer[position] != rune('u') {
						goto l293
					}
					position++
					if buffer[position] != rune('b') {
						goto l293
					}
					position++
					if buffer[position] != rune('s') {
						goto l293
					}
					position++
					if buffer[position] != rune('p') {
						goto l293
					}
					position++
				}
			l295:
				{
					position298, tokenIndex298 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l299
					}
					position++
					goto l298
				l299:
					position, tokenIndex = position298, tokenIndex298
					{
						position300, tokenIndex300 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l293
						}
						position, tokenIndex = position300, tokenIndex300
					}
				}
			l298:
				add(ruleRankSsp, position294)
			}
			return true
		l293:
			position, tokenIndex = position293, tokenIndex293
			return false
		},
		/* 41 RankAgamo <- <((('a' 'g' 'a' 'm' 'o' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 's' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position301, tokenIndex301 := position, tokenIndex
			{
				position302 := position
				{
					position303, tokenIndex303 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l304
					}
					position++
					if buffer[position] != rune('g') {
						goto l304
					}
					position++
					if buffer[position] != rune('a') {
						goto l304
					}
					position++
					if buffer[position] != rune('m') {
						goto l304
					}
					position++
					if buffer[position] != rune('o') {
						goto l304
					}
					position++
					if buffer[position] != rune('s') {
						goto l304
					}
					position++
					if buffer[position] != rune('p') {
						goto l304
					}
					position++
					goto l303
				l304:
					position, tokenIndex = position303, tokenIndex303
					if buffer[position] != rune('a') {
						goto l305
					}
					position++
					if buffer[position] != rune('g') {
						goto l305
					}
					position++
					if buffer[position] != rune('a') {
						goto l305
					}
					position++
					if buffer[position] != rune('m') {
						goto l305
					}
					position++
					if buffer[position] != rune('o') {
						goto l305
					}
					position++
					if buffer[position] != rune('s') {
						goto l305
					}
					position++
					if buffer[position] != rune('s') {
						goto l305
					}
					position++
					if buffer[position] != rune('p') {
						goto l305
					}
					position++
					goto l303
				l305:
					position, tokenIndex = position303, tokenIndex303
					if buffer[position] != rune('a') {
						goto l301
					}
					position++
					if buffer[position] != rune('g') {
						goto l301
					}
					position++
					if buffer[position] != rune('a') {
						goto l301
					}
					position++
					if buffer[position] != rune('m') {
						goto l301
					}
					position++
					if buffer[position] != rune('o') {
						goto l301
					}
					position++
					if buffer[position] != rune('v') {
						goto l301
					}
					position++
					if buffer[position] != rune('a') {
						goto l301
					}
					position++
					if buffer[position] != rune('r') {
						goto l301
					}
					position++
				}
			l303:
				{
					position306, tokenIndex306 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l307
					}
					position++
					goto l306
				l307:
					position, tokenIndex = position306, tokenIndex306
					{
						position308, tokenIndex308 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l301
						}
						position, tokenIndex = position308, tokenIndex308
					}
				}
			l306:
				add(ruleRankAgamo, position302)
			}
			return true
		l301:
			position, tokenIndex = position301, tokenIndex301
			return false
		},
		/* 42 SubgenusOrSuperspecies <- <('(' _? NameLowerChar+ _? ')')> */
		func() bool {
			position309, tokenIndex309 := position, tokenIndex
			{
				position310 := position
				if buffer[position] != rune('(') {
					goto l309
				}
				position++
				{
					position311, tokenIndex311 := position, tokenIndex
					if !_rules[rule_]() {
						goto l311
					}
					goto l312
				l311:
					position, tokenIndex = position311, tokenIndex311
				}
			l312:
				if !_rules[ruleNameLowerChar]() {
					goto l309
				}
			l313:
				{
					position314, tokenIndex314 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l314
					}
					goto l313
				l314:
					position, tokenIndex = position314, tokenIndex314
				}
				{
					position315, tokenIndex315 := position, tokenIndex
					if !_rules[rule_]() {
						goto l315
					}
					goto l316
				l315:
					position, tokenIndex = position315, tokenIndex315
				}
			l316:
				if buffer[position] != rune(')') {
					goto l309
				}
				position++
				add(ruleSubgenusOrSuperspecies, position310)
			}
			return true
		l309:
			position, tokenIndex = position309, tokenIndex309
			return false
		},
		/* 43 UninomialCombo <- <(UninomialCombo1 / UninomialCombo2)> */
		func() bool {
			position317, tokenIndex317 := position, tokenIndex
			{
				position318 := position
				{
					position319, tokenIndex319 := position, tokenIndex
					if !_rules[ruleUninomialCombo1]() {
						goto l320
					}
					goto l319
				l320:
					position, tokenIndex = position319, tokenIndex319
					if !_rules[ruleUninomialCombo2]() {
						goto l317
					}
				}
			l319:
				add(ruleUninomialCombo, position318)
			}
			return true
		l317:
			position, tokenIndex = position317, tokenIndex317
			return false
		},
		/* 44 UninomialCombo1 <- <(UninomialWord _? Subgenus (_? Authorship)?)> */
		func() bool {
			position321, tokenIndex321 := position, tokenIndex
			{
				position322 := position
				if !_rules[ruleUninomialWord]() {
					goto l321
				}
				{
					position323, tokenIndex323 := position, tokenIndex
					if !_rules[rule_]() {
						goto l323
					}
					goto l324
				l323:
					position, tokenIndex = position323, tokenIndex323
				}
			l324:
				if !_rules[ruleSubgenus]() {
					goto l321
				}
				{
					position325, tokenIndex325 := position, tokenIndex
					{
						position327, tokenIndex327 := position, tokenIndex
						if !_rules[rule_]() {
							goto l327
						}
						goto l328
					l327:
						position, tokenIndex = position327, tokenIndex327
					}
				l328:
					if !_rules[ruleAuthorship]() {
						goto l325
					}
					goto l326
				l325:
					position, tokenIndex = position325, tokenIndex325
				}
			l326:
				add(ruleUninomialCombo1, position322)
			}
			return true
		l321:
			position, tokenIndex = position321, tokenIndex321
			return false
		},
		/* 45 UninomialCombo2 <- <((Uninomial _)? RankUninomial _ Uninomial)> */
		func() bool {
			position329, tokenIndex329 := position, tokenIndex
			{
				position330 := position
				{
					position331, tokenIndex331 := position, tokenIndex
					if !_rules[ruleUninomial]() {
						goto l331
					}
					if !_rules[rule_]() {
						goto l331
					}
					goto l332
				l331:
					position, tokenIndex = position331, tokenIndex331
				}
			l332:
				if !_rules[ruleRankUninomial]() {
					goto l329
				}
				if !_rules[rule_]() {
					goto l329
				}
				if !_rules[ruleUninomial]() {
					goto l329
				}
				add(ruleUninomialCombo2, position330)
			}
			return true
		l329:
			position, tokenIndex = position329, tokenIndex329
			return false
		},
		/* 46 Subgenus <- <(Subgenus2 / Subgenus1)> */
		func() bool {
			position333, tokenIndex333 := position, tokenIndex
			{
				position334 := position
				{
					position335, tokenIndex335 := position, tokenIndex
					if !_rules[ruleSubgenus2]() {
						goto l336
					}
					goto l335
				l336:
					position, tokenIndex = position335, tokenIndex335
					if !_rules[ruleSubgenus1]() {
						goto l333
					}
				}
			l335:
				add(ruleSubgenus, position334)
			}
			return true
		l333:
			position, tokenIndex = position333, tokenIndex333
			return false
		},
		/* 47 Subgenus2 <- <('(' _? AbbrSubgenus _? ')' !(_? Authorship))> */
		func() bool {
			position337, tokenIndex337 := position, tokenIndex
			{
				position338 := position
				if buffer[position] != rune('(') {
					goto l337
				}
				position++
				{
					position339, tokenIndex339 := position, tokenIndex
					if !_rules[rule_]() {
						goto l339
					}
					goto l340
				l339:
					position, tokenIndex = position339, tokenIndex339
				}
			l340:
				if !_rules[ruleAbbrSubgenus]() {
					goto l337
				}
				{
					position341, tokenIndex341 := position, tokenIndex
					if !_rules[rule_]() {
						goto l341
					}
					goto l342
				l341:
					position, tokenIndex = position341, tokenIndex341
				}
			l342:
				if buffer[position] != rune(')') {
					goto l337
				}
				position++
				{
					position343, tokenIndex343 := position, tokenIndex
					{
						position344, tokenIndex344 := position, tokenIndex
						if !_rules[rule_]() {
							goto l344
						}
						goto l345
					l344:
						position, tokenIndex = position344, tokenIndex344
					}
				l345:
					if !_rules[ruleAuthorship]() {
						goto l343
					}
					goto l337
				l343:
					position, tokenIndex = position343, tokenIndex343
				}
				add(ruleSubgenus2, position338)
			}
			return true
		l337:
			position, tokenIndex = position337, tokenIndex337
			return false
		},
		/* 48 Subgenus1 <- <('(' _? UninomialWord _? ')')> */
		func() bool {
			position346, tokenIndex346 := position, tokenIndex
			{
				position347 := position
				if buffer[position] != rune('(') {
					goto l346
				}
				position++
				{
					position348, tokenIndex348 := position, tokenIndex
					if !_rules[rule_]() {
						goto l348
					}
					goto l349
				l348:
					position, tokenIndex = position348, tokenIndex348
				}
			l349:
				if !_rules[ruleUninomialWord]() {
					goto l346
				}
				{
					position350, tokenIndex350 := position, tokenIndex
					if !_rules[rule_]() {
						goto l350
					}
					goto l351
				l350:
					position, tokenIndex = position350, tokenIndex350
				}
			l351:
				if buffer[position] != rune(')') {
					goto l346
				}
				position++
				add(ruleSubgenus1, position347)
			}
			return true
		l346:
			position, tokenIndex = position346, tokenIndex346
			return false
		},
		/* 49 RankUninomial <- <(RankUninomialPlain / RankUninomialNotho)> */
		func() bool {
			position352, tokenIndex352 := position, tokenIndex
			{
				position353 := position
				{
					position354, tokenIndex354 := position, tokenIndex
					if !_rules[ruleRankUninomialPlain]() {
						goto l355
					}
					goto l354
				l355:
					position, tokenIndex = position354, tokenIndex354
					if !_rules[ruleRankUninomialNotho]() {
						goto l352
					}
				}
			l354:
				add(ruleRankUninomial, position353)
			}
			return true
		l352:
			position, tokenIndex = position352, tokenIndex352
			return false
		},
		/* 50 RankUninomialPlain <- <((('s' 'e' 'c' 't') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('t' 'r' 'i' 'b') / ('t' 'r') / ('s' 'u' 'b' 't' 'r' 'i' 'b') / ('s' 'u' 'b' 't' 'r') / ('s' 'u' 'b' 's' 'e' 'r') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('f' 'a' 'm') / ('s' 'u' 'b' 'f' 'a' 'm') / ('d' 'i' 'v') / ('s' 'u' 'p' 'e' 'r' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position356, tokenIndex356 := position, tokenIndex
			{
				position357 := position
				{
					position358, tokenIndex358 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l359
					}
					position++
					if buffer[position] != rune('e') {
						goto l359
					}
					position++
					if buffer[position] != rune('c') {
						goto l359
					}
					position++
					if buffer[position] != rune('t') {
						goto l359
					}
					position++
					goto l358
				l359:
					position, tokenIndex = position358, tokenIndex358
					if buffer[position] != rune('s') {
						goto l360
					}
					position++
					if buffer[position] != rune('u') {
						goto l360
					}
					position++
					if buffer[position] != rune('b') {
						goto l360
					}
					position++
					if buffer[position] != rune('s') {
						goto l360
					}
					position++
					if buffer[position] != rune('e') {
						goto l360
					}
					position++
					if buffer[position] != rune('c') {
						goto l360
					}
					position++
					if buffer[position] != rune('t') {
						goto l360
					}
					position++
					goto l358
				l360:
					position, tokenIndex = position358, tokenIndex358
					if buffer[position] != rune('t') {
						goto l361
					}
					position++
					if buffer[position] != rune('r') {
						goto l361
					}
					position++
					if buffer[position] != rune('i') {
						goto l361
					}
					position++
					if buffer[position] != rune('b') {
						goto l361
					}
					position++
					goto l358
				l361:
					position, tokenIndex = position358, tokenIndex358
					if buffer[position] != rune('t') {
						goto l362
					}
					position++
					if buffer[position] != rune('r') {
						goto l362
					}
					position++
					goto l358
				l362:
					position, tokenIndex = position358, tokenIndex358
					if buffer[position] != rune('s') {
						goto l363
					}
					position++
					if buffer[position] != rune('u') {
						goto l363
					}
					position++
					if buffer[position] != rune('b') {
						goto l363
					}
					position++
					if buffer[position] != rune('t') {
						goto l363
					}
					position++
					if buffer[position] != rune('r') {
						goto l363
					}
					position++
					if buffer[position] != rune('i') {
						goto l363
					}
					position++
					if buffer[position] != rune('b') {
						goto l363
					}
					position++
					goto l358
				l363:
					position, tokenIndex = position358, tokenIndex358
					if buffer[position] != rune('s') {
						goto l364
					}
					position++
					if buffer[position] != rune('u') {
						goto l364
					}
					position++
					if buffer[position] != rune('b') {
						goto l364
					}
					position++
					if buffer[position] != rune('t') {
						goto l364
					}
					position++
					if buffer[position] != rune('r') {
						goto l364
					}
					position++
					goto l358
				l364:
					position, tokenIndex = position358, tokenIndex358
					if buffer[position] != rune('s') {
						goto l365
					}
					position++
					if buffer[position] != rune('u') {
						goto l365
					}
					position++
					if buffer[position] != rune('b') {
						goto l365
					}
					position++
					if buffer[position] != rune('s') {
						goto l365
					}
					position++
					if buffer[position] != rune('e') {
						goto l365
					}
					position++
					if buffer[position] != rune('r') {
						goto l365
					}
					position++
					goto l358
				l365:
					position, tokenIndex = position358, tokenIndex358
					if buffer[position] != rune('s') {
						goto l366
					}
					position++
					if buffer[position] != rune('e') {
						goto l366
					}
					position++
					if buffer[position] != rune('r') {
						goto l366
					}
					position++
					goto l358
				l366:
					position, tokenIndex = position358, tokenIndex358
					if buffer[position] != rune('s') {
						goto l367
					}
					position++
					if buffer[position] != rune('u') {
						goto l367
					}
					position++
					if buffer[position] != rune('b') {
						goto l367
					}
					position++
					if buffer[position] != rune('g') {
						goto l367
					}
					position++
					if buffer[position] != rune('e') {
						goto l367
					}
					position++
					if buffer[position] != rune('n') {
						goto l367
					}
					position++
					goto l358
				l367:
					position, tokenIndex = position358, tokenIndex358
					if buffer[position] != rune('s') {
						goto l368
					}
					position++
					if buffer[position] != rune('u') {
						goto l368
					}
					position++
					if buffer[position] != rune('b') {
						goto l368
					}
					position++
					if buffer[position] != rune('g') {
						goto l368
					}
					position++
					goto l358
				l368:
					position, tokenIndex = position358, tokenIndex358
					if buffer[position] != rune('f') {
						goto l369
					}
					position++
					if buffer[position] != rune('a') {
						goto l369
					}
					position++
					if buffer[position] != rune('m') {
						goto l369
					}
					position++
					goto l358
				l369:
					position, tokenIndex = position358, tokenIndex358
					if buffer[position] != rune('s') {
						goto l370
					}
					position++
					if buffer[position] != rune('u') {
						goto l370
					}
					position++
					if buffer[position] != rune('b') {
						goto l370
					}
					position++
					if buffer[position] != rune('f') {
						goto l370
					}
					position++
					if buffer[position] != rune('a') {
						goto l370
					}
					position++
					if buffer[position] != rune('m') {
						goto l370
					}
					position++
					goto l358
				l370:
					position, tokenIndex = position358, tokenIndex358
					if buffer[position] != rune('d') {
						goto l371
					}
					position++
					if buffer[position] != rune('i') {
						goto l371
					}
					position++
					if buffer[position] != rune('v') {
						goto l371
					}
					position++
					goto l358
				l371:
					position, tokenIndex = position358, tokenIndex358
					if buffer[position] != rune('s') {
						goto l356
					}
					position++
					if buffer[position] != rune('u') {
						goto l356
					}
					position++
					if buffer[position] != rune('p') {
						goto l356
					}
					position++
					if buffer[position] != rune('e') {
						goto l356
					}
					position++
					if buffer[position] != rune('r') {
						goto l356
					}
					position++
					if buffer[position] != rune('t') {
						goto l356
					}
					position++
					if buffer[position] != rune('r') {
						goto l356
					}
					position++
					if buffer[position] != rune('i') {
						goto l356
					}
					position++
					if buffer[position] != rune('b') {
						goto l356
					}
					position++
				}
			l358:
				{
					position372, tokenIndex372 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l373
					}
					position++
					goto l372
				l373:
					position, tokenIndex = position372, tokenIndex372
					{
						position374, tokenIndex374 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l356
						}
						position, tokenIndex = position374, tokenIndex374
					}
				}
			l372:
				add(ruleRankUninomialPlain, position357)
			}
			return true
		l356:
			position, tokenIndex = position356, tokenIndex356
			return false
		},
		/* 51 RankUninomialNotho <- <('n' 'o' 't' 'h' 'o' _? (('s' 'e' 'c' 't') / ('g' 'e' 'n') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'e' 'n') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('s' 'u' 'b' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position375, tokenIndex375 := position, tokenIndex
			{
				position376 := position
				if buffer[position] != rune('n') {
					goto l375
				}
				position++
				if buffer[position] != rune('o') {
					goto l375
				}
				position++
				if buffer[position] != rune('t') {
					goto l375
				}
				position++
				if buffer[position] != rune('h') {
					goto l375
				}
				position++
				if buffer[position] != rune('o') {
					goto l375
				}
				position++
				{
					position377, tokenIndex377 := position, tokenIndex
					if !_rules[rule_]() {
						goto l377
					}
					goto l378
				l377:
					position, tokenIndex = position377, tokenIndex377
				}
			l378:
				{
					position379, tokenIndex379 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l380
					}
					position++
					if buffer[position] != rune('e') {
						goto l380
					}
					position++
					if buffer[position] != rune('c') {
						goto l380
					}
					position++
					if buffer[position] != rune('t') {
						goto l380
					}
					position++
					goto l379
				l380:
					position, tokenIndex = position379, tokenIndex379
					if buffer[position] != rune('g') {
						goto l381
					}
					position++
					if buffer[position] != rune('e') {
						goto l381
					}
					position++
					if buffer[position] != rune('n') {
						goto l381
					}
					position++
					goto l379
				l381:
					position, tokenIndex = position379, tokenIndex379
					if buffer[position] != rune('s') {
						goto l382
					}
					position++
					if buffer[position] != rune('e') {
						goto l382
					}
					position++
					if buffer[position] != rune('r') {
						goto l382
					}
					position++
					goto l379
				l382:
					position, tokenIndex = position379, tokenIndex379
					if buffer[position] != rune('s') {
						goto l383
					}
					position++
					if buffer[position] != rune('u') {
						goto l383
					}
					position++
					if buffer[position] != rune('b') {
						goto l383
					}
					position++
					if buffer[position] != rune('g') {
						goto l383
					}
					position++
					if buffer[position] != rune('e') {
						goto l383
					}
					position++
					if buffer[position] != rune('e') {
						goto l383
					}
					position++
					if buffer[position] != rune('n') {
						goto l383
					}
					position++
					goto l379
				l383:
					position, tokenIndex = position379, tokenIndex379
					if buffer[position] != rune('s') {
						goto l384
					}
					position++
					if buffer[position] != rune('u') {
						goto l384
					}
					position++
					if buffer[position] != rune('b') {
						goto l384
					}
					position++
					if buffer[position] != rune('g') {
						goto l384
					}
					position++
					if buffer[position] != rune('e') {
						goto l384
					}
					position++
					if buffer[position] != rune('n') {
						goto l384
					}
					position++
					goto l379
				l384:
					position, tokenIndex = position379, tokenIndex379
					if buffer[position] != rune('s') {
						goto l385
					}
					position++
					if buffer[position] != rune('u') {
						goto l385
					}
					position++
					if buffer[position] != rune('b') {
						goto l385
					}
					position++
					if buffer[position] != rune('g') {
						goto l385
					}
					position++
					goto l379
				l385:
					position, tokenIndex = position379, tokenIndex379
					if buffer[position] != rune('s') {
						goto l386
					}
					position++
					if buffer[position] != rune('u') {
						goto l386
					}
					position++
					if buffer[position] != rune('b') {
						goto l386
					}
					position++
					if buffer[position] != rune('s') {
						goto l386
					}
					position++
					if buffer[position] != rune('e') {
						goto l386
					}
					position++
					if buffer[position] != rune('c') {
						goto l386
					}
					position++
					if buffer[position] != rune('t') {
						goto l386
					}
					position++
					goto l379
				l386:
					position, tokenIndex = position379, tokenIndex379
					if buffer[position] != rune('s') {
						goto l375
					}
					position++
					if buffer[position] != rune('u') {
						goto l375
					}
					position++
					if buffer[position] != rune('b') {
						goto l375
					}
					position++
					if buffer[position] != rune('t') {
						goto l375
					}
					position++
					if buffer[position] != rune('r') {
						goto l375
					}
					position++
					if buffer[position] != rune('i') {
						goto l375
					}
					position++
					if buffer[position] != rune('b') {
						goto l375
					}
					position++
				}
			l379:
				{
					position387, tokenIndex387 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l388
					}
					position++
					goto l387
				l388:
					position, tokenIndex = position387, tokenIndex387
					{
						position389, tokenIndex389 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l375
						}
						position, tokenIndex = position389, tokenIndex389
					}
				}
			l387:
				add(ruleRankUninomialNotho, position376)
			}
			return true
		l375:
			position, tokenIndex = position375, tokenIndex375
			return false
		},
		/* 52 Uninomial <- <(UninomialWord (_ Authorship !(_ LowerCharExtended LowerCharExtended LowerCharExtended))?)> */
		func() bool {
			position390, tokenIndex390 := position, tokenIndex
			{
				position391 := position
				if !_rules[ruleUninomialWord]() {
					goto l390
				}
				{
					position392, tokenIndex392 := position, tokenIndex
					if !_rules[rule_]() {
						goto l392
					}
					if !_rules[ruleAuthorship]() {
						goto l392
					}
					{
						position394, tokenIndex394 := position, tokenIndex
						if !_rules[rule_]() {
							goto l394
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l394
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l394
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l394
						}
						goto l392
					l394:
						position, tokenIndex = position394, tokenIndex394
					}
					goto l393
				l392:
					position, tokenIndex = position392, tokenIndex392
				}
			l393:
				add(ruleUninomial, position391)
			}
			return true
		l390:
			position, tokenIndex = position390, tokenIndex390
			return false
		},
		/* 53 UninomialWord <- <(CapWord / TwoLetterGenus)> */
		func() bool {
			position395, tokenIndex395 := position, tokenIndex
			{
				position396 := position
				{
					position397, tokenIndex397 := position, tokenIndex
					if !_rules[ruleCapWord]() {
						goto l398
					}
					goto l397
				l398:
					position, tokenIndex = position397, tokenIndex397
					if !_rules[ruleTwoLetterGenus]() {
						goto l395
					}
				}
			l397:
				add(ruleUninomialWord, position396)
			}
			return true
		l395:
			position, tokenIndex = position395, tokenIndex395
			return false
		},
		/* 54 AbbrSubgenus <- <(UpperChar LowerChar* '.')> */
		func() bool {
			position399, tokenIndex399 := position, tokenIndex
			{
				position400 := position
				if !_rules[ruleUpperChar]() {
					goto l399
				}
			l401:
				{
					position402, tokenIndex402 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l402
					}
					goto l401
				l402:
					position, tokenIndex = position402, tokenIndex402
				}
				if buffer[position] != rune('.') {
					goto l399
				}
				position++
				add(ruleAbbrSubgenus, position400)
			}
			return true
		l399:
			position, tokenIndex = position399, tokenIndex399
			return false
		},
		/* 55 AbbrGenus <- <(UpperChar LowerChar? '.')> */
		func() bool {
			position403, tokenIndex403 := position, tokenIndex
			{
				position404 := position
				if !_rules[ruleUpperChar]() {
					goto l403
				}
				{
					position405, tokenIndex405 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l405
					}
					goto l406
				l405:
					position, tokenIndex = position405, tokenIndex405
				}
			l406:
				if buffer[position] != rune('.') {
					goto l403
				}
				position++
				add(ruleAbbrGenus, position404)
			}
			return true
		l403:
			position, tokenIndex = position403, tokenIndex403
			return false
		},
		/* 56 CapWord <- <(CapWordWithDash / CapWord1)> */
		func() bool {
			position407, tokenIndex407 := position, tokenIndex
			{
				position408 := position
				{
					position409, tokenIndex409 := position, tokenIndex
					if !_rules[ruleCapWordWithDash]() {
						goto l410
					}
					goto l409
				l410:
					position, tokenIndex = position409, tokenIndex409
					if !_rules[ruleCapWord1]() {
						goto l407
					}
				}
			l409:
				add(ruleCapWord, position408)
			}
			return true
		l407:
			position, tokenIndex = position407, tokenIndex407
			return false
		},
		/* 57 CapWord1 <- <(NameUpperChar NameLowerChar NameLowerChar+ '?'?)> */
		func() bool {
			position411, tokenIndex411 := position, tokenIndex
			{
				position412 := position
				if !_rules[ruleNameUpperChar]() {
					goto l411
				}
				if !_rules[ruleNameLowerChar]() {
					goto l411
				}
				if !_rules[ruleNameLowerChar]() {
					goto l411
				}
			l413:
				{
					position414, tokenIndex414 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l414
					}
					goto l413
				l414:
					position, tokenIndex = position414, tokenIndex414
				}
				{
					position415, tokenIndex415 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l415
					}
					position++
					goto l416
				l415:
					position, tokenIndex = position415, tokenIndex415
				}
			l416:
				add(ruleCapWord1, position412)
			}
			return true
		l411:
			position, tokenIndex = position411, tokenIndex411
			return false
		},
		/* 58 CapWordWithDash <- <((CapWord1 / TwoLetterGenusDashedSegment) Dash WordAfterDash (Dash WordAfterDash)?)> */
		func() bool {
			position417, tokenIndex417 := position, tokenIndex
			{
				position418 := position
				{
					position419, tokenIndex419 := position, tokenIndex
					if !_rules[ruleCapWord1]() {
						goto l420
					}
					goto l419
				l420:
					position, tokenIndex = position419, tokenIndex419
					if !_rules[ruleTwoLetterGenusDashedSegment]() {
						goto l417
					}
				}
			l419:
				if !_rules[ruleDash]() {
					goto l417
				}
				if !_rules[ruleWordAfterDash]() {
					goto l417
				}
				{
					position421, tokenIndex421 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l421
					}
					if !_rules[ruleWordAfterDash]() {
						goto l421
					}
					goto l422
				l421:
					position, tokenIndex = position421, tokenIndex421
				}
			l422:
				add(ruleCapWordWithDash, position418)
			}
			return true
		l417:
			position, tokenIndex = position417, tokenIndex417
			return false
		},
		/* 59 TwoLetterGenusDashedSegment <- <(('D' 'e') / ('E' 'u') / ('L' 'e') / ('N' 'e'))> */
		func() bool {
			position423, tokenIndex423 := position, tokenIndex
			{
				position424 := position
				{
					position425, tokenIndex425 := position, tokenIndex
					if buffer[position] != rune('D') {
						goto l426
					}
					position++
					if buffer[position] != rune('e') {
						goto l426
					}
					position++
					goto l425
				l426:
					position, tokenIndex = position425, tokenIndex425
					if buffer[position] != rune('E') {
						goto l427
					}
					position++
					if buffer[position] != rune('u') {
						goto l427
					}
					position++
					goto l425
				l427:
					position, tokenIndex = position425, tokenIndex425
					if buffer[position] != rune('L') {
						goto l428
					}
					position++
					if buffer[position] != rune('e') {
						goto l428
					}
					position++
					goto l425
				l428:
					position, tokenIndex = position425, tokenIndex425
					if buffer[position] != rune('N') {
						goto l423
					}
					position++
					if buffer[position] != rune('e') {
						goto l423
					}
					position++
				}
			l425:
				add(ruleTwoLetterGenusDashedSegment, position424)
			}
			return true
		l423:
			position, tokenIndex = position423, tokenIndex423
			return false
		},
		/* 60 WordAfterDash <- <(UpperAfterDash / LowerAfterDash)> */
		func() bool {
			position429, tokenIndex429 := position, tokenIndex
			{
				position430 := position
				{
					position431, tokenIndex431 := position, tokenIndex
					if !_rules[ruleUpperAfterDash]() {
						goto l432
					}
					goto l431
				l432:
					position, tokenIndex = position431, tokenIndex431
					if !_rules[ruleLowerAfterDash]() {
						goto l429
					}
				}
			l431:
				add(ruleWordAfterDash, position430)
			}
			return true
		l429:
			position, tokenIndex = position429, tokenIndex429
			return false
		},
		/* 61 UpperAfterDash <- <CapWord1> */
		func() bool {
			position433, tokenIndex433 := position, tokenIndex
			{
				position434 := position
				if !_rules[ruleCapWord1]() {
					goto l433
				}
				add(ruleUpperAfterDash, position434)
			}
			return true
		l433:
			position, tokenIndex = position433, tokenIndex433
			return false
		},
		/* 62 LowerAfterDash <- <Word1> */
		func() bool {
			position435, tokenIndex435 := position, tokenIndex
			{
				position436 := position
				if !_rules[ruleWord1]() {
					goto l435
				}
				add(ruleLowerAfterDash, position436)
			}
			return true
		l435:
			position, tokenIndex = position435, tokenIndex435
			return false
		},
		/* 63 TwoLetterGenus <- <(('C' 'a') / ('D' 'o') / ('E' 'a') / ('G' 'e') / ('I' 'a') / ('I' 'o') / ('I' 'x') / ('L' 'o') / ('O' 'a') / ('O' 'o') / ('N' 'u') / ('R' 'a') / ('T' 'y') / ('U' 'a') / ('A' 'a') / ('J' 'a') / ('Z' 'u') / ('L' 'a') / ('Q' 'u') / ('A' 's') / ('B' 'a'))> */
		func() bool {
			position437, tokenIndex437 := position, tokenIndex
			{
				position438 := position
				{
					position439, tokenIndex439 := position, tokenIndex
					if buffer[position] != rune('C') {
						goto l440
					}
					position++
					if buffer[position] != rune('a') {
						goto l440
					}
					position++
					goto l439
				l440:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('D') {
						goto l441
					}
					position++
					if buffer[position] != rune('o') {
						goto l441
					}
					position++
					goto l439
				l441:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('E') {
						goto l442
					}
					position++
					if buffer[position] != rune('a') {
						goto l442
					}
					position++
					goto l439
				l442:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('G') {
						goto l443
					}
					position++
					if buffer[position] != rune('e') {
						goto l443
					}
					position++
					goto l439
				l443:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('I') {
						goto l444
					}
					position++
					if buffer[position] != rune('a') {
						goto l444
					}
					position++
					goto l439
				l444:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('I') {
						goto l445
					}
					position++
					if buffer[position] != rune('o') {
						goto l445
					}
					position++
					goto l439
				l445:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('I') {
						goto l446
					}
					position++
					if buffer[position] != rune('x') {
						goto l446
					}
					position++
					goto l439
				l446:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('L') {
						goto l447
					}
					position++
					if buffer[position] != rune('o') {
						goto l447
					}
					position++
					goto l439
				l447:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('O') {
						goto l448
					}
					position++
					if buffer[position] != rune('a') {
						goto l448
					}
					position++
					goto l439
				l448:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('O') {
						goto l449
					}
					position++
					if buffer[position] != rune('o') {
						goto l449
					}
					position++
					goto l439
				l449:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('N') {
						goto l450
					}
					position++
					if buffer[position] != rune('u') {
						goto l450
					}
					position++
					goto l439
				l450:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('R') {
						goto l451
					}
					position++
					if buffer[position] != rune('a') {
						goto l451
					}
					position++
					goto l439
				l451:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('T') {
						goto l452
					}
					position++
					if buffer[position] != rune('y') {
						goto l452
					}
					position++
					goto l439
				l452:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('U') {
						goto l453
					}
					position++
					if buffer[position] != rune('a') {
						goto l453
					}
					position++
					goto l439
				l453:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('A') {
						goto l454
					}
					position++
					if buffer[position] != rune('a') {
						goto l454
					}
					position++
					goto l439
				l454:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('J') {
						goto l455
					}
					position++
					if buffer[position] != rune('a') {
						goto l455
					}
					position++
					goto l439
				l455:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('Z') {
						goto l456
					}
					position++
					if buffer[position] != rune('u') {
						goto l456
					}
					position++
					goto l439
				l456:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('L') {
						goto l457
					}
					position++
					if buffer[position] != rune('a') {
						goto l457
					}
					position++
					goto l439
				l457:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('Q') {
						goto l458
					}
					position++
					if buffer[position] != rune('u') {
						goto l458
					}
					position++
					goto l439
				l458:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('A') {
						goto l459
					}
					position++
					if buffer[position] != rune('s') {
						goto l459
					}
					position++
					goto l439
				l459:
					position, tokenIndex = position439, tokenIndex439
					if buffer[position] != rune('B') {
						goto l437
					}
					position++
					if buffer[position] != rune('a') {
						goto l437
					}
					position++
				}
			l439:
				add(ruleTwoLetterGenus, position438)
			}
			return true
		l437:
			position, tokenIndex = position437, tokenIndex437
			return false
		},
		/* 64 Word <- <(!((('e' 'x') / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd') / ('p' 'r' 'o') / ('c' 'v') / ('c' 'u' 'l' 't' 'i' 'v' 'a' 'r') / AuthorPrefix / RankUninomial / Approximation / Word4) SpaceCharEOI) (WordApostr / WordStartsWithDigit / MultiDashedWord / Word2 / Word1) &(SpaceCharEOI / '('))> */
		func() bool {
			position460, tokenIndex460 := position, tokenIndex
			{
				position461 := position
				{
					position462, tokenIndex462 := position, tokenIndex
					{
						position463, tokenIndex463 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l464
						}
						position++
						if buffer[position] != rune('x') {
							goto l464
						}
						position++
						goto l463
					l464:
						position, tokenIndex = position463, tokenIndex463
						if buffer[position] != rune('e') {
							goto l465
						}
						position++
						if buffer[position] != rune('t') {
							goto l465
						}
						position++
						goto l463
					l465:
						position, tokenIndex = position463, tokenIndex463
						if buffer[position] != rune('a') {
							goto l466
						}
						position++
						if buffer[position] != rune('n') {
							goto l466
						}
						position++
						if buffer[position] != rune('d') {
							goto l466
						}
						position++
						goto l463
					l466:
						position, tokenIndex = position463, tokenIndex463
						if buffer[position] != rune('a') {
							goto l467
						}
						position++
						if buffer[position] != rune('p') {
							goto l467
						}
						position++
						if buffer[position] != rune('u') {
							goto l467
						}
						position++
						if buffer[position] != rune('d') {
							goto l467
						}
						position++
						goto l463
					l467:
						position, tokenIndex = position463, tokenIndex463
						if buffer[position] != rune('p') {
							goto l468
						}
						position++
						if buffer[position] != rune('r') {
							goto l468
						}
						position++
						if buffer[position] != rune('o') {
							goto l468
						}
						position++
						goto l463
					l468:
						position, tokenIndex = position463, tokenIndex463
						if buffer[position] != rune('c') {
							goto l469
						}
						position++
						if buffer[position] != rune('v') {
							goto l469
						}
						position++
						goto l463
					l469:
						position, tokenIndex = position463, tokenIndex463
						if buffer[position] != rune('c') {
							goto l470
						}
						position++
						if buffer[position] != rune('u') {
							goto l470
						}
						position++
						if buffer[position] != rune('l') {
							goto l470
						}
						position++
						if buffer[position] != rune('t') {
							goto l470
						}
						position++
						if buffer[position] != rune('i') {
							goto l470
						}
						position++
						if buffer[position] != rune('v') {
							goto l470
						}
						position++
						if buffer[position] != rune('a') {
							goto l470
						}
						position++
						if buffer[position] != rune('r') {
							goto l470
						}
						position++
						goto l463
					l470:
						position, tokenIndex = position463, tokenIndex463
						if !_rules[ruleAuthorPrefix]() {
							goto l471
						}
						goto l463
					l471:
						position, tokenIndex = position463, tokenIndex463
						if !_rules[ruleRankUninomial]() {
							goto l472
						}
						goto l463
					l472:
						position, tokenIndex = position463, tokenIndex463
						if !_rules[ruleApproximation]() {
							goto l473
						}
						goto l463
					l473:
						position, tokenIndex = position463, tokenIndex463
						if !_rules[ruleWord4]() {
							goto l462
						}
					}
				l463:
					if !_rules[ruleSpaceCharEOI]() {
						goto l462
					}
					goto l460
				l462:
					position, tokenIndex = position462, tokenIndex462
				}
				{
					position474, tokenIndex474 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l475
					}
					goto l474
				l475:
					position, tokenIndex = position474, tokenIndex474
					if !_rules[ruleWordStartsWithDigit]() {
						goto l476
					}
					goto l474
				l476:
					position, tokenIndex = position474, tokenIndex474
					if !_rules[ruleMultiDashedWord]() {
						goto l477
					}
					goto l474
				l477:
					position, tokenIndex = position474, tokenIndex474
					if !_rules[ruleWord2]() {
						goto l478
					}
					goto l474
				l478:
					position, tokenIndex = position474, tokenIndex474
					if !_rules[ruleWord1]() {
						goto l460
					}
				}
			l474:
				{
					position479, tokenIndex479 := position, tokenIndex
					{
						position480, tokenIndex480 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l481
						}
						goto l480
					l481:
						position, tokenIndex = position480, tokenIndex480
						if buffer[position] != rune('(') {
							goto l460
						}
						position++
					}
				l480:
					position, tokenIndex = position479, tokenIndex479
				}
				add(ruleWord, position461)
			}
			return true
		l460:
			position, tokenIndex = position460, tokenIndex460
			return false
		},
		/* 65 Word1 <- <(((DotPrefix / LowerASCII) Dash)? NameLowerChar NameLowerChar+)> */
		func() bool {
			position482, tokenIndex482 := position, tokenIndex
			{
				position483 := position
				{
					position484, tokenIndex484 := position, tokenIndex
					{
						position486, tokenIndex486 := position, tokenIndex
						if !_rules[ruleDotPrefix]() {
							goto l487
						}
						goto l486
					l487:
						position, tokenIndex = position486, tokenIndex486
						if !_rules[ruleLowerASCII]() {
							goto l484
						}
					}
				l486:
					if !_rules[ruleDash]() {
						goto l484
					}
					goto l485
				l484:
					position, tokenIndex = position484, tokenIndex484
				}
			l485:
				if !_rules[ruleNameLowerChar]() {
					goto l482
				}
				if !_rules[ruleNameLowerChar]() {
					goto l482
				}
			l488:
				{
					position489, tokenIndex489 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l489
					}
					goto l488
				l489:
					position, tokenIndex = position489, tokenIndex489
				}
				add(ruleWord1, position483)
			}
			return true
		l482:
			position, tokenIndex = position482, tokenIndex482
			return false
		},
		/* 66 WordStartsWithDigit <- <(('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9') Nums? ('.' / Dash)? NameLowerChar NameLowerChar NameLowerChar NameLowerChar+)> */
		func() bool {
			position490, tokenIndex490 := position, tokenIndex
			{
				position491 := position
				{
					position492, tokenIndex492 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l493
					}
					position++
					goto l492
				l493:
					position, tokenIndex = position492, tokenIndex492
					if buffer[position] != rune('2') {
						goto l494
					}
					position++
					goto l492
				l494:
					position, tokenIndex = position492, tokenIndex492
					if buffer[position] != rune('3') {
						goto l495
					}
					position++
					goto l492
				l495:
					position, tokenIndex = position492, tokenIndex492
					if buffer[position] != rune('4') {
						goto l496
					}
					position++
					goto l492
				l496:
					position, tokenIndex = position492, tokenIndex492
					if buffer[position] != rune('5') {
						goto l497
					}
					position++
					goto l492
				l497:
					position, tokenIndex = position492, tokenIndex492
					if buffer[position] != rune('6') {
						goto l498
					}
					position++
					goto l492
				l498:
					position, tokenIndex = position492, tokenIndex492
					if buffer[position] != rune('7') {
						goto l499
					}
					position++
					goto l492
				l499:
					position, tokenIndex = position492, tokenIndex492
					if buffer[position] != rune('8') {
						goto l500
					}
					position++
					goto l492
				l500:
					position, tokenIndex = position492, tokenIndex492
					if buffer[position] != rune('9') {
						goto l490
					}
					position++
				}
			l492:
				{
					position501, tokenIndex501 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l501
					}
					goto l502
				l501:
					position, tokenIndex = position501, tokenIndex501
				}
			l502:
				{
					position503, tokenIndex503 := position, tokenIndex
					{
						position505, tokenIndex505 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l506
						}
						position++
						goto l505
					l506:
						position, tokenIndex = position505, tokenIndex505
						if !_rules[ruleDash]() {
							goto l503
						}
					}
				l505:
					goto l504
				l503:
					position, tokenIndex = position503, tokenIndex503
				}
			l504:
				if !_rules[ruleNameLowerChar]() {
					goto l490
				}
				if !_rules[ruleNameLowerChar]() {
					goto l490
				}
				if !_rules[ruleNameLowerChar]() {
					goto l490
				}
				if !_rules[ruleNameLowerChar]() {
					goto l490
				}
			l507:
				{
					position508, tokenIndex508 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l508
					}
					goto l507
				l508:
					position, tokenIndex = position508, tokenIndex508
				}
				add(ruleWordStartsWithDigit, position491)
			}
			return true
		l490:
			position, tokenIndex = position490, tokenIndex490
			return false
		},
		/* 67 Word2 <- <(NameLowerChar+ Dash? (WordApostr / NameLowerChar+))> */
		func() bool {
			position509, tokenIndex509 := position, tokenIndex
			{
				position510 := position
				if !_rules[ruleNameLowerChar]() {
					goto l509
				}
			l511:
				{
					position512, tokenIndex512 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l512
					}
					goto l511
				l512:
					position, tokenIndex = position512, tokenIndex512
				}
				{
					position513, tokenIndex513 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l513
					}
					goto l514
				l513:
					position, tokenIndex = position513, tokenIndex513
				}
			l514:
				{
					position515, tokenIndex515 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l516
					}
					goto l515
				l516:
					position, tokenIndex = position515, tokenIndex515
					if !_rules[ruleNameLowerChar]() {
						goto l509
					}
				l517:
					{
						position518, tokenIndex518 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l518
						}
						goto l517
					l518:
						position, tokenIndex = position518, tokenIndex518
					}
				}
			l515:
				add(ruleWord2, position510)
			}
			return true
		l509:
			position, tokenIndex = position509, tokenIndex509
			return false
		},
		/* 68 WordApostr <- <(NameLowerChar NameLowerChar* Apostrophe Word1)> */
		func() bool {
			position519, tokenIndex519 := position, tokenIndex
			{
				position520 := position
				if !_rules[ruleNameLowerChar]() {
					goto l519
				}
			l521:
				{
					position522, tokenIndex522 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l522
					}
					goto l521
				l522:
					position, tokenIndex = position522, tokenIndex522
				}
				if !_rules[ruleApostrophe]() {
					goto l519
				}
				if !_rules[ruleWord1]() {
					goto l519
				}
				add(ruleWordApostr, position520)
			}
			return true
		l519:
			position, tokenIndex = position519, tokenIndex519
			return false
		},
		/* 69 Word4 <- <(NameLowerChar+ '.' NameLowerChar)> */
		func() bool {
			position523, tokenIndex523 := position, tokenIndex
			{
				position524 := position
				if !_rules[ruleNameLowerChar]() {
					goto l523
				}
			l525:
				{
					position526, tokenIndex526 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l526
					}
					goto l525
				l526:
					position, tokenIndex = position526, tokenIndex526
				}
				if buffer[position] != rune('.') {
					goto l523
				}
				position++
				if !_rules[ruleNameLowerChar]() {
					goto l523
				}
				add(ruleWord4, position524)
			}
			return true
		l523:
			position, tokenIndex = position523, tokenIndex523
			return false
		},
		/* 70 DotPrefix <- <('s' 't' '.')> */
		func() bool {
			position527, tokenIndex527 := position, tokenIndex
			{
				position528 := position
				if buffer[position] != rune('s') {
					goto l527
				}
				position++
				if buffer[position] != rune('t') {
					goto l527
				}
				position++
				if buffer[position] != rune('.') {
					goto l527
				}
				position++
				add(ruleDotPrefix, position528)
			}
			return true
		l527:
			position, tokenIndex = position527, tokenIndex527
			return false
		},
		/* 71 MultiDashedWord <- <(NameLowerChar+ Dash NameLowerChar+ Dash NameLowerChar+ (Dash NameLowerChar+)?)> */
		func() bool {
			position529, tokenIndex529 := position, tokenIndex
			{
				position530 := position
				if !_rules[ruleNameLowerChar]() {
					goto l529
				}
			l531:
				{
					position532, tokenIndex532 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l532
					}
					goto l531
				l532:
					position, tokenIndex = position532, tokenIndex532
				}
				if !_rules[ruleDash]() {
					goto l529
				}
				if !_rules[ruleNameLowerChar]() {
					goto l529
				}
			l533:
				{
					position534, tokenIndex534 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l534
					}
					goto l533
				l534:
					position, tokenIndex = position534, tokenIndex534
				}
				if !_rules[ruleDash]() {
					goto l529
				}
				if !_rules[ruleNameLowerChar]() {
					goto l529
				}
			l535:
				{
					position536, tokenIndex536 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l536
					}
					goto l535
				l536:
					position, tokenIndex = position536, tokenIndex536
				}
				{
					position537, tokenIndex537 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l537
					}
					if !_rules[ruleNameLowerChar]() {
						goto l537
					}
				l539:
					{
						position540, tokenIndex540 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l540
						}
						goto l539
					l540:
						position, tokenIndex = position540, tokenIndex540
					}
					goto l538
				l537:
					position, tokenIndex = position537, tokenIndex537
				}
			l538:
				add(ruleMultiDashedWord, position530)
			}
			return true
		l529:
			position, tokenIndex = position529, tokenIndex529
			return false
		},
		/* 72 HybridChar <- <('×' / (('x' / 'X') &_) / (('x' / 'X') &UninomialWord) / (('x' / 'X') &END))> */
		func() bool {
			position541, tokenIndex541 := position, tokenIndex
			{
				position542 := position
				{
					position543, tokenIndex543 := position, tokenIndex
					if buffer[position] != rune('×') {
						goto l544
					}
					position++
					goto l543
				l544:
					position, tokenIndex = position543, tokenIndex543
					{
						position546, tokenIndex546 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l547
						}
						position++
						goto l546
					l547:
						position, tokenIndex = position546, tokenIndex546
						if buffer[position] != rune('X') {
							goto l545
						}
						position++
					}
				l546:
					{
						position548, tokenIndex548 := position, tokenIndex
						if !_rules[rule_]() {
							goto l545
						}
						position, tokenIndex = position548, tokenIndex548
					}
					goto l543
				l545:
					position, tokenIndex = position543, tokenIndex543
					{
						position550, tokenIndex550 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l551
						}
						position++
						goto l550
					l551:
						position, tokenIndex = position550, tokenIndex550
						if buffer[position] != rune('X') {
							goto l549
						}
						position++
					}
				l550:
					{
						position552, tokenIndex552 := position, tokenIndex
						if !_rules[ruleUninomialWord]() {
							goto l549
						}
						position, tokenIndex = position552, tokenIndex552
					}
					goto l543
				l549:
					position, tokenIndex = position543, tokenIndex543
					{
						position553, tokenIndex553 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l554
						}
						position++
						goto l553
					l554:
						position, tokenIndex = position553, tokenIndex553
						if buffer[position] != rune('X') {
							goto l541
						}
						position++
					}
				l553:
					{
						position555, tokenIndex555 := position, tokenIndex
						if !_rules[ruleEND]() {
							goto l541
						}
						position, tokenIndex = position555, tokenIndex555
					}
				}
			l543:
				add(ruleHybridChar, position542)
			}
			return true
		l541:
			position, tokenIndex = position541, tokenIndex541
			return false
		},
		/* 73 GraftChimeraChar <- <'+'> */
		func() bool {
			position556, tokenIndex556 := position, tokenIndex
			{
				position557 := position
				if buffer[position] != rune('+') {
					goto l556
				}
				position++
				add(ruleGraftChimeraChar, position557)
			}
			return true
		l556:
			position, tokenIndex = position556, tokenIndex556
			return false
		},
		/* 74 ApproxNameIgnored <- <.*> */
		func() bool {
			{
				position559 := position
			l560:
				{
					position561, tokenIndex561 := position, tokenIndex
					if !matchDot() {
						goto l561
					}
					goto l560
				l561:
					position, tokenIndex = position561, tokenIndex561
				}
				add(ruleApproxNameIgnored, position559)
			}
			return true
		},
		/* 75 Approximation <- <(('s' 'p' '.' _? ('n' 'r' '.')) / ('s' 'p' '.' _? ('a' 'f' 'f' '.')) / ('m' 'o' 'n' 's' 't' '.') / '?' / ((('s' 'p' 'p') / ('n' 'r') / ('s' 'p') / ('a' 'f' 'f') / ('s' 'p' 'e' 'c' 'i' 'e' 's')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position562, tokenIndex562 := position, tokenIndex
			{
				position563 := position
				{
					position564, tokenIndex564 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l565
					}
					position++
					if buffer[position] != rune('p') {
						goto l565
					}
					position++
					if buffer[position] != rune('.') {
						goto l565
					}
					position++
					{
						position566, tokenIndex566 := position, tokenIndex
						if !_rules[rule_]() {
							goto l566
						}
						goto l567
					l566:
						position, tokenIndex = position566, tokenIndex566
					}
				l567:
					if buffer[position] != rune('n') {
						goto l565
					}
					position++
					if buffer[position] != rune('r') {
						goto l565
					}
					position++
					if buffer[position] != rune('.') {
						goto l565
					}
					position++
					goto l564
				l565:
					position, tokenIndex = position564, tokenIndex564
					if buffer[position] != rune('s') {
						goto l568
					}
					position++
					if buffer[position] != rune('p') {
						goto l568
					}
					position++
					if buffer[position] != rune('.') {
						goto l568
					}
					position++
					{
						position569, tokenIndex569 := position, tokenIndex
						if !_rules[rule_]() {
							goto l569
						}
						goto l570
					l569:
						position, tokenIndex = position569, tokenIndex569
					}
				l570:
					if buffer[position] != rune('a') {
						goto l568
					}
					position++
					if buffer[position] != rune('f') {
						goto l568
					}
					position++
					if buffer[position] != rune('f') {
						goto l568
					}
					position++
					if buffer[position] != rune('.') {
						goto l568
					}
					position++
					goto l564
				l568:
					position, tokenIndex = position564, tokenIndex564
					if buffer[position] != rune('m') {
						goto l571
					}
					position++
					if buffer[position] != rune('o') {
						goto l571
					}
					position++
					if buffer[position] != rune('n') {
						goto l571
					}
					position++
					if buffer[position] != rune('s') {
						goto l571
					}
					position++
					if buffer[position] != rune('t') {
						goto l571
					}
					position++
					if buffer[position] != rune('.') {
						goto l571
					}
					position++
					goto l564
				l571:
					position, tokenIndex = position564, tokenIndex564
					if buffer[position] != rune('?') {
						goto l572
					}
					position++
					goto l564
				l572:
					position, tokenIndex = position564, tokenIndex564
					{
						position573, tokenIndex573 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l574
						}
						position++
						if buffer[position] != rune('p') {
							goto l574
						}
						position++
						if buffer[position] != rune('p') {
							goto l574
						}
						position++
						goto l573
					l574:
						position, tokenIndex = position573, tokenIndex573
						if buffer[position] != rune('n') {
							goto l575
						}
						position++
						if buffer[position] != rune('r') {
							goto l575
						}
						position++
						goto l573
					l575:
						position, tokenIndex = position573, tokenIndex573
						if buffer[position] != rune('s') {
							goto l576
						}
						position++
						if buffer[position] != rune('p') {
							goto l576
						}
						position++
						goto l573
					l576:
						position, tokenIndex = position573, tokenIndex573
						if buffer[position] != rune('a') {
							goto l577
						}
						position++
						if buffer[position] != rune('f') {
							goto l577
						}
						position++
						if buffer[position] != rune('f') {
							goto l577
						}
						position++
						goto l573
					l577:
						position, tokenIndex = position573, tokenIndex573
						if buffer[position] != rune('s') {
							goto l562
						}
						position++
						if buffer[position] != rune('p') {
							goto l562
						}
						position++
						if buffer[position] != rune('e') {
							goto l562
						}
						position++
						if buffer[position] != rune('c') {
							goto l562
						}
						position++
						if buffer[position] != rune('i') {
							goto l562
						}
						position++
						if buffer[position] != rune('e') {
							goto l562
						}
						position++
						if buffer[position] != rune('s') {
							goto l562
						}
						position++
					}
				l573:
					{
						position578, tokenIndex578 := position, tokenIndex
						{
							position580, tokenIndex580 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l579
							}
							position, tokenIndex = position580, tokenIndex580
						}
						goto l578
					l579:
						position, tokenIndex = position578, tokenIndex578
						if buffer[position] != rune('.') {
							goto l562
						}
						position++
					}
				l578:
				}
			l564:
				add(ruleApproximation, position563)
			}
			return true
		l562:
			position, tokenIndex = position562, tokenIndex562
			return false
		},
		/* 76 Authorship <- <((AuthorshipCombo / OriginalAuthorship) &(SpaceCharEOI / ';' / ','))> */
		func() bool {
			position581, tokenIndex581 := position, tokenIndex
			{
				position582 := position
				{
					position583, tokenIndex583 := position, tokenIndex
					if !_rules[ruleAuthorshipCombo]() {
						goto l584
					}
					goto l583
				l584:
					position, tokenIndex = position583, tokenIndex583
					if !_rules[ruleOriginalAuthorship]() {
						goto l581
					}
				}
			l583:
				{
					position585, tokenIndex585 := position, tokenIndex
					{
						position586, tokenIndex586 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l587
						}
						goto l586
					l587:
						position, tokenIndex = position586, tokenIndex586
						if buffer[position] != rune(';') {
							goto l588
						}
						position++
						goto l586
					l588:
						position, tokenIndex = position586, tokenIndex586
						if buffer[position] != rune(',') {
							goto l581
						}
						position++
					}
				l586:
					position, tokenIndex = position585, tokenIndex585
				}
				add(ruleAuthorship, position582)
			}
			return true
		l581:
			position, tokenIndex = position581, tokenIndex581
			return false
		},
		/* 77 AuthorshipCombo <- <(OriginalAuthorshipComb (_? CombinationAuthorship)?)> */
		func() bool {
			position589, tokenIndex589 := position, tokenIndex
			{
				position590 := position
				if !_rules[ruleOriginalAuthorshipComb]() {
					goto l589
				}
				{
					position591, tokenIndex591 := position, tokenIndex
					{
						position593, tokenIndex593 := position, tokenIndex
						if !_rules[rule_]() {
							goto l593
						}
						goto l594
					l593:
						position, tokenIndex = position593, tokenIndex593
					}
				l594:
					if !_rules[ruleCombinationAuthorship]() {
						goto l591
					}
					goto l592
				l591:
					position, tokenIndex = position591, tokenIndex591
				}
			l592:
				add(ruleAuthorshipCombo, position590)
			}
			return true
		l589:
			position, tokenIndex = position589, tokenIndex589
			return false
		},
		/* 78 OriginalAuthorship <- <AuthorsGroup> */
		func() bool {
			position595, tokenIndex595 := position, tokenIndex
			{
				position596 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l595
				}
				add(ruleOriginalAuthorship, position596)
			}
			return true
		l595:
			position, tokenIndex = position595, tokenIndex595
			return false
		},
		/* 79 OriginalAuthorshipComb <- <(BasionymAuthorshipYearMisformed / BasionymAuthorship / BasionymAuthorshipMissingParens)> */
		func() bool {
			position597, tokenIndex597 := position, tokenIndex
			{
				position598 := position
				{
					position599, tokenIndex599 := position, tokenIndex
					if !_rules[ruleBasionymAuthorshipYearMisformed]() {
						goto l600
					}
					goto l599
				l600:
					position, tokenIndex = position599, tokenIndex599
					if !_rules[ruleBasionymAuthorship]() {
						goto l601
					}
					goto l599
				l601:
					position, tokenIndex = position599, tokenIndex599
					if !_rules[ruleBasionymAuthorshipMissingParens]() {
						goto l597
					}
				}
			l599:
				add(ruleOriginalAuthorshipComb, position598)
			}
			return true
		l597:
			position, tokenIndex = position597, tokenIndex597
			return false
		},
		/* 80 CombinationAuthorship <- <AuthorsGroup> */
		func() bool {
			position602, tokenIndex602 := position, tokenIndex
			{
				position603 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l602
				}
				add(ruleCombinationAuthorship, position603)
			}
			return true
		l602:
			position, tokenIndex = position602, tokenIndex602
			return false
		},
		/* 81 BasionymAuthorshipMissingParens <- <(MissingParensStart / MissingParensEnd)> */
		func() bool {
			position604, tokenIndex604 := position, tokenIndex
			{
				position605 := position
				{
					position606, tokenIndex606 := position, tokenIndex
					if !_rules[ruleMissingParensStart]() {
						goto l607
					}
					goto l606
				l607:
					position, tokenIndex = position606, tokenIndex606
					if !_rules[ruleMissingParensEnd]() {
						goto l604
					}
				}
			l606:
				add(ruleBasionymAuthorshipMissingParens, position605)
			}
			return true
		l604:
			position, tokenIndex = position604, tokenIndex604
			return false
		},
		/* 82 MissingParensStart <- <('(' _? AuthorsGroup)> */
		func() bool {
			position608, tokenIndex608 := position, tokenIndex
			{
				position609 := position
				if buffer[position] != rune('(') {
					goto l608
				}
				position++
				{
					position610, tokenIndex610 := position, tokenIndex
					if !_rules[rule_]() {
						goto l610
					}
					goto l611
				l610:
					position, tokenIndex = position610, tokenIndex610
				}
			l611:
				if !_rules[ruleAuthorsGroup]() {
					goto l608
				}
				add(ruleMissingParensStart, position609)
			}
			return true
		l608:
			position, tokenIndex = position608, tokenIndex608
			return false
		},
		/* 83 MissingParensEnd <- <(AuthorsGroup _? ')')> */
		func() bool {
			position612, tokenIndex612 := position, tokenIndex
			{
				position613 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l612
				}
				{
					position614, tokenIndex614 := position, tokenIndex
					if !_rules[rule_]() {
						goto l614
					}
					goto l615
				l614:
					position, tokenIndex = position614, tokenIndex614
				}
			l615:
				if buffer[position] != rune(')') {
					goto l612
				}
				position++
				add(ruleMissingParensEnd, position613)
			}
			return true
		l612:
			position, tokenIndex = position612, tokenIndex612
			return false
		},
		/* 84 BasionymAuthorshipYearMisformed <- <('(' _? AuthorsGroup _? ')' (_? ',')? _? Year)> */
		func() bool {
			position616, tokenIndex616 := position, tokenIndex
			{
				position617 := position
				if buffer[position] != rune('(') {
					goto l616
				}
				position++
				{
					position618, tokenIndex618 := position, tokenIndex
					if !_rules[rule_]() {
						goto l618
					}
					goto l619
				l618:
					position, tokenIndex = position618, tokenIndex618
				}
			l619:
				if !_rules[ruleAuthorsGroup]() {
					goto l616
				}
				{
					position620, tokenIndex620 := position, tokenIndex
					if !_rules[rule_]() {
						goto l620
					}
					goto l621
				l620:
					position, tokenIndex = position620, tokenIndex620
				}
			l621:
				if buffer[position] != rune(')') {
					goto l616
				}
				position++
				{
					position622, tokenIndex622 := position, tokenIndex
					{
						position624, tokenIndex624 := position, tokenIndex
						if !_rules[rule_]() {
							goto l624
						}
						goto l625
					l624:
						position, tokenIndex = position624, tokenIndex624
					}
				l625:
					if buffer[position] != rune(',') {
						goto l622
					}
					position++
					goto l623
				l622:
					position, tokenIndex = position622, tokenIndex622
				}
			l623:
				{
					position626, tokenIndex626 := position, tokenIndex
					if !_rules[rule_]() {
						goto l626
					}
					goto l627
				l626:
					position, tokenIndex = position626, tokenIndex626
				}
			l627:
				if !_rules[ruleYear]() {
					goto l616
				}
				add(ruleBasionymAuthorshipYearMisformed, position617)
			}
			return true
		l616:
			position, tokenIndex = position616, tokenIndex616
			return false
		},
		/* 85 BasionymAuthorship <- <(BasionymAuthorship1 / BasionymAuthorship2Parens)> */
		func() bool {
			position628, tokenIndex628 := position, tokenIndex
			{
				position629 := position
				{
					position630, tokenIndex630 := position, tokenIndex
					if !_rules[ruleBasionymAuthorship1]() {
						goto l631
					}
					goto l630
				l631:
					position, tokenIndex = position630, tokenIndex630
					if !_rules[ruleBasionymAuthorship2Parens]() {
						goto l628
					}
				}
			l630:
				add(ruleBasionymAuthorship, position629)
			}
			return true
		l628:
			position, tokenIndex = position628, tokenIndex628
			return false
		},
		/* 86 BasionymAuthorship1 <- <('(' _? AuthorsGroup _? ')')> */
		func() bool {
			position632, tokenIndex632 := position, tokenIndex
			{
				position633 := position
				if buffer[position] != rune('(') {
					goto l632
				}
				position++
				{
					position634, tokenIndex634 := position, tokenIndex
					if !_rules[rule_]() {
						goto l634
					}
					goto l635
				l634:
					position, tokenIndex = position634, tokenIndex634
				}
			l635:
				if !_rules[ruleAuthorsGroup]() {
					goto l632
				}
				{
					position636, tokenIndex636 := position, tokenIndex
					if !_rules[rule_]() {
						goto l636
					}
					goto l637
				l636:
					position, tokenIndex = position636, tokenIndex636
				}
			l637:
				if buffer[position] != rune(')') {
					goto l632
				}
				position++
				add(ruleBasionymAuthorship1, position633)
			}
			return true
		l632:
			position, tokenIndex = position632, tokenIndex632
			return false
		},
		/* 87 BasionymAuthorship2Parens <- <('(' _? '(' _? AuthorsGroup _? ')' _? ')')> */
		func() bool {
			position638, tokenIndex638 := position, tokenIndex
			{
				position639 := position
				if buffer[position] != rune('(') {
					goto l638
				}
				position++
				{
					position640, tokenIndex640 := position, tokenIndex
					if !_rules[rule_]() {
						goto l640
					}
					goto l641
				l640:
					position, tokenIndex = position640, tokenIndex640
				}
			l641:
				if buffer[position] != rune('(') {
					goto l638
				}
				position++
				{
					position642, tokenIndex642 := position, tokenIndex
					if !_rules[rule_]() {
						goto l642
					}
					goto l643
				l642:
					position, tokenIndex = position642, tokenIndex642
				}
			l643:
				if !_rules[ruleAuthorsGroup]() {
					goto l638
				}
				{
					position644, tokenIndex644 := position, tokenIndex
					if !_rules[rule_]() {
						goto l644
					}
					goto l645
				l644:
					position, tokenIndex = position644, tokenIndex644
				}
			l645:
				if buffer[position] != rune(')') {
					goto l638
				}
				position++
				{
					position646, tokenIndex646 := position, tokenIndex
					if !_rules[rule_]() {
						goto l646
					}
					goto l647
				l646:
					position, tokenIndex = position646, tokenIndex646
				}
			l647:
				if buffer[position] != rune(')') {
					goto l638
				}
				position++
				add(ruleBasionymAuthorship2Parens, position639)
			}
			return true
		l638:
			position, tokenIndex = position638, tokenIndex638
			return false
		},
		/* 88 AuthorsGroup <- <(AuthorsTeam (','? _ (AuthorEmend / AuthorEx / AuthorIn) AuthorsTeam)?)> */
		func() bool {
			position648, tokenIndex648 := position, tokenIndex
			{
				position649 := position
				if !_rules[ruleAuthorsTeam]() {
					goto l648
				}
				{
					position650, tokenIndex650 := position, tokenIndex
					{
						position652, tokenIndex652 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l652
						}
						position++
						goto l653
					l652:
						position, tokenIndex = position652, tokenIndex652
					}
				l653:
					if !_rules[rule_]() {
						goto l650
					}
					{
						position654, tokenIndex654 := position, tokenIndex
						if !_rules[ruleAuthorEmend]() {
							goto l655
						}
						goto l654
					l655:
						position, tokenIndex = position654, tokenIndex654
						if !_rules[ruleAuthorEx]() {
							goto l656
						}
						goto l654
					l656:
						position, tokenIndex = position654, tokenIndex654
						if !_rules[ruleAuthorIn]() {
							goto l650
						}
					}
				l654:
					if !_rules[ruleAuthorsTeam]() {
						goto l650
					}
					goto l651
				l650:
					position, tokenIndex = position650, tokenIndex650
				}
			l651:
				add(ruleAuthorsGroup, position649)
			}
			return true
		l648:
			position, tokenIndex = position648, tokenIndex648
			return false
		},
		/* 89 AuthorsTeam <- <(Author (AuthorSep Author)* (_? ','? _? Year)?)> */
		func() bool {
			position657, tokenIndex657 := position, tokenIndex
			{
				position658 := position
				if !_rules[ruleAuthor]() {
					goto l657
				}
			l659:
				{
					position660, tokenIndex660 := position, tokenIndex
					if !_rules[ruleAuthorSep]() {
						goto l660
					}
					if !_rules[ruleAuthor]() {
						goto l660
					}
					goto l659
				l660:
					position, tokenIndex = position660, tokenIndex660
				}
				{
					position661, tokenIndex661 := position, tokenIndex
					{
						position663, tokenIndex663 := position, tokenIndex
						if !_rules[rule_]() {
							goto l663
						}
						goto l664
					l663:
						position, tokenIndex = position663, tokenIndex663
					}
				l664:
					{
						position665, tokenIndex665 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l665
						}
						position++
						goto l666
					l665:
						position, tokenIndex = position665, tokenIndex665
					}
				l666:
					{
						position667, tokenIndex667 := position, tokenIndex
						if !_rules[rule_]() {
							goto l667
						}
						goto l668
					l667:
						position, tokenIndex = position667, tokenIndex667
					}
				l668:
					if !_rules[ruleYear]() {
						goto l661
					}
					goto l662
				l661:
					position, tokenIndex = position661, tokenIndex661
				}
			l662:
				add(ruleAuthorsTeam, position658)
			}
			return true
		l657:
			position, tokenIndex = position657, tokenIndex657
			return false
		},
		/* 90 AuthorSep <- <(AuthorSep1 / AuthorSep2)> */
		func() bool {
			position669, tokenIndex669 := position, tokenIndex
			{
				position670 := position
				{
					position671, tokenIndex671 := position, tokenIndex
					if !_rules[ruleAuthorSep1]() {
						goto l672
					}
					goto l671
				l672:
					position, tokenIndex = position671, tokenIndex671
					if !_rules[ruleAuthorSep2]() {
						goto l669
					}
				}
			l671:
				add(ruleAuthorSep, position670)
			}
			return true
		l669:
			position, tokenIndex = position669, tokenIndex669
			return false
		},
		/* 91 AuthorSep1 <- <(_? (',' _)? ('&' / AuthorSepSpanish / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd')) _?)> */
		func() bool {
			position673, tokenIndex673 := position, tokenIndex
			{
				position674 := position
				{
					position675, tokenIndex675 := position, tokenIndex
					if !_rules[rule_]() {
						goto l675
					}
					goto l676
				l675:
					position, tokenIndex = position675, tokenIndex675
				}
			l676:
				{
					position677, tokenIndex677 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l677
					}
					position++
					if !_rules[rule_]() {
						goto l677
					}
					goto l678
				l677:
					position, tokenIndex = position677, tokenIndex677
				}
			l678:
				{
					position679, tokenIndex679 := position, tokenIndex
					if buffer[position] != rune('&') {
						goto l680
					}
					position++
					goto l679
				l680:
					position, tokenIndex = position679, tokenIndex679
					if !_rules[ruleAuthorSepSpanish]() {
						goto l681
					}
					goto l679
				l681:
					position, tokenIndex = position679, tokenIndex679
					if buffer[position] != rune('e') {
						goto l682
					}
					position++
					if buffer[position] != rune('t') {
						goto l682
					}
					position++
					goto l679
				l682:
					position, tokenIndex = position679, tokenIndex679
					if buffer[position] != rune('a') {
						goto l683
					}
					position++
					if buffer[position] != rune('n') {
						goto l683
					}
					position++
					if buffer[position] != rune('d') {
						goto l683
					}
					position++
					goto l679
				l683:
					position, tokenIndex = position679, tokenIndex679
					if buffer[position] != rune('a') {
						goto l673
					}
					position++
					if buffer[position] != rune('p') {
						goto l673
					}
					position++
					if buffer[position] != rune('u') {
						goto l673
					}
					position++
					if buffer[position] != rune('d') {
						goto l673
					}
					position++
				}
			l679:
				{
					position684, tokenIndex684 := position, tokenIndex
					if !_rules[rule_]() {
						goto l684
					}
					goto l685
				l684:
					position, tokenIndex = position684, tokenIndex684
				}
			l685:
				add(ruleAuthorSep1, position674)
			}
			return true
		l673:
			position, tokenIndex = position673, tokenIndex673
			return false
		},
		/* 92 AuthorSep2 <- <(_? ',' _?)> */
		func() bool {
			position686, tokenIndex686 := position, tokenIndex
			{
				position687 := position
				{
					position688, tokenIndex688 := position, tokenIndex
					if !_rules[rule_]() {
						goto l688
					}
					goto l689
				l688:
					position, tokenIndex = position688, tokenIndex688
				}
			l689:
				if buffer[position] != rune(',') {
					goto l686
				}
				position++
				{
					position690, tokenIndex690 := position, tokenIndex
					if !_rules[rule_]() {
						goto l690
					}
					goto l691
				l690:
					position, tokenIndex = position690, tokenIndex690
				}
			l691:
				add(ruleAuthorSep2, position687)
			}
			return true
		l686:
			position, tokenIndex = position686, tokenIndex686
			return false
		},
		/* 93 AuthorSepSpanish <- <(_? 'y' _?)> */
		func() bool {
			position692, tokenIndex692 := position, tokenIndex
			{
				position693 := position
				{
					position694, tokenIndex694 := position, tokenIndex
					if !_rules[rule_]() {
						goto l694
					}
					goto l695
				l694:
					position, tokenIndex = position694, tokenIndex694
				}
			l695:
				if buffer[position] != rune('y') {
					goto l692
				}
				position++
				{
					position696, tokenIndex696 := position, tokenIndex
					if !_rules[rule_]() {
						goto l696
					}
					goto l697
				l696:
					position, tokenIndex = position696, tokenIndex696
				}
			l697:
				add(ruleAuthorSepSpanish, position693)
			}
			return true
		l692:
			position, tokenIndex = position692, tokenIndex692
			return false
		},
		/* 94 AuthorEx <- <('e' 'x' '.'? _)> */
		func() bool {
			position698, tokenIndex698 := position, tokenIndex
			{
				position699 := position
				if buffer[position] != rune('e') {
					goto l698
				}
				position++
				if buffer[position] != rune('x') {
					goto l698
				}
				position++
				{
					position700, tokenIndex700 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l700
					}
					position++
					goto l701
				l700:
					position, tokenIndex = position700, tokenIndex700
				}
			l701:
				if !_rules[rule_]() {
					goto l698
				}
				add(ruleAuthorEx, position699)
			}
			return true
		l698:
			position, tokenIndex = position698, tokenIndex698
			return false
		},
		/* 95 AuthorIn <- <((('m' 's' _ ('i' 'n')) / ('i' 'n')) _)> */
		func() bool {
			position702, tokenIndex702 := position, tokenIndex
			{
				position703 := position
				{
					position704, tokenIndex704 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l705
					}
					position++
					if buffer[position] != rune('s') {
						goto l705
					}
					position++
					if !_rules[rule_]() {
						goto l705
					}
					if buffer[position] != rune('i') {
						goto l705
					}
					position++
					if buffer[position] != rune('n') {
						goto l705
					}
					position++
					goto l704
				l705:
					position, tokenIndex = position704, tokenIndex704
					if buffer[position] != rune('i') {
						goto l702
					}
					position++
					if buffer[position] != rune('n') {
						goto l702
					}
					position++
				}
			l704:
				if !_rules[rule_]() {
					goto l702
				}
				add(ruleAuthorIn, position703)
			}
			return true
		l702:
			position, tokenIndex = position702, tokenIndex702
			return false
		},
		/* 96 AuthorEmend <- <('e' 'm' 'e' 'n' 'd' '.'? _)> */
		func() bool {
			position706, tokenIndex706 := position, tokenIndex
			{
				position707 := position
				if buffer[position] != rune('e') {
					goto l706
				}
				position++
				if buffer[position] != rune('m') {
					goto l706
				}
				position++
				if buffer[position] != rune('e') {
					goto l706
				}
				position++
				if buffer[position] != rune('n') {
					goto l706
				}
				position++
				if buffer[position] != rune('d') {
					goto l706
				}
				position++
				{
					position708, tokenIndex708 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l708
					}
					position++
					goto l709
				l708:
					position, tokenIndex = position708, tokenIndex708
				}
			l709:
				if !_rules[rule_]() {
					goto l706
				}
				add(ruleAuthorEmend, position707)
			}
			return true
		l706:
			position, tokenIndex = position706, tokenIndex706
			return false
		},
		/* 97 Author <- <((Author0 / Author1 / Author2 / UnknownAuthor) (_ AuthorEtAl)?)> */
		func() bool {
			position710, tokenIndex710 := position, tokenIndex
			{
				position711 := position
				{
					position712, tokenIndex712 := position, tokenIndex
					if !_rules[ruleAuthor0]() {
						goto l713
					}
					goto l712
				l713:
					position, tokenIndex = position712, tokenIndex712
					if !_rules[ruleAuthor1]() {
						goto l714
					}
					goto l712
				l714:
					position, tokenIndex = position712, tokenIndex712
					if !_rules[ruleAuthor2]() {
						goto l715
					}
					goto l712
				l715:
					position, tokenIndex = position712, tokenIndex712
					if !_rules[ruleUnknownAuthor]() {
						goto l710
					}
				}
			l712:
				{
					position716, tokenIndex716 := position, tokenIndex
					if !_rules[rule_]() {
						goto l716
					}
					if !_rules[ruleAuthorEtAl]() {
						goto l716
					}
					goto l717
				l716:
					position, tokenIndex = position716, tokenIndex716
				}
			l717:
				add(ruleAuthor, position711)
			}
			return true
		l710:
			position, tokenIndex = position710, tokenIndex710
			return false
		},
		/* 98 Author0 <- <(Author2 FiliusFNoSpace)> */
		func() bool {
			position718, tokenIndex718 := position, tokenIndex
			{
				position719 := position
				if !_rules[ruleAuthor2]() {
					goto l718
				}
				if !_rules[ruleFiliusFNoSpace]() {
					goto l718
				}
				add(ruleAuthor0, position719)
			}
			return true
		l718:
			position, tokenIndex = position718, tokenIndex718
			return false
		},
		/* 99 Author1 <- <(Author2 _? (Filius / AuthorSuffix))> */
		func() bool {
			position720, tokenIndex720 := position, tokenIndex
			{
				position721 := position
				if !_rules[ruleAuthor2]() {
					goto l720
				}
				{
					position722, tokenIndex722 := position, tokenIndex
					if !_rules[rule_]() {
						goto l722
					}
					goto l723
				l722:
					position, tokenIndex = position722, tokenIndex722
				}
			l723:
				{
					position724, tokenIndex724 := position, tokenIndex
					if !_rules[ruleFilius]() {
						goto l725
					}
					goto l724
				l725:
					position, tokenIndex = position724, tokenIndex724
					if !_rules[ruleAuthorSuffix]() {
						goto l720
					}
				}
			l724:
				add(ruleAuthor1, position721)
			}
			return true
		l720:
			position, tokenIndex = position720, tokenIndex720
			return false
		},
		/* 100 Author2 <- <(AuthorWord (_? AuthorWord)*)> */
		func() bool {
			position726, tokenIndex726 := position, tokenIndex
			{
				position727 := position
				if !_rules[ruleAuthorWord]() {
					goto l726
				}
			l728:
				{
					position729, tokenIndex729 := position, tokenIndex
					{
						position730, tokenIndex730 := position, tokenIndex
						if !_rules[rule_]() {
							goto l730
						}
						goto l731
					l730:
						position, tokenIndex = position730, tokenIndex730
					}
				l731:
					if !_rules[ruleAuthorWord]() {
						goto l729
					}
					goto l728
				l729:
					position, tokenIndex = position729, tokenIndex729
				}
				add(ruleAuthor2, position727)
			}
			return true
		l726:
			position, tokenIndex = position726, tokenIndex726
			return false
		},
		/* 101 UnknownAuthor <- <('?' / ((('a' 'u' 'c' 't') / ('a' 'n' 'o' 'n')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position732, tokenIndex732 := position, tokenIndex
			{
				position733 := position
				{
					position734, tokenIndex734 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l735
					}
					position++
					goto l734
				l735:
					position, tokenIndex = position734, tokenIndex734
					{
						position736, tokenIndex736 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l737
						}
						position++
						if buffer[position] != rune('u') {
							goto l737
						}
						position++
						if buffer[position] != rune('c') {
							goto l737
						}
						position++
						if buffer[position] != rune('t') {
							goto l737
						}
						position++
						goto l736
					l737:
						position, tokenIndex = position736, tokenIndex736
						if buffer[position] != rune('a') {
							goto l732
						}
						position++
						if buffer[position] != rune('n') {
							goto l732
						}
						position++
						if buffer[position] != rune('o') {
							goto l732
						}
						position++
						if buffer[position] != rune('n') {
							goto l732
						}
						position++
					}
				l736:
					{
						position738, tokenIndex738 := position, tokenIndex
						{
							position740, tokenIndex740 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l739
							}
							position, tokenIndex = position740, tokenIndex740
						}
						goto l738
					l739:
						position, tokenIndex = position738, tokenIndex738
						if buffer[position] != rune('.') {
							goto l732
						}
						position++
					}
				l738:
				}
			l734:
				add(ruleUnknownAuthor, position733)
			}
			return true
		l732:
			position, tokenIndex = position732, tokenIndex732
			return false
		},
		/* 102 AuthorWord <- <(!(HybridChar / (('b' / 'B') ('o' / 'O') ('l' / 'L') ('d' / 'D') ':')) (AuthorDashInitials / AuthorWord1 / AuthorWord2 / AuthorWord3 / AuthorWord4 / AuthorPrefix))> */
		func() bool {
			position741, tokenIndex741 := position, tokenIndex
			{
				position742 := position
				{
					position743, tokenIndex743 := position, tokenIndex
					{
						position744, tokenIndex744 := position, tokenIndex
						if !_rules[ruleHybridChar]() {
							goto l745
						}
						goto l744
					l745:
						position, tokenIndex = position744, tokenIndex744
						{
							position746, tokenIndex746 := position, tokenIndex
							if buffer[position] != rune('b') {
								goto l747
							}
							position++
							goto l746
						l747:
							position, tokenIndex = position746, tokenIndex746
							if buffer[position] != rune('B') {
								goto l743
							}
							position++
						}
					l746:
						{
							position748, tokenIndex748 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l749
							}
							position++
							goto l748
						l749:
							position, tokenIndex = position748, tokenIndex748
							if buffer[position] != rune('O') {
								goto l743
							}
							position++
						}
					l748:
						{
							position750, tokenIndex750 := position, tokenIndex
							if buffer[position] != rune('l') {
								goto l751
							}
							position++
							goto l750
						l751:
							position, tokenIndex = position750, tokenIndex750
							if buffer[position] != rune('L') {
								goto l743
							}
							position++
						}
					l750:
						{
							position752, tokenIndex752 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l753
							}
							position++
							goto l752
						l753:
							position, tokenIndex = position752, tokenIndex752
							if buffer[position] != rune('D') {
								goto l743
							}
							position++
						}
					l752:
						if buffer[position] != rune(':') {
							goto l743
						}
						position++
					}
				l744:
					goto l741
				l743:
					position, tokenIndex = position743, tokenIndex743
				}
				{
					position754, tokenIndex754 := position, tokenIndex
					if !_rules[ruleAuthorDashInitials]() {
						goto l755
					}
					goto l754
				l755:
					position, tokenIndex = position754, tokenIndex754
					if !_rules[ruleAuthorWord1]() {
						goto l756
					}
					goto l754
				l756:
					position, tokenIndex = position754, tokenIndex754
					if !_rules[ruleAuthorWord2]() {
						goto l757
					}
					goto l754
				l757:
					position, tokenIndex = position754, tokenIndex754
					if !_rules[ruleAuthorWord3]() {
						goto l758
					}
					goto l754
				l758:
					position, tokenIndex = position754, tokenIndex754
					if !_rules[ruleAuthorWord4]() {
						goto l759
					}
					goto l754
				l759:
					position, tokenIndex = position754, tokenIndex754
					if !_rules[ruleAuthorPrefix]() {
						goto l741
					}
				}
			l754:
				add(ruleAuthorWord, position742)
			}
			return true
		l741:
			position, tokenIndex = position741, tokenIndex741
			return false
		},
		/* 103 AuthorEtAl <- <(('a' 'r' 'g' '.') / ('e' 't' ' ' 'a' 'l' '.' '{' '?' '}') / ((('e' 't') / '&') (' ' 'a' 'l') '.'?))> */
		func() bool {
			position760, tokenIndex760 := position, tokenIndex
			{
				position761 := position
				{
					position762, tokenIndex762 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l763
					}
					position++
					if buffer[position] != rune('r') {
						goto l763
					}
					position++
					if buffer[position] != rune('g') {
						goto l763
					}
					position++
					if buffer[position] != rune('.') {
						goto l763
					}
					position++
					goto l762
				l763:
					position, tokenIndex = position762, tokenIndex762
					if buffer[position] != rune('e') {
						goto l764
					}
					position++
					if buffer[position] != rune('t') {
						goto l764
					}
					position++
					if buffer[position] != rune(' ') {
						goto l764
					}
					position++
					if buffer[position] != rune('a') {
						goto l764
					}
					position++
					if buffer[position] != rune('l') {
						goto l764
					}
					position++
					if buffer[position] != rune('.') {
						goto l764
					}
					position++
					if buffer[position] != rune('{') {
						goto l764
					}
					position++
					if buffer[position] != rune('?') {
						goto l764
					}
					position++
					if buffer[position] != rune('}') {
						goto l764
					}
					position++
					goto l762
				l764:
					position, tokenIndex = position762, tokenIndex762
					{
						position765, tokenIndex765 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l766
						}
						position++
						if buffer[position] != rune('t') {
							goto l766
						}
						position++
						goto l765
					l766:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('&') {
							goto l760
						}
						position++
					}
				l765:
					if buffer[position] != rune(' ') {
						goto l760
					}
					position++
					if buffer[position] != rune('a') {
						goto l760
					}
					position++
					if buffer[position] != rune('l') {
						goto l760
					}
					position++
					{
						position767, tokenIndex767 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l767
						}
						position++
						goto l768
					l767:
						position, tokenIndex = position767, tokenIndex767
					}
				l768:
				}
			l762:
				add(ruleAuthorEtAl, position761)
			}
			return true
		l760:
			position, tokenIndex = position760, tokenIndex760
			return false
		},
		/* 104 AuthorWord1 <- <(('d' 'u' 'P' 'o' 'n' 't') / ('d' 'e' 'g' 'l' 'i') / ('A' 'r' 'a' 'n' 'g' 'o' ' ' 'y' ' ' 'M' 'o' 'l' 'i' 'n' 'a'))> */
		func() bool {
			position769, tokenIndex769 := position, tokenIndex
			{
				position770 := position
				{
					position771, tokenIndex771 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l772
					}
					position++
					if buffer[position] != rune('u') {
						goto l772
					}
					position++
					if buffer[position] != rune('P') {
						goto l772
					}
					position++
					if buffer[position] != rune('o') {
						goto l772
					}
					position++
					if buffer[position] != rune('n') {
						goto l772
					}
					position++
					if buffer[position] != rune('t') {
						goto l772
					}
					position++
					goto l771
				l772:
					position, tokenIndex = position771, tokenIndex771
					if buffer[position] != rune('d') {
						goto l773
					}
					position++
					if buffer[position] != rune('e') {
						goto l773
					}
					position++
					if buffer[position] != rune('g') {
						goto l773
					}
					position++
					if buffer[position] != rune('l') {
						goto l773
					}
					position++
					if buffer[position] != rune('i') {
						goto l773
					}
					position++
					goto l771
				l773:
					position, tokenIndex = position771, tokenIndex771
					if buffer[position] != rune('A') {
						goto l769
					}
					position++
					if buffer[position] != rune('r') {
						goto l769
					}
					position++
					if buffer[position] != rune('a') {
						goto l769
					}
					position++
					if buffer[position] != rune('n') {
						goto l769
					}
					position++
					if buffer[position] != rune('g') {
						goto l769
					}
					position++
					if buffer[position] != rune('o') {
						goto l769
					}
					position++
					if buffer[position] != rune(' ') {
						goto l769
					}
					position++
					if buffer[position] != rune('y') {
						goto l769
					}
					position++
					if buffer[position] != rune(' ') {
						goto l769
					}
					position++
					if buffer[position] != rune('M') {
						goto l769
					}
					position++
					if buffer[position] != rune('o') {
						goto l769
					}
					position++
					if buffer[position] != rune('l') {
						goto l769
					}
					position++
					if buffer[position] != rune('i') {
						goto l769
					}
					position++
					if buffer[position] != rune('n') {
						goto l769
					}
					position++
					if buffer[position] != rune('a') {
						goto l769
					}
					position++
				}
			l771:
				add(ruleAuthorWord1, position770)
			}
			return true
		l769:
			position, tokenIndex = position769, tokenIndex769
			return false
		},
		/* 105 AuthorWord2 <- <((AuthorWord3 / AuthorWord4) Dash (AuthorWordSoft / AuthorInitial) (Dash (AuthorWordSoft / AuthorInitial))?)> */
		func() bool {
			position774, tokenIndex774 := position, tokenIndex
			{
				position775 := position
				{
					position776, tokenIndex776 := position, tokenIndex
					if !_rules[ruleAuthorWord3]() {
						goto l777
					}
					goto l776
				l777:
					position, tokenIndex = position776, tokenIndex776
					if !_rules[ruleAuthorWord4]() {
						goto l774
					}
				}
			l776:
				if !_rules[ruleDash]() {
					goto l774
				}
				{
					position778, tokenIndex778 := position, tokenIndex
					if !_rules[ruleAuthorWordSoft]() {
						goto l779
					}
					goto l778
				l779:
					position, tokenIndex = position778, tokenIndex778
					if !_rules[ruleAuthorInitial]() {
						goto l774
					}
				}
			l778:
				{
					position780, tokenIndex780 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l780
					}
					{
						position782, tokenIndex782 := position, tokenIndex
						if !_rules[ruleAuthorWordSoft]() {
							goto l783
						}
						goto l782
					l783:
						position, tokenIndex = position782, tokenIndex782
						if !_rules[ruleAuthorInitial]() {
							goto l780
						}
					}
				l782:
					goto l781
				l780:
					position, tokenIndex = position780, tokenIndex780
				}
			l781:
				add(ruleAuthorWord2, position775)
			}
			return true
		l774:
			position, tokenIndex = position774, tokenIndex774
			return false
		},
		/* 106 AuthorWord3 <- <(AuthorPrefixGlued2 (CapAuthorWord / AuthorLowerChar+) '.'?)> */
		func() bool {
			position784, tokenIndex784 := position, tokenIndex
			{
				position785 := position
				if !_rules[ruleAuthorPrefixGlued2]() {
					goto l784
				}
				{
					position786, tokenIndex786 := position, tokenIndex
					if !_rules[ruleCapAuthorWord]() {
						goto l787
					}
					goto l786
				l787:
					position, tokenIndex = position786, tokenIndex786
					if !_rules[ruleAuthorLowerChar]() {
						goto l784
					}
				l788:
					{
						position789, tokenIndex789 := position, tokenIndex
						if !_rules[ruleAuthorLowerChar]() {
							goto l789
						}
						goto l788
					l789:
						position, tokenIndex = position789, tokenIndex789
					}
				}
			l786:
				{
					position790, tokenIndex790 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l790
					}
					position++
					goto l791
				l790:
					position, tokenIndex = position790, tokenIndex790
				}
			l791:
				add(ruleAuthorWord3, position785)
			}
			return true
		l784:
			position, tokenIndex = position784, tokenIndex784
			return false
		},
		/* 107 AuthorWord4 <- <(AuthorPrefixGlued1? (AllCapsAuthorWord / CapAuthorWord) '.'?)> */
		func() bool {
			position792, tokenIndex792 := position, tokenIndex
			{
				position793 := position
				{
					position794, tokenIndex794 := position, tokenIndex
					if !_rules[ruleAuthorPrefixGlued1]() {
						goto l794
					}
					goto l795
				l794:
					position, tokenIndex = position794, tokenIndex794
				}
			l795:
				{
					position796, tokenIndex796 := position, tokenIndex
					if !_rules[ruleAllCapsAuthorWord]() {
						goto l797
					}
					goto l796
				l797:
					position, tokenIndex = position796, tokenIndex796
					if !_rules[ruleCapAuthorWord]() {
						goto l792
					}
				}
			l796:
				{
					position798, tokenIndex798 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l798
					}
					position++
					goto l799
				l798:
					position, tokenIndex = position798, tokenIndex798
				}
			l799:
				add(ruleAuthorWord4, position793)
			}
			return true
		l792:
			position, tokenIndex = position792, tokenIndex792
			return false
		},
		/* 108 AuthorDashInitials <- <(AuthorUpperChar '.'? Dash AuthorUpperChar '.'?)> */
		func() bool {
			position800, tokenIndex800 := position, tokenIndex
			{
				position801 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l800
				}
				{
					position802, tokenIndex802 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l802
					}
					position++
					goto l803
				l802:
					position, tokenIndex = position802, tokenIndex802
				}
			l803:
				if !_rules[ruleDash]() {
					goto l800
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l800
				}
				{
					position804, tokenIndex804 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l804
					}
					position++
					goto l805
				l804:
					position, tokenIndex = position804, tokenIndex804
				}
			l805:
				add(ruleAuthorDashInitials, position801)
			}
			return true
		l800:
			position, tokenIndex = position800, tokenIndex800
			return false
		},
		/* 109 AuthorInitial <- <(AuthorUpperChar '.'?)> */
		func() bool {
			position806, tokenIndex806 := position, tokenIndex
			{
				position807 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l806
				}
				{
					position808, tokenIndex808 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l808
					}
					position++
					goto l809
				l808:
					position, tokenIndex = position808, tokenIndex808
				}
			l809:
				add(ruleAuthorInitial, position807)
			}
			return true
		l806:
			position, tokenIndex = position806, tokenIndex806
			return false
		},
		/* 110 AuthorWordSoft <- <(((AuthorUpperChar (AuthorUpperChar+ / AuthorLowerChar+)) / AuthorLowerChar+) '.'?)> */
		func() bool {
			position810, tokenIndex810 := position, tokenIndex
			{
				position811 := position
				{
					position812, tokenIndex812 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l813
					}
					{
						position814, tokenIndex814 := position, tokenIndex
						if !_rules[ruleAuthorUpperChar]() {
							goto l815
						}
					l816:
						{
							position817, tokenIndex817 := position, tokenIndex
							if !_rules[ruleAuthorUpperChar]() {
								goto l817
							}
							goto l816
						l817:
							position, tokenIndex = position817, tokenIndex817
						}
						goto l814
					l815:
						position, tokenIndex = position814, tokenIndex814
						if !_rules[ruleAuthorLowerChar]() {
							goto l813
						}
					l818:
						{
							position819, tokenIndex819 := position, tokenIndex
							if !_rules[ruleAuthorLowerChar]() {
								goto l819
							}
							goto l818
						l819:
							position, tokenIndex = position819, tokenIndex819
						}
					}
				l814:
					goto l812
				l813:
					position, tokenIndex = position812, tokenIndex812
					if !_rules[ruleAuthorLowerChar]() {
						goto l810
					}
				l820:
					{
						position821, tokenIndex821 := position, tokenIndex
						if !_rules[ruleAuthorLowerChar]() {
							goto l821
						}
						goto l820
					l821:
						position, tokenIndex = position821, tokenIndex821
					}
				}
			l812:
				{
					position822, tokenIndex822 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l822
					}
					position++
					goto l823
				l822:
					position, tokenIndex = position822, tokenIndex822
				}
			l823:
				add(ruleAuthorWordSoft, position811)
			}
			return true
		l810:
			position, tokenIndex = position810, tokenIndex810
			return false
		},
		/* 111 CapAuthorWord <- <(AuthorUpperChar AuthorLowerChar*)> */
		func() bool {
			position824, tokenIndex824 := position, tokenIndex
			{
				position825 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l824
				}
			l826:
				{
					position827, tokenIndex827 := position, tokenIndex
					if !_rules[ruleAuthorLowerChar]() {
						goto l827
					}
					goto l826
				l827:
					position, tokenIndex = position827, tokenIndex827
				}
				add(ruleCapAuthorWord, position825)
			}
			return true
		l824:
			position, tokenIndex = position824, tokenIndex824
			return false
		},
		/* 112 AllCapsAuthorWord <- <(AuthorUpperChar AuthorUpperChar+)> */
		func() bool {
			position828, tokenIndex828 := position, tokenIndex
			{
				position829 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l828
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l828
				}
			l830:
				{
					position831, tokenIndex831 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l831
					}
					goto l830
				l831:
					position, tokenIndex = position831, tokenIndex831
				}
				add(ruleAllCapsAuthorWord, position829)
			}
			return true
		l828:
			position, tokenIndex = position828, tokenIndex828
			return false
		},
		/* 113 Filius <- <(FiliusF / ('f' 'i' 'l' '.') / ('f' 'i' 'l' 'i' 'u' 's'))> */
		func() bool {
			position832, tokenIndex832 := position, tokenIndex
			{
				position833 := position
				{
					position834, tokenIndex834 := position, tokenIndex
					if !_rules[ruleFiliusF]() {
						goto l835
					}
					goto l834
				l835:
					position, tokenIndex = position834, tokenIndex834
					if buffer[position] != rune('f') {
						goto l836
					}
					position++
					if buffer[position] != rune('i') {
						goto l836
					}
					position++
					if buffer[position] != rune('l') {
						goto l836
					}
					position++
					if buffer[position] != rune('.') {
						goto l836
					}
					position++
					goto l834
				l836:
					position, tokenIndex = position834, tokenIndex834
					if buffer[position] != rune('f') {
						goto l832
					}
					position++
					if buffer[position] != rune('i') {
						goto l832
					}
					position++
					if buffer[position] != rune('l') {
						goto l832
					}
					position++
					if buffer[position] != rune('i') {
						goto l832
					}
					position++
					if buffer[position] != rune('u') {
						goto l832
					}
					position++
					if buffer[position] != rune('s') {
						goto l832
					}
					position++
				}
			l834:
				add(ruleFilius, position833)
			}
			return true
		l832:
			position, tokenIndex = position832, tokenIndex832
			return false
		},
		/* 114 FiliusF <- <('f' '.' !(_ Word))> */
		func() bool {
			position837, tokenIndex837 := position, tokenIndex
			{
				position838 := position
				if buffer[position] != rune('f') {
					goto l837
				}
				position++
				if buffer[position] != rune('.') {
					goto l837
				}
				position++
				{
					position839, tokenIndex839 := position, tokenIndex
					if !_rules[rule_]() {
						goto l839
					}
					if !_rules[ruleWord]() {
						goto l839
					}
					goto l837
				l839:
					position, tokenIndex = position839, tokenIndex839
				}
				add(ruleFiliusF, position838)
			}
			return true
		l837:
			position, tokenIndex = position837, tokenIndex837
			return false
		},
		/* 115 FiliusFNoSpace <- <('f' '.')> */
		func() bool {
			position840, tokenIndex840 := position, tokenIndex
			{
				position841 := position
				if buffer[position] != rune('f') {
					goto l840
				}
				position++
				if buffer[position] != rune('.') {
					goto l840
				}
				position++
				add(ruleFiliusFNoSpace, position841)
			}
			return true
		l840:
			position, tokenIndex = position840, tokenIndex840
			return false
		},
		/* 116 AuthorSuffix <- <(('b' 'i' 's') / ('t' 'e' 'r'))> */
		func() bool {
			position842, tokenIndex842 := position, tokenIndex
			{
				position843 := position
				{
					position844, tokenIndex844 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l845
					}
					position++
					if buffer[position] != rune('i') {
						goto l845
					}
					position++
					if buffer[position] != rune('s') {
						goto l845
					}
					position++
					goto l844
				l845:
					position, tokenIndex = position844, tokenIndex844
					if buffer[position] != rune('t') {
						goto l842
					}
					position++
					if buffer[position] != rune('e') {
						goto l842
					}
					position++
					if buffer[position] != rune('r') {
						goto l842
					}
					position++
				}
			l844:
				add(ruleAuthorSuffix, position843)
			}
			return true
		l842:
			position, tokenIndex = position842, tokenIndex842
			return false
		},
		/* 117 AuthorPrefixGlued1 <- <(('d' / 'D' / 'O' / 'L' / 'M') Apostrophe)> */
		func() bool {
			position846, tokenIndex846 := position, tokenIndex
			{
				position847 := position
				{
					position848, tokenIndex848 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l849
					}
					position++
					goto l848
				l849:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('D') {
						goto l850
					}
					position++
					goto l848
				l850:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('O') {
						goto l851
					}
					position++
					goto l848
				l851:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('L') {
						goto l852
					}
					position++
					goto l848
				l852:
					position, tokenIndex = position848, tokenIndex848
					if buffer[position] != rune('M') {
						goto l846
					}
					position++
				}
			l848:
				if !_rules[ruleApostrophe]() {
					goto l846
				}
				add(ruleAuthorPrefixGlued1, position847)
			}
			return true
		l846:
			position, tokenIndex = position846, tokenIndex846
			return false
		},
		/* 118 AuthorPrefixGlued2 <- <((('M' 'c') / ('M' 'a' 'c')) Apostrophe?)> */
		func() bool {
			position853, tokenIndex853 := position, tokenIndex
			{
				position854 := position
				{
					position855, tokenIndex855 := position, tokenIndex
					if buffer[position] != rune('M') {
						goto l856
					}
					position++
					if buffer[position] != rune('c') {
						goto l856
					}
					position++
					goto l855
				l856:
					position, tokenIndex = position855, tokenIndex855
					if buffer[position] != rune('M') {
						goto l853
					}
					position++
					if buffer[position] != rune('a') {
						goto l853
					}
					position++
					if buffer[position] != rune('c') {
						goto l853
					}
					position++
				}
			l855:
				{
					position857, tokenIndex857 := position, tokenIndex
					if !_rules[ruleApostrophe]() {
						goto l857
					}
					goto l858
				l857:
					position, tokenIndex = position857, tokenIndex857
				}
			l858:
				add(ruleAuthorPrefixGlued2, position854)
			}
			return true
		l853:
			position, tokenIndex = position853, tokenIndex853
			return false
		},
		/* 119 AuthorPrefix <- <(AuthorPrefix1 / AuthorPrefix2)> */
		func() bool {
			position859, tokenIndex859 := position, tokenIndex
			{
				position860 := position
				{
					position861, tokenIndex861 := position, tokenIndex
					if !_rules[ruleAuthorPrefix1]() {
						goto l862
					}
					goto l861
				l862:
					position, tokenIndex = position861, tokenIndex861
					if !_rules[ruleAuthorPrefix2]() {
						goto l859
					}
				}
			l861:
				add(ruleAuthorPrefix, position860)
			}
			return true
		l859:
			position, tokenIndex = position859, tokenIndex859
			return false
		},
		/* 120 AuthorPrefix2 <- <(('v' '.' (_? ('d' '.'))?) / (Apostrophe 't'))> */
		func() bool {
			position863, tokenIndex863 := position, tokenIndex
			{
				position864 := position
				{
					position865, tokenIndex865 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l866
					}
					position++
					if buffer[position] != rune('.') {
						goto l866
					}
					position++
					{
						position867, tokenIndex867 := position, tokenIndex
						{
							position869, tokenIndex869 := position, tokenIndex
							if !_rules[rule_]() {
								goto l869
							}
							goto l870
						l869:
							position, tokenIndex = position869, tokenIndex869
						}
					l870:
						if buffer[position] != rune('d') {
							goto l867
						}
						position++
						if buffer[position] != rune('.') {
							goto l867
						}
						position++
						goto l868
					l867:
						position, tokenIndex = position867, tokenIndex867
					}
				l868:
					goto l865
				l866:
					position, tokenIndex = position865, tokenIndex865
					if !_rules[ruleApostrophe]() {
						goto l863
					}
					if buffer[position] != rune('t') {
						goto l863
					}
					position++
				}
			l865:
				add(ruleAuthorPrefix2, position864)
			}
			return true
		l863:
			position, tokenIndex = position863, tokenIndex863
			return false
		},
		/* 121 AuthorPrefix1 <- <((('a' 'b') / ('a' 'f') / ('b' 'i' 's') / ('d' 'a') / ('d' 'e' 'r') / ('d' 'e' 's') / ('d' 'e' 'n') / ('d' 'e' 'm') / ('d' 'e' 'l' 'l' 'a') / ('d' 'e' 'l' 'a') / ('d' 'e' 'l' 'l' 'e') / ('d' 'e' 'l') / ('d' 'e' ' ' 'l' 'o' 's') / ('d' 'e') / ('d' 'i') / ('d' 'o' 's') / ('d' 'u') / ('d' 'o') / ('e' 'l') / ('l' 'a') / ('l' 'e') / ('t' 'e' 'n') / ('t' 'e' 'r') / ('v' 'a' 'n') / ('v' 'e' 'r') / ('d' Apostrophe) / ('i' 'n' Apostrophe 't') / ('z' 'u' 'r') / ('z' 'u') / ('v' 'o' 'n' (_ (('d' '.') / ('d' 'e' 'm')))?) / ('v' (_ 'd')?)) &_)> */
		func() bool {
			position871, tokenIndex871 := position, tokenIndex
			{
				position872 := position
				{
					position873, tokenIndex873 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l874
					}
					position++
					if buffer[position] != rune('b') {
						goto l874
					}
					position++
					goto l873
				l874:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('a') {
						goto l875
					}
					position++
					if buffer[position] != rune('f') {
						goto l875
					}
					position++
					goto l873
				l875:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('b') {
						goto l876
					}
					position++
					if buffer[position] != rune('i') {
						goto l876
					}
					position++
					if buffer[position] != rune('s') {
						goto l876
					}
					position++
					goto l873
				l876:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('d') {
						goto l877
					}
					position++
					if buffer[position] != rune('a') {
						goto l877
					}
					position++
					goto l873
				l877:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('d') {
						goto l878
					}
					position++
					if buffer[position] != rune('e') {
						goto l878
					}
					position++
					if buffer[position] != rune('r') {
						goto l878
					}
					position++
					goto l873
				l878:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('d') {
						goto l879
					}
					position++
					if buffer[position] != rune('e') {
						goto l879
					}
					position++
					if buffer[position] != rune('s') {
						goto l879
					}
					position++
					goto l873
				l879:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('d') {
						goto l880
					}
					position++
					if buffer[position] != rune('e') {
						goto l880
					}
					position++
					if buffer[position] != rune('n') {
						goto l880
					}
					position++
					goto l873
				l880:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('d') {
						goto l881
					}
					position++
					if buffer[position] != rune('e') {
						goto l881
					}
					position++
					if buffer[position] != rune('m') {
						goto l881
					}
					position++
					goto l873
				l881:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('d') {
						goto l882
					}
					position++
					if buffer[position] != rune('e') {
						goto l882
					}
					position++
					if buffer[position] != rune('l') {
						goto l882
					}
					position++
					if buffer[position] != rune('l') {
						goto l882
					}
					position++
					if buffer[position] != rune('a') {
						goto l882
					}
					position++
					goto l873
				l882:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('d') {
						goto l883
					}
					position++
					if buffer[position] != rune('e') {
						goto l883
					}
					position++
					if buffer[position] != rune('l') {
						goto l883
					}
					position++
					if buffer[position] != rune('a') {
						goto l883
					}
					position++
					goto l873
				l883:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('d') {
						goto l884
					}
					position++
					if buffer[position] != rune('e') {
						goto l884
					}
					position++
					if buffer[position] != rune('l') {
						goto l884
					}
					position++
					if buffer[position] != rune('l') {
						goto l884
					}
					position++
					if buffer[position] != rune('e') {
						goto l884
					}
					position++
					goto l873
				l884:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('d') {
						goto l885
					}
					position++
					if buffer[position] != rune('e') {
						goto l885
					}
					position++
					if buffer[position] != rune('l') {
						goto l885
					}
					position++
					goto l873
				l885:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('d') {
						goto l886
					}
					position++
					if buffer[position] != rune('e') {
						goto l886
					}
					position++
					if buffer[position] != rune(' ') {
						goto l886
					}
					position++
					if buffer[position] != rune('l') {
						goto l886
					}
					position++
					if buffer[position] != rune('o') {
						goto l886
					}
					position++
					if buffer[position] != rune('s') {
						goto l886
					}
					position++
					goto l873
				l886:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('d') {
						goto l887
					}
					position++
					if buffer[position] != rune('e') {
						goto l887
					}
					position++
					goto l873
				l887:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('d') {
						goto l888
					}
					position++
					if buffer[position] != rune('i') {
						goto l888
					}
					position++
					goto l873
				l888:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('d') {
						goto l889
					}
					position++
					if buffer[position] != rune('o') {
						goto l889
					}
					position++
					if buffer[position] != rune('s') {
						goto l889
					}
					position++
					goto l873
				l889:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('d') {
						goto l890
					}
					position++
					if buffer[position] != rune('u') {
						goto l890
					}
					position++
					goto l873
				l890:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('d') {
						goto l891
					}
					position++
					if buffer[position] != rune('o') {
						goto l891
					}
					position++
					goto l873
				l891:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('e') {
						goto l892
					}
					position++
					if buffer[position] != rune('l') {
						goto l892
					}
					position++
					goto l873
				l892:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('l') {
						goto l893
					}
					position++
					if buffer[position] != rune('a') {
						goto l893
					}
					position++
					goto l873
				l893:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('l') {
						goto l894
					}
					position++
					if buffer[position] != rune('e') {
						goto l894
					}
					position++
					goto l873
				l894:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('t') {
						goto l895
					}
					position++
					if buffer[position] != rune('e') {
						goto l895
					}
					position++
					if buffer[position] != rune('n') {
						goto l895
					}
					position++
					goto l873
				l895:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('t') {
						goto l896
					}
					position++
					if buffer[position] != rune('e') {
						goto l896
					}
					position++
					if buffer[position] != rune('r') {
						goto l896
					}
					position++
					goto l873
				l896:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('v') {
						goto l897
					}
					position++
					if buffer[position] != rune('a') {
						goto l897
					}
					position++
					if buffer[position] != rune('n') {
						goto l897
					}
					position++
					goto l873
				l897:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('v') {
						goto l898
					}
					position++
					if buffer[position] != rune('e') {
						goto l898
					}
					position++
					if buffer[position] != rune('r') {
						goto l898
					}
					position++
					goto l873
				l898:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('d') {
						goto l899
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l899
					}
					goto l873
				l899:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('i') {
						goto l900
					}
					position++
					if buffer[position] != rune('n') {
						goto l900
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l900
					}
					if buffer[position] != rune('t') {
						goto l900
					}
					position++
					goto l873
				l900:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('z') {
						goto l901
					}
					position++
					if buffer[position] != rune('u') {
						goto l901
					}
					position++
					if buffer[position] != rune('r') {
						goto l901
					}
					position++
					goto l873
				l901:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('z') {
						goto l902
					}
					position++
					if buffer[position] != rune('u') {
						goto l902
					}
					position++
					goto l873
				l902:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('v') {
						goto l903
					}
					position++
					if buffer[position] != rune('o') {
						goto l903
					}
					position++
					if buffer[position] != rune('n') {
						goto l903
					}
					position++
					{
						position904, tokenIndex904 := position, tokenIndex
						if !_rules[rule_]() {
							goto l904
						}
						{
							position906, tokenIndex906 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l907
							}
							position++
							if buffer[position] != rune('.') {
								goto l907
							}
							position++
							goto l906
						l907:
							position, tokenIndex = position906, tokenIndex906
							if buffer[position] != rune('d') {
								goto l904
							}
							position++
							if buffer[position] != rune('e') {
								goto l904
							}
							position++
							if buffer[position] != rune('m') {
								goto l904
							}
							position++
						}
					l906:
						goto l905
					l904:
						position, tokenIndex = position904, tokenIndex904
					}
				l905:
					goto l873
				l903:
					position, tokenIndex = position873, tokenIndex873
					if buffer[position] != rune('v') {
						goto l871
					}
					position++
					{
						position908, tokenIndex908 := position, tokenIndex
						if !_rules[rule_]() {
							goto l908
						}
						if buffer[position] != rune('d') {
							goto l908
						}
						position++
						goto l909
					l908:
						position, tokenIndex = position908, tokenIndex908
					}
				l909:
				}
			l873:
				{
					position910, tokenIndex910 := position, tokenIndex
					if !_rules[rule_]() {
						goto l871
					}
					position, tokenIndex = position910, tokenIndex910
				}
				add(ruleAuthorPrefix1, position872)
			}
			return true
		l871:
			position, tokenIndex = position871, tokenIndex871
			return false
		},
		/* 122 AuthorUpperChar <- <(UpperASCII / MiscodedChar / ('À' / 'Á' / 'Â' / 'Ã' / 'Ä' / 'Å' / 'Æ' / 'Ç' / 'È' / 'É' / 'Ê' / 'Ë' / 'Ì' / 'Í' / 'Î' / 'Ï' / 'Ð' / 'Ñ' / 'Ò' / 'Ó' / 'Ô' / 'Õ' / 'Ö' / 'Ø' / 'Ù' / 'Ú' / 'Û' / 'Ü' / 'Ý' / 'Ć' / 'Č' / 'Ď' / 'İ' / 'Ķ' / 'Ĺ' / 'ĺ' / 'Ľ' / 'ľ' / 'Ł' / 'ł' / 'Ņ' / 'Ō' / 'Ő' / 'Œ' / 'Ř' / 'Ś' / 'Ŝ' / 'Ş' / 'Š' / 'Ÿ' / 'Ź' / 'Ż' / 'Ž' / 'ƒ' / 'Ǿ' / 'Ș' / 'Ț'))> */
		func() bool {
			position911, tokenIndex911 := position, tokenIndex
			{
				position912 := position
				{
					position913, tokenIndex913 := position, tokenIndex
					if !_rules[ruleUpperASCII]() {
						goto l914
					}
					goto l913
				l914:
					position, tokenIndex = position913, tokenIndex913
					if !_rules[ruleMiscodedChar]() {
						goto l915
					}
					goto l913
				l915:
					position, tokenIndex = position913, tokenIndex913
					{
						position916, tokenIndex916 := position, tokenIndex
						if buffer[position] != rune('À') {
							goto l917
						}
						position++
						goto l916
					l917:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Á') {
							goto l918
						}
						position++
						goto l916
					l918:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Â') {
							goto l919
						}
						position++
						goto l916
					l919:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ã') {
							goto l920
						}
						position++
						goto l916
					l920:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ä') {
							goto l921
						}
						position++
						goto l916
					l921:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Å') {
							goto l922
						}
						position++
						goto l916
					l922:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Æ') {
							goto l923
						}
						position++
						goto l916
					l923:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ç') {
							goto l924
						}
						position++
						goto l916
					l924:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('È') {
							goto l925
						}
						position++
						goto l916
					l925:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('É') {
							goto l926
						}
						position++
						goto l916
					l926:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ê') {
							goto l927
						}
						position++
						goto l916
					l927:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ë') {
							goto l928
						}
						position++
						goto l916
					l928:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ì') {
							goto l929
						}
						position++
						goto l916
					l929:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Í') {
							goto l930
						}
						position++
						goto l916
					l930:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Î') {
							goto l931
						}
						position++
						goto l916
					l931:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ï') {
							goto l932
						}
						position++
						goto l916
					l932:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ð') {
							goto l933
						}
						position++
						goto l916
					l933:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ñ') {
							goto l934
						}
						position++
						goto l916
					l934:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ò') {
							goto l935
						}
						position++
						goto l916
					l935:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ó') {
							goto l936
						}
						position++
						goto l916
					l936:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ô') {
							goto l937
						}
						position++
						goto l916
					l937:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Õ') {
							goto l938
						}
						position++
						goto l916
					l938:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ö') {
							goto l939
						}
						position++
						goto l916
					l939:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ø') {
							goto l940
						}
						position++
						goto l916
					l940:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ù') {
							goto l941
						}
						position++
						goto l916
					l941:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ú') {
							goto l942
						}
						position++
						goto l916
					l942:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Û') {
							goto l943
						}
						position++
						goto l916
					l943:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ü') {
							goto l944
						}
						position++
						goto l916
					l944:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ý') {
							goto l945
						}
						position++
						goto l916
					l945:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ć') {
							goto l946
						}
						position++
						goto l916
					l946:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Č') {
							goto l947
						}
						position++
						goto l916
					l947:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ď') {
							goto l948
						}
						position++
						goto l916
					l948:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('İ') {
							goto l949
						}
						position++
						goto l916
					l949:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ķ') {
							goto l950
						}
						position++
						goto l916
					l950:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ĺ') {
							goto l951
						}
						position++
						goto l916
					l951:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('ĺ') {
							goto l952
						}
						position++
						goto l916
					l952:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ľ') {
							goto l953
						}
						position++
						goto l916
					l953:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('ľ') {
							goto l954
						}
						position++
						goto l916
					l954:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ł') {
							goto l955
						}
						position++
						goto l916
					l955:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('ł') {
							goto l956
						}
						position++
						goto l916
					l956:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ņ') {
							goto l957
						}
						position++
						goto l916
					l957:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ō') {
							goto l958
						}
						position++
						goto l916
					l958:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ő') {
							goto l959
						}
						position++
						goto l916
					l959:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Œ') {
							goto l960
						}
						position++
						goto l916
					l960:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ř') {
							goto l961
						}
						position++
						goto l916
					l961:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ś') {
							goto l962
						}
						position++
						goto l916
					l962:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ŝ') {
							goto l963
						}
						position++
						goto l916
					l963:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ş') {
							goto l964
						}
						position++
						goto l916
					l964:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Š') {
							goto l965
						}
						position++
						goto l916
					l965:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ÿ') {
							goto l966
						}
						position++
						goto l916
					l966:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ź') {
							goto l967
						}
						position++
						goto l916
					l967:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ż') {
							goto l968
						}
						position++
						goto l916
					l968:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ž') {
							goto l969
						}
						position++
						goto l916
					l969:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('ƒ') {
							goto l970
						}
						position++
						goto l916
					l970:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ǿ') {
							goto l971
						}
						position++
						goto l916
					l971:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ș') {
							goto l972
						}
						position++
						goto l916
					l972:
						position, tokenIndex = position916, tokenIndex916
						if buffer[position] != rune('Ț') {
							goto l911
						}
						position++
					}
				l916:
				}
			l913:
				add(ruleAuthorUpperChar, position912)
			}
			return true
		l911:
			position, tokenIndex = position911, tokenIndex911
			return false
		},
		/* 123 AuthorLowerChar <- <(LowerASCII / MiscodedChar / Apostrophe / ('à' / 'á' / 'â' / 'ã' / 'ä' / 'å' / 'æ' / 'ç' / 'è' / 'é' / 'ê' / 'ë' / 'ì' / 'í' / 'î' / 'ï' / 'ð' / 'ñ' / 'ò' / 'ó' / 'ó' / 'ô' / 'õ' / 'ö' / 'ø' / 'ù' / 'ú' / 'û' / 'ü' / 'ý' / 'ÿ' / 'ā' / 'ă' / 'ą' / 'ć' / 'ĉ' / 'č' / 'ď' / 'đ' / 'ē' / 'ĕ' / 'ė' / 'ę' / 'ě' / 'ğ' / 'ī' / 'ĭ' / 'İ' / 'ı' / 'ĺ' / 'ľ' / 'ł' / 'ń' / 'ņ' / 'ň' / 'ŏ' / 'ő' / 'œ' / 'ŕ' / 'ř' / 'ś' / 'ş' / 'š' / 'ţ' / 'ť' / 'ũ' / 'ū' / 'ŭ' / 'ů' / 'ű' / 'ź' / 'ż' / 'ž' / 'ſ' / 'ǎ' / 'ǔ' / 'ǧ' / 'ș' / 'ț' / 'ȳ' / 'ß'))> */
		func() bool {
			position973, tokenIndex973 := position, tokenIndex
			{
				position974 := position
				{
					position975, tokenIndex975 := position, tokenIndex
					if !_rules[ruleLowerASCII]() {
						goto l976
					}
					goto l975
				l976:
					position, tokenIndex = position975, tokenIndex975
					if !_rules[ruleMiscodedChar]() {
						goto l977
					}
					goto l975
				l977:
					position, tokenIndex = position975, tokenIndex975
					if !_rules[ruleApostrophe]() {
						goto l978
					}
					goto l975
				l978:
					position, tokenIndex = position975, tokenIndex975
					{
						position979, tokenIndex979 := position, tokenIndex
						if buffer[position] != rune('à') {
							goto l980
						}
						position++
						goto l979
					l980:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('á') {
							goto l981
						}
						position++
						goto l979
					l981:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('â') {
							goto l982
						}
						position++
						goto l979
					l982:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ã') {
							goto l983
						}
						position++
						goto l979
					l983:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ä') {
							goto l984
						}
						position++
						goto l979
					l984:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('å') {
							goto l985
						}
						position++
						goto l979
					l985:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('æ') {
							goto l986
						}
						position++
						goto l979
					l986:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ç') {
							goto l987
						}
						position++
						goto l979
					l987:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('è') {
							goto l988
						}
						position++
						goto l979
					l988:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('é') {
							goto l989
						}
						position++
						goto l979
					l989:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ê') {
							goto l990
						}
						position++
						goto l979
					l990:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ë') {
							goto l991
						}
						position++
						goto l979
					l991:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ì') {
							goto l992
						}
						position++
						goto l979
					l992:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('í') {
							goto l993
						}
						position++
						goto l979
					l993:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('î') {
							goto l994
						}
						position++
						goto l979
					l994:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ï') {
							goto l995
						}
						position++
						goto l979
					l995:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ð') {
							goto l996
						}
						position++
						goto l979
					l996:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ñ') {
							goto l997
						}
						position++
						goto l979
					l997:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ò') {
							goto l998
						}
						position++
						goto l979
					l998:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ó') {
							goto l999
						}
						position++
						goto l979
					l999:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ó') {
							goto l1000
						}
						position++
						goto l979
					l1000:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ô') {
							goto l1001
						}
						position++
						goto l979
					l1001:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('õ') {
							goto l1002
						}
						position++
						goto l979
					l1002:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ö') {
							goto l1003
						}
						position++
						goto l979
					l1003:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ø') {
							goto l1004
						}
						position++
						goto l979
					l1004:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ù') {
							goto l1005
						}
						position++
						goto l979
					l1005:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ú') {
							goto l1006
						}
						position++
						goto l979
					l1006:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('û') {
							goto l1007
						}
						position++
						goto l979
					l1007:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ü') {
							goto l1008
						}
						position++
						goto l979
					l1008:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ý') {
							goto l1009
						}
						position++
						goto l979
					l1009:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ÿ') {
							goto l1010
						}
						position++
						goto l979
					l1010:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ā') {
							goto l1011
						}
						position++
						goto l979
					l1011:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ă') {
							goto l1012
						}
						position++
						goto l979
					l1012:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ą') {
							goto l1013
						}
						position++
						goto l979
					l1013:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ć') {
							goto l1014
						}
						position++
						goto l979
					l1014:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ĉ') {
							goto l1015
						}
						position++
						goto l979
					l1015:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('č') {
							goto l1016
						}
						position++
						goto l979
					l1016:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ď') {
							goto l1017
						}
						position++
						goto l979
					l1017:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('đ') {
							goto l1018
						}
						position++
						goto l979
					l1018:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ē') {
							goto l1019
						}
						position++
						goto l979
					l1019:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ĕ') {
							goto l1020
						}
						position++
						goto l979
					l1020:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ė') {
							goto l1021
						}
						position++
						goto l979
					l1021:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ę') {
							goto l1022
						}
						position++
						goto l979
					l1022:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ě') {
							goto l1023
						}
						position++
						goto l979
					l1023:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ğ') {
							goto l1024
						}
						position++
						goto l979
					l1024:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ī') {
							goto l1025
						}
						position++
						goto l979
					l1025:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ĭ') {
							goto l1026
						}
						position++
						goto l979
					l1026:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('İ') {
							goto l1027
						}
						position++
						goto l979
					l1027:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ı') {
							goto l1028
						}
						position++
						goto l979
					l1028:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ĺ') {
							goto l1029
						}
						position++
						goto l979
					l1029:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ľ') {
							goto l1030
						}
						position++
						goto l979
					l1030:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ł') {
							goto l1031
						}
						position++
						goto l979
					l1031:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ń') {
							goto l1032
						}
						position++
						goto l979
					l1032:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ņ') {
							goto l1033
						}
						position++
						goto l979
					l1033:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ň') {
							goto l1034
						}
						position++
						goto l979
					l1034:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ŏ') {
							goto l1035
						}
						position++
						goto l979
					l1035:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ő') {
							goto l1036
						}
						position++
						goto l979
					l1036:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('œ') {
							goto l1037
						}
						position++
						goto l979
					l1037:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ŕ') {
							goto l1038
						}
						position++
						goto l979
					l1038:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ř') {
							goto l1039
						}
						position++
						goto l979
					l1039:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ś') {
							goto l1040
						}
						position++
						goto l979
					l1040:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ş') {
							goto l1041
						}
						position++
						goto l979
					l1041:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('š') {
							goto l1042
						}
						position++
						goto l979
					l1042:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ţ') {
							goto l1043
						}
						position++
						goto l979
					l1043:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ť') {
							goto l1044
						}
						position++
						goto l979
					l1044:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ũ') {
							goto l1045
						}
						position++
						goto l979
					l1045:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ū') {
							goto l1046
						}
						position++
						goto l979
					l1046:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ŭ') {
							goto l1047
						}
						position++
						goto l979
					l1047:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ů') {
							goto l1048
						}
						position++
						goto l979
					l1048:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ű') {
							goto l1049
						}
						position++
						goto l979
					l1049:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ź') {
							goto l1050
						}
						position++
						goto l979
					l1050:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ż') {
							goto l1051
						}
						position++
						goto l979
					l1051:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ž') {
							goto l1052
						}
						position++
						goto l979
					l1052:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ſ') {
							goto l1053
						}
						position++
						goto l979
					l1053:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ǎ') {
							goto l1054
						}
						position++
						goto l979
					l1054:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ǔ') {
							goto l1055
						}
						position++
						goto l979
					l1055:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ǧ') {
							goto l1056
						}
						position++
						goto l979
					l1056:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ș') {
							goto l1057
						}
						position++
						goto l979
					l1057:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ț') {
							goto l1058
						}
						position++
						goto l979
					l1058:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ȳ') {
							goto l1059
						}
						position++
						goto l979
					l1059:
						position, tokenIndex = position979, tokenIndex979
						if buffer[position] != rune('ß') {
							goto l973
						}
						position++
					}
				l979:
				}
			l975:
				add(ruleAuthorLowerChar, position974)
			}
			return true
		l973:
			position, tokenIndex = position973, tokenIndex973
			return false
		},
		/* 124 Year <- <(YearRange / YearApprox / YearWithParens / YearWithPage / YearWithDot / YearWithChar / YearNum)> */
		func() bool {
			position1060, tokenIndex1060 := position, tokenIndex
			{
				position1061 := position
				{
					position1062, tokenIndex1062 := position, tokenIndex
					if !_rules[ruleYearRange]() {
						goto l1063
					}
					goto l1062
				l1063:
					position, tokenIndex = position1062, tokenIndex1062
					if !_rules[ruleYearApprox]() {
						goto l1064
					}
					goto l1062
				l1064:
					position, tokenIndex = position1062, tokenIndex1062
					if !_rules[ruleYearWithParens]() {
						goto l1065
					}
					goto l1062
				l1065:
					position, tokenIndex = position1062, tokenIndex1062
					if !_rules[ruleYearWithPage]() {
						goto l1066
					}
					goto l1062
				l1066:
					position, tokenIndex = position1062, tokenIndex1062
					if !_rules[ruleYearWithDot]() {
						goto l1067
					}
					goto l1062
				l1067:
					position, tokenIndex = position1062, tokenIndex1062
					if !_rules[ruleYearWithChar]() {
						goto l1068
					}
					goto l1062
				l1068:
					position, tokenIndex = position1062, tokenIndex1062
					if !_rules[ruleYearNum]() {
						goto l1060
					}
				}
			l1062:
				add(ruleYear, position1061)
			}
			return true
		l1060:
			position, tokenIndex = position1060, tokenIndex1060
			return false
		},
		/* 125 YearRange <- <(YearNum (Dash / Slash) (Nums+ ('a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '?')*))> */
		func() bool {
			position1069, tokenIndex1069 := position, tokenIndex
			{
				position1070 := position
				if !_rules[ruleYearNum]() {
					goto l1069
				}
				{
					position1071, tokenIndex1071 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l1072
					}
					goto l1071
				l1072:
					position, tokenIndex = position1071, tokenIndex1071
					if !_rules[ruleSlash]() {
						goto l1069
					}
				}
			l1071:
				if !_rules[ruleNums]() {
					goto l1069
				}
			l1073:
				{
					position1074, tokenIndex1074 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1074
					}
					goto l1073
				l1074:
					position, tokenIndex = position1074, tokenIndex1074
				}
			l1075:
				{
					position1076, tokenIndex1076 := position, tokenIndex
					{
						position1077, tokenIndex1077 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l1078
						}
						position++
						goto l1077
					l1078:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('b') {
							goto l1079
						}
						position++
						goto l1077
					l1079:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('c') {
							goto l1080
						}
						position++
						goto l1077
					l1080:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('d') {
							goto l1081
						}
						position++
						goto l1077
					l1081:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('e') {
							goto l1082
						}
						position++
						goto l1077
					l1082:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('f') {
							goto l1083
						}
						position++
						goto l1077
					l1083:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('g') {
							goto l1084
						}
						position++
						goto l1077
					l1084:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('h') {
							goto l1085
						}
						position++
						goto l1077
					l1085:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('i') {
							goto l1086
						}
						position++
						goto l1077
					l1086:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('j') {
							goto l1087
						}
						position++
						goto l1077
					l1087:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('k') {
							goto l1088
						}
						position++
						goto l1077
					l1088:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('l') {
							goto l1089
						}
						position++
						goto l1077
					l1089:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('m') {
							goto l1090
						}
						position++
						goto l1077
					l1090:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('n') {
							goto l1091
						}
						position++
						goto l1077
					l1091:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('o') {
							goto l1092
						}
						position++
						goto l1077
					l1092:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('p') {
							goto l1093
						}
						position++
						goto l1077
					l1093:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('q') {
							goto l1094
						}
						position++
						goto l1077
					l1094:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('r') {
							goto l1095
						}
						position++
						goto l1077
					l1095:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('s') {
							goto l1096
						}
						position++
						goto l1077
					l1096:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('t') {
							goto l1097
						}
						position++
						goto l1077
					l1097:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('u') {
							goto l1098
						}
						position++
						goto l1077
					l1098:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('v') {
							goto l1099
						}
						position++
						goto l1077
					l1099:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('w') {
							goto l1100
						}
						position++
						goto l1077
					l1100:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('x') {
							goto l1101
						}
						position++
						goto l1077
					l1101:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('y') {
							goto l1102
						}
						position++
						goto l1077
					l1102:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('z') {
							goto l1103
						}
						position++
						goto l1077
					l1103:
						position, tokenIndex = position1077, tokenIndex1077
						if buffer[position] != rune('?') {
							goto l1076
						}
						position++
					}
				l1077:
					goto l1075
				l1076:
					position, tokenIndex = position1076, tokenIndex1076
				}
				add(ruleYearRange, position1070)
			}
			return true
		l1069:
			position, tokenIndex = position1069, tokenIndex1069
			return false
		},
		/* 126 YearWithDot <- <(YearNum '.')> */
		func() bool {
			position1104, tokenIndex1104 := position, tokenIndex
			{
				position1105 := position
				if !_rules[ruleYearNum]() {
					goto l1104
				}
				if buffer[position] != rune('.') {
					goto l1104
				}
				position++
				add(ruleYearWithDot, position1105)
			}
			return true
		l1104:
			position, tokenIndex = position1104, tokenIndex1104
			return false
		},
		/* 127 YearApprox <- <('[' _? YearNum _? ']')> */
		func() bool {
			position1106, tokenIndex1106 := position, tokenIndex
			{
				position1107 := position
				if buffer[position] != rune('[') {
					goto l1106
				}
				position++
				{
					position1108, tokenIndex1108 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1108
					}
					goto l1109
				l1108:
					position, tokenIndex = position1108, tokenIndex1108
				}
			l1109:
				if !_rules[ruleYearNum]() {
					goto l1106
				}
				{
					position1110, tokenIndex1110 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1110
					}
					goto l1111
				l1110:
					position, tokenIndex = position1110, tokenIndex1110
				}
			l1111:
				if buffer[position] != rune(']') {
					goto l1106
				}
				position++
				add(ruleYearApprox, position1107)
			}
			return true
		l1106:
			position, tokenIndex = position1106, tokenIndex1106
			return false
		},
		/* 128 YearWithPage <- <((YearWithChar / YearNum) _? ':' _? Nums+)> */
		func() bool {
			position1112, tokenIndex1112 := position, tokenIndex
			{
				position1113 := position
				{
					position1114, tokenIndex1114 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1115
					}
					goto l1114
				l1115:
					position, tokenIndex = position1114, tokenIndex1114
					if !_rules[ruleYearNum]() {
						goto l1112
					}
				}
			l1114:
				{
					position1116, tokenIndex1116 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1116
					}
					goto l1117
				l1116:
					position, tokenIndex = position1116, tokenIndex1116
				}
			l1117:
				if buffer[position] != rune(':') {
					goto l1112
				}
				position++
				{
					position1118, tokenIndex1118 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1118
					}
					goto l1119
				l1118:
					position, tokenIndex = position1118, tokenIndex1118
				}
			l1119:
				if !_rules[ruleNums]() {
					goto l1112
				}
			l1120:
				{
					position1121, tokenIndex1121 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1121
					}
					goto l1120
				l1121:
					position, tokenIndex = position1121, tokenIndex1121
				}
				add(ruleYearWithPage, position1113)
			}
			return true
		l1112:
			position, tokenIndex = position1112, tokenIndex1112
			return false
		},
		/* 129 YearWithParens <- <('(' (YearWithChar / YearNum) ')')> */
		func() bool {
			position1122, tokenIndex1122 := position, tokenIndex
			{
				position1123 := position
				if buffer[position] != rune('(') {
					goto l1122
				}
				position++
				{
					position1124, tokenIndex1124 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1125
					}
					goto l1124
				l1125:
					position, tokenIndex = position1124, tokenIndex1124
					if !_rules[ruleYearNum]() {
						goto l1122
					}
				}
			l1124:
				if buffer[position] != rune(')') {
					goto l1122
				}
				position++
				add(ruleYearWithParens, position1123)
			}
			return true
		l1122:
			position, tokenIndex = position1122, tokenIndex1122
			return false
		},
		/* 130 YearWithChar <- <(YearNum LowerASCII)> */
		func() bool {
			position1126, tokenIndex1126 := position, tokenIndex
			{
				position1127 := position
				if !_rules[ruleYearNum]() {
					goto l1126
				}
				if !_rules[ruleLowerASCII]() {
					goto l1126
				}
				add(ruleYearWithChar, position1127)
			}
			return true
		l1126:
			position, tokenIndex = position1126, tokenIndex1126
			return false
		},
		/* 131 YearNum <- <(('1' / '2') ('0' / '7' / '8' / '9') Nums (Nums / '?') '?'*)> */
		func() bool {
			position1128, tokenIndex1128 := position, tokenIndex
			{
				position1129 := position
				{
					position1130, tokenIndex1130 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l1131
					}
					position++
					goto l1130
				l1131:
					position, tokenIndex = position1130, tokenIndex1130
					if buffer[position] != rune('2') {
						goto l1128
					}
					position++
				}
			l1130:
				{
					position1132, tokenIndex1132 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l1133
					}
					position++
					goto l1132
				l1133:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('7') {
						goto l1134
					}
					position++
					goto l1132
				l1134:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('8') {
						goto l1135
					}
					position++
					goto l1132
				l1135:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('9') {
						goto l1128
					}
					position++
				}
			l1132:
				if !_rules[ruleNums]() {
					goto l1128
				}
				{
					position1136, tokenIndex1136 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1137
					}
					goto l1136
				l1137:
					position, tokenIndex = position1136, tokenIndex1136
					if buffer[position] != rune('?') {
						goto l1128
					}
					position++
				}
			l1136:
			l1138:
				{
					position1139, tokenIndex1139 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l1139
					}
					position++
					goto l1138
				l1139:
					position, tokenIndex = position1139, tokenIndex1139
				}
				add(ruleYearNum, position1129)
			}
			return true
		l1128:
			position, tokenIndex = position1128, tokenIndex1128
			return false
		},
		/* 132 NameUpperChar <- <(UpperChar / UpperCharExtended)> */
		func() bool {
			position1140, tokenIndex1140 := position, tokenIndex
			{
				position1141 := position
				{
					position1142, tokenIndex1142 := position, tokenIndex
					if !_rules[ruleUpperChar]() {
						goto l1143
					}
					goto l1142
				l1143:
					position, tokenIndex = position1142, tokenIndex1142
					if !_rules[ruleUpperCharExtended]() {
						goto l1140
					}
				}
			l1142:
				add(ruleNameUpperChar, position1141)
			}
			return true
		l1140:
			position, tokenIndex = position1140, tokenIndex1140
			return false
		},
		/* 133 UpperCharExtended <- <('Æ' / 'Œ' / 'Ö')> */
		func() bool {
			position1144, tokenIndex1144 := position, tokenIndex
			{
				position1145 := position
				{
					position1146, tokenIndex1146 := position, tokenIndex
					if buffer[position] != rune('Æ') {
						goto l1147
					}
					position++
					goto l1146
				l1147:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('Œ') {
						goto l1148
					}
					position++
					goto l1146
				l1148:
					position, tokenIndex = position1146, tokenIndex1146
					if buffer[position] != rune('Ö') {
						goto l1144
					}
					position++
				}
			l1146:
				add(ruleUpperCharExtended, position1145)
			}
			return true
		l1144:
			position, tokenIndex = position1144, tokenIndex1144
			return false
		},
		/* 134 UpperChar <- <UpperASCII> */
		func() bool {
			position1149, tokenIndex1149 := position, tokenIndex
			{
				position1150 := position
				if !_rules[ruleUpperASCII]() {
					goto l1149
				}
				add(ruleUpperChar, position1150)
			}
			return true
		l1149:
			position, tokenIndex = position1149, tokenIndex1149
			return false
		},
		/* 135 NameLowerChar <- <(LowerChar / LowerCharExtended / MiscodedChar)> */
		func() bool {
			position1151, tokenIndex1151 := position, tokenIndex
			{
				position1152 := position
				{
					position1153, tokenIndex1153 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l1154
					}
					goto l1153
				l1154:
					position, tokenIndex = position1153, tokenIndex1153
					if !_rules[ruleLowerCharExtended]() {
						goto l1155
					}
					goto l1153
				l1155:
					position, tokenIndex = position1153, tokenIndex1153
					if !_rules[ruleMiscodedChar]() {
						goto l1151
					}
				}
			l1153:
				add(ruleNameLowerChar, position1152)
			}
			return true
		l1151:
			position, tokenIndex = position1151, tokenIndex1151
			return false
		},
		/* 136 MiscodedChar <- <'�'> */
		func() bool {
			position1156, tokenIndex1156 := position, tokenIndex
			{
				position1157 := position
				if buffer[position] != rune('�') {
					goto l1156
				}
				position++
				add(ruleMiscodedChar, position1157)
			}
			return true
		l1156:
			position, tokenIndex = position1156, tokenIndex1156
			return false
		},
		/* 137 LowerCharExtended <- <('æ' / 'œ' / 'à' / 'â' / 'å' / 'ã' / 'ä' / 'á' / 'ç' / 'č' / 'é' / 'è' / 'ë' / 'í' / 'ì' / 'ï' / 'ň' / 'ñ' / 'ñ' / 'ó' / 'ò' / 'ô' / 'ø' / 'õ' / 'ö' / 'ú' / 'û' / 'ù' / 'ü' / 'ŕ' / 'ř' / 'ŗ' / 'ſ' / 'š' / 'š' / 'ş' / 'ß' / 'ž')> */
		func() bool {
			position1158, tokenIndex1158 := position, tokenIndex
			{
				position1159 := position
				{
					position1160, tokenIndex1160 := position, tokenIndex
					if buffer[position] != rune('æ') {
						goto l1161
					}
					position++
					goto l1160
				l1161:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('œ') {
						goto l1162
					}
					position++
					goto l1160
				l1162:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('à') {
						goto l1163
					}
					position++
					goto l1160
				l1163:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('â') {
						goto l1164
					}
					position++
					goto l1160
				l1164:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('å') {
						goto l1165
					}
					position++
					goto l1160
				l1165:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ã') {
						goto l1166
					}
					position++
					goto l1160
				l1166:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ä') {
						goto l1167
					}
					position++
					goto l1160
				l1167:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('á') {
						goto l1168
					}
					position++
					goto l1160
				l1168:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ç') {
						goto l1169
					}
					position++
					goto l1160
				l1169:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('č') {
						goto l1170
					}
					position++
					goto l1160
				l1170:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('é') {
						goto l1171
					}
					position++
					goto l1160
				l1171:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('è') {
						goto l1172
					}
					position++
					goto l1160
				l1172:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ë') {
						goto l1173
					}
					position++
					goto l1160
				l1173:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('í') {
						goto l1174
					}
					position++
					goto l1160
				l1174:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ì') {
						goto l1175
					}
					position++
					goto l1160
				l1175:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ï') {
						goto l1176
					}
					position++
					goto l1160
				l1176:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ň') {
						goto l1177
					}
					position++
					goto l1160
				l1177:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ñ') {
						goto l1178
					}
					position++
					goto l1160
				l1178:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ñ') {
						goto l1179
					}
					position++
					goto l1160
				l1179:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ó') {
						goto l1180
					}
					position++
					goto l1160
				l1180:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ò') {
						goto l1181
					}
					position++
					goto l1160
				l1181:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ô') {
						goto l1182
					}
					position++
					goto l1160
				l1182:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ø') {
						goto l1183
					}
					position++
					goto l1160
				l1183:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('õ') {
						goto l1184
					}
					position++
					goto l1160
				l1184:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ö') {
						goto l1185
					}
					position++
					goto l1160
				l1185:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ú') {
						goto l1186
					}
					position++
					goto l1160
				l1186:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('û') {
						goto l1187
					}
					position++
					goto l1160
				l1187:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ù') {
						goto l1188
					}
					position++
					goto l1160
				l1188:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ü') {
						goto l1189
					}
					position++
					goto l1160
				l1189:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ŕ') {
						goto l1190
					}
					position++
					goto l1160
				l1190:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ř') {
						goto l1191
					}
					position++
					goto l1160
				l1191:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ŗ') {
						goto l1192
					}
					position++
					goto l1160
				l1192:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ſ') {
						goto l1193
					}
					position++
					goto l1160
				l1193:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('š') {
						goto l1194
					}
					position++
					goto l1160
				l1194:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('š') {
						goto l1195
					}
					position++
					goto l1160
				l1195:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ş') {
						goto l1196
					}
					position++
					goto l1160
				l1196:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ß') {
						goto l1197
					}
					position++
					goto l1160
				l1197:
					position, tokenIndex = position1160, tokenIndex1160
					if buffer[position] != rune('ž') {
						goto l1158
					}
					position++
				}
			l1160:
				add(ruleLowerCharExtended, position1159)
			}
			return true
		l1158:
			position, tokenIndex = position1158, tokenIndex1158
			return false
		},
		/* 138 LowerChar <- <LowerASCII> */
		func() bool {
			position1198, tokenIndex1198 := position, tokenIndex
			{
				position1199 := position
				if !_rules[ruleLowerASCII]() {
					goto l1198
				}
				add(ruleLowerChar, position1199)
			}
			return true
		l1198:
			position, tokenIndex = position1198, tokenIndex1198
			return false
		},
		/* 139 SpaceCharEOI <- <(_ / !.)> */
		func() bool {
			position1200, tokenIndex1200 := position, tokenIndex
			{
				position1201 := position
				{
					position1202, tokenIndex1202 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1203
					}
					goto l1202
				l1203:
					position, tokenIndex = position1202, tokenIndex1202
					{
						position1204, tokenIndex1204 := position, tokenIndex
						if !matchDot() {
							goto l1204
						}
						goto l1200
					l1204:
						position, tokenIndex = position1204, tokenIndex1204
					}
				}
			l1202:
				add(ruleSpaceCharEOI, position1201)
			}
			return true
		l1200:
			position, tokenIndex = position1200, tokenIndex1200
			return false
		},
		/* 140 Nums <- <[0-9]> */
		func() bool {
			position1205, tokenIndex1205 := position, tokenIndex
			{
				position1206 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l1205
				}
				position++
				add(ruleNums, position1206)
			}
			return true
		l1205:
			position, tokenIndex = position1205, tokenIndex1205
			return false
		},
		/* 141 LowerGreek <- <[α-ω]> */
		func() bool {
			position1207, tokenIndex1207 := position, tokenIndex
			{
				position1208 := position
				if c := buffer[position]; c < rune('α') || c > rune('ω') {
					goto l1207
				}
				position++
				add(ruleLowerGreek, position1208)
			}
			return true
		l1207:
			position, tokenIndex = position1207, tokenIndex1207
			return false
		},
		/* 142 LowerASCII <- <[a-z]> */
		func() bool {
			position1209, tokenIndex1209 := position, tokenIndex
			{
				position1210 := position
				if c := buffer[position]; c < rune('a') || c > rune('z') {
					goto l1209
				}
				position++
				add(ruleLowerASCII, position1210)
			}
			return true
		l1209:
			position, tokenIndex = position1209, tokenIndex1209
			return false
		},
		/* 143 UpperASCII <- <[A-Z]> */
		func() bool {
			position1211, tokenIndex1211 := position, tokenIndex
			{
				position1212 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l1211
				}
				position++
				add(ruleUpperASCII, position1212)
			}
			return true
		l1211:
			position, tokenIndex = position1211, tokenIndex1211
			return false
		},
		/* 144 Apostrophe <- <(ApostrOther / ApostrASCII)> */
		func() bool {
			position1213, tokenIndex1213 := position, tokenIndex
			{
				position1214 := position
				{
					position1215, tokenIndex1215 := position, tokenIndex
					if !_rules[ruleApostrOther]() {
						goto l1216
					}
					goto l1215
				l1216:
					position, tokenIndex = position1215, tokenIndex1215
					if !_rules[ruleApostrASCII]() {
						goto l1213
					}
				}
			l1215:
				add(ruleApostrophe, position1214)
			}
			return true
		l1213:
			position, tokenIndex = position1213, tokenIndex1213
			return false
		},
		/* 145 ApostrASCII <- <'\''> */
		func() bool {
			position1217, tokenIndex1217 := position, tokenIndex
			{
				position1218 := position
				if buffer[position] != rune('\'') {
					goto l1217
				}
				position++
				add(ruleApostrASCII, position1218)
			}
			return true
		l1217:
			position, tokenIndex = position1217, tokenIndex1217
			return false
		},
		/* 146 ApostrOther <- <('‘' / '’' / '`' / '´')> */
		func() bool {
			position1219, tokenIndex1219 := position, tokenIndex
			{
				position1220 := position
				{
					position1221, tokenIndex1221 := position, tokenIndex
					if buffer[position] != rune('‘') {
						goto l1222
					}
					position++
					goto l1221
				l1222:
					position, tokenIndex = position1221, tokenIndex1221
					if buffer[position] != rune('’') {
						goto l1223
					}
					position++
					goto l1221
				l1223:
					position, tokenIndex = position1221, tokenIndex1221
					if buffer[position] != rune('`') {
						goto l1224
					}
					position++
					goto l1221
				l1224:
					position, tokenIndex = position1221, tokenIndex1221
					if buffer[position] != rune('´') {
						goto l1219
					}
					position++
				}
			l1221:
				add(ruleApostrOther, position1220)
			}
			return true
		l1219:
			position, tokenIndex = position1219, tokenIndex1219
			return false
		},
		/* 147 Dash <- <('-' / DashOther)> */
		func() bool {
			position1225, tokenIndex1225 := position, tokenIndex
			{
				position1226 := position
				{
					position1227, tokenIndex1227 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l1228
					}
					position++
					goto l1227
				l1228:
					position, tokenIndex = position1227, tokenIndex1227
					if !_rules[ruleDashOther]() {
						goto l1225
					}
				}
			l1227:
				add(ruleDash, position1226)
			}
			return true
		l1225:
			position, tokenIndex = position1225, tokenIndex1225
			return false
		},
		/* 148 DashOther <- <'‑'> */
		func() bool {
			position1229, tokenIndex1229 := position, tokenIndex
			{
				position1230 := position
				if buffer[position] != rune('‑') {
					goto l1229
				}
				position++
				add(ruleDashOther, position1230)
			}
			return true
		l1229:
			position, tokenIndex = position1229, tokenIndex1229
			return false
		},
		/* 149 Slash <- <'/'> */
		func() bool {
			position1231, tokenIndex1231 := position, tokenIndex
			{
				position1232 := position
				if buffer[position] != rune('/') {
					goto l1231
				}
				position++
				add(ruleSlash, position1232)
			}
			return true
		l1231:
			position, tokenIndex = position1231, tokenIndex1231
			return false
		},
		/* 150 _ <- <(MultipleSpace / SingleSpace)> */
		func() bool {
			position1233, tokenIndex1233 := position, tokenIndex
			{
				position1234 := position
				{
					position1235, tokenIndex1235 := position, tokenIndex
					if !_rules[ruleMultipleSpace]() {
						goto l1236
					}
					goto l1235
				l1236:
					position, tokenIndex = position1235, tokenIndex1235
					if !_rules[ruleSingleSpace]() {
						goto l1233
					}
				}
			l1235:
				add(rule_, position1234)
			}
			return true
		l1233:
			position, tokenIndex = position1233, tokenIndex1233
			return false
		},
		/* 151 MultipleSpace <- <(SingleSpace SingleSpace+)> */
		func() bool {
			position1237, tokenIndex1237 := position, tokenIndex
			{
				position1238 := position
				if !_rules[ruleSingleSpace]() {
					goto l1237
				}
				if !_rules[ruleSingleSpace]() {
					goto l1237
				}
			l1239:
				{
					position1240, tokenIndex1240 := position, tokenIndex
					if !_rules[ruleSingleSpace]() {
						goto l1240
					}
					goto l1239
				l1240:
					position, tokenIndex = position1240, tokenIndex1240
				}
				add(ruleMultipleSpace, position1238)
			}
			return true
		l1237:
			position, tokenIndex = position1237, tokenIndex1237
			return false
		},
		/* 152 SingleSpace <- <(' ' / OtherSpace)> */
		func() bool {
			position1241, tokenIndex1241 := position, tokenIndex
			{
				position1242 := position
				{
					position1243, tokenIndex1243 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l1244
					}
					position++
					goto l1243
				l1244:
					position, tokenIndex = position1243, tokenIndex1243
					if !_rules[ruleOtherSpace]() {
						goto l1241
					}
				}
			l1243:
				add(ruleSingleSpace, position1242)
			}
			return true
		l1241:
			position, tokenIndex = position1241, tokenIndex1241
			return false
		},
		/* 153 OtherSpace <- <('\u3000' / '\u00a0' / '\t' / '\r' / '\n' / '\f' / '\v')> */
		func() bool {
			position1245, tokenIndex1245 := position, tokenIndex
			{
				position1246 := position
				{
					position1247, tokenIndex1247 := position, tokenIndex
					if buffer[position] != rune('\u3000') {
						goto l1248
					}
					position++
					goto l1247
				l1248:
					position, tokenIndex = position1247, tokenIndex1247
					if buffer[position] != rune('\u00a0') {
						goto l1249
					}
					position++
					goto l1247
				l1249:
					position, tokenIndex = position1247, tokenIndex1247
					if buffer[position] != rune('\t') {
						goto l1250
					}
					position++
					goto l1247
				l1250:
					position, tokenIndex = position1247, tokenIndex1247
					if buffer[position] != rune('\r') {
						goto l1251
					}
					position++
					goto l1247
				l1251:
					position, tokenIndex = position1247, tokenIndex1247
					if buffer[position] != rune('\n') {
						goto l1252
					}
					position++
					goto l1247
				l1252:
					position, tokenIndex = position1247, tokenIndex1247
					if buffer[position] != rune('\f') {
						goto l1253
					}
					position++
					goto l1247
				l1253:
					position, tokenIndex = position1247, tokenIndex1247
					if buffer[position] != rune('\v') {
						goto l1245
					}
					position++
				}
			l1247:
				add(ruleOtherSpace, position1246)
			}
			return true
		l1245:
			position, tokenIndex = position1245, tokenIndex1245
			return false
		},
		/* 154 END <- <!.> */
		func() bool {
			position1254, tokenIndex1254 := position, tokenIndex
			{
				position1255 := position
				{
					position1256, tokenIndex1256 := position, tokenIndex
					if !matchDot() {
						goto l1256
					}
					goto l1254
				l1256:
					position, tokenIndex = position1256, tokenIndex1256
				}
				add(ruleEND, position1255)
			}
			return true
		l1254:
			position, tokenIndex = position1254, tokenIndex1254
			return false
		},
	}
	p.rules = _rules
	return nil
}
