package parser

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleSciName
	ruleTail
	ruleName
	ruleHybridFormula
	ruleHybridFormulaFull
	ruleHybridFormulaPart
	ruleNamedHybrid
	ruleNamedGenusHybrid
	ruleNamedSpeciesHybrid
	ruleGraftChimeraFormula
	ruleGraftChimeraFormulaFull
	ruleGraftChimeraFormulaPart
	ruleNamedGenusGraftChimera
	ruleCandidatusName
	ruleCandidatus
	ruleSingleName
	ruleNameUninomial
	ruleNameApprox
	ruleNameComp
	ruleNameCompSp
	ruleNameCompIsp
	ruleNameSpecies
	ruleGenusWord
	ruleInfraspGroup
	ruleInfraspEpithet
	ruleCultivarWordGroup
	ruleCultivar
	ruleRankCultivar
	ruleNotHybridChar
	ruleCultivarRecursive
	ruleCultivarApostrophe
	ruleSpeciesEpithet
	ruleIgnoredWord
	ruleComparison
	ruleRank
	ruleRankNotho
	ruleRankOtherUncommon
	ruleRankOther
	ruleRankVar
	ruleRankForma
	ruleRankSsp
	ruleRankAgamo
	ruleSubgenusOrSuperspecies
	ruleUninomialCombo
	ruleUninomialCombo1
	ruleUninomialCombo2
	ruleSubgenus
	ruleSubgenus2
	ruleSubgenus1
	ruleRankUninomial
	ruleRankUninomialPlain
	ruleRankUninomialNotho
	ruleUninomial
	ruleUninomialWord
	ruleAbbrSubgenus
	ruleAbbrGenus
	ruleCapWord
	ruleCapWord1
	ruleCapWordWithDash
	ruleTwoLetterGenusDashedSegment
	ruleWordAfterDash
	ruleUpperAfterDash
	ruleLowerAfterDash
	ruleTwoLetterGenus
	ruleWord
	ruleWord1
	ruleWordStartsWithDigit
	ruleWord2
	ruleWordApostr
	ruleWord4
	ruleDotPrefix
	ruleMultiDashedWord
	ruleHybridChar
	ruleGraftChimeraChar
	ruleApproxNameIgnored
	ruleApproximation
	ruleAuthorship
	ruleAuthorshipCombo
	ruleOriginalAuthorship
	ruleOriginalAuthorshipComb
	ruleCombinationAuthorship
	ruleBasionymAuthorshipMissingParens
	ruleMissingParensStart
	ruleMissingParensEnd
	ruleBasionymAuthorshipYearMisformed
	ruleBasionymAuthorship
	ruleBasionymAuthorship1
	ruleBasionymAuthorship2Parens
	ruleAuthorsGroup
	ruleAuthorsTeam
	ruleAuthorSep
	ruleAuthorSep1
	ruleAuthorSep2
	ruleAuthorSepSpanish
	ruleAuthorEx
	ruleAuthorIn
	ruleAuthorEmend
	ruleAuthor
	ruleAuthor0
	ruleAuthor1
	ruleAuthor2
	ruleUnknownAuthor
	ruleAuthorWord
	ruleAuthorEtAl
	ruleAuthorWord1
	ruleAuthorWord2
	ruleAuthorWord3
	ruleAuthorWord4
	ruleAuthorDashInitials
	ruleAuthorInitial
	ruleAuthorWordSoft
	ruleCapAuthorWord
	ruleAllCapsAuthorWord
	ruleFilius
	ruleFiliusF
	ruleFiliusFNoSpace
	ruleAuthorSuffix
	ruleAuthorPrefixGlued1
	ruleAuthorPrefixGlued2
	ruleAuthorPrefix
	ruleAuthorPrefix2
	ruleAuthorPrefix1
	ruleAuthorUpperChar
	ruleAuthorLowerChar
	ruleYear
	ruleYearRange
	ruleYearWithDot
	ruleYearApprox
	ruleYearWithPage
	ruleYearWithParens
	ruleYearWithChar
	ruleYearNum
	ruleNameUpperChar
	ruleUpperCharExtended
	ruleUpperChar
	ruleNameLowerChar
	ruleMiscodedChar
	ruleLowerCharExtended
	ruleLowerChar
	ruleSpaceCharEOI
	ruleNums
	ruleLowerGreek
	ruleLowerASCII
	ruleUpperASCII
	ruleApostrophe
	ruleApostrASCII
	ruleApostrOther
	ruleDash
	ruleDashOther
	ruleSlash
	rule_
	ruleMultipleSpace
	ruleSingleSpace
	ruleOtherSpace
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"SciName",
	"Tail",
	"Name",
	"HybridFormula",
	"HybridFormulaFull",
	"HybridFormulaPart",
	"NamedHybrid",
	"NamedGenusHybrid",
	"NamedSpeciesHybrid",
	"GraftChimeraFormula",
	"GraftChimeraFormulaFull",
	"GraftChimeraFormulaPart",
	"NamedGenusGraftChimera",
	"CandidatusName",
	"Candidatus",
	"SingleName",
	"NameUninomial",
	"NameApprox",
	"NameComp",
	"NameCompSp",
	"NameCompIsp",
	"NameSpecies",
	"GenusWord",
	"InfraspGroup",
	"InfraspEpithet",
	"CultivarWordGroup",
	"Cultivar",
	"RankCultivar",
	"NotHybridChar",
	"CultivarRecursive",
	"CultivarApostrophe",
	"SpeciesEpithet",
	"IgnoredWord",
	"Comparison",
	"Rank",
	"RankNotho",
	"RankOtherUncommon",
	"RankOther",
	"RankVar",
	"RankForma",
	"RankSsp",
	"RankAgamo",
	"SubgenusOrSuperspecies",
	"UninomialCombo",
	"UninomialCombo1",
	"UninomialCombo2",
	"Subgenus",
	"Subgenus2",
	"Subgenus1",
	"RankUninomial",
	"RankUninomialPlain",
	"RankUninomialNotho",
	"Uninomial",
	"UninomialWord",
	"AbbrSubgenus",
	"AbbrGenus",
	"CapWord",
	"CapWord1",
	"CapWordWithDash",
	"TwoLetterGenusDashedSegment",
	"WordAfterDash",
	"UpperAfterDash",
	"LowerAfterDash",
	"TwoLetterGenus",
	"Word",
	"Word1",
	"WordStartsWithDigit",
	"Word2",
	"WordApostr",
	"Word4",
	"DotPrefix",
	"MultiDashedWord",
	"HybridChar",
	"GraftChimeraChar",
	"ApproxNameIgnored",
	"Approximation",
	"Authorship",
	"AuthorshipCombo",
	"OriginalAuthorship",
	"OriginalAuthorshipComb",
	"CombinationAuthorship",
	"BasionymAuthorshipMissingParens",
	"MissingParensStart",
	"MissingParensEnd",
	"BasionymAuthorshipYearMisformed",
	"BasionymAuthorship",
	"BasionymAuthorship1",
	"BasionymAuthorship2Parens",
	"AuthorsGroup",
	"AuthorsTeam",
	"AuthorSep",
	"AuthorSep1",
	"AuthorSep2",
	"AuthorSepSpanish",
	"AuthorEx",
	"AuthorIn",
	"AuthorEmend",
	"Author",
	"Author0",
	"Author1",
	"Author2",
	"UnknownAuthor",
	"AuthorWord",
	"AuthorEtAl",
	"AuthorWord1",
	"AuthorWord2",
	"AuthorWord3",
	"AuthorWord4",
	"AuthorDashInitials",
	"AuthorInitial",
	"AuthorWordSoft",
	"CapAuthorWord",
	"AllCapsAuthorWord",
	"Filius",
	"FiliusF",
	"FiliusFNoSpace",
	"AuthorSuffix",
	"AuthorPrefixGlued1",
	"AuthorPrefixGlued2",
	"AuthorPrefix",
	"AuthorPrefix2",
	"AuthorPrefix1",
	"AuthorUpperChar",
	"AuthorLowerChar",
	"Year",
	"YearRange",
	"YearWithDot",
	"YearApprox",
	"YearWithPage",
	"YearWithParens",
	"YearWithChar",
	"YearNum",
	"NameUpperChar",
	"UpperCharExtended",
	"UpperChar",
	"NameLowerChar",
	"MiscodedChar",
	"LowerCharExtended",
	"LowerChar",
	"SpaceCharEOI",
	"Nums",
	"LowerGreek",
	"LowerASCII",
	"UpperASCII",
	"Apostrophe",
	"ApostrASCII",
	"ApostrOther",
	"Dash",
	"DashOther",
	"Slash",
	"_",
	"MultipleSpace",
	"SingleSpace",
	"OtherSpace",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Engine struct {
	baseEngine

	Buffer string
	buffer []rune
	rules  [156]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Engine) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Engine) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Engine
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Engine) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Engine) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Engine) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Engine) error {
	return func(p *Engine) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Engine) error {
	return func(p *Engine) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Engine) Init(options ...func(*Engine) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 SciName <- <(_? Name Tail END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rule_]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				if !_rules[ruleName]() {
					goto l0
				}
				if !_rules[ruleTail]() {
					goto l0
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleSciName, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Tail <- <((_ / ';' / ',') .*)?> */
		func() bool {
			{
				position5 := position
				{
					position6, tokenIndex6 := position, tokenIndex
					{
						position8, tokenIndex8 := position, tokenIndex
						if !_rules[rule_]() {
							goto l9
						}
						goto l8
					l9:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(';') {
							goto l10
						}
						position++
						goto l8
					l10:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(',') {
							goto l6
						}
						position++
					}
				l8:
				l11:
					{
						position12, tokenIndex12 := position, tokenIndex
						if !matchDot() {
							goto l12
						}
						goto l11
					l12:
						position, tokenIndex = position12, tokenIndex12
					}
					goto l7
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
			l7:
				add(ruleTail, position5)
			}
			return true
		},
		/* 2 Name <- <(NamedGenusGraftChimera / GraftChimeraFormula / NamedHybrid / HybridFormula / CandidatusName / SingleName)> */
		func() bool {
			position13, tokenIndex13 := position, tokenIndex
			{
				position14 := position
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleNamedGenusGraftChimera]() {
						goto l16
					}
					goto l15
				l16:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleGraftChimeraFormula]() {
						goto l17
					}
					goto l15
				l17:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleNamedHybrid]() {
						goto l18
					}
					goto l15
				l18:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleHybridFormula]() {
						goto l19
					}
					goto l15
				l19:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleCandidatusName]() {
						goto l20
					}
					goto l15
				l20:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleSingleName]() {
						goto l13
					}
				}
			l15:
				add(ruleName, position14)
			}
			return true
		l13:
			position, tokenIndex = position13, tokenIndex13
			return false
		},
		/* 3 HybridFormula <- <(SingleName (_ (HybridFormulaPart / HybridFormulaFull))+)> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				if !_rules[ruleSingleName]() {
					goto l21
				}
				if !_rules[rule_]() {
					goto l21
				}
				{
					position25, tokenIndex25 := position, tokenIndex
					if !_rules[ruleHybridFormulaPart]() {
						goto l26
					}
					goto l25
				l26:
					position, tokenIndex = position25, tokenIndex25
					if !_rules[ruleHybridFormulaFull]() {
						goto l21
					}
				}
			l25:
			l23:
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[rule_]() {
						goto l24
					}
					{
						position27, tokenIndex27 := position, tokenIndex
						if !_rules[ruleHybridFormulaPart]() {
							goto l28
						}
						goto l27
					l28:
						position, tokenIndex = position27, tokenIndex27
						if !_rules[ruleHybridFormulaFull]() {
							goto l24
						}
					}
				l27:
					goto l23
				l24:
					position, tokenIndex = position24, tokenIndex24
				}
				add(ruleHybridFormula, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 4 HybridFormulaFull <- <(HybridChar (_ SingleName)?)> */
		func() bool {
			position29, tokenIndex29 := position, tokenIndex
			{
				position30 := position
				if !_rules[ruleHybridChar]() {
					goto l29
				}
				{
					position31, tokenIndex31 := position, tokenIndex
					if !_rules[rule_]() {
						goto l31
					}
					if !_rules[ruleSingleName]() {
						goto l31
					}
					goto l32
				l31:
					position, tokenIndex = position31, tokenIndex31
				}
			l32:
				add(ruleHybridFormulaFull, position30)
			}
			return true
		l29:
			position, tokenIndex = position29, tokenIndex29
			return false
		},
		/* 5 HybridFormulaPart <- <(HybridChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position33, tokenIndex33 := position, tokenIndex
			{
				position34 := position
				if !_rules[ruleHybridChar]() {
					goto l33
				}
				if !_rules[rule_]() {
					goto l33
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l33
				}
				{
					position35, tokenIndex35 := position, tokenIndex
					if !_rules[rule_]() {
						goto l35
					}
					if !_rules[ruleInfraspGroup]() {
						goto l35
					}
					goto l36
				l35:
					position, tokenIndex = position35, tokenIndex35
				}
			l36:
				add(ruleHybridFormulaPart, position34)
			}
			return true
		l33:
			position, tokenIndex = position33, tokenIndex33
			return false
		},
		/* 6 NamedHybrid <- <(NamedGenusHybrid / NamedSpeciesHybrid)> */
		func() bool {
			position37, tokenIndex37 := position, tokenIndex
			{
				position38 := position
				{
					position39, tokenIndex39 := position, tokenIndex
					if !_rules[ruleNamedGenusHybrid]() {
						goto l40
					}
					goto l39
				l40:
					position, tokenIndex = position39, tokenIndex39
					if !_rules[ruleNamedSpeciesHybrid]() {
						goto l37
					}
				}
			l39:
				add(ruleNamedHybrid, position38)
			}
			return true
		l37:
			position, tokenIndex = position37, tokenIndex37
			return false
		},
		/* 7 NamedGenusHybrid <- <(HybridChar _? (NamedSpeciesHybrid / SingleName))> */
		func() bool {
			position41, tokenIndex41 := position, tokenIndex
			{
				position42 := position
				if !_rules[ruleHybridChar]() {
					goto l41
				}
				{
					position43, tokenIndex43 := position, tokenIndex
					if !_rules[rule_]() {
						goto l43
					}
					goto l44
				l43:
					position, tokenIndex = position43, tokenIndex43
				}
			l44:
				{
					position45, tokenIndex45 := position, tokenIndex
					if !_rules[ruleNamedSpeciesHybrid]() {
						goto l46
					}
					goto l45
				l46:
					position, tokenIndex = position45, tokenIndex45
					if !_rules[ruleSingleName]() {
						goto l41
					}
				}
			l45:
				add(ruleNamedGenusHybrid, position42)
			}
			return true
		l41:
			position, tokenIndex = position41, tokenIndex41
			return false
		},
		/* 8 NamedSpeciesHybrid <- <(GenusWord (_ Subgenus)? (_ Comparison)? _ HybridChar _? SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position47, tokenIndex47 := position, tokenIndex
			{
				position48 := position
				if !_rules[ruleGenusWord]() {
					goto l47
				}
				{
					position49, tokenIndex49 := position, tokenIndex
					if !_rules[rule_]() {
						goto l49
					}
					if !_rules[ruleSubgenus]() {
						goto l49
					}
					goto l50
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
			l50:
				{
					position51, tokenIndex51 := position, tokenIndex
					if !_rules[rule_]() {
						goto l51
					}
					if !_rules[ruleComparison]() {
						goto l51
					}
					goto l52
				l51:
					position, tokenIndex = position51, tokenIndex51
				}
			l52:
				if !_rules[rule_]() {
					goto l47
				}
				if !_rules[ruleHybridChar]() {
					goto l47
				}
				{
					position53, tokenIndex53 := position, tokenIndex
					if !_rules[rule_]() {
						goto l53
					}
					goto l54
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
			l54:
				if !_rules[ruleSpeciesEpithet]() {
					goto l47
				}
				{
					position55, tokenIndex55 := position, tokenIndex
					if !_rules[rule_]() {
						goto l55
					}
					if !_rules[ruleInfraspGroup]() {
						goto l55
					}
					goto l56
				l55:
					position, tokenIndex = position55, tokenIndex55
				}
			l56:
				add(ruleNamedSpeciesHybrid, position48)
			}
			return true
		l47:
			position, tokenIndex = position47, tokenIndex47
			return false
		},
		/* 9 GraftChimeraFormula <- <(SingleName (_ (GraftChimeraFormulaPart / GraftChimeraFormulaFull))+)> */
		func() bool {
			position57, tokenIndex57 := position, tokenIndex
			{
				position58 := position
				if !_rules[ruleSingleName]() {
					goto l57
				}
				if !_rules[rule_]() {
					goto l57
				}
				{
					position61, tokenIndex61 := position, tokenIndex
					if !_rules[ruleGraftChimeraFormulaPart]() {
						goto l62
					}
					goto l61
				l62:
					position, tokenIndex = position61, tokenIndex61
					if !_rules[ruleGraftChimeraFormulaFull]() {
						goto l57
					}
				}
			l61:
			l59:
				{
					position60, tokenIndex60 := position, tokenIndex
					if !_rules[rule_]() {
						goto l60
					}
					{
						position63, tokenIndex63 := position, tokenIndex
						if !_rules[ruleGraftChimeraFormulaPart]() {
							goto l64
						}
						goto l63
					l64:
						position, tokenIndex = position63, tokenIndex63
						if !_rules[ruleGraftChimeraFormulaFull]() {
							goto l60
						}
					}
				l63:
					goto l59
				l60:
					position, tokenIndex = position60, tokenIndex60
				}
				add(ruleGraftChimeraFormula, position58)
			}
			return true
		l57:
			position, tokenIndex = position57, tokenIndex57
			return false
		},
		/* 10 GraftChimeraFormulaFull <- <(GraftChimeraChar (_ SingleName)?)> */
		func() bool {
			position65, tokenIndex65 := position, tokenIndex
			{
				position66 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l65
				}
				{
					position67, tokenIndex67 := position, tokenIndex
					if !_rules[rule_]() {
						goto l67
					}
					if !_rules[ruleSingleName]() {
						goto l67
					}
					goto l68
				l67:
					position, tokenIndex = position67, tokenIndex67
				}
			l68:
				add(ruleGraftChimeraFormulaFull, position66)
			}
			return true
		l65:
			position, tokenIndex = position65, tokenIndex65
			return false
		},
		/* 11 GraftChimeraFormulaPart <- <(GraftChimeraChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position69, tokenIndex69 := position, tokenIndex
			{
				position70 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l69
				}
				if !_rules[rule_]() {
					goto l69
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l69
				}
				{
					position71, tokenIndex71 := position, tokenIndex
					if !_rules[rule_]() {
						goto l71
					}
					if !_rules[ruleInfraspGroup]() {
						goto l71
					}
					goto l72
				l71:
					position, tokenIndex = position71, tokenIndex71
				}
			l72:
				add(ruleGraftChimeraFormulaPart, position70)
			}
			return true
		l69:
			position, tokenIndex = position69, tokenIndex69
			return false
		},
		/* 12 NamedGenusGraftChimera <- <(GraftChimeraChar _? SingleName)> */
		func() bool {
			position73, tokenIndex73 := position, tokenIndex
			{
				position74 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l73
				}
				{
					position75, tokenIndex75 := position, tokenIndex
					if !_rules[rule_]() {
						goto l75
					}
					goto l76
				l75:
					position, tokenIndex = position75, tokenIndex75
				}
			l76:
				if !_rules[ruleSingleName]() {
					goto l73
				}
				add(ruleNamedGenusGraftChimera, position74)
			}
			return true
		l73:
			position, tokenIndex = position73, tokenIndex73
			return false
		},
		/* 13 CandidatusName <- <(Candidatus _ SingleName)> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if !_rules[ruleCandidatus]() {
					goto l77
				}
				if !_rules[rule_]() {
					goto l77
				}
				if !_rules[ruleSingleName]() {
					goto l77
				}
				add(ruleCandidatusName, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 14 Candidatus <- <('C' 'a' 'n' 'd' 'i' 'd' 'a' 't' 'u' 's')> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				if buffer[position] != rune('C') {
					goto l79
				}
				position++
				if buffer[position] != rune('a') {
					goto l79
				}
				position++
				if buffer[position] != rune('n') {
					goto l79
				}
				position++
				if buffer[position] != rune('d') {
					goto l79
				}
				position++
				if buffer[position] != rune('i') {
					goto l79
				}
				position++
				if buffer[position] != rune('d') {
					goto l79
				}
				position++
				if buffer[position] != rune('a') {
					goto l79
				}
				position++
				if buffer[position] != rune('t') {
					goto l79
				}
				position++
				if buffer[position] != rune('u') {
					goto l79
				}
				position++
				if buffer[position] != rune('s') {
					goto l79
				}
				position++
				add(ruleCandidatus, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 15 SingleName <- <(NameComp / NameApprox / NameSpecies / NameUninomial)> */
		func() bool {
			position81, tokenIndex81 := position, tokenIndex
			{
				position82 := position
				{
					position83, tokenIndex83 := position, tokenIndex
					if !_rules[ruleNameComp]() {
						goto l84
					}
					goto l83
				l84:
					position, tokenIndex = position83, tokenIndex83
					if !_rules[ruleNameApprox]() {
						goto l85
					}
					goto l83
				l85:
					position, tokenIndex = position83, tokenIndex83
					if !_rules[ruleNameSpecies]() {
						goto l86
					}
					goto l83
				l86:
					position, tokenIndex = position83, tokenIndex83
					if !_rules[ruleNameUninomial]() {
						goto l81
					}
				}
			l83:
				add(ruleSingleName, position82)
			}
			return true
		l81:
			position, tokenIndex = position81, tokenIndex81
			return false
		},
		/* 16 NameUninomial <- <((UninomialCombo / Uninomial) (_ CultivarWordGroup)?)> */
		func() bool {
			position87, tokenIndex87 := position, tokenIndex
			{
				position88 := position
				{
					position89, tokenIndex89 := position, tokenIndex
					if !_rules[ruleUninomialCombo]() {
						goto l90
					}
					goto l89
				l90:
					position, tokenIndex = position89, tokenIndex89
					if !_rules[ruleUninomial]() {
						goto l87
					}
				}
			l89:
				{
					position91, tokenIndex91 := position, tokenIndex
					if !_rules[rule_]() {
						goto l91
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l91
					}
					goto l92
				l91:
					position, tokenIndex = position91, tokenIndex91
				}
			l92:
				add(ruleNameUninomial, position88)
			}
			return true
		l87:
			position, tokenIndex = position87, tokenIndex87
			return false
		},
		/* 17 NameApprox <- <(GenusWord (_ SpeciesEpithet)? _ Approximation ApproxNameIgnored)> */
		func() bool {
			position93, tokenIndex93 := position, tokenIndex
			{
				position94 := position
				if !_rules[ruleGenusWord]() {
					goto l93
				}
				{
					position95, tokenIndex95 := position, tokenIndex
					if !_rules[rule_]() {
						goto l95
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l95
					}
					goto l96
				l95:
					position, tokenIndex = position95, tokenIndex95
				}
			l96:
				if !_rules[rule_]() {
					goto l93
				}
				if !_rules[ruleApproximation]() {
					goto l93
				}
				if !_rules[ruleApproxNameIgnored]() {
					goto l93
				}
				add(ruleNameApprox, position94)
			}
			return true
		l93:
			position, tokenIndex = position93, tokenIndex93
			return false
		},
		/* 18 NameComp <- <(NameCompIsp / NameCompSp)> */
		func() bool {
			position97, tokenIndex97 := position, tokenIndex
			{
				position98 := position
				{
					position99, tokenIndex99 := position, tokenIndex
					if !_rules[ruleNameCompIsp]() {
						goto l100
					}
					goto l99
				l100:
					position, tokenIndex = position99, tokenIndex99
					if !_rules[ruleNameCompSp]() {
						goto l97
					}
				}
			l99:
				add(ruleNameComp, position98)
			}
			return true
		l97:
			position, tokenIndex = position97, tokenIndex97
			return false
		},
		/* 19 NameCompSp <- <(GenusWord _ Comparison (_ SpeciesEpithet)?)> */
		func() bool {
			position101, tokenIndex101 := position, tokenIndex
			{
				position102 := position
				if !_rules[ruleGenusWord]() {
					goto l101
				}
				if !_rules[rule_]() {
					goto l101
				}
				if !_rules[ruleComparison]() {
					goto l101
				}
				{
					position103, tokenIndex103 := position, tokenIndex
					if !_rules[rule_]() {
						goto l103
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l103
					}
					goto l104
				l103:
					position, tokenIndex = position103, tokenIndex103
				}
			l104:
				add(ruleNameCompSp, position102)
			}
			return true
		l101:
			position, tokenIndex = position101, tokenIndex101
			return false
		},
		/* 20 NameCompIsp <- <(GenusWord _ SpeciesEpithet _ Comparison (_ InfraspEpithet)?)> */
		func() bool {
			position105, tokenIndex105 := position, tokenIndex
			{
				position106 := position
				if !_rules[ruleGenusWord]() {
					goto l105
				}
				if !_rules[rule_]() {
					goto l105
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l105
				}
				if !_rules[rule_]() {
					goto l105
				}
				if !_rules[ruleComparison]() {
					goto l105
				}
				{
					position107, tokenIndex107 := position, tokenIndex
					if !_rules[rule_]() {
						goto l107
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l107
					}
					goto l108
				l107:
					position, tokenIndex = position107, tokenIndex107
				}
			l108:
				add(ruleNameCompIsp, position106)
			}
			return true
		l105:
			position, tokenIndex = position105, tokenIndex105
			return false
		},
		/* 21 NameSpecies <- <(GenusWord (_? (Subgenus / SubgenusOrSuperspecies))? _ SpeciesEpithet (_ InfraspGroup)? (_ CultivarWordGroup)?)> */
		func() bool {
			position109, tokenIndex109 := position, tokenIndex
			{
				position110 := position
				if !_rules[ruleGenusWord]() {
					goto l109
				}
				{
					position111, tokenIndex111 := position, tokenIndex
					{
						position113, tokenIndex113 := position, tokenIndex
						if !_rules[rule_]() {
							goto l113
						}
						goto l114
					l113:
						position, tokenIndex = position113, tokenIndex113
					}
				l114:
					{
						position115, tokenIndex115 := position, tokenIndex
						if !_rules[ruleSubgenus]() {
							goto l116
						}
						goto l115
					l116:
						position, tokenIndex = position115, tokenIndex115
						if !_rules[ruleSubgenusOrSuperspecies]() {
							goto l111
						}
					}
				l115:
					goto l112
				l111:
					position, tokenIndex = position111, tokenIndex111
				}
			l112:
				if !_rules[rule_]() {
					goto l109
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l109
				}
				{
					position117, tokenIndex117 := position, tokenIndex
					if !_rules[rule_]() {
						goto l117
					}
					if !_rules[ruleInfraspGroup]() {
						goto l117
					}
					goto l118
				l117:
					position, tokenIndex = position117, tokenIndex117
				}
			l118:
				{
					position119, tokenIndex119 := position, tokenIndex
					if !_rules[rule_]() {
						goto l119
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l119
					}
					goto l120
				l119:
					position, tokenIndex = position119, tokenIndex119
				}
			l120:
				add(ruleNameSpecies, position110)
			}
			return true
		l109:
			position, tokenIndex = position109, tokenIndex109
			return false
		},
		/* 22 GenusWord <- <((AbbrGenus / UninomialWord) !(_ AuthorWord))> */
		func() bool {
			position121, tokenIndex121 := position, tokenIndex
			{
				position122 := position
				{
					position123, tokenIndex123 := position, tokenIndex
					if !_rules[ruleAbbrGenus]() {
						goto l124
					}
					goto l123
				l124:
					position, tokenIndex = position123, tokenIndex123
					if !_rules[ruleUninomialWord]() {
						goto l121
					}
				}
			l123:
				{
					position125, tokenIndex125 := position, tokenIndex
					if !_rules[rule_]() {
						goto l125
					}
					if !_rules[ruleAuthorWord]() {
						goto l125
					}
					goto l121
				l125:
					position, tokenIndex = position125, tokenIndex125
				}
				add(ruleGenusWord, position122)
			}
			return true
		l121:
			position, tokenIndex = position121, tokenIndex121
			return false
		},
		/* 23 InfraspGroup <- <(InfraspEpithet (_ InfraspEpithet)? (_ InfraspEpithet)?)> */
		func() bool {
			position126, tokenIndex126 := position, tokenIndex
			{
				position127 := position
				if !_rules[ruleInfraspEpithet]() {
					goto l126
				}
				{
					position128, tokenIndex128 := position, tokenIndex
					if !_rules[rule_]() {
						goto l128
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l128
					}
					goto l129
				l128:
					position, tokenIndex = position128, tokenIndex128
				}
			l129:
				{
					position130, tokenIndex130 := position, tokenIndex
					if !_rules[rule_]() {
						goto l130
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l130
					}
					goto l131
				l130:
					position, tokenIndex = position130, tokenIndex130
				}
			l131:
				add(ruleInfraspGroup, position127)
			}
			return true
		l126:
			position, tokenIndex = position126, tokenIndex126
			return false
		},
		/* 24 InfraspEpithet <- <((Rank _?)? !(AuthorEx / AuthorIn) Word (_ IgnoredWord)? (_? Authorship)?)> */
		func() bool {
			position132, tokenIndex132 := position, tokenIndex
			{
				position133 := position
				{
					position134, tokenIndex134 := position, tokenIndex
					if !_rules[ruleRank]() {
						goto l134
					}
					{
						position136, tokenIndex136 := position, tokenIndex
						if !_rules[rule_]() {
							goto l136
						}
						goto l137
					l136:
						position, tokenIndex = position136, tokenIndex136
					}
				l137:
					goto l135
				l134:
					position, tokenIndex = position134, tokenIndex134
				}
			l135:
				{
					position138, tokenIndex138 := position, tokenIndex
					{
						position139, tokenIndex139 := position, tokenIndex
						if !_rules[ruleAuthorEx]() {
							goto l140
						}
						goto l139
					l140:
						position, tokenIndex = position139, tokenIndex139
						if !_rules[ruleAuthorIn]() {
							goto l138
						}
					}
				l139:
					goto l132
				l138:
					position, tokenIndex = position138, tokenIndex138
				}
				if !_rules[ruleWord]() {
					goto l132
				}
				{
					position141, tokenIndex141 := position, tokenIndex
					if !_rules[rule_]() {
						goto l141
					}
					if !_rules[ruleIgnoredWord]() {
						goto l141
					}
					goto l142
				l141:
					position, tokenIndex = position141, tokenIndex141
				}
			l142:
				{
					position143, tokenIndex143 := position, tokenIndex
					{
						position145, tokenIndex145 := position, tokenIndex
						if !_rules[rule_]() {
							goto l145
						}
						goto l146
					l145:
						position, tokenIndex = position145, tokenIndex145
					}
				l146:
					if !_rules[ruleAuthorship]() {
						goto l143
					}
					goto l144
				l143:
					position, tokenIndex = position143, tokenIndex143
				}
			l144:
				add(ruleInfraspEpithet, position133)
			}
			return true
		l132:
			position, tokenIndex = position132, tokenIndex132
			return false
		},
		/* 25 CultivarWordGroup <- <(((RankCultivar _)? CultivarApostrophe CultivarRecursive CultivarApostrophe) / (RankCultivar _ Cultivar))> */
		func() bool {
			position147, tokenIndex147 := position, tokenIndex
			{
				position148 := position
				{
					position149, tokenIndex149 := position, tokenIndex
					{
						position151, tokenIndex151 := position, tokenIndex
						if !_rules[ruleRankCultivar]() {
							goto l151
						}
						if !_rules[rule_]() {
							goto l151
						}
						goto l152
					l151:
						position, tokenIndex = position151, tokenIndex151
					}
				l152:
					if !_rules[ruleCultivarApostrophe]() {
						goto l150
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l150
					}
					if !_rules[ruleCultivarApostrophe]() {
						goto l150
					}
					goto l149
				l150:
					position, tokenIndex = position149, tokenIndex149
					if !_rules[ruleRankCultivar]() {
						goto l147
					}
					if !_rules[rule_]() {
						goto l147
					}
					if !_rules[ruleCultivar]() {
						goto l147
					}
				}
			l149:
				add(ruleCultivarWordGroup, position148)
			}
			return true
		l147:
			position, tokenIndex = position147, tokenIndex147
			return false
		},
		/* 26 Cultivar <- <NotHybridChar+> */
		func() bool {
			position153, tokenIndex153 := position, tokenIndex
			{
				position154 := position
				if !_rules[ruleNotHybridChar]() {
					goto l153
				}
			l155:
				{
					position156, tokenIndex156 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l156
					}
					goto l155
				l156:
					position, tokenIndex = position156, tokenIndex156
				}
				add(ruleCultivar, position154)
			}
			return true
		l153:
			position, tokenIndex = position153, tokenIndex153
			return false
		},
		/* 27 RankCultivar <- <('c' 'v' '.'?)> */
		func() bool {
			position157, tokenIndex157 := position, tokenIndex
			{
				position158 := position
				if buffer[position] != rune('c') {
					goto l157
				}
				position++
				if buffer[position] != rune('v') {
					goto l157
				}
				position++
				{
					position159, tokenIndex159 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l159
					}
					position++
					goto l160
				l159:
					position, tokenIndex = position159, tokenIndex159
				}
			l160:
				add(ruleRankCultivar, position158)
			}
			return true
		l157:
			position, tokenIndex = position157, tokenIndex157
			return false
		},
		/* 28 NotHybridChar <- <(!(_ HybridChar) .)> */
		func() bool {
			position161, tokenIndex161 := position, tokenIndex
			{
				position162 := position
				{
					position163, tokenIndex163 := position, tokenIndex
					if !_rules[rule_]() {
						goto l163
					}
					if !_rules[ruleHybridChar]() {
						goto l163
					}
					goto l161
				l163:
					position, tokenIndex = position163, tokenIndex163
				}
				if !matchDot() {
					goto l161
				}
				add(ruleNotHybridChar, position162)
			}
			return true
		l161:
			position, tokenIndex = position161, tokenIndex161
			return false
		},
		/* 29 CultivarRecursive <- <((NotHybridChar CultivarRecursive) / &CultivarApostrophe)> */
		func() bool {
			position164, tokenIndex164 := position, tokenIndex
			{
				position165 := position
				{
					position166, tokenIndex166 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l167
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l167
					}
					goto l166
				l167:
					position, tokenIndex = position166, tokenIndex166
					{
						position168, tokenIndex168 := position, tokenIndex
						if !_rules[ruleCultivarApostrophe]() {
							goto l164
						}
						position, tokenIndex = position168, tokenIndex168
					}
				}
			l166:
				add(ruleCultivarRecursive, position165)
			}
			return true
		l164:
			position, tokenIndex = position164, tokenIndex164
			return false
		},
		/* 30 CultivarApostrophe <- <('\'' / '‘' / '’' / '"' / '“' / '”')> */
		func() bool {
			position169, tokenIndex169 := position, tokenIndex
			{
				position170 := position
				{
					position171, tokenIndex171 := position, tokenIndex
					if buffer[position] != rune('\'') {
						goto l172
					}
					position++
					goto l171
				l172:
					position, tokenIndex = position171, tokenIndex171
					if buffer[position] != rune('‘') {
						goto l173
					}
					position++
					goto l171
				l173:
					position, tokenIndex = position171, tokenIndex171
					if buffer[position] != rune('’') {
						goto l174
					}
					position++
					goto l171
				l174:
					position, tokenIndex = position171, tokenIndex171
					if buffer[position] != rune('"') {
						goto l175
					}
					position++
					goto l171
				l175:
					position, tokenIndex = position171, tokenIndex171
					if buffer[position] != rune('“') {
						goto l176
					}
					position++
					goto l171
				l176:
					position, tokenIndex = position171, tokenIndex171
					if buffer[position] != rune('”') {
						goto l169
					}
					position++
				}
			l171:
				add(ruleCultivarApostrophe, position170)
			}
			return true
		l169:
			position, tokenIndex = position169, tokenIndex169
			return false
		},
		/* 31 SpeciesEpithet <- <(!(AuthorEx / AuthorIn) Word (_ IgnoredWord)? (_? Authorship)?)> */
		func() bool {
			position177, tokenIndex177 := position, tokenIndex
			{
				position178 := position
				{
					position179, tokenIndex179 := position, tokenIndex
					{
						position180, tokenIndex180 := position, tokenIndex
						if !_rules[ruleAuthorEx]() {
							goto l181
						}
						goto l180
					l181:
						position, tokenIndex = position180, tokenIndex180
						if !_rules[ruleAuthorIn]() {
							goto l179
						}
					}
				l180:
					goto l177
				l179:
					position, tokenIndex = position179, tokenIndex179
				}
				if !_rules[ruleWord]() {
					goto l177
				}
				{
					position182, tokenIndex182 := position, tokenIndex
					if !_rules[rule_]() {
						goto l182
					}
					if !_rules[ruleIgnoredWord]() {
						goto l182
					}
					goto l183
				l182:
					position, tokenIndex = position182, tokenIndex182
				}
			l183:
				{
					position184, tokenIndex184 := position, tokenIndex
					{
						position186, tokenIndex186 := position, tokenIndex
						if !_rules[rule_]() {
							goto l186
						}
						goto l187
					l186:
						position, tokenIndex = position186, tokenIndex186
					}
				l187:
					if !_rules[ruleAuthorship]() {
						goto l184
					}
					goto l185
				l184:
					position, tokenIndex = position184, tokenIndex184
				}
			l185:
				add(ruleSpeciesEpithet, position178)
			}
			return true
		l177:
			position, tokenIndex = position177, tokenIndex177
			return false
		},
		/* 32 IgnoredWord <- <(('m' 'i' 'h' 'i' '.') / ('m' 'i' 'h' 'i'))> */
		func() bool {
			position188, tokenIndex188 := position, tokenIndex
			{
				position189 := position
				{
					position190, tokenIndex190 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l191
					}
					position++
					if buffer[position] != rune('i') {
						goto l191
					}
					position++
					if buffer[position] != rune('h') {
						goto l191
					}
					position++
					if buffer[position] != rune('i') {
						goto l191
					}
					position++
					if buffer[position] != rune('.') {
						goto l191
					}
					position++
					goto l190
				l191:
					position, tokenIndex = position190, tokenIndex190
					if buffer[position] != rune('m') {
						goto l188
					}
					position++
					if buffer[position] != rune('i') {
						goto l188
					}
					position++
					if buffer[position] != rune('h') {
						goto l188
					}
					position++
					if buffer[position] != rune('i') {
						goto l188
					}
					position++
				}
			l190:
				add(ruleIgnoredWord, position189)
			}
			return true
		l188:
			position, tokenIndex = position188, tokenIndex188
			return false
		},
		/* 33 Comparison <- <('c' 'f' '.'? &SpaceCharEOI)> */
		func() bool {
			position192, tokenIndex192 := position, tokenIndex
			{
				position193 := position
				if buffer[position] != rune('c') {
					goto l192
				}
				position++
				if buffer[position] != rune('f') {
					goto l192
				}
				position++
				{
					position194, tokenIndex194 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l194
					}
					position++
					goto l195
				l194:
					position, tokenIndex = position194, tokenIndex194
				}
			l195:
				{
					position196, tokenIndex196 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l192
					}
					position, tokenIndex = position196, tokenIndex196
				}
				add(ruleComparison, position193)
			}
			return true
		l192:
			position, tokenIndex = position192, tokenIndex192
			return false
		},
		/* 34 Rank <- <((RankForma / RankVar / RankSsp / RankOther / RankOtherUncommon / RankAgamo / RankNotho) (_? LowerGreek ('.' / &SpaceCharEOI))?)> */
		func() bool {
			position197, tokenIndex197 := position, tokenIndex
			{
				position198 := position
				{
					position199, tokenIndex199 := position, tokenIndex
					if !_rules[ruleRankForma]() {
						goto l200
					}
					goto l199
				l200:
					position, tokenIndex = position199, tokenIndex199
					if !_rules[ruleRankVar]() {
						goto l201
					}
					goto l199
				l201:
					position, tokenIndex = position199, tokenIndex199
					if !_rules[ruleRankSsp]() {
						goto l202
					}
					goto l199
				l202:
					position, tokenIndex = position199, tokenIndex199
					if !_rules[ruleRankOther]() {
						goto l203
					}
					goto l199
				l203:
					position, tokenIndex = position199, tokenIndex199
					if !_rules[ruleRankOtherUncommon]() {
						goto l204
					}
					goto l199
				l204:
					position, tokenIndex = position199, tokenIndex199
					if !_rules[ruleRankAgamo]() {
						goto l205
					}
					goto l199
				l205:
					position, tokenIndex = position199, tokenIndex199
					if !_rules[ruleRankNotho]() {
						goto l197
					}
				}
			l199:
				{
					position206, tokenIndex206 := position, tokenIndex
					{
						position208, tokenIndex208 := position, tokenIndex
						if !_rules[rule_]() {
							goto l208
						}
						goto l209
					l208:
						position, tokenIndex = position208, tokenIndex208
					}
				l209:
					if !_rules[ruleLowerGreek]() {
						goto l206
					}
					{
						position210, tokenIndex210 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l211
						}
						position++
						goto l210
					l211:
						position, tokenIndex = position210, tokenIndex210
						{
							position212, tokenIndex212 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l206
							}
							position, tokenIndex = position212, tokenIndex212
						}
					}
				l210:
					goto l207
				l206:
					position, tokenIndex = position206, tokenIndex206
				}
			l207:
				add(ruleRank, position198)
			}
			return true
		l197:
			position, tokenIndex = position197, tokenIndex197
			return false
		},
		/* 35 RankNotho <- <((('n' 'o' 't' 'h' 'o' (('v' 'a' 'r') / ('f' 'o') / 'f' / ('s' 'u' 'b' 's' 'p') / ('s' 's' 'p') / ('s' 'p') / ('m' 'o' 'r' 't' 'h') / ('s' 'u' 'p' 's' 'p') / ('s' 'u'))) / ('n' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position213, tokenIndex213 := position, tokenIndex
			{
				position214 := position
				{
					position215, tokenIndex215 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l216
					}
					position++
					if buffer[position] != rune('o') {
						goto l216
					}
					position++
					if buffer[position] != rune('t') {
						goto l216
					}
					position++
					if buffer[position] != rune('h') {
						goto l216
					}
					position++
					if buffer[position] != rune('o') {
						goto l216
					}
					position++
					{
						position217, tokenIndex217 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l218
						}
						position++
						if buffer[position] != rune('a') {
							goto l218
						}
						position++
						if buffer[position] != rune('r') {
							goto l218
						}
						position++
						goto l217
					l218:
						position, tokenIndex = position217, tokenIndex217
						if buffer[position] != rune('f') {
							goto l219
						}
						position++
						if buffer[position] != rune('o') {
							goto l219
						}
						position++
						goto l217
					l219:
						position, tokenIndex = position217, tokenIndex217
						if buffer[position] != rune('f') {
							goto l220
						}
						position++
						goto l217
					l220:
						position, tokenIndex = position217, tokenIndex217
						if buffer[position] != rune('s') {
							goto l221
						}
						position++
						if buffer[position] != rune('u') {
							goto l221
						}
						position++
						if buffer[position] != rune('b') {
							goto l221
						}
						position++
						if buffer[position] != rune('s') {
							goto l221
						}
						position++
						if buffer[position] != rune('p') {
							goto l221
						}
						position++
						goto l217
					l221:
						position, tokenIndex = position217, tokenIndex217
						if buffer[position] != rune('s') {
							goto l222
						}
						position++
						if buffer[position] != rune('s') {
							goto l222
						}
						position++
						if buffer[position] != rune('p') {
							goto l222
						}
						position++
						goto l217
					l222:
						position, tokenIndex = position217, tokenIndex217
						if buffer[position] != rune('s') {
							goto l223
						}
						position++
						if buffer[position] != rune('p') {
							goto l223
						}
						position++
						goto l217
					l223:
						position, tokenIndex = position217, tokenIndex217
						if buffer[position] != rune('m') {
							goto l224
						}
						position++
						if buffer[position] != rune('o') {
							goto l224
						}
						position++
						if buffer[position] != rune('r') {
							goto l224
						}
						position++
						if buffer[position] != rune('t') {
							goto l224
						}
						position++
						if buffer[position] != rune('h') {
							goto l224
						}
						position++
						goto l217
					l224:
						position, tokenIndex = position217, tokenIndex217
						if buffer[position] != rune('s') {
							goto l225
						}
						position++
						if buffer[position] != rune('u') {
							goto l225
						}
						position++
						if buffer[position] != rune('p') {
							goto l225
						}
						position++
						if buffer[position] != rune('s') {
							goto l225
						}
						position++
						if buffer[position] != rune('p') {
							goto l225
						}
						position++
						goto l217
					l225:
						position, tokenIndex = position217, tokenIndex217
						if buffer[position] != rune('s') {
							goto l216
						}
						position++
						if buffer[position] != rune('u') {
							goto l216
						}
						position++
					}
				l217:
					goto l215
				l216:
					position, tokenIndex = position215, tokenIndex215
					if buffer[position] != rune('n') {
						goto l213
					}
					position++
					if buffer[position] != rune('v') {
						goto l213
					}
					position++
					if buffer[position] != rune('a') {
						goto l213
					}
					position++
					if buffer[position] != rune('r') {
						goto l213
					}
					position++
				}
			l215:
				{
					position226, tokenIndex226 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l227
					}
					position++
					goto l226
				l227:
					position, tokenIndex = position226, tokenIndex226
					{
						position228, tokenIndex228 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l213
						}
						position, tokenIndex = position228, tokenIndex228
					}
				}
			l226:
				add(ruleRankNotho, position214)
			}
			return true
		l213:
			position, tokenIndex = position213, tokenIndex213
			return false
		},
		/* 36 RankOtherUncommon <- <(('*' / ('n' 'a' 't' 'i' 'o') / ('n' 'a' 't' '.') / ('n' 'a' 't') / ('u' 'n' 'r' '.') / ('f' '.' 's' 'p') / ('p' 'r' 'o' 'l' '.') / 'α' / ('β' 'β') / 'β' / 'γ' / 'δ' / 'ε' / 'φ' / 'θ' / 'μ' / ('a' '.') / ('b' '.') / ('c' '.') / ('d' '.') / ('e' '.') / ('g' '.') / ('k' '.') / ('m' 'u' 't' '.')) &SpaceCharEOI)> */
		func() bool {
			position229, tokenIndex229 := position, tokenIndex
			{
				position230 := position
				{
					position231, tokenIndex231 := position, tokenIndex
					if buffer[position] != rune('*') {
						goto l232
					}
					position++
					goto l231
				l232:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('n') {
						goto l233
					}
					position++
					if buffer[position] != rune('a') {
						goto l233
					}
					position++
					if buffer[position] != rune('t') {
						goto l233
					}
					position++
					if buffer[position] != rune('i') {
						goto l233
					}
					position++
					if buffer[position] != rune('o') {
						goto l233
					}
					position++
					goto l231
				l233:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('n') {
						goto l234
					}
					position++
					if buffer[position] != rune('a') {
						goto l234
					}
					position++
					if buffer[position] != rune('t') {
						goto l234
					}
					position++
					if buffer[position] != rune('.') {
						goto l234
					}
					position++
					goto l231
				l234:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('n') {
						goto l235
					}
					position++
					if buffer[position] != rune('a') {
						goto l235
					}
					position++
					if buffer[position] != rune('t') {
						goto l235
					}
					position++
					goto l231
				l235:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('u') {
						goto l236
					}
					position++
					if buffer[position] != rune('n') {
						goto l236
					}
					position++
					if buffer[position] != rune('r') {
						goto l236
					}
					position++
					if buffer[position] != rune('.') {
						goto l236
					}
					position++
					goto l231
				l236:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('f') {
						goto l237
					}
					position++
					if buffer[position] != rune('.') {
						goto l237
					}
					position++
					if buffer[position] != rune('s') {
						goto l237
					}
					position++
					if buffer[position] != rune('p') {
						goto l237
					}
					position++
					goto l231
				l237:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('p') {
						goto l238
					}
					position++
					if buffer[position] != rune('r') {
						goto l238
					}
					position++
					if buffer[position] != rune('o') {
						goto l238
					}
					position++
					if buffer[position] != rune('l') {
						goto l238
					}
					position++
					if buffer[position] != rune('.') {
						goto l238
					}
					position++
					goto l231
				l238:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('α') {
						goto l239
					}
					position++
					goto l231
				l239:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('β') {
						goto l240
					}
					position++
					if buffer[position] != rune('β') {
						goto l240
					}
					position++
					goto l231
				l240:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('β') {
						goto l241
					}
					position++
					goto l231
				l241:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('γ') {
						goto l242
					}
					position++
					goto l231
				l242:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('δ') {
						goto l243
					}
					position++
					goto l231
				l243:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('ε') {
						goto l244
					}
					position++
					goto l231
				l244:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('φ') {
						goto l245
					}
					position++
					goto l231
				l245:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('θ') {
						goto l246
					}
					position++
					goto l231
				l246:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('μ') {
						goto l247
					}
					position++
					goto l231
				l247:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('a') {
						goto l248
					}
					position++
					if buffer[position] != rune('.') {
						goto l248
					}
					position++
					goto l231
				l248:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('b') {
						goto l249
					}
					position++
					if buffer[position] != rune('.') {
						goto l249
					}
					position++
					goto l231
				l249:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('c') {
						goto l250
					}
					position++
					if buffer[position] != rune('.') {
						goto l250
					}
					position++
					goto l231
				l250:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('d') {
						goto l251
					}
					position++
					if buffer[position] != rune('.') {
						goto l251
					}
					position++
					goto l231
				l251:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('e') {
						goto l252
					}
					position++
					if buffer[position] != rune('.') {
						goto l252
					}
					position++
					goto l231
				l252:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('g') {
						goto l253
					}
					position++
					if buffer[position] != rune('.') {
						goto l253
					}
					position++
					goto l231
				l253:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('k') {
						goto l254
					}
					position++
					if buffer[position] != rune('.') {
						goto l254
					}
					position++
					goto l231
				l254:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('m') {
						goto l229
					}
					position++
					if buffer[position] != rune('u') {
						goto l229
					}
					position++
					if buffer[position] != rune('t') {
						goto l229
					}
					position++
					if buffer[position] != rune('.') {
						goto l229
					}
					position++
				}
			l231:
				{
					position255, tokenIndex255 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l229
					}
					position, tokenIndex = position255, tokenIndex255
				}
				add(ruleRankOtherUncommon, position230)
			}
			return true
		l229:
			position, tokenIndex = position229, tokenIndex229
			return false
		},
		/* 37 RankOther <- <((('m' 'o' 'r' 'p' 'h') / ('c' 'o' 'n' 'v' 'a' 'r') / ('p' 's' 'e' 'u' 'd' 'o' 'v' 'a' 'r') / ('s' 'e' 'c' 't') / ('s' 'e' 'r') / ('s' 'u' 'b' 'v' 'a' 'r') / ('s' 'u' 'b' 'f') / ('r' 'a' 'c' 'e') / ('p' 'v') / ('p' 'a' 't' 'h' 'o' 'v' 'a' 'r') / ('a' 'b' '.' (_? ('n' '.'))?) / ('s' 't')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position256, tokenIndex256 := position, tokenIndex
			{
				position257 := position
				{
					position258, tokenIndex258 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l259
					}
					position++
					if buffer[position] != rune('o') {
						goto l259
					}
					position++
					if buffer[position] != rune('r') {
						goto l259
					}
					position++
					if buffer[position] != rune('p') {
						goto l259
					}
					position++
					if buffer[position] != rune('h') {
						goto l259
					}
					position++
					goto l258
				l259:
					position, tokenIndex = position258, tokenIndex258
					if buffer[position] != rune('c') {
						goto l260
					}
					position++
					if buffer[position] != rune('o') {
						goto l260
					}
					position++
					if buffer[position] != rune('n') {
						goto l260
					}
					position++
					if buffer[position] != rune('v') {
						goto l260
					}
					position++
					if buffer[position] != rune('a') {
						goto l260
					}
					position++
					if buffer[position] != rune('r') {
						goto l260
					}
					position++
					goto l258
				l260:
					position, tokenIndex = position258, tokenIndex258
					if buffer[position] != rune('p') {
						goto l261
					}
					position++
					if buffer[position] != rune('s') {
						goto l261
					}
					position++
					if buffer[position] != rune('e') {
						goto l261
					}
					position++
					if buffer[position] != rune('u') {
						goto l261
					}
					position++
					if buffer[position] != rune('d') {
						goto l261
					}
					position++
					if buffer[position] != rune('o') {
						goto l261
					}
					position++
					if buffer[position] != rune('v') {
						goto l261
					}
					position++
					if buffer[position] != rune('a') {
						goto l261
					}
					position++
					if buffer[position] != rune('r') {
						goto l261
					}
					position++
					goto l258
				l261:
					position, tokenIndex = position258, tokenIndex258
					if buffer[position] != rune('s') {
						goto l262
					}
					position++
					if buffer[position] != rune('e') {
						goto l262
					}
					position++
					if buffer[position] != rune('c') {
						goto l262
					}
					position++
					if buffer[position] != rune('t') {
						goto l262
					}
					position++
					goto l258
				l262:
					position, tokenIndex = position258, tokenIndex258
					if buffer[position] != rune('s') {
						goto l263
					}
					position++
					if buffer[position] != rune('e') {
						goto l263
					}
					position++
					if buffer[position] != rune('r') {
						goto l263
					}
					position++
					goto l258
				l263:
					position, tokenIndex = position258, tokenIndex258
					if buffer[position] != rune('s') {
						goto l264
					}
					position++
					if buffer[position] != rune('u') {
						goto l264
					}
					position++
					if buffer[position] != rune('b') {
						goto l264
					}
					position++
					if buffer[position] != rune('v') {
						goto l264
					}
					position++
					if buffer[position] != rune('a') {
						goto l264
					}
					position++
					if buffer[position] != rune('r') {
						goto l264
					}
					position++
					goto l258
				l264:
					position, tokenIndex = position258, tokenIndex258
					if buffer[position] != rune('s') {
						goto l265
					}
					position++
					if buffer[position] != rune('u') {
						goto l265
					}
					position++
					if buffer[position] != rune('b') {
						goto l265
					}
					position++
					if buffer[position] != rune('f') {
						goto l265
					}
					position++
					goto l258
				l265:
					position, tokenIndex = position258, tokenIndex258
					if buffer[position] != rune('r') {
						goto l266
					}
					position++
					if buffer[position] != rune('a') {
						goto l266
					}
					position++
					if buffer[position] != rune('c') {
						goto l266
					}
					position++
					if buffer[position] != rune('e') {
						goto l266
					}
					position++
					goto l258
				l266:
					position, tokenIndex = position258, tokenIndex258
					if buffer[position] != rune('p') {
						goto l267
					}
					position++
					if buffer[position] != rune('v') {
						goto l267
					}
					position++
					goto l258
				l267:
					position, tokenIndex = position258, tokenIndex258
					if buffer[position] != rune('p') {
						goto l268
					}
					position++
					if buffer[position] != rune('a') {
						goto l268
					}
					position++
					if buffer[position] != rune('t') {
						goto l268
					}
					position++
					if buffer[position] != rune('h') {
						goto l268
					}
					position++
					if buffer[position] != rune('o') {
						goto l268
					}
					position++
					if buffer[position] != rune('v') {
						goto l268
					}
					position++
					if buffer[position] != rune('a') {
						goto l268
					}
					position++
					if buffer[position] != rune('r') {
						goto l268
					}
					position++
					goto l258
				l268:
					position, tokenIndex = position258, tokenIndex258
					if buffer[position] != rune('a') {
						goto l269
					}
					position++
					if buffer[position] != rune('b') {
						goto l269
					}
					position++
					if buffer[position] != rune('.') {
						goto l269
					}
					position++
					{
						position270, tokenIndex270 := position, tokenIndex
						{
							position272, tokenIndex272 := position, tokenIndex
							if !_rules[rule_]() {
								goto l272
							}
							goto l273
						l272:
							position, tokenIndex = position272, tokenIndex272
						}
					l273:
						if buffer[position] != rune('n') {
							goto l270
						}
						position++
						if buffer[position] != rune('.') {
							goto l270
						}
						position++
						goto l271
					l270:
						position, tokenIndex = position270, tokenIndex270
					}
				l271:
					goto l258
				l269:
					position, tokenIndex = position258, tokenIndex258
					if buffer[position] != rune('s') {
						goto l256
					}
					position++
					if buffer[position] != rune('t') {
						goto l256
					}
					position++
				}
			l258:
				{
					position274, tokenIndex274 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l275
					}
					position++
					goto l274
				l275:
					position, tokenIndex = position274, tokenIndex274
					{
						position276, tokenIndex276 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l256
						}
						position, tokenIndex = position276, tokenIndex276
					}
				}
			l274:
				add(ruleRankOther, position257)
			}
			return true
		l256:
			position, tokenIndex = position256, tokenIndex256
			return false
		},
		/* 38 RankVar <- <((('v' 'a' 'r' 'i' 'e' 't' 'y') / ('[' 'v' 'a' 'r' '.' ']') / ('v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position277, tokenIndex277 := position, tokenIndex
			{
				position278 := position
				{
					position279, tokenIndex279 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l280
					}
					position++
					if buffer[position] != rune('a') {
						goto l280
					}
					position++
					if buffer[position] != rune('r') {
						goto l280
					}
					position++
					if buffer[position] != rune('i') {
						goto l280
					}
					position++
					if buffer[position] != rune('e') {
						goto l280
					}
					position++
					if buffer[position] != rune('t') {
						goto l280
					}
					position++
					if buffer[position] != rune('y') {
						goto l280
					}
					position++
					goto l279
				l280:
					position, tokenIndex = position279, tokenIndex279
					if buffer[position] != rune('[') {
						goto l281
					}
					position++
					if buffer[position] != rune('v') {
						goto l281
					}
					position++
					if buffer[position] != rune('a') {
						goto l281
					}
					position++
					if buffer[position] != rune('r') {
						goto l281
					}
					position++
					if buffer[position] != rune('.') {
						goto l281
					}
					position++
					if buffer[position] != rune(']') {
						goto l281
					}
					position++
					goto l279
				l281:
					position, tokenIndex = position279, tokenIndex279
					if buffer[position] != rune('v') {
						goto l277
					}
					position++
					if buffer[position] != rune('a') {
						goto l277
					}
					position++
					if buffer[position] != rune('r') {
						goto l277
					}
					position++
				}
			l279:
				{
					position282, tokenIndex282 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l283
					}
					position++
					goto l282
				l283:
					position, tokenIndex = position282, tokenIndex282
					{
						position284, tokenIndex284 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l277
						}
						position, tokenIndex = position284, tokenIndex284
					}
				}
			l282:
				add(ruleRankVar, position278)
			}
			return true
		l277:
			position, tokenIndex = position277, tokenIndex277
			return false
		},
		/* 39 RankForma <- <((('f' 'a') / ('f' 'o' 'r' 'm' 'a') / ('f' 'm' 'a') / ('f' 'm') / ('f' 'o' 'r' 'm') / ('f' 'o') / 'f') ('.' / &SpaceCharEOI))> */
		func() bool {
			position285, tokenIndex285 := position, tokenIndex
			{
				position286 := position
				{
					position287, tokenIndex287 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l288
					}
					position++
					if buffer[position] != rune('a') {
						goto l288
					}
					position++
					goto l287
				l288:
					position, tokenIndex = position287, tokenIndex287
					if buffer[position] != rune('f') {
						goto l289
					}
					position++
					if buffer[position] != rune('o') {
						goto l289
					}
					position++
					if buffer[position] != rune('r') {
						goto l289
					}
					position++
					if buffer[position] != rune('m') {
						goto l289
					}
					position++
					if buffer[position] != rune('a') {
						goto l289
					}
					position++
					goto l287
				l289:
					position, tokenIndex = position287, tokenIndex287
					if buffer[position] != rune('f') {
						goto l290
					}
					position++
					if buffer[position] != rune('m') {
						goto l290
					}
					position++
					if buffer[position] != rune('a') {
						goto l290
					}
					position++
					goto l287
				l290:
					position, tokenIndex = position287, tokenIndex287
					if buffer[position] != rune('f') {
						goto l291
					}
					position++
					if buffer[position] != rune('m') {
						goto l291
					}
					position++
					goto l287
				l291:
					position, tokenIndex = position287, tokenIndex287
					if buffer[position] != rune('f') {
						goto l292
					}
					position++
					if buffer[position] != rune('o') {
						goto l292
					}
					position++
					if buffer[position] != rune('r') {
						goto l292
					}
					position++
					if buffer[position] != rune('m') {
						goto l292
					}
					position++
					goto l287
				l292:
					position, tokenIndex = position287, tokenIndex287
					if buffer[position] != rune('f') {
						goto l293
					}
					position++
					if buffer[position] != rune('o') {
						goto l293
					}
					position++
					goto l287
				l293:
					position, tokenIndex = position287, tokenIndex287
					if buffer[position] != rune('f') {
						goto l285
					}
					position++
				}
			l287:
				{
					position294, tokenIndex294 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l295
					}
					position++
					goto l294
				l295:
					position, tokenIndex = position294, tokenIndex294
					{
						position296, tokenIndex296 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l285
						}
						position, tokenIndex = position296, tokenIndex296
					}
				}
			l294:
				add(ruleRankForma, position286)
			}
			return true
		l285:
			position, tokenIndex = position285, tokenIndex285
			return false
		},
		/* 40 RankSsp <- <((('s' 's' 'p') / ('s' 'u' 'b' 's' 'p' 'e' 'c') / ('s' 'u' 'b' 's' 'p')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position297, tokenIndex297 := position, tokenIndex
			{
				position298 := position
				{
					position299, tokenIndex299 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l300
					}
					position++
					if buffer[position] != rune('s') {
						goto l300
					}
					position++
					if buffer[position] != rune('p') {
						goto l300
					}
					position++
					goto l299
				l300:
					position, tokenIndex = position299, tokenIndex299
					if buffer[position] != rune('s') {
						goto l301
					}
					position++
					if buffer[position] != rune('u') {
						goto l301
					}
					position++
					if buffer[position] != rune('b') {
						goto l301
					}
					position++
					if buffer[position] != rune('s') {
						goto l301
					}
					position++
					if buffer[position] != rune('p') {
						goto l301
					}
					position++
					if buffer[position] != rune('e') {
						goto l301
					}
					position++
					if buffer[position] != rune('c') {
						goto l301
					}
					position++
					goto l299
				l301:
					position, tokenIndex = position299, tokenIndex299
					if buffer[position] != rune('s') {
						goto l297
					}
					position++
					if buffer[position] != rune('u') {
						goto l297
					}
					position++
					if buffer[position] != rune('b') {
						goto l297
					}
					position++
					if buffer[position] != rune('s') {
						goto l297
					}
					position++
					if buffer[position] != rune('p') {
						goto l297
					}
					position++
				}
			l299:
				{
					position302, tokenIndex302 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l303
					}
					position++
					goto l302
				l303:
					position, tokenIndex = position302, tokenIndex302
					{
						position304, tokenIndex304 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l297
						}
						position, tokenIndex = position304, tokenIndex304
					}
				}
			l302:
				add(ruleRankSsp, position298)
			}
			return true
		l297:
			position, tokenIndex = position297, tokenIndex297
			return false
		},
		/* 41 RankAgamo <- <((('a' 'g' 'a' 'm' 'o' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 's' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position305, tokenIndex305 := position, tokenIndex
			{
				position306 := position
				{
					position307, tokenIndex307 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l308
					}
					position++
					if buffer[position] != rune('g') {
						goto l308
					}
					position++
					if buffer[position] != rune('a') {
						goto l308
					}
					position++
					if buffer[position] != rune('m') {
						goto l308
					}
					position++
					if buffer[position] != rune('o') {
						goto l308
					}
					position++
					if buffer[position] != rune('s') {
						goto l308
					}
					position++
					if buffer[position] != rune('p') {
						goto l308
					}
					position++
					goto l307
				l308:
					position, tokenIndex = position307, tokenIndex307
					if buffer[position] != rune('a') {
						goto l309
					}
					position++
					if buffer[position] != rune('g') {
						goto l309
					}
					position++
					if buffer[position] != rune('a') {
						goto l309
					}
					position++
					if buffer[position] != rune('m') {
						goto l309
					}
					position++
					if buffer[position] != rune('o') {
						goto l309
					}
					position++
					if buffer[position] != rune('s') {
						goto l309
					}
					position++
					if buffer[position] != rune('s') {
						goto l309
					}
					position++
					if buffer[position] != rune('p') {
						goto l309
					}
					position++
					goto l307
				l309:
					position, tokenIndex = position307, tokenIndex307
					if buffer[position] != rune('a') {
						goto l305
					}
					position++
					if buffer[position] != rune('g') {
						goto l305
					}
					position++
					if buffer[position] != rune('a') {
						goto l305
					}
					position++
					if buffer[position] != rune('m') {
						goto l305
					}
					position++
					if buffer[position] != rune('o') {
						goto l305
					}
					position++
					if buffer[position] != rune('v') {
						goto l305
					}
					position++
					if buffer[position] != rune('a') {
						goto l305
					}
					position++
					if buffer[position] != rune('r') {
						goto l305
					}
					position++
				}
			l307:
				{
					position310, tokenIndex310 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l311
					}
					position++
					goto l310
				l311:
					position, tokenIndex = position310, tokenIndex310
					{
						position312, tokenIndex312 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l305
						}
						position, tokenIndex = position312, tokenIndex312
					}
				}
			l310:
				add(ruleRankAgamo, position306)
			}
			return true
		l305:
			position, tokenIndex = position305, tokenIndex305
			return false
		},
		/* 42 SubgenusOrSuperspecies <- <('(' _? NameLowerChar+ _? ')')> */
		func() bool {
			position313, tokenIndex313 := position, tokenIndex
			{
				position314 := position
				if buffer[position] != rune('(') {
					goto l313
				}
				position++
				{
					position315, tokenIndex315 := position, tokenIndex
					if !_rules[rule_]() {
						goto l315
					}
					goto l316
				l315:
					position, tokenIndex = position315, tokenIndex315
				}
			l316:
				if !_rules[ruleNameLowerChar]() {
					goto l313
				}
			l317:
				{
					position318, tokenIndex318 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l318
					}
					goto l317
				l318:
					position, tokenIndex = position318, tokenIndex318
				}
				{
					position319, tokenIndex319 := position, tokenIndex
					if !_rules[rule_]() {
						goto l319
					}
					goto l320
				l319:
					position, tokenIndex = position319, tokenIndex319
				}
			l320:
				if buffer[position] != rune(')') {
					goto l313
				}
				position++
				add(ruleSubgenusOrSuperspecies, position314)
			}
			return true
		l313:
			position, tokenIndex = position313, tokenIndex313
			return false
		},
		/* 43 UninomialCombo <- <(UninomialCombo1 / UninomialCombo2)> */
		func() bool {
			position321, tokenIndex321 := position, tokenIndex
			{
				position322 := position
				{
					position323, tokenIndex323 := position, tokenIndex
					if !_rules[ruleUninomialCombo1]() {
						goto l324
					}
					goto l323
				l324:
					position, tokenIndex = position323, tokenIndex323
					if !_rules[ruleUninomialCombo2]() {
						goto l321
					}
				}
			l323:
				add(ruleUninomialCombo, position322)
			}
			return true
		l321:
			position, tokenIndex = position321, tokenIndex321
			return false
		},
		/* 44 UninomialCombo1 <- <(UninomialWord _? Subgenus (_? Authorship)?)> */
		func() bool {
			position325, tokenIndex325 := position, tokenIndex
			{
				position326 := position
				if !_rules[ruleUninomialWord]() {
					goto l325
				}
				{
					position327, tokenIndex327 := position, tokenIndex
					if !_rules[rule_]() {
						goto l327
					}
					goto l328
				l327:
					position, tokenIndex = position327, tokenIndex327
				}
			l328:
				if !_rules[ruleSubgenus]() {
					goto l325
				}
				{
					position329, tokenIndex329 := position, tokenIndex
					{
						position331, tokenIndex331 := position, tokenIndex
						if !_rules[rule_]() {
							goto l331
						}
						goto l332
					l331:
						position, tokenIndex = position331, tokenIndex331
					}
				l332:
					if !_rules[ruleAuthorship]() {
						goto l329
					}
					goto l330
				l329:
					position, tokenIndex = position329, tokenIndex329
				}
			l330:
				add(ruleUninomialCombo1, position326)
			}
			return true
		l325:
			position, tokenIndex = position325, tokenIndex325
			return false
		},
		/* 45 UninomialCombo2 <- <((Uninomial _)? RankUninomial _ Uninomial)> */
		func() bool {
			position333, tokenIndex333 := position, tokenIndex
			{
				position334 := position
				{
					position335, tokenIndex335 := position, tokenIndex
					if !_rules[ruleUninomial]() {
						goto l335
					}
					if !_rules[rule_]() {
						goto l335
					}
					goto l336
				l335:
					position, tokenIndex = position335, tokenIndex335
				}
			l336:
				if !_rules[ruleRankUninomial]() {
					goto l333
				}
				if !_rules[rule_]() {
					goto l333
				}
				if !_rules[ruleUninomial]() {
					goto l333
				}
				add(ruleUninomialCombo2, position334)
			}
			return true
		l333:
			position, tokenIndex = position333, tokenIndex333
			return false
		},
		/* 46 Subgenus <- <(Subgenus2 / Subgenus1)> */
		func() bool {
			position337, tokenIndex337 := position, tokenIndex
			{
				position338 := position
				{
					position339, tokenIndex339 := position, tokenIndex
					if !_rules[ruleSubgenus2]() {
						goto l340
					}
					goto l339
				l340:
					position, tokenIndex = position339, tokenIndex339
					if !_rules[ruleSubgenus1]() {
						goto l337
					}
				}
			l339:
				add(ruleSubgenus, position338)
			}
			return true
		l337:
			position, tokenIndex = position337, tokenIndex337
			return false
		},
		/* 47 Subgenus2 <- <('(' _? AbbrSubgenus _? ')' !(_? Authorship))> */
		func() bool {
			position341, tokenIndex341 := position, tokenIndex
			{
				position342 := position
				if buffer[position] != rune('(') {
					goto l341
				}
				position++
				{
					position343, tokenIndex343 := position, tokenIndex
					if !_rules[rule_]() {
						goto l343
					}
					goto l344
				l343:
					position, tokenIndex = position343, tokenIndex343
				}
			l344:
				if !_rules[ruleAbbrSubgenus]() {
					goto l341
				}
				{
					position345, tokenIndex345 := position, tokenIndex
					if !_rules[rule_]() {
						goto l345
					}
					goto l346
				l345:
					position, tokenIndex = position345, tokenIndex345
				}
			l346:
				if buffer[position] != rune(')') {
					goto l341
				}
				position++
				{
					position347, tokenIndex347 := position, tokenIndex
					{
						position348, tokenIndex348 := position, tokenIndex
						if !_rules[rule_]() {
							goto l348
						}
						goto l349
					l348:
						position, tokenIndex = position348, tokenIndex348
					}
				l349:
					if !_rules[ruleAuthorship]() {
						goto l347
					}
					goto l341
				l347:
					position, tokenIndex = position347, tokenIndex347
				}
				add(ruleSubgenus2, position342)
			}
			return true
		l341:
			position, tokenIndex = position341, tokenIndex341
			return false
		},
		/* 48 Subgenus1 <- <('(' _? UninomialWord _? ')')> */
		func() bool {
			position350, tokenIndex350 := position, tokenIndex
			{
				position351 := position
				if buffer[position] != rune('(') {
					goto l350
				}
				position++
				{
					position352, tokenIndex352 := position, tokenIndex
					if !_rules[rule_]() {
						goto l352
					}
					goto l353
				l352:
					position, tokenIndex = position352, tokenIndex352
				}
			l353:
				if !_rules[ruleUninomialWord]() {
					goto l350
				}
				{
					position354, tokenIndex354 := position, tokenIndex
					if !_rules[rule_]() {
						goto l354
					}
					goto l355
				l354:
					position, tokenIndex = position354, tokenIndex354
				}
			l355:
				if buffer[position] != rune(')') {
					goto l350
				}
				position++
				add(ruleSubgenus1, position351)
			}
			return true
		l350:
			position, tokenIndex = position350, tokenIndex350
			return false
		},
		/* 49 RankUninomial <- <(RankUninomialPlain / RankUninomialNotho)> */
		func() bool {
			position356, tokenIndex356 := position, tokenIndex
			{
				position357 := position
				{
					position358, tokenIndex358 := position, tokenIndex
					if !_rules[ruleRankUninomialPlain]() {
						goto l359
					}
					goto l358
				l359:
					position, tokenIndex = position358, tokenIndex358
					if !_rules[ruleRankUninomialNotho]() {
						goto l356
					}
				}
			l358:
				add(ruleRankUninomial, position357)
			}
			return true
		l356:
			position, tokenIndex = position356, tokenIndex356
			return false
		},
		/* 50 RankUninomialPlain <- <((('s' 'e' 'c' 't') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('t' 'r' 'i' 'b') / ('t' 'r') / ('s' 'u' 'b' 't' 'r' 'i' 'b') / ('s' 'u' 'b' 't' 'r') / ('s' 'u' 'b' 's' 'e' 'r') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('f' 'a' 'm') / ('s' 'u' 'b' 'f' 'a' 'm') / ('d' 'i' 'v') / ('s' 'u' 'p' 'e' 'r' 't' 'r' 'i' 'b') / ('u' 'n' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position360, tokenIndex360 := position, tokenIndex
			{
				position361 := position
				{
					position362, tokenIndex362 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l363
					}
					position++
					if buffer[position] != rune('e') {
						goto l363
					}
					position++
					if buffer[position] != rune('c') {
						goto l363
					}
					position++
					if buffer[position] != rune('t') {
						goto l363
					}
					position++
					goto l362
				l363:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('s') {
						goto l364
					}
					position++
					if buffer[position] != rune('u') {
						goto l364
					}
					position++
					if buffer[position] != rune('b') {
						goto l364
					}
					position++
					if buffer[position] != rune('s') {
						goto l364
					}
					position++
					if buffer[position] != rune('e') {
						goto l364
					}
					position++
					if buffer[position] != rune('c') {
						goto l364
					}
					position++
					if buffer[position] != rune('t') {
						goto l364
					}
					position++
					goto l362
				l364:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('t') {
						goto l365
					}
					position++
					if buffer[position] != rune('r') {
						goto l365
					}
					position++
					if buffer[position] != rune('i') {
						goto l365
					}
					position++
					if buffer[position] != rune('b') {
						goto l365
					}
					position++
					goto l362
				l365:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('t') {
						goto l366
					}
					position++
					if buffer[position] != rune('r') {
						goto l366
					}
					position++
					goto l362
				l366:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('s') {
						goto l367
					}
					position++
					if buffer[position] != rune('u') {
						goto l367
					}
					position++
					if buffer[position] != rune('b') {
						goto l367
					}
					position++
					if buffer[position] != rune('t') {
						goto l367
					}
					position++
					if buffer[position] != rune('r') {
						goto l367
					}
					position++
					if buffer[position] != rune('i') {
						goto l367
					}
					position++
					if buffer[position] != rune('b') {
						goto l367
					}
					position++
					goto l362
				l367:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('s') {
						goto l368
					}
					position++
					if buffer[position] != rune('u') {
						goto l368
					}
					position++
					if buffer[position] != rune('b') {
						goto l368
					}
					position++
					if buffer[position] != rune('t') {
						goto l368
					}
					position++
					if buffer[position] != rune('r') {
						goto l368
					}
					position++
					goto l362
				l368:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('s') {
						goto l369
					}
					position++
					if buffer[position] != rune('u') {
						goto l369
					}
					position++
					if buffer[position] != rune('b') {
						goto l369
					}
					position++
					if buffer[position] != rune('s') {
						goto l369
					}
					position++
					if buffer[position] != rune('e') {
						goto l369
					}
					position++
					if buffer[position] != rune('r') {
						goto l369
					}
					position++
					goto l362
				l369:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('s') {
						goto l370
					}
					position++
					if buffer[position] != rune('e') {
						goto l370
					}
					position++
					if buffer[position] != rune('r') {
						goto l370
					}
					position++
					goto l362
				l370:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('s') {
						goto l371
					}
					position++
					if buffer[position] != rune('u') {
						goto l371
					}
					position++
					if buffer[position] != rune('b') {
						goto l371
					}
					position++
					if buffer[position] != rune('g') {
						goto l371
					}
					position++
					if buffer[position] != rune('e') {
						goto l371
					}
					position++
					if buffer[position] != rune('n') {
						goto l371
					}
					position++
					goto l362
				l371:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('s') {
						goto l372
					}
					position++
					if buffer[position] != rune('u') {
						goto l372
					}
					position++
					if buffer[position] != rune('b') {
						goto l372
					}
					position++
					if buffer[position] != rune('g') {
						goto l372
					}
					position++
					goto l362
				l372:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('f') {
						goto l373
					}
					position++
					if buffer[position] != rune('a') {
						goto l373
					}
					position++
					if buffer[position] != rune('m') {
						goto l373
					}
					position++
					goto l362
				l373:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('s') {
						goto l374
					}
					position++
					if buffer[position] != rune('u') {
						goto l374
					}
					position++
					if buffer[position] != rune('b') {
						goto l374
					}
					position++
					if buffer[position] != rune('f') {
						goto l374
					}
					position++
					if buffer[position] != rune('a') {
						goto l374
					}
					position++
					if buffer[position] != rune('m') {
						goto l374
					}
					position++
					goto l362
				l374:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('d') {
						goto l375
					}
					position++
					if buffer[position] != rune('i') {
						goto l375
					}
					position++
					if buffer[position] != rune('v') {
						goto l375
					}
					position++
					goto l362
				l375:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('s') {
						goto l376
					}
					position++
					if buffer[position] != rune('u') {
						goto l376
					}
					position++
					if buffer[position] != rune('p') {
						goto l376
					}
					position++
					if buffer[position] != rune('e') {
						goto l376
					}
					position++
					if buffer[position] != rune('r') {
						goto l376
					}
					position++
					if buffer[position] != rune('t') {
						goto l376
					}
					position++
					if buffer[position] != rune('r') {
						goto l376
					}
					position++
					if buffer[position] != rune('i') {
						goto l376
					}
					position++
					if buffer[position] != rune('b') {
						goto l376
					}
					position++
					goto l362
				l376:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('u') {
						goto l360
					}
					position++
					if buffer[position] != rune('n') {
						goto l360
					}
					position++
					if buffer[position] != rune('r') {
						goto l360
					}
					position++
				}
			l362:
				{
					position377, tokenIndex377 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l378
					}
					position++
					goto l377
				l378:
					position, tokenIndex = position377, tokenIndex377
					{
						position379, tokenIndex379 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l360
						}
						position, tokenIndex = position379, tokenIndex379
					}
				}
			l377:
				add(ruleRankUninomialPlain, position361)
			}
			return true
		l360:
			position, tokenIndex = position360, tokenIndex360
			return false
		},
		/* 51 RankUninomialNotho <- <('n' 'o' 't' 'h' 'o' _? (('s' 'e' 'c' 't') / ('g' 'e' 'n') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'e' 'n') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('s' 'u' 'b' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position380, tokenIndex380 := position, tokenIndex
			{
				position381 := position
				if buffer[position] != rune('n') {
					goto l380
				}
				position++
				if buffer[position] != rune('o') {
					goto l380
				}
				position++
				if buffer[position] != rune('t') {
					goto l380
				}
				position++
				if buffer[position] != rune('h') {
					goto l380
				}
				position++
				if buffer[position] != rune('o') {
					goto l380
				}
				position++
				{
					position382, tokenIndex382 := position, tokenIndex
					if !_rules[rule_]() {
						goto l382
					}
					goto l383
				l382:
					position, tokenIndex = position382, tokenIndex382
				}
			l383:
				{
					position384, tokenIndex384 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l385
					}
					position++
					if buffer[position] != rune('e') {
						goto l385
					}
					position++
					if buffer[position] != rune('c') {
						goto l385
					}
					position++
					if buffer[position] != rune('t') {
						goto l385
					}
					position++
					goto l384
				l385:
					position, tokenIndex = position384, tokenIndex384
					if buffer[position] != rune('g') {
						goto l386
					}
					position++
					if buffer[position] != rune('e') {
						goto l386
					}
					position++
					if buffer[position] != rune('n') {
						goto l386
					}
					position++
					goto l384
				l386:
					position, tokenIndex = position384, tokenIndex384
					if buffer[position] != rune('s') {
						goto l387
					}
					position++
					if buffer[position] != rune('e') {
						goto l387
					}
					position++
					if buffer[position] != rune('r') {
						goto l387
					}
					position++
					goto l384
				l387:
					position, tokenIndex = position384, tokenIndex384
					if buffer[position] != rune('s') {
						goto l388
					}
					position++
					if buffer[position] != rune('u') {
						goto l388
					}
					position++
					if buffer[position] != rune('b') {
						goto l388
					}
					position++
					if buffer[position] != rune('g') {
						goto l388
					}
					position++
					if buffer[position] != rune('e') {
						goto l388
					}
					position++
					if buffer[position] != rune('e') {
						goto l388
					}
					position++
					if buffer[position] != rune('n') {
						goto l388
					}
					position++
					goto l384
				l388:
					position, tokenIndex = position384, tokenIndex384
					if buffer[position] != rune('s') {
						goto l389
					}
					position++
					if buffer[position] != rune('u') {
						goto l389
					}
					position++
					if buffer[position] != rune('b') {
						goto l389
					}
					position++
					if buffer[position] != rune('g') {
						goto l389
					}
					position++
					if buffer[position] != rune('e') {
						goto l389
					}
					position++
					if buffer[position] != rune('n') {
						goto l389
					}
					position++
					goto l384
				l389:
					position, tokenIndex = position384, tokenIndex384
					if buffer[position] != rune('s') {
						goto l390
					}
					position++
					if buffer[position] != rune('u') {
						goto l390
					}
					position++
					if buffer[position] != rune('b') {
						goto l390
					}
					position++
					if buffer[position] != rune('g') {
						goto l390
					}
					position++
					goto l384
				l390:
					position, tokenIndex = position384, tokenIndex384
					if buffer[position] != rune('s') {
						goto l391
					}
					position++
					if buffer[position] != rune('u') {
						goto l391
					}
					position++
					if buffer[position] != rune('b') {
						goto l391
					}
					position++
					if buffer[position] != rune('s') {
						goto l391
					}
					position++
					if buffer[position] != rune('e') {
						goto l391
					}
					position++
					if buffer[position] != rune('c') {
						goto l391
					}
					position++
					if buffer[position] != rune('t') {
						goto l391
					}
					position++
					goto l384
				l391:
					position, tokenIndex = position384, tokenIndex384
					if buffer[position] != rune('s') {
						goto l380
					}
					position++
					if buffer[position] != rune('u') {
						goto l380
					}
					position++
					if buffer[position] != rune('b') {
						goto l380
					}
					position++
					if buffer[position] != rune('t') {
						goto l380
					}
					position++
					if buffer[position] != rune('r') {
						goto l380
					}
					position++
					if buffer[position] != rune('i') {
						goto l380
					}
					position++
					if buffer[position] != rune('b') {
						goto l380
					}
					position++
				}
			l384:
				{
					position392, tokenIndex392 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l393
					}
					position++
					goto l392
				l393:
					position, tokenIndex = position392, tokenIndex392
					{
						position394, tokenIndex394 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l380
						}
						position, tokenIndex = position394, tokenIndex394
					}
				}
			l392:
				add(ruleRankUninomialNotho, position381)
			}
			return true
		l380:
			position, tokenIndex = position380, tokenIndex380
			return false
		},
		/* 52 Uninomial <- <(UninomialWord (_ Authorship !(_ LowerCharExtended LowerCharExtended LowerCharExtended))?)> */
		func() bool {
			position395, tokenIndex395 := position, tokenIndex
			{
				position396 := position
				if !_rules[ruleUninomialWord]() {
					goto l395
				}
				{
					position397, tokenIndex397 := position, tokenIndex
					if !_rules[rule_]() {
						goto l397
					}
					if !_rules[ruleAuthorship]() {
						goto l397
					}
					{
						position399, tokenIndex399 := position, tokenIndex
						if !_rules[rule_]() {
							goto l399
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l399
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l399
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l399
						}
						goto l397
					l399:
						position, tokenIndex = position399, tokenIndex399
					}
					goto l398
				l397:
					position, tokenIndex = position397, tokenIndex397
				}
			l398:
				add(ruleUninomial, position396)
			}
			return true
		l395:
			position, tokenIndex = position395, tokenIndex395
			return false
		},
		/* 53 UninomialWord <- <(CapWord / TwoLetterGenus)> */
		func() bool {
			position400, tokenIndex400 := position, tokenIndex
			{
				position401 := position
				{
					position402, tokenIndex402 := position, tokenIndex
					if !_rules[ruleCapWord]() {
						goto l403
					}
					goto l402
				l403:
					position, tokenIndex = position402, tokenIndex402
					if !_rules[ruleTwoLetterGenus]() {
						goto l400
					}
				}
			l402:
				add(ruleUninomialWord, position401)
			}
			return true
		l400:
			position, tokenIndex = position400, tokenIndex400
			return false
		},
		/* 54 AbbrSubgenus <- <(UpperChar LowerChar* '.')> */
		func() bool {
			position404, tokenIndex404 := position, tokenIndex
			{
				position405 := position
				if !_rules[ruleUpperChar]() {
					goto l404
				}
			l406:
				{
					position407, tokenIndex407 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l407
					}
					goto l406
				l407:
					position, tokenIndex = position407, tokenIndex407
				}
				if buffer[position] != rune('.') {
					goto l404
				}
				position++
				add(ruleAbbrSubgenus, position405)
			}
			return true
		l404:
			position, tokenIndex = position404, tokenIndex404
			return false
		},
		/* 55 AbbrGenus <- <(UpperChar LowerChar? '.')> */
		func() bool {
			position408, tokenIndex408 := position, tokenIndex
			{
				position409 := position
				if !_rules[ruleUpperChar]() {
					goto l408
				}
				{
					position410, tokenIndex410 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l410
					}
					goto l411
				l410:
					position, tokenIndex = position410, tokenIndex410
				}
			l411:
				if buffer[position] != rune('.') {
					goto l408
				}
				position++
				add(ruleAbbrGenus, position409)
			}
			return true
		l408:
			position, tokenIndex = position408, tokenIndex408
			return false
		},
		/* 56 CapWord <- <(CapWordWithDash / CapWord1)> */
		func() bool {
			position412, tokenIndex412 := position, tokenIndex
			{
				position413 := position
				{
					position414, tokenIndex414 := position, tokenIndex
					if !_rules[ruleCapWordWithDash]() {
						goto l415
					}
					goto l414
				l415:
					position, tokenIndex = position414, tokenIndex414
					if !_rules[ruleCapWord1]() {
						goto l412
					}
				}
			l414:
				add(ruleCapWord, position413)
			}
			return true
		l412:
			position, tokenIndex = position412, tokenIndex412
			return false
		},
		/* 57 CapWord1 <- <(NameUpperChar NameLowerChar NameLowerChar+ '?'?)> */
		func() bool {
			position416, tokenIndex416 := position, tokenIndex
			{
				position417 := position
				if !_rules[ruleNameUpperChar]() {
					goto l416
				}
				if !_rules[ruleNameLowerChar]() {
					goto l416
				}
				if !_rules[ruleNameLowerChar]() {
					goto l416
				}
			l418:
				{
					position419, tokenIndex419 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l419
					}
					goto l418
				l419:
					position, tokenIndex = position419, tokenIndex419
				}
				{
					position420, tokenIndex420 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l420
					}
					position++
					goto l421
				l420:
					position, tokenIndex = position420, tokenIndex420
				}
			l421:
				add(ruleCapWord1, position417)
			}
			return true
		l416:
			position, tokenIndex = position416, tokenIndex416
			return false
		},
		/* 58 CapWordWithDash <- <((CapWord1 / TwoLetterGenusDashedSegment) Dash WordAfterDash (Dash WordAfterDash)?)> */
		func() bool {
			position422, tokenIndex422 := position, tokenIndex
			{
				position423 := position
				{
					position424, tokenIndex424 := position, tokenIndex
					if !_rules[ruleCapWord1]() {
						goto l425
					}
					goto l424
				l425:
					position, tokenIndex = position424, tokenIndex424
					if !_rules[ruleTwoLetterGenusDashedSegment]() {
						goto l422
					}
				}
			l424:
				if !_rules[ruleDash]() {
					goto l422
				}
				if !_rules[ruleWordAfterDash]() {
					goto l422
				}
				{
					position426, tokenIndex426 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l426
					}
					if !_rules[ruleWordAfterDash]() {
						goto l426
					}
					goto l427
				l426:
					position, tokenIndex = position426, tokenIndex426
				}
			l427:
				add(ruleCapWordWithDash, position423)
			}
			return true
		l422:
			position, tokenIndex = position422, tokenIndex422
			return false
		},
		/* 59 TwoLetterGenusDashedSegment <- <(('D' 'e') / ('E' 'u') / ('L' 'e') / ('N' 'e'))> */
		func() bool {
			position428, tokenIndex428 := position, tokenIndex
			{
				position429 := position
				{
					position430, tokenIndex430 := position, tokenIndex
					if buffer[position] != rune('D') {
						goto l431
					}
					position++
					if buffer[position] != rune('e') {
						goto l431
					}
					position++
					goto l430
				l431:
					position, tokenIndex = position430, tokenIndex430
					if buffer[position] != rune('E') {
						goto l432
					}
					position++
					if buffer[position] != rune('u') {
						goto l432
					}
					position++
					goto l430
				l432:
					position, tokenIndex = position430, tokenIndex430
					if buffer[position] != rune('L') {
						goto l433
					}
					position++
					if buffer[position] != rune('e') {
						goto l433
					}
					position++
					goto l430
				l433:
					position, tokenIndex = position430, tokenIndex430
					if buffer[position] != rune('N') {
						goto l428
					}
					position++
					if buffer[position] != rune('e') {
						goto l428
					}
					position++
				}
			l430:
				add(ruleTwoLetterGenusDashedSegment, position429)
			}
			return true
		l428:
			position, tokenIndex = position428, tokenIndex428
			return false
		},
		/* 60 WordAfterDash <- <(UpperAfterDash / LowerAfterDash)> */
		func() bool {
			position434, tokenIndex434 := position, tokenIndex
			{
				position435 := position
				{
					position436, tokenIndex436 := position, tokenIndex
					if !_rules[ruleUpperAfterDash]() {
						goto l437
					}
					goto l436
				l437:
					position, tokenIndex = position436, tokenIndex436
					if !_rules[ruleLowerAfterDash]() {
						goto l434
					}
				}
			l436:
				add(ruleWordAfterDash, position435)
			}
			return true
		l434:
			position, tokenIndex = position434, tokenIndex434
			return false
		},
		/* 61 UpperAfterDash <- <CapWord1> */
		func() bool {
			position438, tokenIndex438 := position, tokenIndex
			{
				position439 := position
				if !_rules[ruleCapWord1]() {
					goto l438
				}
				add(ruleUpperAfterDash, position439)
			}
			return true
		l438:
			position, tokenIndex = position438, tokenIndex438
			return false
		},
		/* 62 LowerAfterDash <- <Word1> */
		func() bool {
			position440, tokenIndex440 := position, tokenIndex
			{
				position441 := position
				if !_rules[ruleWord1]() {
					goto l440
				}
				add(ruleLowerAfterDash, position441)
			}
			return true
		l440:
			position, tokenIndex = position440, tokenIndex440
			return false
		},
		/* 63 TwoLetterGenus <- <(('C' 'a') / ('D' 'o') / ('E' 'a') / ('G' 'e') / ('I' 'a') / ('I' 'o') / ('I' 'x') / ('L' 'o') / ('O' 'a') / ('O' 'o') / ('N' 'u') / ('R' 'a') / ('T' 'y') / ('U' 'a') / ('A' 'a') / ('J' 'a') / ('Z' 'u') / ('L' 'a') / ('Q' 'u') / ('A' 's') / ('B' 'a'))> */
		func() bool {
			position442, tokenIndex442 := position, tokenIndex
			{
				position443 := position
				{
					position444, tokenIndex444 := position, tokenIndex
					if buffer[position] != rune('C') {
						goto l445
					}
					position++
					if buffer[position] != rune('a') {
						goto l445
					}
					position++
					goto l444
				l445:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('D') {
						goto l446
					}
					position++
					if buffer[position] != rune('o') {
						goto l446
					}
					position++
					goto l444
				l446:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('E') {
						goto l447
					}
					position++
					if buffer[position] != rune('a') {
						goto l447
					}
					position++
					goto l444
				l447:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('G') {
						goto l448
					}
					position++
					if buffer[position] != rune('e') {
						goto l448
					}
					position++
					goto l444
				l448:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('I') {
						goto l449
					}
					position++
					if buffer[position] != rune('a') {
						goto l449
					}
					position++
					goto l444
				l449:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('I') {
						goto l450
					}
					position++
					if buffer[position] != rune('o') {
						goto l450
					}
					position++
					goto l444
				l450:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('I') {
						goto l451
					}
					position++
					if buffer[position] != rune('x') {
						goto l451
					}
					position++
					goto l444
				l451:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('L') {
						goto l452
					}
					position++
					if buffer[position] != rune('o') {
						goto l452
					}
					position++
					goto l444
				l452:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('O') {
						goto l453
					}
					position++
					if buffer[position] != rune('a') {
						goto l453
					}
					position++
					goto l444
				l453:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('O') {
						goto l454
					}
					position++
					if buffer[position] != rune('o') {
						goto l454
					}
					position++
					goto l444
				l454:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('N') {
						goto l455
					}
					position++
					if buffer[position] != rune('u') {
						goto l455
					}
					position++
					goto l444
				l455:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('R') {
						goto l456
					}
					position++
					if buffer[position] != rune('a') {
						goto l456
					}
					position++
					goto l444
				l456:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('T') {
						goto l457
					}
					position++
					if buffer[position] != rune('y') {
						goto l457
					}
					position++
					goto l444
				l457:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('U') {
						goto l458
					}
					position++
					if buffer[position] != rune('a') {
						goto l458
					}
					position++
					goto l444
				l458:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('A') {
						goto l459
					}
					position++
					if buffer[position] != rune('a') {
						goto l459
					}
					position++
					goto l444
				l459:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('J') {
						goto l460
					}
					position++
					if buffer[position] != rune('a') {
						goto l460
					}
					position++
					goto l444
				l460:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('Z') {
						goto l461
					}
					position++
					if buffer[position] != rune('u') {
						goto l461
					}
					position++
					goto l444
				l461:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('L') {
						goto l462
					}
					position++
					if buffer[position] != rune('a') {
						goto l462
					}
					position++
					goto l444
				l462:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('Q') {
						goto l463
					}
					position++
					if buffer[position] != rune('u') {
						goto l463
					}
					position++
					goto l444
				l463:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('A') {
						goto l464
					}
					position++
					if buffer[position] != rune('s') {
						goto l464
					}
					position++
					goto l444
				l464:
					position, tokenIndex = position444, tokenIndex444
					if buffer[position] != rune('B') {
						goto l442
					}
					position++
					if buffer[position] != rune('a') {
						goto l442
					}
					position++
				}
			l444:
				add(ruleTwoLetterGenus, position443)
			}
			return true
		l442:
			position, tokenIndex = position442, tokenIndex442
			return false
		},
		/* 64 Word <- <(!((('e' 'x') / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd') / ('p' 'r' 'o') / ('c' 'v') / ('c' 'u' 'l' 't' 'i' 'v' 'a' 'r') / AuthorPrefix / RankUninomial / Approximation / Word4) SpaceCharEOI) (WordApostr / WordStartsWithDigit / MultiDashedWord / Word2 / Word1) &(SpaceCharEOI / '('))> */
		func() bool {
			position465, tokenIndex465 := position, tokenIndex
			{
				position466 := position
				{
					position467, tokenIndex467 := position, tokenIndex
					{
						position468, tokenIndex468 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l469
						}
						position++
						if buffer[position] != rune('x') {
							goto l469
						}
						position++
						goto l468
					l469:
						position, tokenIndex = position468, tokenIndex468
						if buffer[position] != rune('e') {
							goto l470
						}
						position++
						if buffer[position] != rune('t') {
							goto l470
						}
						position++
						goto l468
					l470:
						position, tokenIndex = position468, tokenIndex468
						if buffer[position] != rune('a') {
							goto l471
						}
						position++
						if buffer[position] != rune('n') {
							goto l471
						}
						position++
						if buffer[position] != rune('d') {
							goto l471
						}
						position++
						goto l468
					l471:
						position, tokenIndex = position468, tokenIndex468
						if buffer[position] != rune('a') {
							goto l472
						}
						position++
						if buffer[position] != rune('p') {
							goto l472
						}
						position++
						if buffer[position] != rune('u') {
							goto l472
						}
						position++
						if buffer[position] != rune('d') {
							goto l472
						}
						position++
						goto l468
					l472:
						position, tokenIndex = position468, tokenIndex468
						if buffer[position] != rune('p') {
							goto l473
						}
						position++
						if buffer[position] != rune('r') {
							goto l473
						}
						position++
						if buffer[position] != rune('o') {
							goto l473
						}
						position++
						goto l468
					l473:
						position, tokenIndex = position468, tokenIndex468
						if buffer[position] != rune('c') {
							goto l474
						}
						position++
						if buffer[position] != rune('v') {
							goto l474
						}
						position++
						goto l468
					l474:
						position, tokenIndex = position468, tokenIndex468
						if buffer[position] != rune('c') {
							goto l475
						}
						position++
						if buffer[position] != rune('u') {
							goto l475
						}
						position++
						if buffer[position] != rune('l') {
							goto l475
						}
						position++
						if buffer[position] != rune('t') {
							goto l475
						}
						position++
						if buffer[position] != rune('i') {
							goto l475
						}
						position++
						if buffer[position] != rune('v') {
							goto l475
						}
						position++
						if buffer[position] != rune('a') {
							goto l475
						}
						position++
						if buffer[position] != rune('r') {
							goto l475
						}
						position++
						goto l468
					l475:
						position, tokenIndex = position468, tokenIndex468
						if !_rules[ruleAuthorPrefix]() {
							goto l476
						}
						goto l468
					l476:
						position, tokenIndex = position468, tokenIndex468
						if !_rules[ruleRankUninomial]() {
							goto l477
						}
						goto l468
					l477:
						position, tokenIndex = position468, tokenIndex468
						if !_rules[ruleApproximation]() {
							goto l478
						}
						goto l468
					l478:
						position, tokenIndex = position468, tokenIndex468
						if !_rules[ruleWord4]() {
							goto l467
						}
					}
				l468:
					if !_rules[ruleSpaceCharEOI]() {
						goto l467
					}
					goto l465
				l467:
					position, tokenIndex = position467, tokenIndex467
				}
				{
					position479, tokenIndex479 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l480
					}
					goto l479
				l480:
					position, tokenIndex = position479, tokenIndex479
					if !_rules[ruleWordStartsWithDigit]() {
						goto l481
					}
					goto l479
				l481:
					position, tokenIndex = position479, tokenIndex479
					if !_rules[ruleMultiDashedWord]() {
						goto l482
					}
					goto l479
				l482:
					position, tokenIndex = position479, tokenIndex479
					if !_rules[ruleWord2]() {
						goto l483
					}
					goto l479
				l483:
					position, tokenIndex = position479, tokenIndex479
					if !_rules[ruleWord1]() {
						goto l465
					}
				}
			l479:
				{
					position484, tokenIndex484 := position, tokenIndex
					{
						position485, tokenIndex485 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l486
						}
						goto l485
					l486:
						position, tokenIndex = position485, tokenIndex485
						if buffer[position] != rune('(') {
							goto l465
						}
						position++
					}
				l485:
					position, tokenIndex = position484, tokenIndex484
				}
				add(ruleWord, position466)
			}
			return true
		l465:
			position, tokenIndex = position465, tokenIndex465
			return false
		},
		/* 65 Word1 <- <(((DotPrefix / LowerASCII) Dash)? NameLowerChar NameLowerChar+)> */
		func() bool {
			position487, tokenIndex487 := position, tokenIndex
			{
				position488 := position
				{
					position489, tokenIndex489 := position, tokenIndex
					{
						position491, tokenIndex491 := position, tokenIndex
						if !_rules[ruleDotPrefix]() {
							goto l492
						}
						goto l491
					l492:
						position, tokenIndex = position491, tokenIndex491
						if !_rules[ruleLowerASCII]() {
							goto l489
						}
					}
				l491:
					if !_rules[ruleDash]() {
						goto l489
					}
					goto l490
				l489:
					position, tokenIndex = position489, tokenIndex489
				}
			l490:
				if !_rules[ruleNameLowerChar]() {
					goto l487
				}
				if !_rules[ruleNameLowerChar]() {
					goto l487
				}
			l493:
				{
					position494, tokenIndex494 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l494
					}
					goto l493
				l494:
					position, tokenIndex = position494, tokenIndex494
				}
				add(ruleWord1, position488)
			}
			return true
		l487:
			position, tokenIndex = position487, tokenIndex487
			return false
		},
		/* 66 WordStartsWithDigit <- <(('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9') Nums? ('.' / Dash)? NameLowerChar NameLowerChar NameLowerChar NameLowerChar+)> */
		func() bool {
			position495, tokenIndex495 := position, tokenIndex
			{
				position496 := position
				{
					position497, tokenIndex497 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l498
					}
					position++
					goto l497
				l498:
					position, tokenIndex = position497, tokenIndex497
					if buffer[position] != rune('2') {
						goto l499
					}
					position++
					goto l497
				l499:
					position, tokenIndex = position497, tokenIndex497
					if buffer[position] != rune('3') {
						goto l500
					}
					position++
					goto l497
				l500:
					position, tokenIndex = position497, tokenIndex497
					if buffer[position] != rune('4') {
						goto l501
					}
					position++
					goto l497
				l501:
					position, tokenIndex = position497, tokenIndex497
					if buffer[position] != rune('5') {
						goto l502
					}
					position++
					goto l497
				l502:
					position, tokenIndex = position497, tokenIndex497
					if buffer[position] != rune('6') {
						goto l503
					}
					position++
					goto l497
				l503:
					position, tokenIndex = position497, tokenIndex497
					if buffer[position] != rune('7') {
						goto l504
					}
					position++
					goto l497
				l504:
					position, tokenIndex = position497, tokenIndex497
					if buffer[position] != rune('8') {
						goto l505
					}
					position++
					goto l497
				l505:
					position, tokenIndex = position497, tokenIndex497
					if buffer[position] != rune('9') {
						goto l495
					}
					position++
				}
			l497:
				{
					position506, tokenIndex506 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l506
					}
					goto l507
				l506:
					position, tokenIndex = position506, tokenIndex506
				}
			l507:
				{
					position508, tokenIndex508 := position, tokenIndex
					{
						position510, tokenIndex510 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l511
						}
						position++
						goto l510
					l511:
						position, tokenIndex = position510, tokenIndex510
						if !_rules[ruleDash]() {
							goto l508
						}
					}
				l510:
					goto l509
				l508:
					position, tokenIndex = position508, tokenIndex508
				}
			l509:
				if !_rules[ruleNameLowerChar]() {
					goto l495
				}
				if !_rules[ruleNameLowerChar]() {
					goto l495
				}
				if !_rules[ruleNameLowerChar]() {
					goto l495
				}
				if !_rules[ruleNameLowerChar]() {
					goto l495
				}
			l512:
				{
					position513, tokenIndex513 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l513
					}
					goto l512
				l513:
					position, tokenIndex = position513, tokenIndex513
				}
				add(ruleWordStartsWithDigit, position496)
			}
			return true
		l495:
			position, tokenIndex = position495, tokenIndex495
			return false
		},
		/* 67 Word2 <- <(NameLowerChar+ Dash? (WordApostr / NameLowerChar+))> */
		func() bool {
			position514, tokenIndex514 := position, tokenIndex
			{
				position515 := position
				if !_rules[ruleNameLowerChar]() {
					goto l514
				}
			l516:
				{
					position517, tokenIndex517 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l517
					}
					goto l516
				l517:
					position, tokenIndex = position517, tokenIndex517
				}
				{
					position518, tokenIndex518 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l518
					}
					goto l519
				l518:
					position, tokenIndex = position518, tokenIndex518
				}
			l519:
				{
					position520, tokenIndex520 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l521
					}
					goto l520
				l521:
					position, tokenIndex = position520, tokenIndex520
					if !_rules[ruleNameLowerChar]() {
						goto l514
					}
				l522:
					{
						position523, tokenIndex523 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l523
						}
						goto l522
					l523:
						position, tokenIndex = position523, tokenIndex523
					}
				}
			l520:
				add(ruleWord2, position515)
			}
			return true
		l514:
			position, tokenIndex = position514, tokenIndex514
			return false
		},
		/* 68 WordApostr <- <(NameLowerChar NameLowerChar* Apostrophe Word1)> */
		func() bool {
			position524, tokenIndex524 := position, tokenIndex
			{
				position525 := position
				if !_rules[ruleNameLowerChar]() {
					goto l524
				}
			l526:
				{
					position527, tokenIndex527 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l527
					}
					goto l526
				l527:
					position, tokenIndex = position527, tokenIndex527
				}
				if !_rules[ruleApostrophe]() {
					goto l524
				}
				if !_rules[ruleWord1]() {
					goto l524
				}
				add(ruleWordApostr, position525)
			}
			return true
		l524:
			position, tokenIndex = position524, tokenIndex524
			return false
		},
		/* 69 Word4 <- <(NameLowerChar+ '.' NameLowerChar)> */
		func() bool {
			position528, tokenIndex528 := position, tokenIndex
			{
				position529 := position
				if !_rules[ruleNameLowerChar]() {
					goto l528
				}
			l530:
				{
					position531, tokenIndex531 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l531
					}
					goto l530
				l531:
					position, tokenIndex = position531, tokenIndex531
				}
				if buffer[position] != rune('.') {
					goto l528
				}
				position++
				if !_rules[ruleNameLowerChar]() {
					goto l528
				}
				add(ruleWord4, position529)
			}
			return true
		l528:
			position, tokenIndex = position528, tokenIndex528
			return false
		},
		/* 70 DotPrefix <- <('s' 't' '.')> */
		func() bool {
			position532, tokenIndex532 := position, tokenIndex
			{
				position533 := position
				if buffer[position] != rune('s') {
					goto l532
				}
				position++
				if buffer[position] != rune('t') {
					goto l532
				}
				position++
				if buffer[position] != rune('.') {
					goto l532
				}
				position++
				add(ruleDotPrefix, position533)
			}
			return true
		l532:
			position, tokenIndex = position532, tokenIndex532
			return false
		},
		/* 71 MultiDashedWord <- <(NameLowerChar+ Dash NameLowerChar+ Dash NameLowerChar+ (Dash NameLowerChar+)?)> */
		func() bool {
			position534, tokenIndex534 := position, tokenIndex
			{
				position535 := position
				if !_rules[ruleNameLowerChar]() {
					goto l534
				}
			l536:
				{
					position537, tokenIndex537 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l537
					}
					goto l536
				l537:
					position, tokenIndex = position537, tokenIndex537
				}
				if !_rules[ruleDash]() {
					goto l534
				}
				if !_rules[ruleNameLowerChar]() {
					goto l534
				}
			l538:
				{
					position539, tokenIndex539 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l539
					}
					goto l538
				l539:
					position, tokenIndex = position539, tokenIndex539
				}
				if !_rules[ruleDash]() {
					goto l534
				}
				if !_rules[ruleNameLowerChar]() {
					goto l534
				}
			l540:
				{
					position541, tokenIndex541 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l541
					}
					goto l540
				l541:
					position, tokenIndex = position541, tokenIndex541
				}
				{
					position542, tokenIndex542 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l542
					}
					if !_rules[ruleNameLowerChar]() {
						goto l542
					}
				l544:
					{
						position545, tokenIndex545 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l545
						}
						goto l544
					l545:
						position, tokenIndex = position545, tokenIndex545
					}
					goto l543
				l542:
					position, tokenIndex = position542, tokenIndex542
				}
			l543:
				add(ruleMultiDashedWord, position535)
			}
			return true
		l534:
			position, tokenIndex = position534, tokenIndex534
			return false
		},
		/* 72 HybridChar <- <('×' / (('x' / 'X') &_) / (('x' / 'X') &UninomialWord) / (('x' / 'X') &END))> */
		func() bool {
			position546, tokenIndex546 := position, tokenIndex
			{
				position547 := position
				{
					position548, tokenIndex548 := position, tokenIndex
					if buffer[position] != rune('×') {
						goto l549
					}
					position++
					goto l548
				l549:
					position, tokenIndex = position548, tokenIndex548
					{
						position551, tokenIndex551 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l552
						}
						position++
						goto l551
					l552:
						position, tokenIndex = position551, tokenIndex551
						if buffer[position] != rune('X') {
							goto l550
						}
						position++
					}
				l551:
					{
						position553, tokenIndex553 := position, tokenIndex
						if !_rules[rule_]() {
							goto l550
						}
						position, tokenIndex = position553, tokenIndex553
					}
					goto l548
				l550:
					position, tokenIndex = position548, tokenIndex548
					{
						position555, tokenIndex555 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l556
						}
						position++
						goto l555
					l556:
						position, tokenIndex = position555, tokenIndex555
						if buffer[position] != rune('X') {
							goto l554
						}
						position++
					}
				l555:
					{
						position557, tokenIndex557 := position, tokenIndex
						if !_rules[ruleUninomialWord]() {
							goto l554
						}
						position, tokenIndex = position557, tokenIndex557
					}
					goto l548
				l554:
					position, tokenIndex = position548, tokenIndex548
					{
						position558, tokenIndex558 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l559
						}
						position++
						goto l558
					l559:
						position, tokenIndex = position558, tokenIndex558
						if buffer[position] != rune('X') {
							goto l546
						}
						position++
					}
				l558:
					{
						position560, tokenIndex560 := position, tokenIndex
						if !_rules[ruleEND]() {
							goto l546
						}
						position, tokenIndex = position560, tokenIndex560
					}
				}
			l548:
				add(ruleHybridChar, position547)
			}
			return true
		l546:
			position, tokenIndex = position546, tokenIndex546
			return false
		},
		/* 73 GraftChimeraChar <- <'+'> */
		func() bool {
			position561, tokenIndex561 := position, tokenIndex
			{
				position562 := position
				if buffer[position] != rune('+') {
					goto l561
				}
				position++
				add(ruleGraftChimeraChar, position562)
			}
			return true
		l561:
			position, tokenIndex = position561, tokenIndex561
			return false
		},
		/* 74 ApproxNameIgnored <- <.*> */
		func() bool {
			{
				position564 := position
			l565:
				{
					position566, tokenIndex566 := position, tokenIndex
					if !matchDot() {
						goto l566
					}
					goto l565
				l566:
					position, tokenIndex = position566, tokenIndex566
				}
				add(ruleApproxNameIgnored, position564)
			}
			return true
		},
		/* 75 Approximation <- <(('s' 'p' '.' _? ('n' 'r' '.')) / ('s' 'p' '.' _? ('a' 'f' 'f' '.')) / ('m' 'o' 'n' 's' 't' '.') / '?' / ((('s' 'p' 'p') / ('n' 'r') / ('s' 'p') / ('a' 'f' 'f') / ('s' 'p' 'e' 'c' 'i' 'e' 's')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position567, tokenIndex567 := position, tokenIndex
			{
				position568 := position
				{
					position569, tokenIndex569 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l570
					}
					position++
					if buffer[position] != rune('p') {
						goto l570
					}
					position++
					if buffer[position] != rune('.') {
						goto l570
					}
					position++
					{
						position571, tokenIndex571 := position, tokenIndex
						if !_rules[rule_]() {
							goto l571
						}
						goto l572
					l571:
						position, tokenIndex = position571, tokenIndex571
					}
				l572:
					if buffer[position] != rune('n') {
						goto l570
					}
					position++
					if buffer[position] != rune('r') {
						goto l570
					}
					position++
					if buffer[position] != rune('.') {
						goto l570
					}
					position++
					goto l569
				l570:
					position, tokenIndex = position569, tokenIndex569
					if buffer[position] != rune('s') {
						goto l573
					}
					position++
					if buffer[position] != rune('p') {
						goto l573
					}
					position++
					if buffer[position] != rune('.') {
						goto l573
					}
					position++
					{
						position574, tokenIndex574 := position, tokenIndex
						if !_rules[rule_]() {
							goto l574
						}
						goto l575
					l574:
						position, tokenIndex = position574, tokenIndex574
					}
				l575:
					if buffer[position] != rune('a') {
						goto l573
					}
					position++
					if buffer[position] != rune('f') {
						goto l573
					}
					position++
					if buffer[position] != rune('f') {
						goto l573
					}
					position++
					if buffer[position] != rune('.') {
						goto l573
					}
					position++
					goto l569
				l573:
					position, tokenIndex = position569, tokenIndex569
					if buffer[position] != rune('m') {
						goto l576
					}
					position++
					if buffer[position] != rune('o') {
						goto l576
					}
					position++
					if buffer[position] != rune('n') {
						goto l576
					}
					position++
					if buffer[position] != rune('s') {
						goto l576
					}
					position++
					if buffer[position] != rune('t') {
						goto l576
					}
					position++
					if buffer[position] != rune('.') {
						goto l576
					}
					position++
					goto l569
				l576:
					position, tokenIndex = position569, tokenIndex569
					if buffer[position] != rune('?') {
						goto l577
					}
					position++
					goto l569
				l577:
					position, tokenIndex = position569, tokenIndex569
					{
						position578, tokenIndex578 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l579
						}
						position++
						if buffer[position] != rune('p') {
							goto l579
						}
						position++
						if buffer[position] != rune('p') {
							goto l579
						}
						position++
						goto l578
					l579:
						position, tokenIndex = position578, tokenIndex578
						if buffer[position] != rune('n') {
							goto l580
						}
						position++
						if buffer[position] != rune('r') {
							goto l580
						}
						position++
						goto l578
					l580:
						position, tokenIndex = position578, tokenIndex578
						if buffer[position] != rune('s') {
							goto l581
						}
						position++
						if buffer[position] != rune('p') {
							goto l581
						}
						position++
						goto l578
					l581:
						position, tokenIndex = position578, tokenIndex578
						if buffer[position] != rune('a') {
							goto l582
						}
						position++
						if buffer[position] != rune('f') {
							goto l582
						}
						position++
						if buffer[position] != rune('f') {
							goto l582
						}
						position++
						goto l578
					l582:
						position, tokenIndex = position578, tokenIndex578
						if buffer[position] != rune('s') {
							goto l567
						}
						position++
						if buffer[position] != rune('p') {
							goto l567
						}
						position++
						if buffer[position] != rune('e') {
							goto l567
						}
						position++
						if buffer[position] != rune('c') {
							goto l567
						}
						position++
						if buffer[position] != rune('i') {
							goto l567
						}
						position++
						if buffer[position] != rune('e') {
							goto l567
						}
						position++
						if buffer[position] != rune('s') {
							goto l567
						}
						position++
					}
				l578:
					{
						position583, tokenIndex583 := position, tokenIndex
						{
							position585, tokenIndex585 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l584
							}
							position, tokenIndex = position585, tokenIndex585
						}
						goto l583
					l584:
						position, tokenIndex = position583, tokenIndex583
						if buffer[position] != rune('.') {
							goto l567
						}
						position++
					}
				l583:
				}
			l569:
				add(ruleApproximation, position568)
			}
			return true
		l567:
			position, tokenIndex = position567, tokenIndex567
			return false
		},
		/* 76 Authorship <- <((AuthorshipCombo / OriginalAuthorship) &(SpaceCharEOI / ';' / ','))> */
		func() bool {
			position586, tokenIndex586 := position, tokenIndex
			{
				position587 := position
				{
					position588, tokenIndex588 := position, tokenIndex
					if !_rules[ruleAuthorshipCombo]() {
						goto l589
					}
					goto l588
				l589:
					position, tokenIndex = position588, tokenIndex588
					if !_rules[ruleOriginalAuthorship]() {
						goto l586
					}
				}
			l588:
				{
					position590, tokenIndex590 := position, tokenIndex
					{
						position591, tokenIndex591 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l592
						}
						goto l591
					l592:
						position, tokenIndex = position591, tokenIndex591
						if buffer[position] != rune(';') {
							goto l593
						}
						position++
						goto l591
					l593:
						position, tokenIndex = position591, tokenIndex591
						if buffer[position] != rune(',') {
							goto l586
						}
						position++
					}
				l591:
					position, tokenIndex = position590, tokenIndex590
				}
				add(ruleAuthorship, position587)
			}
			return true
		l586:
			position, tokenIndex = position586, tokenIndex586
			return false
		},
		/* 77 AuthorshipCombo <- <(OriginalAuthorshipComb (_? CombinationAuthorship)?)> */
		func() bool {
			position594, tokenIndex594 := position, tokenIndex
			{
				position595 := position
				if !_rules[ruleOriginalAuthorshipComb]() {
					goto l594
				}
				{
					position596, tokenIndex596 := position, tokenIndex
					{
						position598, tokenIndex598 := position, tokenIndex
						if !_rules[rule_]() {
							goto l598
						}
						goto l599
					l598:
						position, tokenIndex = position598, tokenIndex598
					}
				l599:
					if !_rules[ruleCombinationAuthorship]() {
						goto l596
					}
					goto l597
				l596:
					position, tokenIndex = position596, tokenIndex596
				}
			l597:
				add(ruleAuthorshipCombo, position595)
			}
			return true
		l594:
			position, tokenIndex = position594, tokenIndex594
			return false
		},
		/* 78 OriginalAuthorship <- <AuthorsGroup> */
		func() bool {
			position600, tokenIndex600 := position, tokenIndex
			{
				position601 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l600
				}
				add(ruleOriginalAuthorship, position601)
			}
			return true
		l600:
			position, tokenIndex = position600, tokenIndex600
			return false
		},
		/* 79 OriginalAuthorshipComb <- <(BasionymAuthorshipYearMisformed / BasionymAuthorship / BasionymAuthorshipMissingParens)> */
		func() bool {
			position602, tokenIndex602 := position, tokenIndex
			{
				position603 := position
				{
					position604, tokenIndex604 := position, tokenIndex
					if !_rules[ruleBasionymAuthorshipYearMisformed]() {
						goto l605
					}
					goto l604
				l605:
					position, tokenIndex = position604, tokenIndex604
					if !_rules[ruleBasionymAuthorship]() {
						goto l606
					}
					goto l604
				l606:
					position, tokenIndex = position604, tokenIndex604
					if !_rules[ruleBasionymAuthorshipMissingParens]() {
						goto l602
					}
				}
			l604:
				add(ruleOriginalAuthorshipComb, position603)
			}
			return true
		l602:
			position, tokenIndex = position602, tokenIndex602
			return false
		},
		/* 80 CombinationAuthorship <- <AuthorsGroup> */
		func() bool {
			position607, tokenIndex607 := position, tokenIndex
			{
				position608 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l607
				}
				add(ruleCombinationAuthorship, position608)
			}
			return true
		l607:
			position, tokenIndex = position607, tokenIndex607
			return false
		},
		/* 81 BasionymAuthorshipMissingParens <- <(MissingParensStart / MissingParensEnd)> */
		func() bool {
			position609, tokenIndex609 := position, tokenIndex
			{
				position610 := position
				{
					position611, tokenIndex611 := position, tokenIndex
					if !_rules[ruleMissingParensStart]() {
						goto l612
					}
					goto l611
				l612:
					position, tokenIndex = position611, tokenIndex611
					if !_rules[ruleMissingParensEnd]() {
						goto l609
					}
				}
			l611:
				add(ruleBasionymAuthorshipMissingParens, position610)
			}
			return true
		l609:
			position, tokenIndex = position609, tokenIndex609
			return false
		},
		/* 82 MissingParensStart <- <('(' _? AuthorsGroup)> */
		func() bool {
			position613, tokenIndex613 := position, tokenIndex
			{
				position614 := position
				if buffer[position] != rune('(') {
					goto l613
				}
				position++
				{
					position615, tokenIndex615 := position, tokenIndex
					if !_rules[rule_]() {
						goto l615
					}
					goto l616
				l615:
					position, tokenIndex = position615, tokenIndex615
				}
			l616:
				if !_rules[ruleAuthorsGroup]() {
					goto l613
				}
				add(ruleMissingParensStart, position614)
			}
			return true
		l613:
			position, tokenIndex = position613, tokenIndex613
			return false
		},
		/* 83 MissingParensEnd <- <(AuthorsGroup _? ')')> */
		func() bool {
			position617, tokenIndex617 := position, tokenIndex
			{
				position618 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l617
				}
				{
					position619, tokenIndex619 := position, tokenIndex
					if !_rules[rule_]() {
						goto l619
					}
					goto l620
				l619:
					position, tokenIndex = position619, tokenIndex619
				}
			l620:
				if buffer[position] != rune(')') {
					goto l617
				}
				position++
				add(ruleMissingParensEnd, position618)
			}
			return true
		l617:
			position, tokenIndex = position617, tokenIndex617
			return false
		},
		/* 84 BasionymAuthorshipYearMisformed <- <('(' _? AuthorsGroup _? ')' (_? ',')? _? Year)> */
		func() bool {
			position621, tokenIndex621 := position, tokenIndex
			{
				position622 := position
				if buffer[position] != rune('(') {
					goto l621
				}
				position++
				{
					position623, tokenIndex623 := position, tokenIndex
					if !_rules[rule_]() {
						goto l623
					}
					goto l624
				l623:
					position, tokenIndex = position623, tokenIndex623
				}
			l624:
				if !_rules[ruleAuthorsGroup]() {
					goto l621
				}
				{
					position625, tokenIndex625 := position, tokenIndex
					if !_rules[rule_]() {
						goto l625
					}
					goto l626
				l625:
					position, tokenIndex = position625, tokenIndex625
				}
			l626:
				if buffer[position] != rune(')') {
					goto l621
				}
				position++
				{
					position627, tokenIndex627 := position, tokenIndex
					{
						position629, tokenIndex629 := position, tokenIndex
						if !_rules[rule_]() {
							goto l629
						}
						goto l630
					l629:
						position, tokenIndex = position629, tokenIndex629
					}
				l630:
					if buffer[position] != rune(',') {
						goto l627
					}
					position++
					goto l628
				l627:
					position, tokenIndex = position627, tokenIndex627
				}
			l628:
				{
					position631, tokenIndex631 := position, tokenIndex
					if !_rules[rule_]() {
						goto l631
					}
					goto l632
				l631:
					position, tokenIndex = position631, tokenIndex631
				}
			l632:
				if !_rules[ruleYear]() {
					goto l621
				}
				add(ruleBasionymAuthorshipYearMisformed, position622)
			}
			return true
		l621:
			position, tokenIndex = position621, tokenIndex621
			return false
		},
		/* 85 BasionymAuthorship <- <(BasionymAuthorship1 / BasionymAuthorship2Parens)> */
		func() bool {
			position633, tokenIndex633 := position, tokenIndex
			{
				position634 := position
				{
					position635, tokenIndex635 := position, tokenIndex
					if !_rules[ruleBasionymAuthorship1]() {
						goto l636
					}
					goto l635
				l636:
					position, tokenIndex = position635, tokenIndex635
					if !_rules[ruleBasionymAuthorship2Parens]() {
						goto l633
					}
				}
			l635:
				add(ruleBasionymAuthorship, position634)
			}
			return true
		l633:
			position, tokenIndex = position633, tokenIndex633
			return false
		},
		/* 86 BasionymAuthorship1 <- <('(' _? AuthorsGroup _? ')')> */
		func() bool {
			position637, tokenIndex637 := position, tokenIndex
			{
				position638 := position
				if buffer[position] != rune('(') {
					goto l637
				}
				position++
				{
					position639, tokenIndex639 := position, tokenIndex
					if !_rules[rule_]() {
						goto l639
					}
					goto l640
				l639:
					position, tokenIndex = position639, tokenIndex639
				}
			l640:
				if !_rules[ruleAuthorsGroup]() {
					goto l637
				}
				{
					position641, tokenIndex641 := position, tokenIndex
					if !_rules[rule_]() {
						goto l641
					}
					goto l642
				l641:
					position, tokenIndex = position641, tokenIndex641
				}
			l642:
				if buffer[position] != rune(')') {
					goto l637
				}
				position++
				add(ruleBasionymAuthorship1, position638)
			}
			return true
		l637:
			position, tokenIndex = position637, tokenIndex637
			return false
		},
		/* 87 BasionymAuthorship2Parens <- <('(' _? '(' _? AuthorsGroup _? ')' _? ')')> */
		func() bool {
			position643, tokenIndex643 := position, tokenIndex
			{
				position644 := position
				if buffer[position] != rune('(') {
					goto l643
				}
				position++
				{
					position645, tokenIndex645 := position, tokenIndex
					if !_rules[rule_]() {
						goto l645
					}
					goto l646
				l645:
					position, tokenIndex = position645, tokenIndex645
				}
			l646:
				if buffer[position] != rune('(') {
					goto l643
				}
				position++
				{
					position647, tokenIndex647 := position, tokenIndex
					if !_rules[rule_]() {
						goto l647
					}
					goto l648
				l647:
					position, tokenIndex = position647, tokenIndex647
				}
			l648:
				if !_rules[ruleAuthorsGroup]() {
					goto l643
				}
				{
					position649, tokenIndex649 := position, tokenIndex
					if !_rules[rule_]() {
						goto l649
					}
					goto l650
				l649:
					position, tokenIndex = position649, tokenIndex649
				}
			l650:
				if buffer[position] != rune(')') {
					goto l643
				}
				position++
				{
					position651, tokenIndex651 := position, tokenIndex
					if !_rules[rule_]() {
						goto l651
					}
					goto l652
				l651:
					position, tokenIndex = position651, tokenIndex651
				}
			l652:
				if buffer[position] != rune(')') {
					goto l643
				}
				position++
				add(ruleBasionymAuthorship2Parens, position644)
			}
			return true
		l643:
			position, tokenIndex = position643, tokenIndex643
			return false
		},
		/* 88 AuthorsGroup <- <(AuthorsTeam (','? _ (AuthorEmend / AuthorEx / AuthorIn) AuthorsTeam)?)> */
		func() bool {
			position653, tokenIndex653 := position, tokenIndex
			{
				position654 := position
				if !_rules[ruleAuthorsTeam]() {
					goto l653
				}
				{
					position655, tokenIndex655 := position, tokenIndex
					{
						position657, tokenIndex657 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l657
						}
						position++
						goto l658
					l657:
						position, tokenIndex = position657, tokenIndex657
					}
				l658:
					if !_rules[rule_]() {
						goto l655
					}
					{
						position659, tokenIndex659 := position, tokenIndex
						if !_rules[ruleAuthorEmend]() {
							goto l660
						}
						goto l659
					l660:
						position, tokenIndex = position659, tokenIndex659
						if !_rules[ruleAuthorEx]() {
							goto l661
						}
						goto l659
					l661:
						position, tokenIndex = position659, tokenIndex659
						if !_rules[ruleAuthorIn]() {
							goto l655
						}
					}
				l659:
					if !_rules[ruleAuthorsTeam]() {
						goto l655
					}
					goto l656
				l655:
					position, tokenIndex = position655, tokenIndex655
				}
			l656:
				add(ruleAuthorsGroup, position654)
			}
			return true
		l653:
			position, tokenIndex = position653, tokenIndex653
			return false
		},
		/* 89 AuthorsTeam <- <(Author (AuthorSep Author)* (_? ','? _? Year)?)> */
		func() bool {
			position662, tokenIndex662 := position, tokenIndex
			{
				position663 := position
				if !_rules[ruleAuthor]() {
					goto l662
				}
			l664:
				{
					position665, tokenIndex665 := position, tokenIndex
					if !_rules[ruleAuthorSep]() {
						goto l665
					}
					if !_rules[ruleAuthor]() {
						goto l665
					}
					goto l664
				l665:
					position, tokenIndex = position665, tokenIndex665
				}
				{
					position666, tokenIndex666 := position, tokenIndex
					{
						position668, tokenIndex668 := position, tokenIndex
						if !_rules[rule_]() {
							goto l668
						}
						goto l669
					l668:
						position, tokenIndex = position668, tokenIndex668
					}
				l669:
					{
						position670, tokenIndex670 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l670
						}
						position++
						goto l671
					l670:
						position, tokenIndex = position670, tokenIndex670
					}
				l671:
					{
						position672, tokenIndex672 := position, tokenIndex
						if !_rules[rule_]() {
							goto l672
						}
						goto l673
					l672:
						position, tokenIndex = position672, tokenIndex672
					}
				l673:
					if !_rules[ruleYear]() {
						goto l666
					}
					goto l667
				l666:
					position, tokenIndex = position666, tokenIndex666
				}
			l667:
				add(ruleAuthorsTeam, position663)
			}
			return true
		l662:
			position, tokenIndex = position662, tokenIndex662
			return false
		},
		/* 90 AuthorSep <- <(AuthorSep1 / AuthorSep2)> */
		func() bool {
			position674, tokenIndex674 := position, tokenIndex
			{
				position675 := position
				{
					position676, tokenIndex676 := position, tokenIndex
					if !_rules[ruleAuthorSep1]() {
						goto l677
					}
					goto l676
				l677:
					position, tokenIndex = position676, tokenIndex676
					if !_rules[ruleAuthorSep2]() {
						goto l674
					}
				}
			l676:
				add(ruleAuthorSep, position675)
			}
			return true
		l674:
			position, tokenIndex = position674, tokenIndex674
			return false
		},
		/* 91 AuthorSep1 <- <(_? (',' _)? ('&' / AuthorSepSpanish / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd')) _?)> */
		func() bool {
			position678, tokenIndex678 := position, tokenIndex
			{
				position679 := position
				{
					position680, tokenIndex680 := position, tokenIndex
					if !_rules[rule_]() {
						goto l680
					}
					goto l681
				l680:
					position, tokenIndex = position680, tokenIndex680
				}
			l681:
				{
					position682, tokenIndex682 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l682
					}
					position++
					if !_rules[rule_]() {
						goto l682
					}
					goto l683
				l682:
					position, tokenIndex = position682, tokenIndex682
				}
			l683:
				{
					position684, tokenIndex684 := position, tokenIndex
					if buffer[position] != rune('&') {
						goto l685
					}
					position++
					goto l684
				l685:
					position, tokenIndex = position684, tokenIndex684
					if !_rules[ruleAuthorSepSpanish]() {
						goto l686
					}
					goto l684
				l686:
					position, tokenIndex = position684, tokenIndex684
					if buffer[position] != rune('e') {
						goto l687
					}
					position++
					if buffer[position] != rune('t') {
						goto l687
					}
					position++
					goto l684
				l687:
					position, tokenIndex = position684, tokenIndex684
					if buffer[position] != rune('a') {
						goto l688
					}
					position++
					if buffer[position] != rune('n') {
						goto l688
					}
					position++
					if buffer[position] != rune('d') {
						goto l688
					}
					position++
					goto l684
				l688:
					position, tokenIndex = position684, tokenIndex684
					if buffer[position] != rune('a') {
						goto l678
					}
					position++
					if buffer[position] != rune('p') {
						goto l678
					}
					position++
					if buffer[position] != rune('u') {
						goto l678
					}
					position++
					if buffer[position] != rune('d') {
						goto l678
					}
					position++
				}
			l684:
				{
					position689, tokenIndex689 := position, tokenIndex
					if !_rules[rule_]() {
						goto l689
					}
					goto l690
				l689:
					position, tokenIndex = position689, tokenIndex689
				}
			l690:
				add(ruleAuthorSep1, position679)
			}
			return true
		l678:
			position, tokenIndex = position678, tokenIndex678
			return false
		},
		/* 92 AuthorSep2 <- <(_? ',' _?)> */
		func() bool {
			position691, tokenIndex691 := position, tokenIndex
			{
				position692 := position
				{
					position693, tokenIndex693 := position, tokenIndex
					if !_rules[rule_]() {
						goto l693
					}
					goto l694
				l693:
					position, tokenIndex = position693, tokenIndex693
				}
			l694:
				if buffer[position] != rune(',') {
					goto l691
				}
				position++
				{
					position695, tokenIndex695 := position, tokenIndex
					if !_rules[rule_]() {
						goto l695
					}
					goto l696
				l695:
					position, tokenIndex = position695, tokenIndex695
				}
			l696:
				add(ruleAuthorSep2, position692)
			}
			return true
		l691:
			position, tokenIndex = position691, tokenIndex691
			return false
		},
		/* 93 AuthorSepSpanish <- <(_? 'y' _?)> */
		func() bool {
			position697, tokenIndex697 := position, tokenIndex
			{
				position698 := position
				{
					position699, tokenIndex699 := position, tokenIndex
					if !_rules[rule_]() {
						goto l699
					}
					goto l700
				l699:
					position, tokenIndex = position699, tokenIndex699
				}
			l700:
				if buffer[position] != rune('y') {
					goto l697
				}
				position++
				{
					position701, tokenIndex701 := position, tokenIndex
					if !_rules[rule_]() {
						goto l701
					}
					goto l702
				l701:
					position, tokenIndex = position701, tokenIndex701
				}
			l702:
				add(ruleAuthorSepSpanish, position698)
			}
			return true
		l697:
			position, tokenIndex = position697, tokenIndex697
			return false
		},
		/* 94 AuthorEx <- <('e' 'x' '.'? _)> */
		func() bool {
			position703, tokenIndex703 := position, tokenIndex
			{
				position704 := position
				if buffer[position] != rune('e') {
					goto l703
				}
				position++
				if buffer[position] != rune('x') {
					goto l703
				}
				position++
				{
					position705, tokenIndex705 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l705
					}
					position++
					goto l706
				l705:
					position, tokenIndex = position705, tokenIndex705
				}
			l706:
				if !_rules[rule_]() {
					goto l703
				}
				add(ruleAuthorEx, position704)
			}
			return true
		l703:
			position, tokenIndex = position703, tokenIndex703
			return false
		},
		/* 95 AuthorIn <- <((('m' 's' _ ('i' 'n')) / ('i' 'n')) _)> */
		func() bool {
			position707, tokenIndex707 := position, tokenIndex
			{
				position708 := position
				{
					position709, tokenIndex709 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l710
					}
					position++
					if buffer[position] != rune('s') {
						goto l710
					}
					position++
					if !_rules[rule_]() {
						goto l710
					}
					if buffer[position] != rune('i') {
						goto l710
					}
					position++
					if buffer[position] != rune('n') {
						goto l710
					}
					position++
					goto l709
				l710:
					position, tokenIndex = position709, tokenIndex709
					if buffer[position] != rune('i') {
						goto l707
					}
					position++
					if buffer[position] != rune('n') {
						goto l707
					}
					position++
				}
			l709:
				if !_rules[rule_]() {
					goto l707
				}
				add(ruleAuthorIn, position708)
			}
			return true
		l707:
			position, tokenIndex = position707, tokenIndex707
			return false
		},
		/* 96 AuthorEmend <- <('e' 'm' 'e' 'n' 'd' '.'? _)> */
		func() bool {
			position711, tokenIndex711 := position, tokenIndex
			{
				position712 := position
				if buffer[position] != rune('e') {
					goto l711
				}
				position++
				if buffer[position] != rune('m') {
					goto l711
				}
				position++
				if buffer[position] != rune('e') {
					goto l711
				}
				position++
				if buffer[position] != rune('n') {
					goto l711
				}
				position++
				if buffer[position] != rune('d') {
					goto l711
				}
				position++
				{
					position713, tokenIndex713 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l713
					}
					position++
					goto l714
				l713:
					position, tokenIndex = position713, tokenIndex713
				}
			l714:
				if !_rules[rule_]() {
					goto l711
				}
				add(ruleAuthorEmend, position712)
			}
			return true
		l711:
			position, tokenIndex = position711, tokenIndex711
			return false
		},
		/* 97 Author <- <((Author0 / Author1 / Author2 / UnknownAuthor) (_ AuthorEtAl)?)> */
		func() bool {
			position715, tokenIndex715 := position, tokenIndex
			{
				position716 := position
				{
					position717, tokenIndex717 := position, tokenIndex
					if !_rules[ruleAuthor0]() {
						goto l718
					}
					goto l717
				l718:
					position, tokenIndex = position717, tokenIndex717
					if !_rules[ruleAuthor1]() {
						goto l719
					}
					goto l717
				l719:
					position, tokenIndex = position717, tokenIndex717
					if !_rules[ruleAuthor2]() {
						goto l720
					}
					goto l717
				l720:
					position, tokenIndex = position717, tokenIndex717
					if !_rules[ruleUnknownAuthor]() {
						goto l715
					}
				}
			l717:
				{
					position721, tokenIndex721 := position, tokenIndex
					if !_rules[rule_]() {
						goto l721
					}
					if !_rules[ruleAuthorEtAl]() {
						goto l721
					}
					goto l722
				l721:
					position, tokenIndex = position721, tokenIndex721
				}
			l722:
				add(ruleAuthor, position716)
			}
			return true
		l715:
			position, tokenIndex = position715, tokenIndex715
			return false
		},
		/* 98 Author0 <- <(Author2 FiliusFNoSpace)> */
		func() bool {
			position723, tokenIndex723 := position, tokenIndex
			{
				position724 := position
				if !_rules[ruleAuthor2]() {
					goto l723
				}
				if !_rules[ruleFiliusFNoSpace]() {
					goto l723
				}
				add(ruleAuthor0, position724)
			}
			return true
		l723:
			position, tokenIndex = position723, tokenIndex723
			return false
		},
		/* 99 Author1 <- <(Author2 _? (Filius / AuthorSuffix))> */
		func() bool {
			position725, tokenIndex725 := position, tokenIndex
			{
				position726 := position
				if !_rules[ruleAuthor2]() {
					goto l725
				}
				{
					position727, tokenIndex727 := position, tokenIndex
					if !_rules[rule_]() {
						goto l727
					}
					goto l728
				l727:
					position, tokenIndex = position727, tokenIndex727
				}
			l728:
				{
					position729, tokenIndex729 := position, tokenIndex
					if !_rules[ruleFilius]() {
						goto l730
					}
					goto l729
				l730:
					position, tokenIndex = position729, tokenIndex729
					if !_rules[ruleAuthorSuffix]() {
						goto l725
					}
				}
			l729:
				add(ruleAuthor1, position726)
			}
			return true
		l725:
			position, tokenIndex = position725, tokenIndex725
			return false
		},
		/* 100 Author2 <- <(AuthorWord (_? AuthorWord)*)> */
		func() bool {
			position731, tokenIndex731 := position, tokenIndex
			{
				position732 := position
				if !_rules[ruleAuthorWord]() {
					goto l731
				}
			l733:
				{
					position734, tokenIndex734 := position, tokenIndex
					{
						position735, tokenIndex735 := position, tokenIndex
						if !_rules[rule_]() {
							goto l735
						}
						goto l736
					l735:
						position, tokenIndex = position735, tokenIndex735
					}
				l736:
					if !_rules[ruleAuthorWord]() {
						goto l734
					}
					goto l733
				l734:
					position, tokenIndex = position734, tokenIndex734
				}
				add(ruleAuthor2, position732)
			}
			return true
		l731:
			position, tokenIndex = position731, tokenIndex731
			return false
		},
		/* 101 UnknownAuthor <- <('?' / ((('a' 'u' 'c' 't') / ('a' 'n' 'o' 'n')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position737, tokenIndex737 := position, tokenIndex
			{
				position738 := position
				{
					position739, tokenIndex739 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l740
					}
					position++
					goto l739
				l740:
					position, tokenIndex = position739, tokenIndex739
					{
						position741, tokenIndex741 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l742
						}
						position++
						if buffer[position] != rune('u') {
							goto l742
						}
						position++
						if buffer[position] != rune('c') {
							goto l742
						}
						position++
						if buffer[position] != rune('t') {
							goto l742
						}
						position++
						goto l741
					l742:
						position, tokenIndex = position741, tokenIndex741
						if buffer[position] != rune('a') {
							goto l737
						}
						position++
						if buffer[position] != rune('n') {
							goto l737
						}
						position++
						if buffer[position] != rune('o') {
							goto l737
						}
						position++
						if buffer[position] != rune('n') {
							goto l737
						}
						position++
					}
				l741:
					{
						position743, tokenIndex743 := position, tokenIndex
						{
							position745, tokenIndex745 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l744
							}
							position, tokenIndex = position745, tokenIndex745
						}
						goto l743
					l744:
						position, tokenIndex = position743, tokenIndex743
						if buffer[position] != rune('.') {
							goto l737
						}
						position++
					}
				l743:
				}
			l739:
				add(ruleUnknownAuthor, position738)
			}
			return true
		l737:
			position, tokenIndex = position737, tokenIndex737
			return false
		},
		/* 102 AuthorWord <- <(!(HybridChar / (('b' / 'B') ('o' / 'O') ('l' / 'L') ('d' / 'D') ':')) (AuthorDashInitials / AuthorWord1 / AuthorWord2 / AuthorWord3 / AuthorWord4 / AuthorPrefix))> */
		func() bool {
			position746, tokenIndex746 := position, tokenIndex
			{
				position747 := position
				{
					position748, tokenIndex748 := position, tokenIndex
					{
						position749, tokenIndex749 := position, tokenIndex
						if !_rules[ruleHybridChar]() {
							goto l750
						}
						goto l749
					l750:
						position, tokenIndex = position749, tokenIndex749
						{
							position751, tokenIndex751 := position, tokenIndex
							if buffer[position] != rune('b') {
								goto l752
							}
							position++
							goto l751
						l752:
							position, tokenIndex = position751, tokenIndex751
							if buffer[position] != rune('B') {
								goto l748
							}
							position++
						}
					l751:
						{
							position753, tokenIndex753 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l754
							}
							position++
							goto l753
						l754:
							position, tokenIndex = position753, tokenIndex753
							if buffer[position] != rune('O') {
								goto l748
							}
							position++
						}
					l753:
						{
							position755, tokenIndex755 := position, tokenIndex
							if buffer[position] != rune('l') {
								goto l756
							}
							position++
							goto l755
						l756:
							position, tokenIndex = position755, tokenIndex755
							if buffer[position] != rune('L') {
								goto l748
							}
							position++
						}
					l755:
						{
							position757, tokenIndex757 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l758
							}
							position++
							goto l757
						l758:
							position, tokenIndex = position757, tokenIndex757
							if buffer[position] != rune('D') {
								goto l748
							}
							position++
						}
					l757:
						if buffer[position] != rune(':') {
							goto l748
						}
						position++
					}
				l749:
					goto l746
				l748:
					position, tokenIndex = position748, tokenIndex748
				}
				{
					position759, tokenIndex759 := position, tokenIndex
					if !_rules[ruleAuthorDashInitials]() {
						goto l760
					}
					goto l759
				l760:
					position, tokenIndex = position759, tokenIndex759
					if !_rules[ruleAuthorWord1]() {
						goto l761
					}
					goto l759
				l761:
					position, tokenIndex = position759, tokenIndex759
					if !_rules[ruleAuthorWord2]() {
						goto l762
					}
					goto l759
				l762:
					position, tokenIndex = position759, tokenIndex759
					if !_rules[ruleAuthorWord3]() {
						goto l763
					}
					goto l759
				l763:
					position, tokenIndex = position759, tokenIndex759
					if !_rules[ruleAuthorWord4]() {
						goto l764
					}
					goto l759
				l764:
					position, tokenIndex = position759, tokenIndex759
					if !_rules[ruleAuthorPrefix]() {
						goto l746
					}
				}
			l759:
				add(ruleAuthorWord, position747)
			}
			return true
		l746:
			position, tokenIndex = position746, tokenIndex746
			return false
		},
		/* 103 AuthorEtAl <- <(('a' 'r' 'g' '.') / ('e' 't' ' ' 'a' 'l' '.' '{' '?' '}') / ((('e' 't') / '&') (' ' 'a' 'l') '.'?))> */
		func() bool {
			position765, tokenIndex765 := position, tokenIndex
			{
				position766 := position
				{
					position767, tokenIndex767 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l768
					}
					position++
					if buffer[position] != rune('r') {
						goto l768
					}
					position++
					if buffer[position] != rune('g') {
						goto l768
					}
					position++
					if buffer[position] != rune('.') {
						goto l768
					}
					position++
					goto l767
				l768:
					position, tokenIndex = position767, tokenIndex767
					if buffer[position] != rune('e') {
						goto l769
					}
					position++
					if buffer[position] != rune('t') {
						goto l769
					}
					position++
					if buffer[position] != rune(' ') {
						goto l769
					}
					position++
					if buffer[position] != rune('a') {
						goto l769
					}
					position++
					if buffer[position] != rune('l') {
						goto l769
					}
					position++
					if buffer[position] != rune('.') {
						goto l769
					}
					position++
					if buffer[position] != rune('{') {
						goto l769
					}
					position++
					if buffer[position] != rune('?') {
						goto l769
					}
					position++
					if buffer[position] != rune('}') {
						goto l769
					}
					position++
					goto l767
				l769:
					position, tokenIndex = position767, tokenIndex767
					{
						position770, tokenIndex770 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l771
						}
						position++
						if buffer[position] != rune('t') {
							goto l771
						}
						position++
						goto l770
					l771:
						position, tokenIndex = position770, tokenIndex770
						if buffer[position] != rune('&') {
							goto l765
						}
						position++
					}
				l770:
					if buffer[position] != rune(' ') {
						goto l765
					}
					position++
					if buffer[position] != rune('a') {
						goto l765
					}
					position++
					if buffer[position] != rune('l') {
						goto l765
					}
					position++
					{
						position772, tokenIndex772 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l772
						}
						position++
						goto l773
					l772:
						position, tokenIndex = position772, tokenIndex772
					}
				l773:
				}
			l767:
				add(ruleAuthorEtAl, position766)
			}
			return true
		l765:
			position, tokenIndex = position765, tokenIndex765
			return false
		},
		/* 104 AuthorWord1 <- <(('d' 'u' 'P' 'o' 'n' 't') / ('d' 'e' 'g' 'l' 'i') / ('A' 'r' 'a' 'n' 'g' 'o' ' ' 'y' ' ' 'M' 'o' 'l' 'i' 'n' 'a'))> */
		func() bool {
			position774, tokenIndex774 := position, tokenIndex
			{
				position775 := position
				{
					position776, tokenIndex776 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l777
					}
					position++
					if buffer[position] != rune('u') {
						goto l777
					}
					position++
					if buffer[position] != rune('P') {
						goto l777
					}
					position++
					if buffer[position] != rune('o') {
						goto l777
					}
					position++
					if buffer[position] != rune('n') {
						goto l777
					}
					position++
					if buffer[position] != rune('t') {
						goto l777
					}
					position++
					goto l776
				l777:
					position, tokenIndex = position776, tokenIndex776
					if buffer[position] != rune('d') {
						goto l778
					}
					position++
					if buffer[position] != rune('e') {
						goto l778
					}
					position++
					if buffer[position] != rune('g') {
						goto l778
					}
					position++
					if buffer[position] != rune('l') {
						goto l778
					}
					position++
					if buffer[position] != rune('i') {
						goto l778
					}
					position++
					goto l776
				l778:
					position, tokenIndex = position776, tokenIndex776
					if buffer[position] != rune('A') {
						goto l774
					}
					position++
					if buffer[position] != rune('r') {
						goto l774
					}
					position++
					if buffer[position] != rune('a') {
						goto l774
					}
					position++
					if buffer[position] != rune('n') {
						goto l774
					}
					position++
					if buffer[position] != rune('g') {
						goto l774
					}
					position++
					if buffer[position] != rune('o') {
						goto l774
					}
					position++
					if buffer[position] != rune(' ') {
						goto l774
					}
					position++
					if buffer[position] != rune('y') {
						goto l774
					}
					position++
					if buffer[position] != rune(' ') {
						goto l774
					}
					position++
					if buffer[position] != rune('M') {
						goto l774
					}
					position++
					if buffer[position] != rune('o') {
						goto l774
					}
					position++
					if buffer[position] != rune('l') {
						goto l774
					}
					position++
					if buffer[position] != rune('i') {
						goto l774
					}
					position++
					if buffer[position] != rune('n') {
						goto l774
					}
					position++
					if buffer[position] != rune('a') {
						goto l774
					}
					position++
				}
			l776:
				add(ruleAuthorWord1, position775)
			}
			return true
		l774:
			position, tokenIndex = position774, tokenIndex774
			return false
		},
		/* 105 AuthorWord2 <- <((AuthorWord3 / AuthorWord4) Dash (AuthorWordSoft / AuthorInitial) (Dash (AuthorWordSoft / AuthorInitial))?)> */
		func() bool {
			position779, tokenIndex779 := position, tokenIndex
			{
				position780 := position
				{
					position781, tokenIndex781 := position, tokenIndex
					if !_rules[ruleAuthorWord3]() {
						goto l782
					}
					goto l781
				l782:
					position, tokenIndex = position781, tokenIndex781
					if !_rules[ruleAuthorWord4]() {
						goto l779
					}
				}
			l781:
				if !_rules[ruleDash]() {
					goto l779
				}
				{
					position783, tokenIndex783 := position, tokenIndex
					if !_rules[ruleAuthorWordSoft]() {
						goto l784
					}
					goto l783
				l784:
					position, tokenIndex = position783, tokenIndex783
					if !_rules[ruleAuthorInitial]() {
						goto l779
					}
				}
			l783:
				{
					position785, tokenIndex785 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l785
					}
					{
						position787, tokenIndex787 := position, tokenIndex
						if !_rules[ruleAuthorWordSoft]() {
							goto l788
						}
						goto l787
					l788:
						position, tokenIndex = position787, tokenIndex787
						if !_rules[ruleAuthorInitial]() {
							goto l785
						}
					}
				l787:
					goto l786
				l785:
					position, tokenIndex = position785, tokenIndex785
				}
			l786:
				add(ruleAuthorWord2, position780)
			}
			return true
		l779:
			position, tokenIndex = position779, tokenIndex779
			return false
		},
		/* 106 AuthorWord3 <- <(AuthorPrefixGlued2 (CapAuthorWord / AuthorLowerChar+) '.'?)> */
		func() bool {
			position789, tokenIndex789 := position, tokenIndex
			{
				position790 := position
				if !_rules[ruleAuthorPrefixGlued2]() {
					goto l789
				}
				{
					position791, tokenIndex791 := position, tokenIndex
					if !_rules[ruleCapAuthorWord]() {
						goto l792
					}
					goto l791
				l792:
					position, tokenIndex = position791, tokenIndex791
					if !_rules[ruleAuthorLowerChar]() {
						goto l789
					}
				l793:
					{
						position794, tokenIndex794 := position, tokenIndex
						if !_rules[ruleAuthorLowerChar]() {
							goto l794
						}
						goto l793
					l794:
						position, tokenIndex = position794, tokenIndex794
					}
				}
			l791:
				{
					position795, tokenIndex795 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l795
					}
					position++
					goto l796
				l795:
					position, tokenIndex = position795, tokenIndex795
				}
			l796:
				add(ruleAuthorWord3, position790)
			}
			return true
		l789:
			position, tokenIndex = position789, tokenIndex789
			return false
		},
		/* 107 AuthorWord4 <- <(AuthorPrefixGlued1? (AllCapsAuthorWord / CapAuthorWord) '.'?)> */
		func() bool {
			position797, tokenIndex797 := position, tokenIndex
			{
				position798 := position
				{
					position799, tokenIndex799 := position, tokenIndex
					if !_rules[ruleAuthorPrefixGlued1]() {
						goto l799
					}
					goto l800
				l799:
					position, tokenIndex = position799, tokenIndex799
				}
			l800:
				{
					position801, tokenIndex801 := position, tokenIndex
					if !_rules[ruleAllCapsAuthorWord]() {
						goto l802
					}
					goto l801
				l802:
					position, tokenIndex = position801, tokenIndex801
					if !_rules[ruleCapAuthorWord]() {
						goto l797
					}
				}
			l801:
				{
					position803, tokenIndex803 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l803
					}
					position++
					goto l804
				l803:
					position, tokenIndex = position803, tokenIndex803
				}
			l804:
				add(ruleAuthorWord4, position798)
			}
			return true
		l797:
			position, tokenIndex = position797, tokenIndex797
			return false
		},
		/* 108 AuthorDashInitials <- <(AuthorUpperChar '.'? Dash AuthorUpperChar '.'?)> */
		func() bool {
			position805, tokenIndex805 := position, tokenIndex
			{
				position806 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l805
				}
				{
					position807, tokenIndex807 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l807
					}
					position++
					goto l808
				l807:
					position, tokenIndex = position807, tokenIndex807
				}
			l808:
				if !_rules[ruleDash]() {
					goto l805
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l805
				}
				{
					position809, tokenIndex809 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l809
					}
					position++
					goto l810
				l809:
					position, tokenIndex = position809, tokenIndex809
				}
			l810:
				add(ruleAuthorDashInitials, position806)
			}
			return true
		l805:
			position, tokenIndex = position805, tokenIndex805
			return false
		},
		/* 109 AuthorInitial <- <(AuthorUpperChar '.'?)> */
		func() bool {
			position811, tokenIndex811 := position, tokenIndex
			{
				position812 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l811
				}
				{
					position813, tokenIndex813 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l813
					}
					position++
					goto l814
				l813:
					position, tokenIndex = position813, tokenIndex813
				}
			l814:
				add(ruleAuthorInitial, position812)
			}
			return true
		l811:
			position, tokenIndex = position811, tokenIndex811
			return false
		},
		/* 110 AuthorWordSoft <- <(((AuthorUpperChar (AuthorUpperChar+ / AuthorLowerChar+)) / AuthorLowerChar+) '.'?)> */
		func() bool {
			position815, tokenIndex815 := position, tokenIndex
			{
				position816 := position
				{
					position817, tokenIndex817 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l818
					}
					{
						position819, tokenIndex819 := position, tokenIndex
						if !_rules[ruleAuthorUpperChar]() {
							goto l820
						}
					l821:
						{
							position822, tokenIndex822 := position, tokenIndex
							if !_rules[ruleAuthorUpperChar]() {
								goto l822
							}
							goto l821
						l822:
							position, tokenIndex = position822, tokenIndex822
						}
						goto l819
					l820:
						position, tokenIndex = position819, tokenIndex819
						if !_rules[ruleAuthorLowerChar]() {
							goto l818
						}
					l823:
						{
							position824, tokenIndex824 := position, tokenIndex
							if !_rules[ruleAuthorLowerChar]() {
								goto l824
							}
							goto l823
						l824:
							position, tokenIndex = position824, tokenIndex824
						}
					}
				l819:
					goto l817
				l818:
					position, tokenIndex = position817, tokenIndex817
					if !_rules[ruleAuthorLowerChar]() {
						goto l815
					}
				l825:
					{
						position826, tokenIndex826 := position, tokenIndex
						if !_rules[ruleAuthorLowerChar]() {
							goto l826
						}
						goto l825
					l826:
						position, tokenIndex = position826, tokenIndex826
					}
				}
			l817:
				{
					position827, tokenIndex827 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l827
					}
					position++
					goto l828
				l827:
					position, tokenIndex = position827, tokenIndex827
				}
			l828:
				add(ruleAuthorWordSoft, position816)
			}
			return true
		l815:
			position, tokenIndex = position815, tokenIndex815
			return false
		},
		/* 111 CapAuthorWord <- <(AuthorUpperChar AuthorLowerChar*)> */
		func() bool {
			position829, tokenIndex829 := position, tokenIndex
			{
				position830 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l829
				}
			l831:
				{
					position832, tokenIndex832 := position, tokenIndex
					if !_rules[ruleAuthorLowerChar]() {
						goto l832
					}
					goto l831
				l832:
					position, tokenIndex = position832, tokenIndex832
				}
				add(ruleCapAuthorWord, position830)
			}
			return true
		l829:
			position, tokenIndex = position829, tokenIndex829
			return false
		},
		/* 112 AllCapsAuthorWord <- <(AuthorUpperChar AuthorUpperChar+)> */
		func() bool {
			position833, tokenIndex833 := position, tokenIndex
			{
				position834 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l833
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l833
				}
			l835:
				{
					position836, tokenIndex836 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l836
					}
					goto l835
				l836:
					position, tokenIndex = position836, tokenIndex836
				}
				add(ruleAllCapsAuthorWord, position834)
			}
			return true
		l833:
			position, tokenIndex = position833, tokenIndex833
			return false
		},
		/* 113 Filius <- <(FiliusF / ('f' 'i' 'l' '.') / ('f' 'i' 'l' 'i' 'u' 's'))> */
		func() bool {
			position837, tokenIndex837 := position, tokenIndex
			{
				position838 := position
				{
					position839, tokenIndex839 := position, tokenIndex
					if !_rules[ruleFiliusF]() {
						goto l840
					}
					goto l839
				l840:
					position, tokenIndex = position839, tokenIndex839
					if buffer[position] != rune('f') {
						goto l841
					}
					position++
					if buffer[position] != rune('i') {
						goto l841
					}
					position++
					if buffer[position] != rune('l') {
						goto l841
					}
					position++
					if buffer[position] != rune('.') {
						goto l841
					}
					position++
					goto l839
				l841:
					position, tokenIndex = position839, tokenIndex839
					if buffer[position] != rune('f') {
						goto l837
					}
					position++
					if buffer[position] != rune('i') {
						goto l837
					}
					position++
					if buffer[position] != rune('l') {
						goto l837
					}
					position++
					if buffer[position] != rune('i') {
						goto l837
					}
					position++
					if buffer[position] != rune('u') {
						goto l837
					}
					position++
					if buffer[position] != rune('s') {
						goto l837
					}
					position++
				}
			l839:
				add(ruleFilius, position838)
			}
			return true
		l837:
			position, tokenIndex = position837, tokenIndex837
			return false
		},
		/* 114 FiliusF <- <('f' '.' !(_ Word))> */
		func() bool {
			position842, tokenIndex842 := position, tokenIndex
			{
				position843 := position
				if buffer[position] != rune('f') {
					goto l842
				}
				position++
				if buffer[position] != rune('.') {
					goto l842
				}
				position++
				{
					position844, tokenIndex844 := position, tokenIndex
					if !_rules[rule_]() {
						goto l844
					}
					if !_rules[ruleWord]() {
						goto l844
					}
					goto l842
				l844:
					position, tokenIndex = position844, tokenIndex844
				}
				add(ruleFiliusF, position843)
			}
			return true
		l842:
			position, tokenIndex = position842, tokenIndex842
			return false
		},
		/* 115 FiliusFNoSpace <- <('f' '.')> */
		func() bool {
			position845, tokenIndex845 := position, tokenIndex
			{
				position846 := position
				if buffer[position] != rune('f') {
					goto l845
				}
				position++
				if buffer[position] != rune('.') {
					goto l845
				}
				position++
				add(ruleFiliusFNoSpace, position846)
			}
			return true
		l845:
			position, tokenIndex = position845, tokenIndex845
			return false
		},
		/* 116 AuthorSuffix <- <(('b' 'i' 's') / ('t' 'e' 'r'))> */
		func() bool {
			position847, tokenIndex847 := position, tokenIndex
			{
				position848 := position
				{
					position849, tokenIndex849 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l850
					}
					position++
					if buffer[position] != rune('i') {
						goto l850
					}
					position++
					if buffer[position] != rune('s') {
						goto l850
					}
					position++
					goto l849
				l850:
					position, tokenIndex = position849, tokenIndex849
					if buffer[position] != rune('t') {
						goto l847
					}
					position++
					if buffer[position] != rune('e') {
						goto l847
					}
					position++
					if buffer[position] != rune('r') {
						goto l847
					}
					position++
				}
			l849:
				add(ruleAuthorSuffix, position848)
			}
			return true
		l847:
			position, tokenIndex = position847, tokenIndex847
			return false
		},
		/* 117 AuthorPrefixGlued1 <- <(('d' / 'D' / 'O' / 'L' / 'M') Apostrophe)> */
		func() bool {
			position851, tokenIndex851 := position, tokenIndex
			{
				position852 := position
				{
					position853, tokenIndex853 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l854
					}
					position++
					goto l853
				l854:
					position, tokenIndex = position853, tokenIndex853
					if buffer[position] != rune('D') {
						goto l855
					}
					position++
					goto l853
				l855:
					position, tokenIndex = position853, tokenIndex853
					if buffer[position] != rune('O') {
						goto l856
					}
					position++
					goto l853
				l856:
					position, tokenIndex = position853, tokenIndex853
					if buffer[position] != rune('L') {
						goto l857
					}
					position++
					goto l853
				l857:
					position, tokenIndex = position853, tokenIndex853
					if buffer[position] != rune('M') {
						goto l851
					}
					position++
				}
			l853:
				if !_rules[ruleApostrophe]() {
					goto l851
				}
				add(ruleAuthorPrefixGlued1, position852)
			}
			return true
		l851:
			position, tokenIndex = position851, tokenIndex851
			return false
		},
		/* 118 AuthorPrefixGlued2 <- <((('M' 'c') / ('M' 'a' 'c')) Apostrophe?)> */
		func() bool {
			position858, tokenIndex858 := position, tokenIndex
			{
				position859 := position
				{
					position860, tokenIndex860 := position, tokenIndex
					if buffer[position] != rune('M') {
						goto l861
					}
					position++
					if buffer[position] != rune('c') {
						goto l861
					}
					position++
					goto l860
				l861:
					position, tokenIndex = position860, tokenIndex860
					if buffer[position] != rune('M') {
						goto l858
					}
					position++
					if buffer[position] != rune('a') {
						goto l858
					}
					position++
					if buffer[position] != rune('c') {
						goto l858
					}
					position++
				}
			l860:
				{
					position862, tokenIndex862 := position, tokenIndex
					if !_rules[ruleApostrophe]() {
						goto l862
					}
					goto l863
				l862:
					position, tokenIndex = position862, tokenIndex862
				}
			l863:
				add(ruleAuthorPrefixGlued2, position859)
			}
			return true
		l858:
			position, tokenIndex = position858, tokenIndex858
			return false
		},
		/* 119 AuthorPrefix <- <(AuthorPrefix1 / AuthorPrefix2)> */
		func() bool {
			position864, tokenIndex864 := position, tokenIndex
			{
				position865 := position
				{
					position866, tokenIndex866 := position, tokenIndex
					if !_rules[ruleAuthorPrefix1]() {
						goto l867
					}
					goto l866
				l867:
					position, tokenIndex = position866, tokenIndex866
					if !_rules[ruleAuthorPrefix2]() {
						goto l864
					}
				}
			l866:
				add(ruleAuthorPrefix, position865)
			}
			return true
		l864:
			position, tokenIndex = position864, tokenIndex864
			return false
		},
		/* 120 AuthorPrefix2 <- <(('v' '.' (_? ('d' '.'))?) / (Apostrophe 't'))> */
		func() bool {
			position868, tokenIndex868 := position, tokenIndex
			{
				position869 := position
				{
					position870, tokenIndex870 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l871
					}
					position++
					if buffer[position] != rune('.') {
						goto l871
					}
					position++
					{
						position872, tokenIndex872 := position, tokenIndex
						{
							position874, tokenIndex874 := position, tokenIndex
							if !_rules[rule_]() {
								goto l874
							}
							goto l875
						l874:
							position, tokenIndex = position874, tokenIndex874
						}
					l875:
						if buffer[position] != rune('d') {
							goto l872
						}
						position++
						if buffer[position] != rune('.') {
							goto l872
						}
						position++
						goto l873
					l872:
						position, tokenIndex = position872, tokenIndex872
					}
				l873:
					goto l870
				l871:
					position, tokenIndex = position870, tokenIndex870
					if !_rules[ruleApostrophe]() {
						goto l868
					}
					if buffer[position] != rune('t') {
						goto l868
					}
					position++
				}
			l870:
				add(ruleAuthorPrefix2, position869)
			}
			return true
		l868:
			position, tokenIndex = position868, tokenIndex868
			return false
		},
		/* 121 AuthorPrefix1 <- <((('a' 'b') / ('a' 'f') / ('b' 'i' 's') / ('d' 'a') / ('d' 'e' 'r') / ('d' 'e' 's') / ('d' 'e' 'n') / ('d' 'e' 'm') / ('d' 'e' 'l' 'l' 'a') / ('d' 'e' 'l' 'a') / ('d' 'e' 'l' 'l' 'e') / ('d' 'e' 'l') / ('d' 'e' ' ' 'l' 'o' 's') / ('d' 'e') / ('d' 'i') / ('d' 'o' 's') / ('d' 'u') / ('d' 'o') / ('e' 'l') / ('l' 'a') / ('l' 'e') / ('t' 'e' 'n') / ('t' 'e' 'r') / ('v' 'a' 'n') / ('v' 'e' 'r') / ('d' Apostrophe) / ('i' 'n' Apostrophe 't') / ('z' 'u' 'r') / ('z' 'u') / ('v' 'o' 'n' (_ (('d' '.') / ('d' 'e' 'm')))?) / ('v' (_ 'd')?)) &_)> */
		func() bool {
			position876, tokenIndex876 := position, tokenIndex
			{
				position877 := position
				{
					position878, tokenIndex878 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l879
					}
					position++
					if buffer[position] != rune('b') {
						goto l879
					}
					position++
					goto l878
				l879:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('a') {
						goto l880
					}
					position++
					if buffer[position] != rune('f') {
						goto l880
					}
					position++
					goto l878
				l880:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('b') {
						goto l881
					}
					position++
					if buffer[position] != rune('i') {
						goto l881
					}
					position++
					if buffer[position] != rune('s') {
						goto l881
					}
					position++
					goto l878
				l881:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('d') {
						goto l882
					}
					position++
					if buffer[position] != rune('a') {
						goto l882
					}
					position++
					goto l878
				l882:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('d') {
						goto l883
					}
					position++
					if buffer[position] != rune('e') {
						goto l883
					}
					position++
					if buffer[position] != rune('r') {
						goto l883
					}
					position++
					goto l878
				l883:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('d') {
						goto l884
					}
					position++
					if buffer[position] != rune('e') {
						goto l884
					}
					position++
					if buffer[position] != rune('s') {
						goto l884
					}
					position++
					goto l878
				l884:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('d') {
						goto l885
					}
					position++
					if buffer[position] != rune('e') {
						goto l885
					}
					position++
					if buffer[position] != rune('n') {
						goto l885
					}
					position++
					goto l878
				l885:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('d') {
						goto l886
					}
					position++
					if buffer[position] != rune('e') {
						goto l886
					}
					position++
					if buffer[position] != rune('m') {
						goto l886
					}
					position++
					goto l878
				l886:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('d') {
						goto l887
					}
					position++
					if buffer[position] != rune('e') {
						goto l887
					}
					position++
					if buffer[position] != rune('l') {
						goto l887
					}
					position++
					if buffer[position] != rune('l') {
						goto l887
					}
					position++
					if buffer[position] != rune('a') {
						goto l887
					}
					position++
					goto l878
				l887:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('d') {
						goto l888
					}
					position++
					if buffer[position] != rune('e') {
						goto l888
					}
					position++
					if buffer[position] != rune('l') {
						goto l888
					}
					position++
					if buffer[position] != rune('a') {
						goto l888
					}
					position++
					goto l878
				l888:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('d') {
						goto l889
					}
					position++
					if buffer[position] != rune('e') {
						goto l889
					}
					position++
					if buffer[position] != rune('l') {
						goto l889
					}
					position++
					if buffer[position] != rune('l') {
						goto l889
					}
					position++
					if buffer[position] != rune('e') {
						goto l889
					}
					position++
					goto l878
				l889:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('d') {
						goto l890
					}
					position++
					if buffer[position] != rune('e') {
						goto l890
					}
					position++
					if buffer[position] != rune('l') {
						goto l890
					}
					position++
					goto l878
				l890:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('d') {
						goto l891
					}
					position++
					if buffer[position] != rune('e') {
						goto l891
					}
					position++
					if buffer[position] != rune(' ') {
						goto l891
					}
					position++
					if buffer[position] != rune('l') {
						goto l891
					}
					position++
					if buffer[position] != rune('o') {
						goto l891
					}
					position++
					if buffer[position] != rune('s') {
						goto l891
					}
					position++
					goto l878
				l891:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('d') {
						goto l892
					}
					position++
					if buffer[position] != rune('e') {
						goto l892
					}
					position++
					goto l878
				l892:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('d') {
						goto l893
					}
					position++
					if buffer[position] != rune('i') {
						goto l893
					}
					position++
					goto l878
				l893:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('d') {
						goto l894
					}
					position++
					if buffer[position] != rune('o') {
						goto l894
					}
					position++
					if buffer[position] != rune('s') {
						goto l894
					}
					position++
					goto l878
				l894:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('d') {
						goto l895
					}
					position++
					if buffer[position] != rune('u') {
						goto l895
					}
					position++
					goto l878
				l895:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('d') {
						goto l896
					}
					position++
					if buffer[position] != rune('o') {
						goto l896
					}
					position++
					goto l878
				l896:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('e') {
						goto l897
					}
					position++
					if buffer[position] != rune('l') {
						goto l897
					}
					position++
					goto l878
				l897:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('l') {
						goto l898
					}
					position++
					if buffer[position] != rune('a') {
						goto l898
					}
					position++
					goto l878
				l898:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('l') {
						goto l899
					}
					position++
					if buffer[position] != rune('e') {
						goto l899
					}
					position++
					goto l878
				l899:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('t') {
						goto l900
					}
					position++
					if buffer[position] != rune('e') {
						goto l900
					}
					position++
					if buffer[position] != rune('n') {
						goto l900
					}
					position++
					goto l878
				l900:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('t') {
						goto l901
					}
					position++
					if buffer[position] != rune('e') {
						goto l901
					}
					position++
					if buffer[position] != rune('r') {
						goto l901
					}
					position++
					goto l878
				l901:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('v') {
						goto l902
					}
					position++
					if buffer[position] != rune('a') {
						goto l902
					}
					position++
					if buffer[position] != rune('n') {
						goto l902
					}
					position++
					goto l878
				l902:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('v') {
						goto l903
					}
					position++
					if buffer[position] != rune('e') {
						goto l903
					}
					position++
					if buffer[position] != rune('r') {
						goto l903
					}
					position++
					goto l878
				l903:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('d') {
						goto l904
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l904
					}
					goto l878
				l904:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('i') {
						goto l905
					}
					position++
					if buffer[position] != rune('n') {
						goto l905
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l905
					}
					if buffer[position] != rune('t') {
						goto l905
					}
					position++
					goto l878
				l905:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('z') {
						goto l906
					}
					position++
					if buffer[position] != rune('u') {
						goto l906
					}
					position++
					if buffer[position] != rune('r') {
						goto l906
					}
					position++
					goto l878
				l906:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('z') {
						goto l907
					}
					position++
					if buffer[position] != rune('u') {
						goto l907
					}
					position++
					goto l878
				l907:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('v') {
						goto l908
					}
					position++
					if buffer[position] != rune('o') {
						goto l908
					}
					position++
					if buffer[position] != rune('n') {
						goto l908
					}
					position++
					{
						position909, tokenIndex909 := position, tokenIndex
						if !_rules[rule_]() {
							goto l909
						}
						{
							position911, tokenIndex911 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l912
							}
							position++
							if buffer[position] != rune('.') {
								goto l912
							}
							position++
							goto l911
						l912:
							position, tokenIndex = position911, tokenIndex911
							if buffer[position] != rune('d') {
								goto l909
							}
							position++
							if buffer[position] != rune('e') {
								goto l909
							}
							position++
							if buffer[position] != rune('m') {
								goto l909
							}
							position++
						}
					l911:
						goto l910
					l909:
						position, tokenIndex = position909, tokenIndex909
					}
				l910:
					goto l878
				l908:
					position, tokenIndex = position878, tokenIndex878
					if buffer[position] != rune('v') {
						goto l876
					}
					position++
					{
						position913, tokenIndex913 := position, tokenIndex
						if !_rules[rule_]() {
							goto l913
						}
						if buffer[position] != rune('d') {
							goto l913
						}
						position++
						goto l914
					l913:
						position, tokenIndex = position913, tokenIndex913
					}
				l914:
				}
			l878:
				{
					position915, tokenIndex915 := position, tokenIndex
					if !_rules[rule_]() {
						goto l876
					}
					position, tokenIndex = position915, tokenIndex915
				}
				add(ruleAuthorPrefix1, position877)
			}
			return true
		l876:
			position, tokenIndex = position876, tokenIndex876
			return false
		},
		/* 122 AuthorUpperChar <- <(UpperASCII / MiscodedChar / ('À' / 'Á' / 'Â' / 'Ã' / 'Ä' / 'Å' / 'Æ' / 'Ç' / 'È' / 'É' / 'Ê' / 'Ë' / 'Ì' / 'Í' / 'Î' / 'Ï' / 'Ð' / 'Ñ' / 'Ò' / 'Ó' / 'Ô' / 'Õ' / 'Ö' / 'Ø' / 'Ù' / 'Ú' / 'Û' / 'Ü' / 'Ý' / 'Ć' / 'Č' / 'Ď' / 'İ' / 'Ķ' / 'Ĺ' / 'ĺ' / 'Ľ' / 'ľ' / 'Ł' / 'ł' / 'Ņ' / 'Ō' / 'Ő' / 'Œ' / 'Ř' / 'Ś' / 'Ŝ' / 'Ş' / 'Š' / 'Ÿ' / 'Ź' / 'Ż' / 'Ž' / 'ƒ' / 'Ǿ' / 'Ș' / 'Ț'))> */
		func() bool {
			position916, tokenIndex916 := position, tokenIndex
			{
				position917 := position
				{
					position918, tokenIndex918 := position, tokenIndex
					if !_rules[ruleUpperASCII]() {
						goto l919
					}
					goto l918
				l919:
					position, tokenIndex = position918, tokenIndex918
					if !_rules[ruleMiscodedChar]() {
						goto l920
					}
					goto l918
				l920:
					position, tokenIndex = position918, tokenIndex918
					{
						position921, tokenIndex921 := position, tokenIndex
						if buffer[position] != rune('À') {
							goto l922
						}
						position++
						goto l921
					l922:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Á') {
							goto l923
						}
						position++
						goto l921
					l923:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Â') {
							goto l924
						}
						position++
						goto l921
					l924:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ã') {
							goto l925
						}
						position++
						goto l921
					l925:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ä') {
							goto l926
						}
						position++
						goto l921
					l926:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Å') {
							goto l927
						}
						position++
						goto l921
					l927:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Æ') {
							goto l928
						}
						position++
						goto l921
					l928:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ç') {
							goto l929
						}
						position++
						goto l921
					l929:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('È') {
							goto l930
						}
						position++
						goto l921
					l930:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('É') {
							goto l931
						}
						position++
						goto l921
					l931:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ê') {
							goto l932
						}
						position++
						goto l921
					l932:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ë') {
							goto l933
						}
						position++
						goto l921
					l933:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ì') {
							goto l934
						}
						position++
						goto l921
					l934:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Í') {
							goto l935
						}
						position++
						goto l921
					l935:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Î') {
							goto l936
						}
						position++
						goto l921
					l936:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ï') {
							goto l937
						}
						position++
						goto l921
					l937:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ð') {
							goto l938
						}
						position++
						goto l921
					l938:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ñ') {
							goto l939
						}
						position++
						goto l921
					l939:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ò') {
							goto l940
						}
						position++
						goto l921
					l940:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ó') {
							goto l941
						}
						position++
						goto l921
					l941:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ô') {
							goto l942
						}
						position++
						goto l921
					l942:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Õ') {
							goto l943
						}
						position++
						goto l921
					l943:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ö') {
							goto l944
						}
						position++
						goto l921
					l944:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ø') {
							goto l945
						}
						position++
						goto l921
					l945:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ù') {
							goto l946
						}
						position++
						goto l921
					l946:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ú') {
							goto l947
						}
						position++
						goto l921
					l947:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Û') {
							goto l948
						}
						position++
						goto l921
					l948:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ü') {
							goto l949
						}
						position++
						goto l921
					l949:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ý') {
							goto l950
						}
						position++
						goto l921
					l950:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ć') {
							goto l951
						}
						position++
						goto l921
					l951:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Č') {
							goto l952
						}
						position++
						goto l921
					l952:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ď') {
							goto l953
						}
						position++
						goto l921
					l953:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('İ') {
							goto l954
						}
						position++
						goto l921
					l954:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ķ') {
							goto l955
						}
						position++
						goto l921
					l955:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ĺ') {
							goto l956
						}
						position++
						goto l921
					l956:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ĺ') {
							goto l957
						}
						position++
						goto l921
					l957:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ľ') {
							goto l958
						}
						position++
						goto l921
					l958:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ľ') {
							goto l959
						}
						position++
						goto l921
					l959:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ł') {
							goto l960
						}
						position++
						goto l921
					l960:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ł') {
							goto l961
						}
						position++
						goto l921
					l961:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ņ') {
							goto l962
						}
						position++
						goto l921
					l962:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ō') {
							goto l963
						}
						position++
						goto l921
					l963:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ő') {
							goto l964
						}
						position++
						goto l921
					l964:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Œ') {
							goto l965
						}
						position++
						goto l921
					l965:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ř') {
							goto l966
						}
						position++
						goto l921
					l966:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ś') {
							goto l967
						}
						position++
						goto l921
					l967:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ŝ') {
							goto l968
						}
						position++
						goto l921
					l968:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ş') {
							goto l969
						}
						position++
						goto l921
					l969:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Š') {
							goto l970
						}
						position++
						goto l921
					l970:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ÿ') {
							goto l971
						}
						position++
						goto l921
					l971:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ź') {
							goto l972
						}
						position++
						goto l921
					l972:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ż') {
							goto l973
						}
						position++
						goto l921
					l973:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ž') {
							goto l974
						}
						position++
						goto l921
					l974:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('ƒ') {
							goto l975
						}
						position++
						goto l921
					l975:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ǿ') {
							goto l976
						}
						position++
						goto l921
					l976:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ș') {
							goto l977
						}
						position++
						goto l921
					l977:
						position, tokenIndex = position921, tokenIndex921
						if buffer[position] != rune('Ț') {
							goto l916
						}
						position++
					}
				l921:
				}
			l918:
				add(ruleAuthorUpperChar, position917)
			}
			return true
		l916:
			position, tokenIndex = position916, tokenIndex916
			return false
		},
		/* 123 AuthorLowerChar <- <(LowerASCII / MiscodedChar / Apostrophe / ('à' / 'á' / 'â' / 'ã' / 'ä' / 'å' / 'æ' / 'ç' / 'è' / 'é' / 'ê' / 'ë' / 'ì' / 'í' / 'î' / 'ï' / 'ð' / 'ñ' / 'ò' / 'ó' / 'ó' / 'ô' / 'õ' / 'ö' / 'ø' / 'ù' / 'ú' / 'û' / 'ü' / 'ý' / 'ÿ' / 'ā' / 'ă' / 'ą' / 'ć' / 'ĉ' / 'č' / 'ď' / 'đ' / 'ē' / 'ĕ' / 'ė' / 'ę' / 'ě' / 'ğ' / 'ī' / 'ĭ' / 'İ' / 'ı' / 'ĺ' / 'ľ' / 'ł' / 'ń' / 'ņ' / 'ň' / 'ŏ' / 'ő' / 'œ' / 'ŕ' / 'ř' / 'ś' / 'ş' / 'š' / 'ţ' / 'ť' / 'ũ' / 'ū' / 'ŭ' / 'ů' / 'ű' / 'ź' / 'ż' / 'ž' / 'ſ' / 'ǎ' / 'ǔ' / 'ǧ' / 'ș' / 'ț' / 'ȳ' / 'ß'))> */
		func() bool {
			position978, tokenIndex978 := position, tokenIndex
			{
				position979 := position
				{
					position980, tokenIndex980 := position, tokenIndex
					if !_rules[ruleLowerASCII]() {
						goto l981
					}
					goto l980
				l981:
					position, tokenIndex = position980, tokenIndex980
					if !_rules[ruleMiscodedChar]() {
						goto l982
					}
					goto l980
				l982:
					position, tokenIndex = position980, tokenIndex980
					if !_rules[ruleApostrophe]() {
						goto l983
					}
					goto l980
				l983:
					position, tokenIndex = position980, tokenIndex980
					{
						position984, tokenIndex984 := position, tokenIndex
						if buffer[position] != rune('à') {
							goto l985
						}
						position++
						goto l984
					l985:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('á') {
							goto l986
						}
						position++
						goto l984
					l986:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('â') {
							goto l987
						}
						position++
						goto l984
					l987:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ã') {
							goto l988
						}
						position++
						goto l984
					l988:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ä') {
							goto l989
						}
						position++
						goto l984
					l989:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('å') {
							goto l990
						}
						position++
						goto l984
					l990:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('æ') {
							goto l991
						}
						position++
						goto l984
					l991:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ç') {
							goto l992
						}
						position++
						goto l984
					l992:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('è') {
							goto l993
						}
						position++
						goto l984
					l993:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('é') {
							goto l994
						}
						position++
						goto l984
					l994:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ê') {
							goto l995
						}
						position++
						goto l984
					l995:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ë') {
							goto l996
						}
						position++
						goto l984
					l996:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ì') {
							goto l997
						}
						position++
						goto l984
					l997:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('í') {
							goto l998
						}
						position++
						goto l984
					l998:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('î') {
							goto l999
						}
						position++
						goto l984
					l999:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ï') {
							goto l1000
						}
						position++
						goto l984
					l1000:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ð') {
							goto l1001
						}
						position++
						goto l984
					l1001:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ñ') {
							goto l1002
						}
						position++
						goto l984
					l1002:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ò') {
							goto l1003
						}
						position++
						goto l984
					l1003:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ó') {
							goto l1004
						}
						position++
						goto l984
					l1004:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ó') {
							goto l1005
						}
						position++
						goto l984
					l1005:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ô') {
							goto l1006
						}
						position++
						goto l984
					l1006:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('õ') {
							goto l1007
						}
						position++
						goto l984
					l1007:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ö') {
							goto l1008
						}
						position++
						goto l984
					l1008:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ø') {
							goto l1009
						}
						position++
						goto l984
					l1009:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ù') {
							goto l1010
						}
						position++
						goto l984
					l1010:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ú') {
							goto l1011
						}
						position++
						goto l984
					l1011:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('û') {
							goto l1012
						}
						position++
						goto l984
					l1012:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ü') {
							goto l1013
						}
						position++
						goto l984
					l1013:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ý') {
							goto l1014
						}
						position++
						goto l984
					l1014:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ÿ') {
							goto l1015
						}
						position++
						goto l984
					l1015:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ā') {
							goto l1016
						}
						position++
						goto l984
					l1016:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ă') {
							goto l1017
						}
						position++
						goto l984
					l1017:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ą') {
							goto l1018
						}
						position++
						goto l984
					l1018:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ć') {
							goto l1019
						}
						position++
						goto l984
					l1019:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ĉ') {
							goto l1020
						}
						position++
						goto l984
					l1020:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('č') {
							goto l1021
						}
						position++
						goto l984
					l1021:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ď') {
							goto l1022
						}
						position++
						goto l984
					l1022:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('đ') {
							goto l1023
						}
						position++
						goto l984
					l1023:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ē') {
							goto l1024
						}
						position++
						goto l984
					l1024:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ĕ') {
							goto l1025
						}
						position++
						goto l984
					l1025:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ė') {
							goto l1026
						}
						position++
						goto l984
					l1026:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ę') {
							goto l1027
						}
						position++
						goto l984
					l1027:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ě') {
							goto l1028
						}
						position++
						goto l984
					l1028:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ğ') {
							goto l1029
						}
						position++
						goto l984
					l1029:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ī') {
							goto l1030
						}
						position++
						goto l984
					l1030:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ĭ') {
							goto l1031
						}
						position++
						goto l984
					l1031:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('İ') {
							goto l1032
						}
						position++
						goto l984
					l1032:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ı') {
							goto l1033
						}
						position++
						goto l984
					l1033:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ĺ') {
							goto l1034
						}
						position++
						goto l984
					l1034:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ľ') {
							goto l1035
						}
						position++
						goto l984
					l1035:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ł') {
							goto l1036
						}
						position++
						goto l984
					l1036:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ń') {
							goto l1037
						}
						position++
						goto l984
					l1037:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ņ') {
							goto l1038
						}
						position++
						goto l984
					l1038:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ň') {
							goto l1039
						}
						position++
						goto l984
					l1039:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ŏ') {
							goto l1040
						}
						position++
						goto l984
					l1040:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ő') {
							goto l1041
						}
						position++
						goto l984
					l1041:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('œ') {
							goto l1042
						}
						position++
						goto l984
					l1042:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ŕ') {
							goto l1043
						}
						position++
						goto l984
					l1043:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ř') {
							goto l1044
						}
						position++
						goto l984
					l1044:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ś') {
							goto l1045
						}
						position++
						goto l984
					l1045:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ş') {
							goto l1046
						}
						position++
						goto l984
					l1046:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('š') {
							goto l1047
						}
						position++
						goto l984
					l1047:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ţ') {
							goto l1048
						}
						position++
						goto l984
					l1048:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ť') {
							goto l1049
						}
						position++
						goto l984
					l1049:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ũ') {
							goto l1050
						}
						position++
						goto l984
					l1050:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ū') {
							goto l1051
						}
						position++
						goto l984
					l1051:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ŭ') {
							goto l1052
						}
						position++
						goto l984
					l1052:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ů') {
							goto l1053
						}
						position++
						goto l984
					l1053:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ű') {
							goto l1054
						}
						position++
						goto l984
					l1054:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ź') {
							goto l1055
						}
						position++
						goto l984
					l1055:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ż') {
							goto l1056
						}
						position++
						goto l984
					l1056:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ž') {
							goto l1057
						}
						position++
						goto l984
					l1057:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ſ') {
							goto l1058
						}
						position++
						goto l984
					l1058:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ǎ') {
							goto l1059
						}
						position++
						goto l984
					l1059:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ǔ') {
							goto l1060
						}
						position++
						goto l984
					l1060:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ǧ') {
							goto l1061
						}
						position++
						goto l984
					l1061:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ș') {
							goto l1062
						}
						position++
						goto l984
					l1062:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ț') {
							goto l1063
						}
						position++
						goto l984
					l1063:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ȳ') {
							goto l1064
						}
						position++
						goto l984
					l1064:
						position, tokenIndex = position984, tokenIndex984
						if buffer[position] != rune('ß') {
							goto l978
						}
						position++
					}
				l984:
				}
			l980:
				add(ruleAuthorLowerChar, position979)
			}
			return true
		l978:
			position, tokenIndex = position978, tokenIndex978
			return false
		},
		/* 124 Year <- <(YearRange / YearApprox / YearWithParens / YearWithPage / YearWithDot / YearWithChar / YearNum)> */
		func() bool {
			position1065, tokenIndex1065 := position, tokenIndex
			{
				position1066 := position
				{
					position1067, tokenIndex1067 := position, tokenIndex
					if !_rules[ruleYearRange]() {
						goto l1068
					}
					goto l1067
				l1068:
					position, tokenIndex = position1067, tokenIndex1067
					if !_rules[ruleYearApprox]() {
						goto l1069
					}
					goto l1067
				l1069:
					position, tokenIndex = position1067, tokenIndex1067
					if !_rules[ruleYearWithParens]() {
						goto l1070
					}
					goto l1067
				l1070:
					position, tokenIndex = position1067, tokenIndex1067
					if !_rules[ruleYearWithPage]() {
						goto l1071
					}
					goto l1067
				l1071:
					position, tokenIndex = position1067, tokenIndex1067
					if !_rules[ruleYearWithDot]() {
						goto l1072
					}
					goto l1067
				l1072:
					position, tokenIndex = position1067, tokenIndex1067
					if !_rules[ruleYearWithChar]() {
						goto l1073
					}
					goto l1067
				l1073:
					position, tokenIndex = position1067, tokenIndex1067
					if !_rules[ruleYearNum]() {
						goto l1065
					}
				}
			l1067:
				add(ruleYear, position1066)
			}
			return true
		l1065:
			position, tokenIndex = position1065, tokenIndex1065
			return false
		},
		/* 125 YearRange <- <(YearNum (Dash / Slash) (Nums+ ('a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '?')*))> */
		func() bool {
			position1074, tokenIndex1074 := position, tokenIndex
			{
				position1075 := position
				if !_rules[ruleYearNum]() {
					goto l1074
				}
				{
					position1076, tokenIndex1076 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l1077
					}
					goto l1076
				l1077:
					position, tokenIndex = position1076, tokenIndex1076
					if !_rules[ruleSlash]() {
						goto l1074
					}
				}
			l1076:
				if !_rules[ruleNums]() {
					goto l1074
				}
			l1078:
				{
					position1079, tokenIndex1079 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1079
					}
					goto l1078
				l1079:
					position, tokenIndex = position1079, tokenIndex1079
				}
			l1080:
				{
					position1081, tokenIndex1081 := position, tokenIndex
					{
						position1082, tokenIndex1082 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l1083
						}
						position++
						goto l1082
					l1083:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('b') {
							goto l1084
						}
						position++
						goto l1082
					l1084:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('c') {
							goto l1085
						}
						position++
						goto l1082
					l1085:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('d') {
							goto l1086
						}
						position++
						goto l1082
					l1086:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('e') {
							goto l1087
						}
						position++
						goto l1082
					l1087:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('f') {
							goto l1088
						}
						position++
						goto l1082
					l1088:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('g') {
							goto l1089
						}
						position++
						goto l1082
					l1089:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('h') {
							goto l1090
						}
						position++
						goto l1082
					l1090:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('i') {
							goto l1091
						}
						position++
						goto l1082
					l1091:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('j') {
							goto l1092
						}
						position++
						goto l1082
					l1092:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('k') {
							goto l1093
						}
						position++
						goto l1082
					l1093:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('l') {
							goto l1094
						}
						position++
						goto l1082
					l1094:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('m') {
							goto l1095
						}
						position++
						goto l1082
					l1095:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('n') {
							goto l1096
						}
						position++
						goto l1082
					l1096:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('o') {
							goto l1097
						}
						position++
						goto l1082
					l1097:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('p') {
							goto l1098
						}
						position++
						goto l1082
					l1098:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('q') {
							goto l1099
						}
						position++
						goto l1082
					l1099:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('r') {
							goto l1100
						}
						position++
						goto l1082
					l1100:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('s') {
							goto l1101
						}
						position++
						goto l1082
					l1101:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('t') {
							goto l1102
						}
						position++
						goto l1082
					l1102:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('u') {
							goto l1103
						}
						position++
						goto l1082
					l1103:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('v') {
							goto l1104
						}
						position++
						goto l1082
					l1104:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('w') {
							goto l1105
						}
						position++
						goto l1082
					l1105:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('x') {
							goto l1106
						}
						position++
						goto l1082
					l1106:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('y') {
							goto l1107
						}
						position++
						goto l1082
					l1107:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('z') {
							goto l1108
						}
						position++
						goto l1082
					l1108:
						position, tokenIndex = position1082, tokenIndex1082
						if buffer[position] != rune('?') {
							goto l1081
						}
						position++
					}
				l1082:
					goto l1080
				l1081:
					position, tokenIndex = position1081, tokenIndex1081
				}
				add(ruleYearRange, position1075)
			}
			return true
		l1074:
			position, tokenIndex = position1074, tokenIndex1074
			return false
		},
		/* 126 YearWithDot <- <(YearNum '.')> */
		func() bool {
			position1109, tokenIndex1109 := position, tokenIndex
			{
				position1110 := position
				if !_rules[ruleYearNum]() {
					goto l1109
				}
				if buffer[position] != rune('.') {
					goto l1109
				}
				position++
				add(ruleYearWithDot, position1110)
			}
			return true
		l1109:
			position, tokenIndex = position1109, tokenIndex1109
			return false
		},
		/* 127 YearApprox <- <('[' _? YearNum _? ']')> */
		func() bool {
			position1111, tokenIndex1111 := position, tokenIndex
			{
				position1112 := position
				if buffer[position] != rune('[') {
					goto l1111
				}
				position++
				{
					position1113, tokenIndex1113 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1113
					}
					goto l1114
				l1113:
					position, tokenIndex = position1113, tokenIndex1113
				}
			l1114:
				if !_rules[ruleYearNum]() {
					goto l1111
				}
				{
					position1115, tokenIndex1115 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1115
					}
					goto l1116
				l1115:
					position, tokenIndex = position1115, tokenIndex1115
				}
			l1116:
				if buffer[position] != rune(']') {
					goto l1111
				}
				position++
				add(ruleYearApprox, position1112)
			}
			return true
		l1111:
			position, tokenIndex = position1111, tokenIndex1111
			return false
		},
		/* 128 YearWithPage <- <((YearWithChar / YearNum) _? ':' _? Nums+)> */
		func() bool {
			position1117, tokenIndex1117 := position, tokenIndex
			{
				position1118 := position
				{
					position1119, tokenIndex1119 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1120
					}
					goto l1119
				l1120:
					position, tokenIndex = position1119, tokenIndex1119
					if !_rules[ruleYearNum]() {
						goto l1117
					}
				}
			l1119:
				{
					position1121, tokenIndex1121 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1121
					}
					goto l1122
				l1121:
					position, tokenIndex = position1121, tokenIndex1121
				}
			l1122:
				if buffer[position] != rune(':') {
					goto l1117
				}
				position++
				{
					position1123, tokenIndex1123 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1123
					}
					goto l1124
				l1123:
					position, tokenIndex = position1123, tokenIndex1123
				}
			l1124:
				if !_rules[ruleNums]() {
					goto l1117
				}
			l1125:
				{
					position1126, tokenIndex1126 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1126
					}
					goto l1125
				l1126:
					position, tokenIndex = position1126, tokenIndex1126
				}
				add(ruleYearWithPage, position1118)
			}
			return true
		l1117:
			position, tokenIndex = position1117, tokenIndex1117
			return false
		},
		/* 129 YearWithParens <- <('(' (YearWithChar / YearNum) ')')> */
		func() bool {
			position1127, tokenIndex1127 := position, tokenIndex
			{
				position1128 := position
				if buffer[position] != rune('(') {
					goto l1127
				}
				position++
				{
					position1129, tokenIndex1129 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1130
					}
					goto l1129
				l1130:
					position, tokenIndex = position1129, tokenIndex1129
					if !_rules[ruleYearNum]() {
						goto l1127
					}
				}
			l1129:
				if buffer[position] != rune(')') {
					goto l1127
				}
				position++
				add(ruleYearWithParens, position1128)
			}
			return true
		l1127:
			position, tokenIndex = position1127, tokenIndex1127
			return false
		},
		/* 130 YearWithChar <- <(YearNum LowerASCII)> */
		func() bool {
			position1131, tokenIndex1131 := position, tokenIndex
			{
				position1132 := position
				if !_rules[ruleYearNum]() {
					goto l1131
				}
				if !_rules[ruleLowerASCII]() {
					goto l1131
				}
				add(ruleYearWithChar, position1132)
			}
			return true
		l1131:
			position, tokenIndex = position1131, tokenIndex1131
			return false
		},
		/* 131 YearNum <- <(('1' / '2') ('0' / '7' / '8' / '9') Nums (Nums / '?') '?'*)> */
		func() bool {
			position1133, tokenIndex1133 := position, tokenIndex
			{
				position1134 := position
				{
					position1135, tokenIndex1135 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l1136
					}
					position++
					goto l1135
				l1136:
					position, tokenIndex = position1135, tokenIndex1135
					if buffer[position] != rune('2') {
						goto l1133
					}
					position++
				}
			l1135:
				{
					position1137, tokenIndex1137 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l1138
					}
					position++
					goto l1137
				l1138:
					position, tokenIndex = position1137, tokenIndex1137
					if buffer[position] != rune('7') {
						goto l1139
					}
					position++
					goto l1137
				l1139:
					position, tokenIndex = position1137, tokenIndex1137
					if buffer[position] != rune('8') {
						goto l1140
					}
					position++
					goto l1137
				l1140:
					position, tokenIndex = position1137, tokenIndex1137
					if buffer[position] != rune('9') {
						goto l1133
					}
					position++
				}
			l1137:
				if !_rules[ruleNums]() {
					goto l1133
				}
				{
					position1141, tokenIndex1141 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1142
					}
					goto l1141
				l1142:
					position, tokenIndex = position1141, tokenIndex1141
					if buffer[position] != rune('?') {
						goto l1133
					}
					position++
				}
			l1141:
			l1143:
				{
					position1144, tokenIndex1144 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l1144
					}
					position++
					goto l1143
				l1144:
					position, tokenIndex = position1144, tokenIndex1144
				}
				add(ruleYearNum, position1134)
			}
			return true
		l1133:
			position, tokenIndex = position1133, tokenIndex1133
			return false
		},
		/* 132 NameUpperChar <- <(UpperChar / UpperCharExtended)> */
		func() bool {
			position1145, tokenIndex1145 := position, tokenIndex
			{
				position1146 := position
				{
					position1147, tokenIndex1147 := position, tokenIndex
					if !_rules[ruleUpperChar]() {
						goto l1148
					}
					goto l1147
				l1148:
					position, tokenIndex = position1147, tokenIndex1147
					if !_rules[ruleUpperCharExtended]() {
						goto l1145
					}
				}
			l1147:
				add(ruleNameUpperChar, position1146)
			}
			return true
		l1145:
			position, tokenIndex = position1145, tokenIndex1145
			return false
		},
		/* 133 UpperCharExtended <- <('Æ' / 'Œ' / 'Ö')> */
		func() bool {
			position1149, tokenIndex1149 := position, tokenIndex
			{
				position1150 := position
				{
					position1151, tokenIndex1151 := position, tokenIndex
					if buffer[position] != rune('Æ') {
						goto l1152
					}
					position++
					goto l1151
				l1152:
					position, tokenIndex = position1151, tokenIndex1151
					if buffer[position] != rune('Œ') {
						goto l1153
					}
					position++
					goto l1151
				l1153:
					position, tokenIndex = position1151, tokenIndex1151
					if buffer[position] != rune('Ö') {
						goto l1149
					}
					position++
				}
			l1151:
				add(ruleUpperCharExtended, position1150)
			}
			return true
		l1149:
			position, tokenIndex = position1149, tokenIndex1149
			return false
		},
		/* 134 UpperChar <- <UpperASCII> */
		func() bool {
			position1154, tokenIndex1154 := position, tokenIndex
			{
				position1155 := position
				if !_rules[ruleUpperASCII]() {
					goto l1154
				}
				add(ruleUpperChar, position1155)
			}
			return true
		l1154:
			position, tokenIndex = position1154, tokenIndex1154
			return false
		},
		/* 135 NameLowerChar <- <(LowerChar / LowerCharExtended / MiscodedChar)> */
		func() bool {
			position1156, tokenIndex1156 := position, tokenIndex
			{
				position1157 := position
				{
					position1158, tokenIndex1158 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l1159
					}
					goto l1158
				l1159:
					position, tokenIndex = position1158, tokenIndex1158
					if !_rules[ruleLowerCharExtended]() {
						goto l1160
					}
					goto l1158
				l1160:
					position, tokenIndex = position1158, tokenIndex1158
					if !_rules[ruleMiscodedChar]() {
						goto l1156
					}
				}
			l1158:
				add(ruleNameLowerChar, position1157)
			}
			return true
		l1156:
			position, tokenIndex = position1156, tokenIndex1156
			return false
		},
		/* 136 MiscodedChar <- <'�'> */
		func() bool {
			position1161, tokenIndex1161 := position, tokenIndex
			{
				position1162 := position
				if buffer[position] != rune('�') {
					goto l1161
				}
				position++
				add(ruleMiscodedChar, position1162)
			}
			return true
		l1161:
			position, tokenIndex = position1161, tokenIndex1161
			return false
		},
		/* 137 LowerCharExtended <- <('æ' / 'œ' / 'à' / 'â' / 'å' / 'ã' / 'ä' / 'á' / 'ç' / 'č' / 'é' / 'è' / 'ë' / 'í' / 'ì' / 'ï' / 'ň' / 'ñ' / 'ñ' / 'ó' / 'ò' / 'ô' / 'ø' / 'õ' / 'ö' / 'ú' / 'û' / 'ù' / 'ü' / 'ŕ' / 'ř' / 'ŗ' / 'ſ' / 'š' / 'š' / 'ş' / 'ß' / 'ž')> */
		func() bool {
			position1163, tokenIndex1163 := position, tokenIndex
			{
				position1164 := position
				{
					position1165, tokenIndex1165 := position, tokenIndex
					if buffer[position] != rune('æ') {
						goto l1166
					}
					position++
					goto l1165
				l1166:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('œ') {
						goto l1167
					}
					position++
					goto l1165
				l1167:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('à') {
						goto l1168
					}
					position++
					goto l1165
				l1168:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('â') {
						goto l1169
					}
					position++
					goto l1165
				l1169:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('å') {
						goto l1170
					}
					position++
					goto l1165
				l1170:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ã') {
						goto l1171
					}
					position++
					goto l1165
				l1171:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ä') {
						goto l1172
					}
					position++
					goto l1165
				l1172:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('á') {
						goto l1173
					}
					position++
					goto l1165
				l1173:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ç') {
						goto l1174
					}
					position++
					goto l1165
				l1174:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('č') {
						goto l1175
					}
					position++
					goto l1165
				l1175:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('é') {
						goto l1176
					}
					position++
					goto l1165
				l1176:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('è') {
						goto l1177
					}
					position++
					goto l1165
				l1177:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ë') {
						goto l1178
					}
					position++
					goto l1165
				l1178:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('í') {
						goto l1179
					}
					position++
					goto l1165
				l1179:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ì') {
						goto l1180
					}
					position++
					goto l1165
				l1180:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ï') {
						goto l1181
					}
					position++
					goto l1165
				l1181:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ň') {
						goto l1182
					}
					position++
					goto l1165
				l1182:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ñ') {
						goto l1183
					}
					position++
					goto l1165
				l1183:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ñ') {
						goto l1184
					}
					position++
					goto l1165
				l1184:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ó') {
						goto l1185
					}
					position++
					goto l1165
				l1185:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ò') {
						goto l1186
					}
					position++
					goto l1165
				l1186:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ô') {
						goto l1187
					}
					position++
					goto l1165
				l1187:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ø') {
						goto l1188
					}
					position++
					goto l1165
				l1188:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('õ') {
						goto l1189
					}
					position++
					goto l1165
				l1189:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ö') {
						goto l1190
					}
					position++
					goto l1165
				l1190:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ú') {
						goto l1191
					}
					position++
					goto l1165
				l1191:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('û') {
						goto l1192
					}
					position++
					goto l1165
				l1192:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ù') {
						goto l1193
					}
					position++
					goto l1165
				l1193:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ü') {
						goto l1194
					}
					position++
					goto l1165
				l1194:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ŕ') {
						goto l1195
					}
					position++
					goto l1165
				l1195:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ř') {
						goto l1196
					}
					position++
					goto l1165
				l1196:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ŗ') {
						goto l1197
					}
					position++
					goto l1165
				l1197:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ſ') {
						goto l1198
					}
					position++
					goto l1165
				l1198:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('š') {
						goto l1199
					}
					position++
					goto l1165
				l1199:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('š') {
						goto l1200
					}
					position++
					goto l1165
				l1200:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ş') {
						goto l1201
					}
					position++
					goto l1165
				l1201:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ß') {
						goto l1202
					}
					position++
					goto l1165
				l1202:
					position, tokenIndex = position1165, tokenIndex1165
					if buffer[position] != rune('ž') {
						goto l1163
					}
					position++
				}
			l1165:
				add(ruleLowerCharExtended, position1164)
			}
			return true
		l1163:
			position, tokenIndex = position1163, tokenIndex1163
			return false
		},
		/* 138 LowerChar <- <LowerASCII> */
		func() bool {
			position1203, tokenIndex1203 := position, tokenIndex
			{
				position1204 := position
				if !_rules[ruleLowerASCII]() {
					goto l1203
				}
				add(ruleLowerChar, position1204)
			}
			return true
		l1203:
			position, tokenIndex = position1203, tokenIndex1203
			return false
		},
		/* 139 SpaceCharEOI <- <(_ / !.)> */
		func() bool {
			position1205, tokenIndex1205 := position, tokenIndex
			{
				position1206 := position
				{
					position1207, tokenIndex1207 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1208
					}
					goto l1207
				l1208:
					position, tokenIndex = position1207, tokenIndex1207
					{
						position1209, tokenIndex1209 := position, tokenIndex
						if !matchDot() {
							goto l1209
						}
						goto l1205
					l1209:
						position, tokenIndex = position1209, tokenIndex1209
					}
				}
			l1207:
				add(ruleSpaceCharEOI, position1206)
			}
			return true
		l1205:
			position, tokenIndex = position1205, tokenIndex1205
			return false
		},
		/* 140 Nums <- <[0-9]> */
		func() bool {
			position1210, tokenIndex1210 := position, tokenIndex
			{
				position1211 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l1210
				}
				position++
				add(ruleNums, position1211)
			}
			return true
		l1210:
			position, tokenIndex = position1210, tokenIndex1210
			return false
		},
		/* 141 LowerGreek <- <[α-ω]> */
		func() bool {
			position1212, tokenIndex1212 := position, tokenIndex
			{
				position1213 := position
				if c := buffer[position]; c < rune('α') || c > rune('ω') {
					goto l1212
				}
				position++
				add(ruleLowerGreek, position1213)
			}
			return true
		l1212:
			position, tokenIndex = position1212, tokenIndex1212
			return false
		},
		/* 142 LowerASCII <- <[a-z]> */
		func() bool {
			position1214, tokenIndex1214 := position, tokenIndex
			{
				position1215 := position
				if c := buffer[position]; c < rune('a') || c > rune('z') {
					goto l1214
				}
				position++
				add(ruleLowerASCII, position1215)
			}
			return true
		l1214:
			position, tokenIndex = position1214, tokenIndex1214
			return false
		},
		/* 143 UpperASCII <- <[A-Z]> */
		func() bool {
			position1216, tokenIndex1216 := position, tokenIndex
			{
				position1217 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l1216
				}
				position++
				add(ruleUpperASCII, position1217)
			}
			return true
		l1216:
			position, tokenIndex = position1216, tokenIndex1216
			return false
		},
		/* 144 Apostrophe <- <(ApostrOther / ApostrASCII)> */
		func() bool {
			position1218, tokenIndex1218 := position, tokenIndex
			{
				position1219 := position
				{
					position1220, tokenIndex1220 := position, tokenIndex
					if !_rules[ruleApostrOther]() {
						goto l1221
					}
					goto l1220
				l1221:
					position, tokenIndex = position1220, tokenIndex1220
					if !_rules[ruleApostrASCII]() {
						goto l1218
					}
				}
			l1220:
				add(ruleApostrophe, position1219)
			}
			return true
		l1218:
			position, tokenIndex = position1218, tokenIndex1218
			return false
		},
		/* 145 ApostrASCII <- <'\''> */
		func() bool {
			position1222, tokenIndex1222 := position, tokenIndex
			{
				position1223 := position
				if buffer[position] != rune('\'') {
					goto l1222
				}
				position++
				add(ruleApostrASCII, position1223)
			}
			return true
		l1222:
			position, tokenIndex = position1222, tokenIndex1222
			return false
		},
		/* 146 ApostrOther <- <('‘' / '’' / '`' / '´')> */
		func() bool {
			position1224, tokenIndex1224 := position, tokenIndex
			{
				position1225 := position
				{
					position1226, tokenIndex1226 := position, tokenIndex
					if buffer[position] != rune('‘') {
						goto l1227
					}
					position++
					goto l1226
				l1227:
					position, tokenIndex = position1226, tokenIndex1226
					if buffer[position] != rune('’') {
						goto l1228
					}
					position++
					goto l1226
				l1228:
					position, tokenIndex = position1226, tokenIndex1226
					if buffer[position] != rune('`') {
						goto l1229
					}
					position++
					goto l1226
				l1229:
					position, tokenIndex = position1226, tokenIndex1226
					if buffer[position] != rune('´') {
						goto l1224
					}
					position++
				}
			l1226:
				add(ruleApostrOther, position1225)
			}
			return true
		l1224:
			position, tokenIndex = position1224, tokenIndex1224
			return false
		},
		/* 147 Dash <- <('-' / DashOther)> */
		func() bool {
			position1230, tokenIndex1230 := position, tokenIndex
			{
				position1231 := position
				{
					position1232, tokenIndex1232 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l1233
					}
					position++
					goto l1232
				l1233:
					position, tokenIndex = position1232, tokenIndex1232
					if !_rules[ruleDashOther]() {
						goto l1230
					}
				}
			l1232:
				add(ruleDash, position1231)
			}
			return true
		l1230:
			position, tokenIndex = position1230, tokenIndex1230
			return false
		},
		/* 148 DashOther <- <'‑'> */
		func() bool {
			position1234, tokenIndex1234 := position, tokenIndex
			{
				position1235 := position
				if buffer[position] != rune('‑') {
					goto l1234
				}
				position++
				add(ruleDashOther, position1235)
			}
			return true
		l1234:
			position, tokenIndex = position1234, tokenIndex1234
			return false
		},
		/* 149 Slash <- <'/'> */
		func() bool {
			position1236, tokenIndex1236 := position, tokenIndex
			{
				position1237 := position
				if buffer[position] != rune('/') {
					goto l1236
				}
				position++
				add(ruleSlash, position1237)
			}
			return true
		l1236:
			position, tokenIndex = position1236, tokenIndex1236
			return false
		},
		/* 150 _ <- <(MultipleSpace / SingleSpace)> */
		func() bool {
			position1238, tokenIndex1238 := position, tokenIndex
			{
				position1239 := position
				{
					position1240, tokenIndex1240 := position, tokenIndex
					if !_rules[ruleMultipleSpace]() {
						goto l1241
					}
					goto l1240
				l1241:
					position, tokenIndex = position1240, tokenIndex1240
					if !_rules[ruleSingleSpace]() {
						goto l1238
					}
				}
			l1240:
				add(rule_, position1239)
			}
			return true
		l1238:
			position, tokenIndex = position1238, tokenIndex1238
			return false
		},
		/* 151 MultipleSpace <- <(SingleSpace SingleSpace+)> */
		func() bool {
			position1242, tokenIndex1242 := position, tokenIndex
			{
				position1243 := position
				if !_rules[ruleSingleSpace]() {
					goto l1242
				}
				if !_rules[ruleSingleSpace]() {
					goto l1242
				}
			l1244:
				{
					position1245, tokenIndex1245 := position, tokenIndex
					if !_rules[ruleSingleSpace]() {
						goto l1245
					}
					goto l1244
				l1245:
					position, tokenIndex = position1245, tokenIndex1245
				}
				add(ruleMultipleSpace, position1243)
			}
			return true
		l1242:
			position, tokenIndex = position1242, tokenIndex1242
			return false
		},
		/* 152 SingleSpace <- <(' ' / OtherSpace)> */
		func() bool {
			position1246, tokenIndex1246 := position, tokenIndex
			{
				position1247 := position
				{
					position1248, tokenIndex1248 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l1249
					}
					position++
					goto l1248
				l1249:
					position, tokenIndex = position1248, tokenIndex1248
					if !_rules[ruleOtherSpace]() {
						goto l1246
					}
				}
			l1248:
				add(ruleSingleSpace, position1247)
			}
			return true
		l1246:
			position, tokenIndex = position1246, tokenIndex1246
			return false
		},
		/* 153 OtherSpace <- <('\u3000' / '\u00a0' / '\t' / '\r' / '\n' / '\f' / '\v')> */
		func() bool {
			position1250, tokenIndex1250 := position, tokenIndex
			{
				position1251 := position
				{
					position1252, tokenIndex1252 := position, tokenIndex
					if buffer[position] != rune('\u3000') {
						goto l1253
					}
					position++
					goto l1252
				l1253:
					position, tokenIndex = position1252, tokenIndex1252
					if buffer[position] != rune('\u00a0') {
						goto l1254
					}
					position++
					goto l1252
				l1254:
					position, tokenIndex = position1252, tokenIndex1252
					if buffer[position] != rune('\t') {
						goto l1255
					}
					position++
					goto l1252
				l1255:
					position, tokenIndex = position1252, tokenIndex1252
					if buffer[position] != rune('\r') {
						goto l1256
					}
					position++
					goto l1252
				l1256:
					position, tokenIndex = position1252, tokenIndex1252
					if buffer[position] != rune('\n') {
						goto l1257
					}
					position++
					goto l1252
				l1257:
					position, tokenIndex = position1252, tokenIndex1252
					if buffer[position] != rune('\f') {
						goto l1258
					}
					position++
					goto l1252
				l1258:
					position, tokenIndex = position1252, tokenIndex1252
					if buffer[position] != rune('\v') {
						goto l1250
					}
					position++
				}
			l1252:
				add(ruleOtherSpace, position1251)
			}
			return true
		l1250:
			position, tokenIndex = position1250, tokenIndex1250
			return false
		},
		/* 154 END <- <!.> */
		func() bool {
			position1259, tokenIndex1259 := position, tokenIndex
			{
				position1260 := position
				{
					position1261, tokenIndex1261 := position, tokenIndex
					if !matchDot() {
						goto l1261
					}
					goto l1259
				l1261:
					position, tokenIndex = position1261, tokenIndex1261
				}
				add(ruleEND, position1260)
			}
			return true
		l1259:
			position, tokenIndex = position1259, tokenIndex1259
			return false
		},
	}
	p.rules = _rules
	return nil
}
