package parser

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleSciName
	ruleTail
	ruleName
	ruleHybridFormula
	ruleHybridFormulaFull
	ruleHybridFormulaPart
	ruleNamedHybrid
	ruleNamedSpeciesHybrid
	ruleNamedGenusHybrid
	ruleGraftChimeraFormula
	ruleGraftChimeraFormulaFull
	ruleGraftChimeraFormulaPart
	ruleNamedGenusGraftChimera
	ruleCandidatusName
	ruleCandidatus
	ruleSingleName
	ruleNameUninomial
	ruleNameApprox
	ruleNameComp
	ruleNameSpecies
	ruleGenusWord
	ruleInfraspGroup
	ruleInfraspEpithet
	ruleCultivarWordGroup
	ruleCultivar
	ruleRankCultivar
	ruleNotHybridChar
	ruleCultivarRecursive
	ruleCultivarApostrophe
	ruleSpeciesEpithet
	ruleIgnoredWord
	ruleComparison
	ruleRank
	ruleRankNotho
	ruleRankOtherUncommon
	ruleRankOther
	ruleRankVar
	ruleRankForma
	ruleRankSsp
	ruleRankAgamo
	ruleSubgenusOrSuperspecies
	ruleSubgenus
	ruleSubgenus2
	ruleSubgenus1
	ruleUninomialCombo
	ruleUninomialCombo1
	ruleUninomialCombo2
	ruleRankUninomial
	ruleRankUninomialPlain
	ruleRankUninomialNotho
	ruleUninomial
	ruleUninomialWord
	ruleAbbrSubgenus
	ruleAbbrGenus
	ruleCapWord
	ruleCapWord1
	ruleCapWordWithDash
	ruleTwoLetterGenusDashedSegment
	ruleWordAfterDash
	ruleUpperAfterDash
	ruleLowerAfterDash
	ruleTwoLetterGenus
	ruleWord
	ruleWord1
	ruleWordStartsWithDigit
	ruleWord2
	ruleWordApostr
	ruleWord4
	ruleDotPrefix
	ruleMultiDashedWord
	ruleHybridChar
	ruleGraftChimeraChar
	ruleApproxNameIgnored
	ruleApproximation
	ruleAuthorship
	ruleAuthorshipCombo
	ruleOriginalAuthorship
	ruleOriginalAuthorshipComb
	ruleCombinationAuthorship
	ruleBasionymAuthorshipMissingParens
	ruleMissingParensStart
	ruleMissingParensEnd
	ruleBasionymAuthorshipYearMisformed
	ruleBasionymAuthorship
	ruleBasionymAuthorship1
	ruleBasionymAuthorship2Parens
	ruleAuthorsGroup
	ruleAuthorsTeam
	ruleAuthorSep
	ruleAuthorSep1
	ruleAuthorSep2
	ruleAuthorSepSpanish
	ruleAuthorEx
	ruleAuthorEmend
	ruleAuthor
	ruleAuthor0
	ruleAuthor1
	ruleAuthor2
	ruleUnknownAuthor
	ruleAuthorWord
	ruleAuthorEtAl
	ruleAuthorWord1
	ruleAuthorWord2
	ruleAuthorWord3
	ruleAuthorWord4
	ruleAuthorDashInitials
	ruleAuthorInitial
	ruleAuthorWordSoft
	ruleCapAuthorWord
	ruleAllCapsAuthorWord
	ruleFilius
	ruleFiliusF
	ruleFiliusFNoSpace
	ruleAuthorSuffix
	ruleAuthorPrefixGlued1
	ruleAuthorPrefixGlued2
	ruleAuthorPrefix
	ruleAuthorPrefix2
	ruleAuthorPrefix1
	ruleAuthorUpperChar
	ruleAuthorLowerChar
	ruleYear
	ruleYearRange
	ruleYearWithDot
	ruleYearApprox
	ruleYearWithPage
	ruleYearWithParens
	ruleYearWithChar
	ruleYearNum
	ruleNameUpperChar
	ruleUpperCharExtended
	ruleUpperChar
	ruleNameLowerChar
	ruleMiscodedChar
	ruleLowerCharExtended
	ruleLowerChar
	ruleSpaceCharEOI
	ruleNums
	ruleLowerGreek
	ruleLowerASCII
	ruleUpperASCII
	ruleApostrophe
	ruleApostrASCII
	ruleApostrOther
	ruleDash
	ruleSlash
	rule_
	ruleMultipleSpace
	ruleSingleSpace
	ruleOtherSpace
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"SciName",
	"Tail",
	"Name",
	"HybridFormula",
	"HybridFormulaFull",
	"HybridFormulaPart",
	"NamedHybrid",
	"NamedSpeciesHybrid",
	"NamedGenusHybrid",
	"GraftChimeraFormula",
	"GraftChimeraFormulaFull",
	"GraftChimeraFormulaPart",
	"NamedGenusGraftChimera",
	"CandidatusName",
	"Candidatus",
	"SingleName",
	"NameUninomial",
	"NameApprox",
	"NameComp",
	"NameSpecies",
	"GenusWord",
	"InfraspGroup",
	"InfraspEpithet",
	"CultivarWordGroup",
	"Cultivar",
	"RankCultivar",
	"NotHybridChar",
	"CultivarRecursive",
	"CultivarApostrophe",
	"SpeciesEpithet",
	"IgnoredWord",
	"Comparison",
	"Rank",
	"RankNotho",
	"RankOtherUncommon",
	"RankOther",
	"RankVar",
	"RankForma",
	"RankSsp",
	"RankAgamo",
	"SubgenusOrSuperspecies",
	"Subgenus",
	"Subgenus2",
	"Subgenus1",
	"UninomialCombo",
	"UninomialCombo1",
	"UninomialCombo2",
	"RankUninomial",
	"RankUninomialPlain",
	"RankUninomialNotho",
	"Uninomial",
	"UninomialWord",
	"AbbrSubgenus",
	"AbbrGenus",
	"CapWord",
	"CapWord1",
	"CapWordWithDash",
	"TwoLetterGenusDashedSegment",
	"WordAfterDash",
	"UpperAfterDash",
	"LowerAfterDash",
	"TwoLetterGenus",
	"Word",
	"Word1",
	"WordStartsWithDigit",
	"Word2",
	"WordApostr",
	"Word4",
	"DotPrefix",
	"MultiDashedWord",
	"HybridChar",
	"GraftChimeraChar",
	"ApproxNameIgnored",
	"Approximation",
	"Authorship",
	"AuthorshipCombo",
	"OriginalAuthorship",
	"OriginalAuthorshipComb",
	"CombinationAuthorship",
	"BasionymAuthorshipMissingParens",
	"MissingParensStart",
	"MissingParensEnd",
	"BasionymAuthorshipYearMisformed",
	"BasionymAuthorship",
	"BasionymAuthorship1",
	"BasionymAuthorship2Parens",
	"AuthorsGroup",
	"AuthorsTeam",
	"AuthorSep",
	"AuthorSep1",
	"AuthorSep2",
	"AuthorSepSpanish",
	"AuthorEx",
	"AuthorEmend",
	"Author",
	"Author0",
	"Author1",
	"Author2",
	"UnknownAuthor",
	"AuthorWord",
	"AuthorEtAl",
	"AuthorWord1",
	"AuthorWord2",
	"AuthorWord3",
	"AuthorWord4",
	"AuthorDashInitials",
	"AuthorInitial",
	"AuthorWordSoft",
	"CapAuthorWord",
	"AllCapsAuthorWord",
	"Filius",
	"FiliusF",
	"FiliusFNoSpace",
	"AuthorSuffix",
	"AuthorPrefixGlued1",
	"AuthorPrefixGlued2",
	"AuthorPrefix",
	"AuthorPrefix2",
	"AuthorPrefix1",
	"AuthorUpperChar",
	"AuthorLowerChar",
	"Year",
	"YearRange",
	"YearWithDot",
	"YearApprox",
	"YearWithPage",
	"YearWithParens",
	"YearWithChar",
	"YearNum",
	"NameUpperChar",
	"UpperCharExtended",
	"UpperChar",
	"NameLowerChar",
	"MiscodedChar",
	"LowerCharExtended",
	"LowerChar",
	"SpaceCharEOI",
	"Nums",
	"LowerGreek",
	"LowerASCII",
	"UpperASCII",
	"Apostrophe",
	"ApostrASCII",
	"ApostrOther",
	"Dash",
	"Slash",
	"_",
	"MultipleSpace",
	"SingleSpace",
	"OtherSpace",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Engine struct {
	baseEngine

	Buffer string
	buffer []rune
	rules  [152]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Engine) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Engine) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Engine
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Engine) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Engine) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Engine) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Engine) error {
	return func(p *Engine) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Engine) error {
	return func(p *Engine) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Engine) Init(options ...func(*Engine) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 SciName <- <(_? Name Tail END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rule_]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				if !_rules[ruleName]() {
					goto l0
				}
				if !_rules[ruleTail]() {
					goto l0
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleSciName, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Tail <- <((_ / ';' / ',') .*)?> */
		func() bool {
			{
				position5 := position
				{
					position6, tokenIndex6 := position, tokenIndex
					{
						position8, tokenIndex8 := position, tokenIndex
						if !_rules[rule_]() {
							goto l9
						}
						goto l8
					l9:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(';') {
							goto l10
						}
						position++
						goto l8
					l10:
						position, tokenIndex = position8, tokenIndex8
						if buffer[position] != rune(',') {
							goto l6
						}
						position++
					}
				l8:
				l11:
					{
						position12, tokenIndex12 := position, tokenIndex
						if !matchDot() {
							goto l12
						}
						goto l11
					l12:
						position, tokenIndex = position12, tokenIndex12
					}
					goto l7
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
			l7:
				add(ruleTail, position5)
			}
			return true
		},
		/* 2 Name <- <(NamedGenusGraftChimera / GraftChimeraFormula / NamedHybrid / HybridFormula / CandidatusName / SingleName)> */
		func() bool {
			position13, tokenIndex13 := position, tokenIndex
			{
				position14 := position
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleNamedGenusGraftChimera]() {
						goto l16
					}
					goto l15
				l16:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleGraftChimeraFormula]() {
						goto l17
					}
					goto l15
				l17:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleNamedHybrid]() {
						goto l18
					}
					goto l15
				l18:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleHybridFormula]() {
						goto l19
					}
					goto l15
				l19:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleCandidatusName]() {
						goto l20
					}
					goto l15
				l20:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleSingleName]() {
						goto l13
					}
				}
			l15:
				add(ruleName, position14)
			}
			return true
		l13:
			position, tokenIndex = position13, tokenIndex13
			return false
		},
		/* 3 HybridFormula <- <(SingleName (_ (HybridFormulaPart / HybridFormulaFull))+)> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				if !_rules[ruleSingleName]() {
					goto l21
				}
				if !_rules[rule_]() {
					goto l21
				}
				{
					position25, tokenIndex25 := position, tokenIndex
					if !_rules[ruleHybridFormulaPart]() {
						goto l26
					}
					goto l25
				l26:
					position, tokenIndex = position25, tokenIndex25
					if !_rules[ruleHybridFormulaFull]() {
						goto l21
					}
				}
			l25:
			l23:
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[rule_]() {
						goto l24
					}
					{
						position27, tokenIndex27 := position, tokenIndex
						if !_rules[ruleHybridFormulaPart]() {
							goto l28
						}
						goto l27
					l28:
						position, tokenIndex = position27, tokenIndex27
						if !_rules[ruleHybridFormulaFull]() {
							goto l24
						}
					}
				l27:
					goto l23
				l24:
					position, tokenIndex = position24, tokenIndex24
				}
				add(ruleHybridFormula, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 4 HybridFormulaFull <- <(HybridChar (_ SingleName)?)> */
		func() bool {
			position29, tokenIndex29 := position, tokenIndex
			{
				position30 := position
				if !_rules[ruleHybridChar]() {
					goto l29
				}
				{
					position31, tokenIndex31 := position, tokenIndex
					if !_rules[rule_]() {
						goto l31
					}
					if !_rules[ruleSingleName]() {
						goto l31
					}
					goto l32
				l31:
					position, tokenIndex = position31, tokenIndex31
				}
			l32:
				add(ruleHybridFormulaFull, position30)
			}
			return true
		l29:
			position, tokenIndex = position29, tokenIndex29
			return false
		},
		/* 5 HybridFormulaPart <- <(HybridChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position33, tokenIndex33 := position, tokenIndex
			{
				position34 := position
				if !_rules[ruleHybridChar]() {
					goto l33
				}
				if !_rules[rule_]() {
					goto l33
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l33
				}
				{
					position35, tokenIndex35 := position, tokenIndex
					if !_rules[rule_]() {
						goto l35
					}
					if !_rules[ruleInfraspGroup]() {
						goto l35
					}
					goto l36
				l35:
					position, tokenIndex = position35, tokenIndex35
				}
			l36:
				add(ruleHybridFormulaPart, position34)
			}
			return true
		l33:
			position, tokenIndex = position33, tokenIndex33
			return false
		},
		/* 6 NamedHybrid <- <(NamedGenusHybrid / NamedSpeciesHybrid)> */
		func() bool {
			position37, tokenIndex37 := position, tokenIndex
			{
				position38 := position
				{
					position39, tokenIndex39 := position, tokenIndex
					if !_rules[ruleNamedGenusHybrid]() {
						goto l40
					}
					goto l39
				l40:
					position, tokenIndex = position39, tokenIndex39
					if !_rules[ruleNamedSpeciesHybrid]() {
						goto l37
					}
				}
			l39:
				add(ruleNamedHybrid, position38)
			}
			return true
		l37:
			position, tokenIndex = position37, tokenIndex37
			return false
		},
		/* 7 NamedSpeciesHybrid <- <(GenusWord (_ Subgenus)? (_ Comparison)? _ HybridChar _? SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position41, tokenIndex41 := position, tokenIndex
			{
				position42 := position
				if !_rules[ruleGenusWord]() {
					goto l41
				}
				{
					position43, tokenIndex43 := position, tokenIndex
					if !_rules[rule_]() {
						goto l43
					}
					if !_rules[ruleSubgenus]() {
						goto l43
					}
					goto l44
				l43:
					position, tokenIndex = position43, tokenIndex43
				}
			l44:
				{
					position45, tokenIndex45 := position, tokenIndex
					if !_rules[rule_]() {
						goto l45
					}
					if !_rules[ruleComparison]() {
						goto l45
					}
					goto l46
				l45:
					position, tokenIndex = position45, tokenIndex45
				}
			l46:
				if !_rules[rule_]() {
					goto l41
				}
				if !_rules[ruleHybridChar]() {
					goto l41
				}
				{
					position47, tokenIndex47 := position, tokenIndex
					if !_rules[rule_]() {
						goto l47
					}
					goto l48
				l47:
					position, tokenIndex = position47, tokenIndex47
				}
			l48:
				if !_rules[ruleSpeciesEpithet]() {
					goto l41
				}
				{
					position49, tokenIndex49 := position, tokenIndex
					if !_rules[rule_]() {
						goto l49
					}
					if !_rules[ruleInfraspGroup]() {
						goto l49
					}
					goto l50
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
			l50:
				add(ruleNamedSpeciesHybrid, position42)
			}
			return true
		l41:
			position, tokenIndex = position41, tokenIndex41
			return false
		},
		/* 8 NamedGenusHybrid <- <(HybridChar _? SingleName)> */
		func() bool {
			position51, tokenIndex51 := position, tokenIndex
			{
				position52 := position
				if !_rules[ruleHybridChar]() {
					goto l51
				}
				{
					position53, tokenIndex53 := position, tokenIndex
					if !_rules[rule_]() {
						goto l53
					}
					goto l54
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
			l54:
				if !_rules[ruleSingleName]() {
					goto l51
				}
				add(ruleNamedGenusHybrid, position52)
			}
			return true
		l51:
			position, tokenIndex = position51, tokenIndex51
			return false
		},
		/* 9 GraftChimeraFormula <- <(SingleName (_ (GraftChimeraFormulaPart / GraftChimeraFormulaFull))+)> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				if !_rules[ruleSingleName]() {
					goto l55
				}
				if !_rules[rule_]() {
					goto l55
				}
				{
					position59, tokenIndex59 := position, tokenIndex
					if !_rules[ruleGraftChimeraFormulaPart]() {
						goto l60
					}
					goto l59
				l60:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleGraftChimeraFormulaFull]() {
						goto l55
					}
				}
			l59:
			l57:
				{
					position58, tokenIndex58 := position, tokenIndex
					if !_rules[rule_]() {
						goto l58
					}
					{
						position61, tokenIndex61 := position, tokenIndex
						if !_rules[ruleGraftChimeraFormulaPart]() {
							goto l62
						}
						goto l61
					l62:
						position, tokenIndex = position61, tokenIndex61
						if !_rules[ruleGraftChimeraFormulaFull]() {
							goto l58
						}
					}
				l61:
					goto l57
				l58:
					position, tokenIndex = position58, tokenIndex58
				}
				add(ruleGraftChimeraFormula, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 10 GraftChimeraFormulaFull <- <(GraftChimeraChar (_ SingleName)?)> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l63
				}
				{
					position65, tokenIndex65 := position, tokenIndex
					if !_rules[rule_]() {
						goto l65
					}
					if !_rules[ruleSingleName]() {
						goto l65
					}
					goto l66
				l65:
					position, tokenIndex = position65, tokenIndex65
				}
			l66:
				add(ruleGraftChimeraFormulaFull, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 11 GraftChimeraFormulaPart <- <(GraftChimeraChar _ SpeciesEpithet (_ InfraspGroup)?)> */
		func() bool {
			position67, tokenIndex67 := position, tokenIndex
			{
				position68 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l67
				}
				if !_rules[rule_]() {
					goto l67
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l67
				}
				{
					position69, tokenIndex69 := position, tokenIndex
					if !_rules[rule_]() {
						goto l69
					}
					if !_rules[ruleInfraspGroup]() {
						goto l69
					}
					goto l70
				l69:
					position, tokenIndex = position69, tokenIndex69
				}
			l70:
				add(ruleGraftChimeraFormulaPart, position68)
			}
			return true
		l67:
			position, tokenIndex = position67, tokenIndex67
			return false
		},
		/* 12 NamedGenusGraftChimera <- <(GraftChimeraChar _? SingleName)> */
		func() bool {
			position71, tokenIndex71 := position, tokenIndex
			{
				position72 := position
				if !_rules[ruleGraftChimeraChar]() {
					goto l71
				}
				{
					position73, tokenIndex73 := position, tokenIndex
					if !_rules[rule_]() {
						goto l73
					}
					goto l74
				l73:
					position, tokenIndex = position73, tokenIndex73
				}
			l74:
				if !_rules[ruleSingleName]() {
					goto l71
				}
				add(ruleNamedGenusGraftChimera, position72)
			}
			return true
		l71:
			position, tokenIndex = position71, tokenIndex71
			return false
		},
		/* 13 CandidatusName <- <(Candidatus _ SingleName)> */
		func() bool {
			position75, tokenIndex75 := position, tokenIndex
			{
				position76 := position
				if !_rules[ruleCandidatus]() {
					goto l75
				}
				if !_rules[rule_]() {
					goto l75
				}
				if !_rules[ruleSingleName]() {
					goto l75
				}
				add(ruleCandidatusName, position76)
			}
			return true
		l75:
			position, tokenIndex = position75, tokenIndex75
			return false
		},
		/* 14 Candidatus <- <('C' 'a' 'n' 'd' 'i' 'd' 'a' 't' 'u' 's')> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if buffer[position] != rune('C') {
					goto l77
				}
				position++
				if buffer[position] != rune('a') {
					goto l77
				}
				position++
				if buffer[position] != rune('n') {
					goto l77
				}
				position++
				if buffer[position] != rune('d') {
					goto l77
				}
				position++
				if buffer[position] != rune('i') {
					goto l77
				}
				position++
				if buffer[position] != rune('d') {
					goto l77
				}
				position++
				if buffer[position] != rune('a') {
					goto l77
				}
				position++
				if buffer[position] != rune('t') {
					goto l77
				}
				position++
				if buffer[position] != rune('u') {
					goto l77
				}
				position++
				if buffer[position] != rune('s') {
					goto l77
				}
				position++
				add(ruleCandidatus, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 15 SingleName <- <(NameComp / NameApprox / NameSpecies / NameUninomial)> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				{
					position81, tokenIndex81 := position, tokenIndex
					if !_rules[ruleNameComp]() {
						goto l82
					}
					goto l81
				l82:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameApprox]() {
						goto l83
					}
					goto l81
				l83:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameSpecies]() {
						goto l84
					}
					goto l81
				l84:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNameUninomial]() {
						goto l79
					}
				}
			l81:
				add(ruleSingleName, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 16 NameUninomial <- <((UninomialCombo / Uninomial) (_ CultivarWordGroup)?)> */
		func() bool {
			position85, tokenIndex85 := position, tokenIndex
			{
				position86 := position
				{
					position87, tokenIndex87 := position, tokenIndex
					if !_rules[ruleUninomialCombo]() {
						goto l88
					}
					goto l87
				l88:
					position, tokenIndex = position87, tokenIndex87
					if !_rules[ruleUninomial]() {
						goto l85
					}
				}
			l87:
				{
					position89, tokenIndex89 := position, tokenIndex
					if !_rules[rule_]() {
						goto l89
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l89
					}
					goto l90
				l89:
					position, tokenIndex = position89, tokenIndex89
				}
			l90:
				add(ruleNameUninomial, position86)
			}
			return true
		l85:
			position, tokenIndex = position85, tokenIndex85
			return false
		},
		/* 17 NameApprox <- <(GenusWord (_ SpeciesEpithet)? _ Approximation ApproxNameIgnored)> */
		func() bool {
			position91, tokenIndex91 := position, tokenIndex
			{
				position92 := position
				if !_rules[ruleGenusWord]() {
					goto l91
				}
				{
					position93, tokenIndex93 := position, tokenIndex
					if !_rules[rule_]() {
						goto l93
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l93
					}
					goto l94
				l93:
					position, tokenIndex = position93, tokenIndex93
				}
			l94:
				if !_rules[rule_]() {
					goto l91
				}
				if !_rules[ruleApproximation]() {
					goto l91
				}
				if !_rules[ruleApproxNameIgnored]() {
					goto l91
				}
				add(ruleNameApprox, position92)
			}
			return true
		l91:
			position, tokenIndex = position91, tokenIndex91
			return false
		},
		/* 18 NameComp <- <(GenusWord _ Comparison (_ SpeciesEpithet)?)> */
		func() bool {
			position95, tokenIndex95 := position, tokenIndex
			{
				position96 := position
				if !_rules[ruleGenusWord]() {
					goto l95
				}
				if !_rules[rule_]() {
					goto l95
				}
				if !_rules[ruleComparison]() {
					goto l95
				}
				{
					position97, tokenIndex97 := position, tokenIndex
					if !_rules[rule_]() {
						goto l97
					}
					if !_rules[ruleSpeciesEpithet]() {
						goto l97
					}
					goto l98
				l97:
					position, tokenIndex = position97, tokenIndex97
				}
			l98:
				add(ruleNameComp, position96)
			}
			return true
		l95:
			position, tokenIndex = position95, tokenIndex95
			return false
		},
		/* 19 NameSpecies <- <(GenusWord (_? (Subgenus / SubgenusOrSuperspecies))? _ SpeciesEpithet (_ InfraspGroup)? (_ CultivarWordGroup)?)> */
		func() bool {
			position99, tokenIndex99 := position, tokenIndex
			{
				position100 := position
				if !_rules[ruleGenusWord]() {
					goto l99
				}
				{
					position101, tokenIndex101 := position, tokenIndex
					{
						position103, tokenIndex103 := position, tokenIndex
						if !_rules[rule_]() {
							goto l103
						}
						goto l104
					l103:
						position, tokenIndex = position103, tokenIndex103
					}
				l104:
					{
						position105, tokenIndex105 := position, tokenIndex
						if !_rules[ruleSubgenus]() {
							goto l106
						}
						goto l105
					l106:
						position, tokenIndex = position105, tokenIndex105
						if !_rules[ruleSubgenusOrSuperspecies]() {
							goto l101
						}
					}
				l105:
					goto l102
				l101:
					position, tokenIndex = position101, tokenIndex101
				}
			l102:
				if !_rules[rule_]() {
					goto l99
				}
				if !_rules[ruleSpeciesEpithet]() {
					goto l99
				}
				{
					position107, tokenIndex107 := position, tokenIndex
					if !_rules[rule_]() {
						goto l107
					}
					if !_rules[ruleInfraspGroup]() {
						goto l107
					}
					goto l108
				l107:
					position, tokenIndex = position107, tokenIndex107
				}
			l108:
				{
					position109, tokenIndex109 := position, tokenIndex
					if !_rules[rule_]() {
						goto l109
					}
					if !_rules[ruleCultivarWordGroup]() {
						goto l109
					}
					goto l110
				l109:
					position, tokenIndex = position109, tokenIndex109
				}
			l110:
				add(ruleNameSpecies, position100)
			}
			return true
		l99:
			position, tokenIndex = position99, tokenIndex99
			return false
		},
		/* 20 GenusWord <- <((AbbrGenus / UninomialWord) !(_ AuthorWord))> */
		func() bool {
			position111, tokenIndex111 := position, tokenIndex
			{
				position112 := position
				{
					position113, tokenIndex113 := position, tokenIndex
					if !_rules[ruleAbbrGenus]() {
						goto l114
					}
					goto l113
				l114:
					position, tokenIndex = position113, tokenIndex113
					if !_rules[ruleUninomialWord]() {
						goto l111
					}
				}
			l113:
				{
					position115, tokenIndex115 := position, tokenIndex
					if !_rules[rule_]() {
						goto l115
					}
					if !_rules[ruleAuthorWord]() {
						goto l115
					}
					goto l111
				l115:
					position, tokenIndex = position115, tokenIndex115
				}
				add(ruleGenusWord, position112)
			}
			return true
		l111:
			position, tokenIndex = position111, tokenIndex111
			return false
		},
		/* 21 InfraspGroup <- <(InfraspEpithet (_ InfraspEpithet)? (_ InfraspEpithet)?)> */
		func() bool {
			position116, tokenIndex116 := position, tokenIndex
			{
				position117 := position
				if !_rules[ruleInfraspEpithet]() {
					goto l116
				}
				{
					position118, tokenIndex118 := position, tokenIndex
					if !_rules[rule_]() {
						goto l118
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l118
					}
					goto l119
				l118:
					position, tokenIndex = position118, tokenIndex118
				}
			l119:
				{
					position120, tokenIndex120 := position, tokenIndex
					if !_rules[rule_]() {
						goto l120
					}
					if !_rules[ruleInfraspEpithet]() {
						goto l120
					}
					goto l121
				l120:
					position, tokenIndex = position120, tokenIndex120
				}
			l121:
				add(ruleInfraspGroup, position117)
			}
			return true
		l116:
			position, tokenIndex = position116, tokenIndex116
			return false
		},
		/* 22 InfraspEpithet <- <((Rank _?)? !AuthorEx Word (_ IgnoredWord)? (_? Authorship)?)> */
		func() bool {
			position122, tokenIndex122 := position, tokenIndex
			{
				position123 := position
				{
					position124, tokenIndex124 := position, tokenIndex
					if !_rules[ruleRank]() {
						goto l124
					}
					{
						position126, tokenIndex126 := position, tokenIndex
						if !_rules[rule_]() {
							goto l126
						}
						goto l127
					l126:
						position, tokenIndex = position126, tokenIndex126
					}
				l127:
					goto l125
				l124:
					position, tokenIndex = position124, tokenIndex124
				}
			l125:
				{
					position128, tokenIndex128 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l128
					}
					goto l122
				l128:
					position, tokenIndex = position128, tokenIndex128
				}
				if !_rules[ruleWord]() {
					goto l122
				}
				{
					position129, tokenIndex129 := position, tokenIndex
					if !_rules[rule_]() {
						goto l129
					}
					if !_rules[ruleIgnoredWord]() {
						goto l129
					}
					goto l130
				l129:
					position, tokenIndex = position129, tokenIndex129
				}
			l130:
				{
					position131, tokenIndex131 := position, tokenIndex
					{
						position133, tokenIndex133 := position, tokenIndex
						if !_rules[rule_]() {
							goto l133
						}
						goto l134
					l133:
						position, tokenIndex = position133, tokenIndex133
					}
				l134:
					if !_rules[ruleAuthorship]() {
						goto l131
					}
					goto l132
				l131:
					position, tokenIndex = position131, tokenIndex131
				}
			l132:
				add(ruleInfraspEpithet, position123)
			}
			return true
		l122:
			position, tokenIndex = position122, tokenIndex122
			return false
		},
		/* 23 CultivarWordGroup <- <(((RankCultivar _)? CultivarApostrophe CultivarRecursive CultivarApostrophe) / (RankCultivar _ Cultivar))> */
		func() bool {
			position135, tokenIndex135 := position, tokenIndex
			{
				position136 := position
				{
					position137, tokenIndex137 := position, tokenIndex
					{
						position139, tokenIndex139 := position, tokenIndex
						if !_rules[ruleRankCultivar]() {
							goto l139
						}
						if !_rules[rule_]() {
							goto l139
						}
						goto l140
					l139:
						position, tokenIndex = position139, tokenIndex139
					}
				l140:
					if !_rules[ruleCultivarApostrophe]() {
						goto l138
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l138
					}
					if !_rules[ruleCultivarApostrophe]() {
						goto l138
					}
					goto l137
				l138:
					position, tokenIndex = position137, tokenIndex137
					if !_rules[ruleRankCultivar]() {
						goto l135
					}
					if !_rules[rule_]() {
						goto l135
					}
					if !_rules[ruleCultivar]() {
						goto l135
					}
				}
			l137:
				add(ruleCultivarWordGroup, position136)
			}
			return true
		l135:
			position, tokenIndex = position135, tokenIndex135
			return false
		},
		/* 24 Cultivar <- <NotHybridChar+> */
		func() bool {
			position141, tokenIndex141 := position, tokenIndex
			{
				position142 := position
				if !_rules[ruleNotHybridChar]() {
					goto l141
				}
			l143:
				{
					position144, tokenIndex144 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l144
					}
					goto l143
				l144:
					position, tokenIndex = position144, tokenIndex144
				}
				add(ruleCultivar, position142)
			}
			return true
		l141:
			position, tokenIndex = position141, tokenIndex141
			return false
		},
		/* 25 RankCultivar <- <('c' 'v' '.'?)> */
		func() bool {
			position145, tokenIndex145 := position, tokenIndex
			{
				position146 := position
				if buffer[position] != rune('c') {
					goto l145
				}
				position++
				if buffer[position] != rune('v') {
					goto l145
				}
				position++
				{
					position147, tokenIndex147 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l147
					}
					position++
					goto l148
				l147:
					position, tokenIndex = position147, tokenIndex147
				}
			l148:
				add(ruleRankCultivar, position146)
			}
			return true
		l145:
			position, tokenIndex = position145, tokenIndex145
			return false
		},
		/* 26 NotHybridChar <- <(!(_ HybridChar) .)> */
		func() bool {
			position149, tokenIndex149 := position, tokenIndex
			{
				position150 := position
				{
					position151, tokenIndex151 := position, tokenIndex
					if !_rules[rule_]() {
						goto l151
					}
					if !_rules[ruleHybridChar]() {
						goto l151
					}
					goto l149
				l151:
					position, tokenIndex = position151, tokenIndex151
				}
				if !matchDot() {
					goto l149
				}
				add(ruleNotHybridChar, position150)
			}
			return true
		l149:
			position, tokenIndex = position149, tokenIndex149
			return false
		},
		/* 27 CultivarRecursive <- <((NotHybridChar CultivarRecursive) / &CultivarApostrophe)> */
		func() bool {
			position152, tokenIndex152 := position, tokenIndex
			{
				position153 := position
				{
					position154, tokenIndex154 := position, tokenIndex
					if !_rules[ruleNotHybridChar]() {
						goto l155
					}
					if !_rules[ruleCultivarRecursive]() {
						goto l155
					}
					goto l154
				l155:
					position, tokenIndex = position154, tokenIndex154
					{
						position156, tokenIndex156 := position, tokenIndex
						if !_rules[ruleCultivarApostrophe]() {
							goto l152
						}
						position, tokenIndex = position156, tokenIndex156
					}
				}
			l154:
				add(ruleCultivarRecursive, position153)
			}
			return true
		l152:
			position, tokenIndex = position152, tokenIndex152
			return false
		},
		/* 28 CultivarApostrophe <- <('\'' / '‘' / '’' / '"' / '“' / '”')> */
		func() bool {
			position157, tokenIndex157 := position, tokenIndex
			{
				position158 := position
				{
					position159, tokenIndex159 := position, tokenIndex
					if buffer[position] != rune('\'') {
						goto l160
					}
					position++
					goto l159
				l160:
					position, tokenIndex = position159, tokenIndex159
					if buffer[position] != rune('‘') {
						goto l161
					}
					position++
					goto l159
				l161:
					position, tokenIndex = position159, tokenIndex159
					if buffer[position] != rune('’') {
						goto l162
					}
					position++
					goto l159
				l162:
					position, tokenIndex = position159, tokenIndex159
					if buffer[position] != rune('"') {
						goto l163
					}
					position++
					goto l159
				l163:
					position, tokenIndex = position159, tokenIndex159
					if buffer[position] != rune('“') {
						goto l164
					}
					position++
					goto l159
				l164:
					position, tokenIndex = position159, tokenIndex159
					if buffer[position] != rune('”') {
						goto l157
					}
					position++
				}
			l159:
				add(ruleCultivarApostrophe, position158)
			}
			return true
		l157:
			position, tokenIndex = position157, tokenIndex157
			return false
		},
		/* 29 SpeciesEpithet <- <(!AuthorEx Word (_ IgnoredWord)? (_? Authorship)?)> */
		func() bool {
			position165, tokenIndex165 := position, tokenIndex
			{
				position166 := position
				{
					position167, tokenIndex167 := position, tokenIndex
					if !_rules[ruleAuthorEx]() {
						goto l167
					}
					goto l165
				l167:
					position, tokenIndex = position167, tokenIndex167
				}
				if !_rules[ruleWord]() {
					goto l165
				}
				{
					position168, tokenIndex168 := position, tokenIndex
					if !_rules[rule_]() {
						goto l168
					}
					if !_rules[ruleIgnoredWord]() {
						goto l168
					}
					goto l169
				l168:
					position, tokenIndex = position168, tokenIndex168
				}
			l169:
				{
					position170, tokenIndex170 := position, tokenIndex
					{
						position172, tokenIndex172 := position, tokenIndex
						if !_rules[rule_]() {
							goto l172
						}
						goto l173
					l172:
						position, tokenIndex = position172, tokenIndex172
					}
				l173:
					if !_rules[ruleAuthorship]() {
						goto l170
					}
					goto l171
				l170:
					position, tokenIndex = position170, tokenIndex170
				}
			l171:
				add(ruleSpeciesEpithet, position166)
			}
			return true
		l165:
			position, tokenIndex = position165, tokenIndex165
			return false
		},
		/* 30 IgnoredWord <- <(('m' 'i' 'h' 'i' '.') / ('m' 'i' 'h' 'i'))> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				{
					position176, tokenIndex176 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l177
					}
					position++
					if buffer[position] != rune('i') {
						goto l177
					}
					position++
					if buffer[position] != rune('h') {
						goto l177
					}
					position++
					if buffer[position] != rune('i') {
						goto l177
					}
					position++
					if buffer[position] != rune('.') {
						goto l177
					}
					position++
					goto l176
				l177:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('m') {
						goto l174
					}
					position++
					if buffer[position] != rune('i') {
						goto l174
					}
					position++
					if buffer[position] != rune('h') {
						goto l174
					}
					position++
					if buffer[position] != rune('i') {
						goto l174
					}
					position++
				}
			l176:
				add(ruleIgnoredWord, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 31 Comparison <- <('c' 'f' '.'? &SpaceCharEOI)> */
		func() bool {
			position178, tokenIndex178 := position, tokenIndex
			{
				position179 := position
				if buffer[position] != rune('c') {
					goto l178
				}
				position++
				if buffer[position] != rune('f') {
					goto l178
				}
				position++
				{
					position180, tokenIndex180 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l180
					}
					position++
					goto l181
				l180:
					position, tokenIndex = position180, tokenIndex180
				}
			l181:
				{
					position182, tokenIndex182 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l178
					}
					position, tokenIndex = position182, tokenIndex182
				}
				add(ruleComparison, position179)
			}
			return true
		l178:
			position, tokenIndex = position178, tokenIndex178
			return false
		},
		/* 32 Rank <- <((RankForma / RankVar / RankSsp / RankOther / RankOtherUncommon / RankAgamo / RankNotho) (_? LowerGreek ('.' / &SpaceCharEOI))?)> */
		func() bool {
			position183, tokenIndex183 := position, tokenIndex
			{
				position184 := position
				{
					position185, tokenIndex185 := position, tokenIndex
					if !_rules[ruleRankForma]() {
						goto l186
					}
					goto l185
				l186:
					position, tokenIndex = position185, tokenIndex185
					if !_rules[ruleRankVar]() {
						goto l187
					}
					goto l185
				l187:
					position, tokenIndex = position185, tokenIndex185
					if !_rules[ruleRankSsp]() {
						goto l188
					}
					goto l185
				l188:
					position, tokenIndex = position185, tokenIndex185
					if !_rules[ruleRankOther]() {
						goto l189
					}
					goto l185
				l189:
					position, tokenIndex = position185, tokenIndex185
					if !_rules[ruleRankOtherUncommon]() {
						goto l190
					}
					goto l185
				l190:
					position, tokenIndex = position185, tokenIndex185
					if !_rules[ruleRankAgamo]() {
						goto l191
					}
					goto l185
				l191:
					position, tokenIndex = position185, tokenIndex185
					if !_rules[ruleRankNotho]() {
						goto l183
					}
				}
			l185:
				{
					position192, tokenIndex192 := position, tokenIndex
					{
						position194, tokenIndex194 := position, tokenIndex
						if !_rules[rule_]() {
							goto l194
						}
						goto l195
					l194:
						position, tokenIndex = position194, tokenIndex194
					}
				l195:
					if !_rules[ruleLowerGreek]() {
						goto l192
					}
					{
						position196, tokenIndex196 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l197
						}
						position++
						goto l196
					l197:
						position, tokenIndex = position196, tokenIndex196
						{
							position198, tokenIndex198 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l192
							}
							position, tokenIndex = position198, tokenIndex198
						}
					}
				l196:
					goto l193
				l192:
					position, tokenIndex = position192, tokenIndex192
				}
			l193:
				add(ruleRank, position184)
			}
			return true
		l183:
			position, tokenIndex = position183, tokenIndex183
			return false
		},
		/* 33 RankNotho <- <((('n' 'o' 't' 'h' 'o' (('v' 'a' 'r') / ('f' 'o') / 'f' / ('s' 'u' 'b' 's' 'p') / ('s' 's' 'p') / ('s' 'p') / ('m' 'o' 'r' 't' 'h') / ('s' 'u' 'p' 's' 'p') / ('s' 'u'))) / ('n' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position199, tokenIndex199 := position, tokenIndex
			{
				position200 := position
				{
					position201, tokenIndex201 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l202
					}
					position++
					if buffer[position] != rune('o') {
						goto l202
					}
					position++
					if buffer[position] != rune('t') {
						goto l202
					}
					position++
					if buffer[position] != rune('h') {
						goto l202
					}
					position++
					if buffer[position] != rune('o') {
						goto l202
					}
					position++
					{
						position203, tokenIndex203 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l204
						}
						position++
						if buffer[position] != rune('a') {
							goto l204
						}
						position++
						if buffer[position] != rune('r') {
							goto l204
						}
						position++
						goto l203
					l204:
						position, tokenIndex = position203, tokenIndex203
						if buffer[position] != rune('f') {
							goto l205
						}
						position++
						if buffer[position] != rune('o') {
							goto l205
						}
						position++
						goto l203
					l205:
						position, tokenIndex = position203, tokenIndex203
						if buffer[position] != rune('f') {
							goto l206
						}
						position++
						goto l203
					l206:
						position, tokenIndex = position203, tokenIndex203
						if buffer[position] != rune('s') {
							goto l207
						}
						position++
						if buffer[position] != rune('u') {
							goto l207
						}
						position++
						if buffer[position] != rune('b') {
							goto l207
						}
						position++
						if buffer[position] != rune('s') {
							goto l207
						}
						position++
						if buffer[position] != rune('p') {
							goto l207
						}
						position++
						goto l203
					l207:
						position, tokenIndex = position203, tokenIndex203
						if buffer[position] != rune('s') {
							goto l208
						}
						position++
						if buffer[position] != rune('s') {
							goto l208
						}
						position++
						if buffer[position] != rune('p') {
							goto l208
						}
						position++
						goto l203
					l208:
						position, tokenIndex = position203, tokenIndex203
						if buffer[position] != rune('s') {
							goto l209
						}
						position++
						if buffer[position] != rune('p') {
							goto l209
						}
						position++
						goto l203
					l209:
						position, tokenIndex = position203, tokenIndex203
						if buffer[position] != rune('m') {
							goto l210
						}
						position++
						if buffer[position] != rune('o') {
							goto l210
						}
						position++
						if buffer[position] != rune('r') {
							goto l210
						}
						position++
						if buffer[position] != rune('t') {
							goto l210
						}
						position++
						if buffer[position] != rune('h') {
							goto l210
						}
						position++
						goto l203
					l210:
						position, tokenIndex = position203, tokenIndex203
						if buffer[position] != rune('s') {
							goto l211
						}
						position++
						if buffer[position] != rune('u') {
							goto l211
						}
						position++
						if buffer[position] != rune('p') {
							goto l211
						}
						position++
						if buffer[position] != rune('s') {
							goto l211
						}
						position++
						if buffer[position] != rune('p') {
							goto l211
						}
						position++
						goto l203
					l211:
						position, tokenIndex = position203, tokenIndex203
						if buffer[position] != rune('s') {
							goto l202
						}
						position++
						if buffer[position] != rune('u') {
							goto l202
						}
						position++
					}
				l203:
					goto l201
				l202:
					position, tokenIndex = position201, tokenIndex201
					if buffer[position] != rune('n') {
						goto l199
					}
					position++
					if buffer[position] != rune('v') {
						goto l199
					}
					position++
					if buffer[position] != rune('a') {
						goto l199
					}
					position++
					if buffer[position] != rune('r') {
						goto l199
					}
					position++
				}
			l201:
				{
					position212, tokenIndex212 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l213
					}
					position++
					goto l212
				l213:
					position, tokenIndex = position212, tokenIndex212
					{
						position214, tokenIndex214 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l199
						}
						position, tokenIndex = position214, tokenIndex214
					}
				}
			l212:
				add(ruleRankNotho, position200)
			}
			return true
		l199:
			position, tokenIndex = position199, tokenIndex199
			return false
		},
		/* 34 RankOtherUncommon <- <(('*' / ('n' 'a' 't' 'i' 'o') / ('n' 'a' 't' '.') / ('n' 'a' 't') / ('f' '.' 's' 'p') / 'α' / ('β' 'β') / 'β' / 'γ' / 'δ' / 'ε' / 'φ' / 'θ' / 'μ' / ('a' '.') / ('b' '.') / ('c' '.') / ('d' '.') / ('e' '.') / ('g' '.') / ('k' '.') / ('m' 'u' 't' '.')) &SpaceCharEOI)> */
		func() bool {
			position215, tokenIndex215 := position, tokenIndex
			{
				position216 := position
				{
					position217, tokenIndex217 := position, tokenIndex
					if buffer[position] != rune('*') {
						goto l218
					}
					position++
					goto l217
				l218:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('n') {
						goto l219
					}
					position++
					if buffer[position] != rune('a') {
						goto l219
					}
					position++
					if buffer[position] != rune('t') {
						goto l219
					}
					position++
					if buffer[position] != rune('i') {
						goto l219
					}
					position++
					if buffer[position] != rune('o') {
						goto l219
					}
					position++
					goto l217
				l219:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('n') {
						goto l220
					}
					position++
					if buffer[position] != rune('a') {
						goto l220
					}
					position++
					if buffer[position] != rune('t') {
						goto l220
					}
					position++
					if buffer[position] != rune('.') {
						goto l220
					}
					position++
					goto l217
				l220:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('n') {
						goto l221
					}
					position++
					if buffer[position] != rune('a') {
						goto l221
					}
					position++
					if buffer[position] != rune('t') {
						goto l221
					}
					position++
					goto l217
				l221:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('f') {
						goto l222
					}
					position++
					if buffer[position] != rune('.') {
						goto l222
					}
					position++
					if buffer[position] != rune('s') {
						goto l222
					}
					position++
					if buffer[position] != rune('p') {
						goto l222
					}
					position++
					goto l217
				l222:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('α') {
						goto l223
					}
					position++
					goto l217
				l223:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('β') {
						goto l224
					}
					position++
					if buffer[position] != rune('β') {
						goto l224
					}
					position++
					goto l217
				l224:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('β') {
						goto l225
					}
					position++
					goto l217
				l225:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('γ') {
						goto l226
					}
					position++
					goto l217
				l226:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('δ') {
						goto l227
					}
					position++
					goto l217
				l227:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('ε') {
						goto l228
					}
					position++
					goto l217
				l228:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('φ') {
						goto l229
					}
					position++
					goto l217
				l229:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('θ') {
						goto l230
					}
					position++
					goto l217
				l230:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('μ') {
						goto l231
					}
					position++
					goto l217
				l231:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('a') {
						goto l232
					}
					position++
					if buffer[position] != rune('.') {
						goto l232
					}
					position++
					goto l217
				l232:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('b') {
						goto l233
					}
					position++
					if buffer[position] != rune('.') {
						goto l233
					}
					position++
					goto l217
				l233:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('c') {
						goto l234
					}
					position++
					if buffer[position] != rune('.') {
						goto l234
					}
					position++
					goto l217
				l234:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('d') {
						goto l235
					}
					position++
					if buffer[position] != rune('.') {
						goto l235
					}
					position++
					goto l217
				l235:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('e') {
						goto l236
					}
					position++
					if buffer[position] != rune('.') {
						goto l236
					}
					position++
					goto l217
				l236:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('g') {
						goto l237
					}
					position++
					if buffer[position] != rune('.') {
						goto l237
					}
					position++
					goto l217
				l237:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('k') {
						goto l238
					}
					position++
					if buffer[position] != rune('.') {
						goto l238
					}
					position++
					goto l217
				l238:
					position, tokenIndex = position217, tokenIndex217
					if buffer[position] != rune('m') {
						goto l215
					}
					position++
					if buffer[position] != rune('u') {
						goto l215
					}
					position++
					if buffer[position] != rune('t') {
						goto l215
					}
					position++
					if buffer[position] != rune('.') {
						goto l215
					}
					position++
				}
			l217:
				{
					position239, tokenIndex239 := position, tokenIndex
					if !_rules[ruleSpaceCharEOI]() {
						goto l215
					}
					position, tokenIndex = position239, tokenIndex239
				}
				add(ruleRankOtherUncommon, position216)
			}
			return true
		l215:
			position, tokenIndex = position215, tokenIndex215
			return false
		},
		/* 35 RankOther <- <((('m' 'o' 'r' 'p' 'h') / ('c' 'o' 'n' 'v' 'a' 'r') / ('p' 's' 'e' 'u' 'd' 'o' 'v' 'a' 'r') / ('s' 'e' 'c' 't') / ('s' 'e' 'r') / ('s' 'u' 'b' 'v' 'a' 'r') / ('s' 'u' 'b' 'f') / ('r' 'a' 'c' 'e') / ('p' 'v') / ('p' 'a' 't' 'h' 'o' 'v' 'a' 'r') / ('a' 'b' '.' (_? ('n' '.'))?) / ('s' 't')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position240, tokenIndex240 := position, tokenIndex
			{
				position241 := position
				{
					position242, tokenIndex242 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l243
					}
					position++
					if buffer[position] != rune('o') {
						goto l243
					}
					position++
					if buffer[position] != rune('r') {
						goto l243
					}
					position++
					if buffer[position] != rune('p') {
						goto l243
					}
					position++
					if buffer[position] != rune('h') {
						goto l243
					}
					position++
					goto l242
				l243:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('c') {
						goto l244
					}
					position++
					if buffer[position] != rune('o') {
						goto l244
					}
					position++
					if buffer[position] != rune('n') {
						goto l244
					}
					position++
					if buffer[position] != rune('v') {
						goto l244
					}
					position++
					if buffer[position] != rune('a') {
						goto l244
					}
					position++
					if buffer[position] != rune('r') {
						goto l244
					}
					position++
					goto l242
				l244:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('p') {
						goto l245
					}
					position++
					if buffer[position] != rune('s') {
						goto l245
					}
					position++
					if buffer[position] != rune('e') {
						goto l245
					}
					position++
					if buffer[position] != rune('u') {
						goto l245
					}
					position++
					if buffer[position] != rune('d') {
						goto l245
					}
					position++
					if buffer[position] != rune('o') {
						goto l245
					}
					position++
					if buffer[position] != rune('v') {
						goto l245
					}
					position++
					if buffer[position] != rune('a') {
						goto l245
					}
					position++
					if buffer[position] != rune('r') {
						goto l245
					}
					position++
					goto l242
				l245:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('s') {
						goto l246
					}
					position++
					if buffer[position] != rune('e') {
						goto l246
					}
					position++
					if buffer[position] != rune('c') {
						goto l246
					}
					position++
					if buffer[position] != rune('t') {
						goto l246
					}
					position++
					goto l242
				l246:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('s') {
						goto l247
					}
					position++
					if buffer[position] != rune('e') {
						goto l247
					}
					position++
					if buffer[position] != rune('r') {
						goto l247
					}
					position++
					goto l242
				l247:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('s') {
						goto l248
					}
					position++
					if buffer[position] != rune('u') {
						goto l248
					}
					position++
					if buffer[position] != rune('b') {
						goto l248
					}
					position++
					if buffer[position] != rune('v') {
						goto l248
					}
					position++
					if buffer[position] != rune('a') {
						goto l248
					}
					position++
					if buffer[position] != rune('r') {
						goto l248
					}
					position++
					goto l242
				l248:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('s') {
						goto l249
					}
					position++
					if buffer[position] != rune('u') {
						goto l249
					}
					position++
					if buffer[position] != rune('b') {
						goto l249
					}
					position++
					if buffer[position] != rune('f') {
						goto l249
					}
					position++
					goto l242
				l249:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('r') {
						goto l250
					}
					position++
					if buffer[position] != rune('a') {
						goto l250
					}
					position++
					if buffer[position] != rune('c') {
						goto l250
					}
					position++
					if buffer[position] != rune('e') {
						goto l250
					}
					position++
					goto l242
				l250:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('p') {
						goto l251
					}
					position++
					if buffer[position] != rune('v') {
						goto l251
					}
					position++
					goto l242
				l251:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('p') {
						goto l252
					}
					position++
					if buffer[position] != rune('a') {
						goto l252
					}
					position++
					if buffer[position] != rune('t') {
						goto l252
					}
					position++
					if buffer[position] != rune('h') {
						goto l252
					}
					position++
					if buffer[position] != rune('o') {
						goto l252
					}
					position++
					if buffer[position] != rune('v') {
						goto l252
					}
					position++
					if buffer[position] != rune('a') {
						goto l252
					}
					position++
					if buffer[position] != rune('r') {
						goto l252
					}
					position++
					goto l242
				l252:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('a') {
						goto l253
					}
					position++
					if buffer[position] != rune('b') {
						goto l253
					}
					position++
					if buffer[position] != rune('.') {
						goto l253
					}
					position++
					{
						position254, tokenIndex254 := position, tokenIndex
						{
							position256, tokenIndex256 := position, tokenIndex
							if !_rules[rule_]() {
								goto l256
							}
							goto l257
						l256:
							position, tokenIndex = position256, tokenIndex256
						}
					l257:
						if buffer[position] != rune('n') {
							goto l254
						}
						position++
						if buffer[position] != rune('.') {
							goto l254
						}
						position++
						goto l255
					l254:
						position, tokenIndex = position254, tokenIndex254
					}
				l255:
					goto l242
				l253:
					position, tokenIndex = position242, tokenIndex242
					if buffer[position] != rune('s') {
						goto l240
					}
					position++
					if buffer[position] != rune('t') {
						goto l240
					}
					position++
				}
			l242:
				{
					position258, tokenIndex258 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l259
					}
					position++
					goto l258
				l259:
					position, tokenIndex = position258, tokenIndex258
					{
						position260, tokenIndex260 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l240
						}
						position, tokenIndex = position260, tokenIndex260
					}
				}
			l258:
				add(ruleRankOther, position241)
			}
			return true
		l240:
			position, tokenIndex = position240, tokenIndex240
			return false
		},
		/* 36 RankVar <- <((('v' 'a' 'r' 'i' 'e' 't' 'y') / ('[' 'v' 'a' 'r' '.' ']') / ('v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position261, tokenIndex261 := position, tokenIndex
			{
				position262 := position
				{
					position263, tokenIndex263 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l264
					}
					position++
					if buffer[position] != rune('a') {
						goto l264
					}
					position++
					if buffer[position] != rune('r') {
						goto l264
					}
					position++
					if buffer[position] != rune('i') {
						goto l264
					}
					position++
					if buffer[position] != rune('e') {
						goto l264
					}
					position++
					if buffer[position] != rune('t') {
						goto l264
					}
					position++
					if buffer[position] != rune('y') {
						goto l264
					}
					position++
					goto l263
				l264:
					position, tokenIndex = position263, tokenIndex263
					if buffer[position] != rune('[') {
						goto l265
					}
					position++
					if buffer[position] != rune('v') {
						goto l265
					}
					position++
					if buffer[position] != rune('a') {
						goto l265
					}
					position++
					if buffer[position] != rune('r') {
						goto l265
					}
					position++
					if buffer[position] != rune('.') {
						goto l265
					}
					position++
					if buffer[position] != rune(']') {
						goto l265
					}
					position++
					goto l263
				l265:
					position, tokenIndex = position263, tokenIndex263
					if buffer[position] != rune('v') {
						goto l261
					}
					position++
					if buffer[position] != rune('a') {
						goto l261
					}
					position++
					if buffer[position] != rune('r') {
						goto l261
					}
					position++
				}
			l263:
				{
					position266, tokenIndex266 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l267
					}
					position++
					goto l266
				l267:
					position, tokenIndex = position266, tokenIndex266
					{
						position268, tokenIndex268 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l261
						}
						position, tokenIndex = position268, tokenIndex268
					}
				}
			l266:
				add(ruleRankVar, position262)
			}
			return true
		l261:
			position, tokenIndex = position261, tokenIndex261
			return false
		},
		/* 37 RankForma <- <((('f' 'o' 'r' 'm' 'a') / ('f' 'm' 'a') / ('f' 'm') / ('f' 'o' 'r' 'm') / ('f' 'o') / 'f') ('.' / &SpaceCharEOI))> */
		func() bool {
			position269, tokenIndex269 := position, tokenIndex
			{
				position270 := position
				{
					position271, tokenIndex271 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l272
					}
					position++
					if buffer[position] != rune('o') {
						goto l272
					}
					position++
					if buffer[position] != rune('r') {
						goto l272
					}
					position++
					if buffer[position] != rune('m') {
						goto l272
					}
					position++
					if buffer[position] != rune('a') {
						goto l272
					}
					position++
					goto l271
				l272:
					position, tokenIndex = position271, tokenIndex271
					if buffer[position] != rune('f') {
						goto l273
					}
					position++
					if buffer[position] != rune('m') {
						goto l273
					}
					position++
					if buffer[position] != rune('a') {
						goto l273
					}
					position++
					goto l271
				l273:
					position, tokenIndex = position271, tokenIndex271
					if buffer[position] != rune('f') {
						goto l274
					}
					position++
					if buffer[position] != rune('m') {
						goto l274
					}
					position++
					goto l271
				l274:
					position, tokenIndex = position271, tokenIndex271
					if buffer[position] != rune('f') {
						goto l275
					}
					position++
					if buffer[position] != rune('o') {
						goto l275
					}
					position++
					if buffer[position] != rune('r') {
						goto l275
					}
					position++
					if buffer[position] != rune('m') {
						goto l275
					}
					position++
					goto l271
				l275:
					position, tokenIndex = position271, tokenIndex271
					if buffer[position] != rune('f') {
						goto l276
					}
					position++
					if buffer[position] != rune('o') {
						goto l276
					}
					position++
					goto l271
				l276:
					position, tokenIndex = position271, tokenIndex271
					if buffer[position] != rune('f') {
						goto l269
					}
					position++
				}
			l271:
				{
					position277, tokenIndex277 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l278
					}
					position++
					goto l277
				l278:
					position, tokenIndex = position277, tokenIndex277
					{
						position279, tokenIndex279 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l269
						}
						position, tokenIndex = position279, tokenIndex279
					}
				}
			l277:
				add(ruleRankForma, position270)
			}
			return true
		l269:
			position, tokenIndex = position269, tokenIndex269
			return false
		},
		/* 38 RankSsp <- <((('s' 's' 'p') / ('s' 'u' 'b' 's' 'p' 'e' 'c') / ('s' 'u' 'b' 's' 'p')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position280, tokenIndex280 := position, tokenIndex
			{
				position281 := position
				{
					position282, tokenIndex282 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l283
					}
					position++
					if buffer[position] != rune('s') {
						goto l283
					}
					position++
					if buffer[position] != rune('p') {
						goto l283
					}
					position++
					goto l282
				l283:
					position, tokenIndex = position282, tokenIndex282
					if buffer[position] != rune('s') {
						goto l284
					}
					position++
					if buffer[position] != rune('u') {
						goto l284
					}
					position++
					if buffer[position] != rune('b') {
						goto l284
					}
					position++
					if buffer[position] != rune('s') {
						goto l284
					}
					position++
					if buffer[position] != rune('p') {
						goto l284
					}
					position++
					if buffer[position] != rune('e') {
						goto l284
					}
					position++
					if buffer[position] != rune('c') {
						goto l284
					}
					position++
					goto l282
				l284:
					position, tokenIndex = position282, tokenIndex282
					if buffer[position] != rune('s') {
						goto l280
					}
					position++
					if buffer[position] != rune('u') {
						goto l280
					}
					position++
					if buffer[position] != rune('b') {
						goto l280
					}
					position++
					if buffer[position] != rune('s') {
						goto l280
					}
					position++
					if buffer[position] != rune('p') {
						goto l280
					}
					position++
				}
			l282:
				{
					position285, tokenIndex285 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l286
					}
					position++
					goto l285
				l286:
					position, tokenIndex = position285, tokenIndex285
					{
						position287, tokenIndex287 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l280
						}
						position, tokenIndex = position287, tokenIndex287
					}
				}
			l285:
				add(ruleRankSsp, position281)
			}
			return true
		l280:
			position, tokenIndex = position280, tokenIndex280
			return false
		},
		/* 39 RankAgamo <- <((('a' 'g' 'a' 'm' 'o' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 's' 's' 'p') / ('a' 'g' 'a' 'm' 'o' 'v' 'a' 'r')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position288, tokenIndex288 := position, tokenIndex
			{
				position289 := position
				{
					position290, tokenIndex290 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l291
					}
					position++
					if buffer[position] != rune('g') {
						goto l291
					}
					position++
					if buffer[position] != rune('a') {
						goto l291
					}
					position++
					if buffer[position] != rune('m') {
						goto l291
					}
					position++
					if buffer[position] != rune('o') {
						goto l291
					}
					position++
					if buffer[position] != rune('s') {
						goto l291
					}
					position++
					if buffer[position] != rune('p') {
						goto l291
					}
					position++
					goto l290
				l291:
					position, tokenIndex = position290, tokenIndex290
					if buffer[position] != rune('a') {
						goto l292
					}
					position++
					if buffer[position] != rune('g') {
						goto l292
					}
					position++
					if buffer[position] != rune('a') {
						goto l292
					}
					position++
					if buffer[position] != rune('m') {
						goto l292
					}
					position++
					if buffer[position] != rune('o') {
						goto l292
					}
					position++
					if buffer[position] != rune('s') {
						goto l292
					}
					position++
					if buffer[position] != rune('s') {
						goto l292
					}
					position++
					if buffer[position] != rune('p') {
						goto l292
					}
					position++
					goto l290
				l292:
					position, tokenIndex = position290, tokenIndex290
					if buffer[position] != rune('a') {
						goto l288
					}
					position++
					if buffer[position] != rune('g') {
						goto l288
					}
					position++
					if buffer[position] != rune('a') {
						goto l288
					}
					position++
					if buffer[position] != rune('m') {
						goto l288
					}
					position++
					if buffer[position] != rune('o') {
						goto l288
					}
					position++
					if buffer[position] != rune('v') {
						goto l288
					}
					position++
					if buffer[position] != rune('a') {
						goto l288
					}
					position++
					if buffer[position] != rune('r') {
						goto l288
					}
					position++
				}
			l290:
				{
					position293, tokenIndex293 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l294
					}
					position++
					goto l293
				l294:
					position, tokenIndex = position293, tokenIndex293
					{
						position295, tokenIndex295 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l288
						}
						position, tokenIndex = position295, tokenIndex295
					}
				}
			l293:
				add(ruleRankAgamo, position289)
			}
			return true
		l288:
			position, tokenIndex = position288, tokenIndex288
			return false
		},
		/* 40 SubgenusOrSuperspecies <- <('(' _? NameLowerChar+ _? ')')> */
		func() bool {
			position296, tokenIndex296 := position, tokenIndex
			{
				position297 := position
				if buffer[position] != rune('(') {
					goto l296
				}
				position++
				{
					position298, tokenIndex298 := position, tokenIndex
					if !_rules[rule_]() {
						goto l298
					}
					goto l299
				l298:
					position, tokenIndex = position298, tokenIndex298
				}
			l299:
				if !_rules[ruleNameLowerChar]() {
					goto l296
				}
			l300:
				{
					position301, tokenIndex301 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l301
					}
					goto l300
				l301:
					position, tokenIndex = position301, tokenIndex301
				}
				{
					position302, tokenIndex302 := position, tokenIndex
					if !_rules[rule_]() {
						goto l302
					}
					goto l303
				l302:
					position, tokenIndex = position302, tokenIndex302
				}
			l303:
				if buffer[position] != rune(')') {
					goto l296
				}
				position++
				add(ruleSubgenusOrSuperspecies, position297)
			}
			return true
		l296:
			position, tokenIndex = position296, tokenIndex296
			return false
		},
		/* 41 Subgenus <- <(Subgenus2 / Subgenus1)> */
		func() bool {
			position304, tokenIndex304 := position, tokenIndex
			{
				position305 := position
				{
					position306, tokenIndex306 := position, tokenIndex
					if !_rules[ruleSubgenus2]() {
						goto l307
					}
					goto l306
				l307:
					position, tokenIndex = position306, tokenIndex306
					if !_rules[ruleSubgenus1]() {
						goto l304
					}
				}
			l306:
				add(ruleSubgenus, position305)
			}
			return true
		l304:
			position, tokenIndex = position304, tokenIndex304
			return false
		},
		/* 42 Subgenus2 <- <('(' _? AbbrSubgenus _? ')' !(_? NameUpperChar))> */
		func() bool {
			position308, tokenIndex308 := position, tokenIndex
			{
				position309 := position
				if buffer[position] != rune('(') {
					goto l308
				}
				position++
				{
					position310, tokenIndex310 := position, tokenIndex
					if !_rules[rule_]() {
						goto l310
					}
					goto l311
				l310:
					position, tokenIndex = position310, tokenIndex310
				}
			l311:
				if !_rules[ruleAbbrSubgenus]() {
					goto l308
				}
				{
					position312, tokenIndex312 := position, tokenIndex
					if !_rules[rule_]() {
						goto l312
					}
					goto l313
				l312:
					position, tokenIndex = position312, tokenIndex312
				}
			l313:
				if buffer[position] != rune(')') {
					goto l308
				}
				position++
				{
					position314, tokenIndex314 := position, tokenIndex
					{
						position315, tokenIndex315 := position, tokenIndex
						if !_rules[rule_]() {
							goto l315
						}
						goto l316
					l315:
						position, tokenIndex = position315, tokenIndex315
					}
				l316:
					if !_rules[ruleNameUpperChar]() {
						goto l314
					}
					goto l308
				l314:
					position, tokenIndex = position314, tokenIndex314
				}
				add(ruleSubgenus2, position309)
			}
			return true
		l308:
			position, tokenIndex = position308, tokenIndex308
			return false
		},
		/* 43 Subgenus1 <- <('(' _? UninomialWord _? ')')> */
		func() bool {
			position317, tokenIndex317 := position, tokenIndex
			{
				position318 := position
				if buffer[position] != rune('(') {
					goto l317
				}
				position++
				{
					position319, tokenIndex319 := position, tokenIndex
					if !_rules[rule_]() {
						goto l319
					}
					goto l320
				l319:
					position, tokenIndex = position319, tokenIndex319
				}
			l320:
				if !_rules[ruleUninomialWord]() {
					goto l317
				}
				{
					position321, tokenIndex321 := position, tokenIndex
					if !_rules[rule_]() {
						goto l321
					}
					goto l322
				l321:
					position, tokenIndex = position321, tokenIndex321
				}
			l322:
				if buffer[position] != rune(')') {
					goto l317
				}
				position++
				add(ruleSubgenus1, position318)
			}
			return true
		l317:
			position, tokenIndex = position317, tokenIndex317
			return false
		},
		/* 44 UninomialCombo <- <(UninomialCombo1 / UninomialCombo2)> */
		func() bool {
			position323, tokenIndex323 := position, tokenIndex
			{
				position324 := position
				{
					position325, tokenIndex325 := position, tokenIndex
					if !_rules[ruleUninomialCombo1]() {
						goto l326
					}
					goto l325
				l326:
					position, tokenIndex = position325, tokenIndex325
					if !_rules[ruleUninomialCombo2]() {
						goto l323
					}
				}
			l325:
				add(ruleUninomialCombo, position324)
			}
			return true
		l323:
			position, tokenIndex = position323, tokenIndex323
			return false
		},
		/* 45 UninomialCombo1 <- <(UninomialWord _? Subgenus (_? Authorship)?)> */
		func() bool {
			position327, tokenIndex327 := position, tokenIndex
			{
				position328 := position
				if !_rules[ruleUninomialWord]() {
					goto l327
				}
				{
					position329, tokenIndex329 := position, tokenIndex
					if !_rules[rule_]() {
						goto l329
					}
					goto l330
				l329:
					position, tokenIndex = position329, tokenIndex329
				}
			l330:
				if !_rules[ruleSubgenus]() {
					goto l327
				}
				{
					position331, tokenIndex331 := position, tokenIndex
					{
						position333, tokenIndex333 := position, tokenIndex
						if !_rules[rule_]() {
							goto l333
						}
						goto l334
					l333:
						position, tokenIndex = position333, tokenIndex333
					}
				l334:
					if !_rules[ruleAuthorship]() {
						goto l331
					}
					goto l332
				l331:
					position, tokenIndex = position331, tokenIndex331
				}
			l332:
				add(ruleUninomialCombo1, position328)
			}
			return true
		l327:
			position, tokenIndex = position327, tokenIndex327
			return false
		},
		/* 46 UninomialCombo2 <- <(Uninomial _ RankUninomial _ Uninomial)> */
		func() bool {
			position335, tokenIndex335 := position, tokenIndex
			{
				position336 := position
				if !_rules[ruleUninomial]() {
					goto l335
				}
				if !_rules[rule_]() {
					goto l335
				}
				if !_rules[ruleRankUninomial]() {
					goto l335
				}
				if !_rules[rule_]() {
					goto l335
				}
				if !_rules[ruleUninomial]() {
					goto l335
				}
				add(ruleUninomialCombo2, position336)
			}
			return true
		l335:
			position, tokenIndex = position335, tokenIndex335
			return false
		},
		/* 47 RankUninomial <- <(RankUninomialPlain / RankUninomialNotho)> */
		func() bool {
			position337, tokenIndex337 := position, tokenIndex
			{
				position338 := position
				{
					position339, tokenIndex339 := position, tokenIndex
					if !_rules[ruleRankUninomialPlain]() {
						goto l340
					}
					goto l339
				l340:
					position, tokenIndex = position339, tokenIndex339
					if !_rules[ruleRankUninomialNotho]() {
						goto l337
					}
				}
			l339:
				add(ruleRankUninomial, position338)
			}
			return true
		l337:
			position, tokenIndex = position337, tokenIndex337
			return false
		},
		/* 48 RankUninomialPlain <- <((('s' 'e' 'c' 't') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('t' 'r' 'i' 'b') / ('s' 'u' 'b' 't' 'r' 'i' 'b') / ('s' 'u' 'b' 's' 'e' 'r') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('f' 'a' 'm') / ('s' 'u' 'b' 'f' 'a' 'm') / ('d' 'i' 'v') / ('s' 'u' 'p' 'e' 'r' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position341, tokenIndex341 := position, tokenIndex
			{
				position342 := position
				{
					position343, tokenIndex343 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l344
					}
					position++
					if buffer[position] != rune('e') {
						goto l344
					}
					position++
					if buffer[position] != rune('c') {
						goto l344
					}
					position++
					if buffer[position] != rune('t') {
						goto l344
					}
					position++
					goto l343
				l344:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('s') {
						goto l345
					}
					position++
					if buffer[position] != rune('u') {
						goto l345
					}
					position++
					if buffer[position] != rune('b') {
						goto l345
					}
					position++
					if buffer[position] != rune('s') {
						goto l345
					}
					position++
					if buffer[position] != rune('e') {
						goto l345
					}
					position++
					if buffer[position] != rune('c') {
						goto l345
					}
					position++
					if buffer[position] != rune('t') {
						goto l345
					}
					position++
					goto l343
				l345:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('t') {
						goto l346
					}
					position++
					if buffer[position] != rune('r') {
						goto l346
					}
					position++
					if buffer[position] != rune('i') {
						goto l346
					}
					position++
					if buffer[position] != rune('b') {
						goto l346
					}
					position++
					goto l343
				l346:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('s') {
						goto l347
					}
					position++
					if buffer[position] != rune('u') {
						goto l347
					}
					position++
					if buffer[position] != rune('b') {
						goto l347
					}
					position++
					if buffer[position] != rune('t') {
						goto l347
					}
					position++
					if buffer[position] != rune('r') {
						goto l347
					}
					position++
					if buffer[position] != rune('i') {
						goto l347
					}
					position++
					if buffer[position] != rune('b') {
						goto l347
					}
					position++
					goto l343
				l347:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('s') {
						goto l348
					}
					position++
					if buffer[position] != rune('u') {
						goto l348
					}
					position++
					if buffer[position] != rune('b') {
						goto l348
					}
					position++
					if buffer[position] != rune('s') {
						goto l348
					}
					position++
					if buffer[position] != rune('e') {
						goto l348
					}
					position++
					if buffer[position] != rune('r') {
						goto l348
					}
					position++
					goto l343
				l348:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('s') {
						goto l349
					}
					position++
					if buffer[position] != rune('e') {
						goto l349
					}
					position++
					if buffer[position] != rune('r') {
						goto l349
					}
					position++
					goto l343
				l349:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('s') {
						goto l350
					}
					position++
					if buffer[position] != rune('u') {
						goto l350
					}
					position++
					if buffer[position] != rune('b') {
						goto l350
					}
					position++
					if buffer[position] != rune('g') {
						goto l350
					}
					position++
					if buffer[position] != rune('e') {
						goto l350
					}
					position++
					if buffer[position] != rune('n') {
						goto l350
					}
					position++
					goto l343
				l350:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('s') {
						goto l351
					}
					position++
					if buffer[position] != rune('u') {
						goto l351
					}
					position++
					if buffer[position] != rune('b') {
						goto l351
					}
					position++
					if buffer[position] != rune('g') {
						goto l351
					}
					position++
					goto l343
				l351:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('f') {
						goto l352
					}
					position++
					if buffer[position] != rune('a') {
						goto l352
					}
					position++
					if buffer[position] != rune('m') {
						goto l352
					}
					position++
					goto l343
				l352:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('s') {
						goto l353
					}
					position++
					if buffer[position] != rune('u') {
						goto l353
					}
					position++
					if buffer[position] != rune('b') {
						goto l353
					}
					position++
					if buffer[position] != rune('f') {
						goto l353
					}
					position++
					if buffer[position] != rune('a') {
						goto l353
					}
					position++
					if buffer[position] != rune('m') {
						goto l353
					}
					position++
					goto l343
				l353:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('d') {
						goto l354
					}
					position++
					if buffer[position] != rune('i') {
						goto l354
					}
					position++
					if buffer[position] != rune('v') {
						goto l354
					}
					position++
					goto l343
				l354:
					position, tokenIndex = position343, tokenIndex343
					if buffer[position] != rune('s') {
						goto l341
					}
					position++
					if buffer[position] != rune('u') {
						goto l341
					}
					position++
					if buffer[position] != rune('p') {
						goto l341
					}
					position++
					if buffer[position] != rune('e') {
						goto l341
					}
					position++
					if buffer[position] != rune('r') {
						goto l341
					}
					position++
					if buffer[position] != rune('t') {
						goto l341
					}
					position++
					if buffer[position] != rune('r') {
						goto l341
					}
					position++
					if buffer[position] != rune('i') {
						goto l341
					}
					position++
					if buffer[position] != rune('b') {
						goto l341
					}
					position++
				}
			l343:
				{
					position355, tokenIndex355 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l356
					}
					position++
					goto l355
				l356:
					position, tokenIndex = position355, tokenIndex355
					{
						position357, tokenIndex357 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l341
						}
						position, tokenIndex = position357, tokenIndex357
					}
				}
			l355:
				add(ruleRankUninomialPlain, position342)
			}
			return true
		l341:
			position, tokenIndex = position341, tokenIndex341
			return false
		},
		/* 49 RankUninomialNotho <- <('n' 'o' 't' 'h' 'o' _? (('s' 'e' 'c' 't') / ('g' 'e' 'n') / ('s' 'e' 'r') / ('s' 'u' 'b' 'g' 'e' 'e' 'n') / ('s' 'u' 'b' 'g' 'e' 'n') / ('s' 'u' 'b' 'g') / ('s' 'u' 'b' 's' 'e' 'c' 't') / ('s' 'u' 'b' 't' 'r' 'i' 'b')) ('.' / &SpaceCharEOI))> */
		func() bool {
			position358, tokenIndex358 := position, tokenIndex
			{
				position359 := position
				if buffer[position] != rune('n') {
					goto l358
				}
				position++
				if buffer[position] != rune('o') {
					goto l358
				}
				position++
				if buffer[position] != rune('t') {
					goto l358
				}
				position++
				if buffer[position] != rune('h') {
					goto l358
				}
				position++
				if buffer[position] != rune('o') {
					goto l358
				}
				position++
				{
					position360, tokenIndex360 := position, tokenIndex
					if !_rules[rule_]() {
						goto l360
					}
					goto l361
				l360:
					position, tokenIndex = position360, tokenIndex360
				}
			l361:
				{
					position362, tokenIndex362 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l363
					}
					position++
					if buffer[position] != rune('e') {
						goto l363
					}
					position++
					if buffer[position] != rune('c') {
						goto l363
					}
					position++
					if buffer[position] != rune('t') {
						goto l363
					}
					position++
					goto l362
				l363:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('g') {
						goto l364
					}
					position++
					if buffer[position] != rune('e') {
						goto l364
					}
					position++
					if buffer[position] != rune('n') {
						goto l364
					}
					position++
					goto l362
				l364:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('s') {
						goto l365
					}
					position++
					if buffer[position] != rune('e') {
						goto l365
					}
					position++
					if buffer[position] != rune('r') {
						goto l365
					}
					position++
					goto l362
				l365:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('s') {
						goto l366
					}
					position++
					if buffer[position] != rune('u') {
						goto l366
					}
					position++
					if buffer[position] != rune('b') {
						goto l366
					}
					position++
					if buffer[position] != rune('g') {
						goto l366
					}
					position++
					if buffer[position] != rune('e') {
						goto l366
					}
					position++
					if buffer[position] != rune('e') {
						goto l366
					}
					position++
					if buffer[position] != rune('n') {
						goto l366
					}
					position++
					goto l362
				l366:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('s') {
						goto l367
					}
					position++
					if buffer[position] != rune('u') {
						goto l367
					}
					position++
					if buffer[position] != rune('b') {
						goto l367
					}
					position++
					if buffer[position] != rune('g') {
						goto l367
					}
					position++
					if buffer[position] != rune('e') {
						goto l367
					}
					position++
					if buffer[position] != rune('n') {
						goto l367
					}
					position++
					goto l362
				l367:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('s') {
						goto l368
					}
					position++
					if buffer[position] != rune('u') {
						goto l368
					}
					position++
					if buffer[position] != rune('b') {
						goto l368
					}
					position++
					if buffer[position] != rune('g') {
						goto l368
					}
					position++
					goto l362
				l368:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('s') {
						goto l369
					}
					position++
					if buffer[position] != rune('u') {
						goto l369
					}
					position++
					if buffer[position] != rune('b') {
						goto l369
					}
					position++
					if buffer[position] != rune('s') {
						goto l369
					}
					position++
					if buffer[position] != rune('e') {
						goto l369
					}
					position++
					if buffer[position] != rune('c') {
						goto l369
					}
					position++
					if buffer[position] != rune('t') {
						goto l369
					}
					position++
					goto l362
				l369:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('s') {
						goto l358
					}
					position++
					if buffer[position] != rune('u') {
						goto l358
					}
					position++
					if buffer[position] != rune('b') {
						goto l358
					}
					position++
					if buffer[position] != rune('t') {
						goto l358
					}
					position++
					if buffer[position] != rune('r') {
						goto l358
					}
					position++
					if buffer[position] != rune('i') {
						goto l358
					}
					position++
					if buffer[position] != rune('b') {
						goto l358
					}
					position++
				}
			l362:
				{
					position370, tokenIndex370 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l371
					}
					position++
					goto l370
				l371:
					position, tokenIndex = position370, tokenIndex370
					{
						position372, tokenIndex372 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l358
						}
						position, tokenIndex = position372, tokenIndex372
					}
				}
			l370:
				add(ruleRankUninomialNotho, position359)
			}
			return true
		l358:
			position, tokenIndex = position358, tokenIndex358
			return false
		},
		/* 50 Uninomial <- <(UninomialWord (_ Authorship !(_ LowerCharExtended LowerCharExtended LowerCharExtended))?)> */
		func() bool {
			position373, tokenIndex373 := position, tokenIndex
			{
				position374 := position
				if !_rules[ruleUninomialWord]() {
					goto l373
				}
				{
					position375, tokenIndex375 := position, tokenIndex
					if !_rules[rule_]() {
						goto l375
					}
					if !_rules[ruleAuthorship]() {
						goto l375
					}
					{
						position377, tokenIndex377 := position, tokenIndex
						if !_rules[rule_]() {
							goto l377
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l377
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l377
						}
						if !_rules[ruleLowerCharExtended]() {
							goto l377
						}
						goto l375
					l377:
						position, tokenIndex = position377, tokenIndex377
					}
					goto l376
				l375:
					position, tokenIndex = position375, tokenIndex375
				}
			l376:
				add(ruleUninomial, position374)
			}
			return true
		l373:
			position, tokenIndex = position373, tokenIndex373
			return false
		},
		/* 51 UninomialWord <- <(CapWord / TwoLetterGenus)> */
		func() bool {
			position378, tokenIndex378 := position, tokenIndex
			{
				position379 := position
				{
					position380, tokenIndex380 := position, tokenIndex
					if !_rules[ruleCapWord]() {
						goto l381
					}
					goto l380
				l381:
					position, tokenIndex = position380, tokenIndex380
					if !_rules[ruleTwoLetterGenus]() {
						goto l378
					}
				}
			l380:
				add(ruleUninomialWord, position379)
			}
			return true
		l378:
			position, tokenIndex = position378, tokenIndex378
			return false
		},
		/* 52 AbbrSubgenus <- <(UpperChar LowerChar* '.')> */
		func() bool {
			position382, tokenIndex382 := position, tokenIndex
			{
				position383 := position
				if !_rules[ruleUpperChar]() {
					goto l382
				}
			l384:
				{
					position385, tokenIndex385 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l385
					}
					goto l384
				l385:
					position, tokenIndex = position385, tokenIndex385
				}
				if buffer[position] != rune('.') {
					goto l382
				}
				position++
				add(ruleAbbrSubgenus, position383)
			}
			return true
		l382:
			position, tokenIndex = position382, tokenIndex382
			return false
		},
		/* 53 AbbrGenus <- <(UpperChar LowerChar? '.')> */
		func() bool {
			position386, tokenIndex386 := position, tokenIndex
			{
				position387 := position
				if !_rules[ruleUpperChar]() {
					goto l386
				}
				{
					position388, tokenIndex388 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l388
					}
					goto l389
				l388:
					position, tokenIndex = position388, tokenIndex388
				}
			l389:
				if buffer[position] != rune('.') {
					goto l386
				}
				position++
				add(ruleAbbrGenus, position387)
			}
			return true
		l386:
			position, tokenIndex = position386, tokenIndex386
			return false
		},
		/* 54 CapWord <- <(CapWordWithDash / CapWord1)> */
		func() bool {
			position390, tokenIndex390 := position, tokenIndex
			{
				position391 := position
				{
					position392, tokenIndex392 := position, tokenIndex
					if !_rules[ruleCapWordWithDash]() {
						goto l393
					}
					goto l392
				l393:
					position, tokenIndex = position392, tokenIndex392
					if !_rules[ruleCapWord1]() {
						goto l390
					}
				}
			l392:
				add(ruleCapWord, position391)
			}
			return true
		l390:
			position, tokenIndex = position390, tokenIndex390
			return false
		},
		/* 55 CapWord1 <- <(NameUpperChar NameLowerChar NameLowerChar+ '?'?)> */
		func() bool {
			position394, tokenIndex394 := position, tokenIndex
			{
				position395 := position
				if !_rules[ruleNameUpperChar]() {
					goto l394
				}
				if !_rules[ruleNameLowerChar]() {
					goto l394
				}
				if !_rules[ruleNameLowerChar]() {
					goto l394
				}
			l396:
				{
					position397, tokenIndex397 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l397
					}
					goto l396
				l397:
					position, tokenIndex = position397, tokenIndex397
				}
				{
					position398, tokenIndex398 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l398
					}
					position++
					goto l399
				l398:
					position, tokenIndex = position398, tokenIndex398
				}
			l399:
				add(ruleCapWord1, position395)
			}
			return true
		l394:
			position, tokenIndex = position394, tokenIndex394
			return false
		},
		/* 56 CapWordWithDash <- <((CapWord1 / TwoLetterGenusDashedSegment) Dash WordAfterDash (Dash WordAfterDash)?)> */
		func() bool {
			position400, tokenIndex400 := position, tokenIndex
			{
				position401 := position
				{
					position402, tokenIndex402 := position, tokenIndex
					if !_rules[ruleCapWord1]() {
						goto l403
					}
					goto l402
				l403:
					position, tokenIndex = position402, tokenIndex402
					if !_rules[ruleTwoLetterGenusDashedSegment]() {
						goto l400
					}
				}
			l402:
				if !_rules[ruleDash]() {
					goto l400
				}
				if !_rules[ruleWordAfterDash]() {
					goto l400
				}
				{
					position404, tokenIndex404 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l404
					}
					if !_rules[ruleWordAfterDash]() {
						goto l404
					}
					goto l405
				l404:
					position, tokenIndex = position404, tokenIndex404
				}
			l405:
				add(ruleCapWordWithDash, position401)
			}
			return true
		l400:
			position, tokenIndex = position400, tokenIndex400
			return false
		},
		/* 57 TwoLetterGenusDashedSegment <- <(('D' 'e') / ('E' 'u') / ('L' 'e') / ('N' 'e'))> */
		func() bool {
			position406, tokenIndex406 := position, tokenIndex
			{
				position407 := position
				{
					position408, tokenIndex408 := position, tokenIndex
					if buffer[position] != rune('D') {
						goto l409
					}
					position++
					if buffer[position] != rune('e') {
						goto l409
					}
					position++
					goto l408
				l409:
					position, tokenIndex = position408, tokenIndex408
					if buffer[position] != rune('E') {
						goto l410
					}
					position++
					if buffer[position] != rune('u') {
						goto l410
					}
					position++
					goto l408
				l410:
					position, tokenIndex = position408, tokenIndex408
					if buffer[position] != rune('L') {
						goto l411
					}
					position++
					if buffer[position] != rune('e') {
						goto l411
					}
					position++
					goto l408
				l411:
					position, tokenIndex = position408, tokenIndex408
					if buffer[position] != rune('N') {
						goto l406
					}
					position++
					if buffer[position] != rune('e') {
						goto l406
					}
					position++
				}
			l408:
				add(ruleTwoLetterGenusDashedSegment, position407)
			}
			return true
		l406:
			position, tokenIndex = position406, tokenIndex406
			return false
		},
		/* 58 WordAfterDash <- <(UpperAfterDash / LowerAfterDash)> */
		func() bool {
			position412, tokenIndex412 := position, tokenIndex
			{
				position413 := position
				{
					position414, tokenIndex414 := position, tokenIndex
					if !_rules[ruleUpperAfterDash]() {
						goto l415
					}
					goto l414
				l415:
					position, tokenIndex = position414, tokenIndex414
					if !_rules[ruleLowerAfterDash]() {
						goto l412
					}
				}
			l414:
				add(ruleWordAfterDash, position413)
			}
			return true
		l412:
			position, tokenIndex = position412, tokenIndex412
			return false
		},
		/* 59 UpperAfterDash <- <CapWord1> */
		func() bool {
			position416, tokenIndex416 := position, tokenIndex
			{
				position417 := position
				if !_rules[ruleCapWord1]() {
					goto l416
				}
				add(ruleUpperAfterDash, position417)
			}
			return true
		l416:
			position, tokenIndex = position416, tokenIndex416
			return false
		},
		/* 60 LowerAfterDash <- <Word1> */
		func() bool {
			position418, tokenIndex418 := position, tokenIndex
			{
				position419 := position
				if !_rules[ruleWord1]() {
					goto l418
				}
				add(ruleLowerAfterDash, position419)
			}
			return true
		l418:
			position, tokenIndex = position418, tokenIndex418
			return false
		},
		/* 61 TwoLetterGenus <- <(('C' 'a') / ('D' 'o') / ('E' 'a') / ('G' 'e') / ('I' 'a') / ('I' 'o') / ('I' 'x') / ('L' 'o') / ('O' 'a') / ('O' 'o') / ('N' 'u') / ('R' 'a') / ('T' 'y') / ('U' 'a') / ('A' 'a') / ('J' 'a') / ('Z' 'u') / ('L' 'a') / ('Q' 'u') / ('A' 's') / ('B' 'a'))> */
		func() bool {
			position420, tokenIndex420 := position, tokenIndex
			{
				position421 := position
				{
					position422, tokenIndex422 := position, tokenIndex
					if buffer[position] != rune('C') {
						goto l423
					}
					position++
					if buffer[position] != rune('a') {
						goto l423
					}
					position++
					goto l422
				l423:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('D') {
						goto l424
					}
					position++
					if buffer[position] != rune('o') {
						goto l424
					}
					position++
					goto l422
				l424:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('E') {
						goto l425
					}
					position++
					if buffer[position] != rune('a') {
						goto l425
					}
					position++
					goto l422
				l425:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('G') {
						goto l426
					}
					position++
					if buffer[position] != rune('e') {
						goto l426
					}
					position++
					goto l422
				l426:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('I') {
						goto l427
					}
					position++
					if buffer[position] != rune('a') {
						goto l427
					}
					position++
					goto l422
				l427:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('I') {
						goto l428
					}
					position++
					if buffer[position] != rune('o') {
						goto l428
					}
					position++
					goto l422
				l428:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('I') {
						goto l429
					}
					position++
					if buffer[position] != rune('x') {
						goto l429
					}
					position++
					goto l422
				l429:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('L') {
						goto l430
					}
					position++
					if buffer[position] != rune('o') {
						goto l430
					}
					position++
					goto l422
				l430:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('O') {
						goto l431
					}
					position++
					if buffer[position] != rune('a') {
						goto l431
					}
					position++
					goto l422
				l431:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('O') {
						goto l432
					}
					position++
					if buffer[position] != rune('o') {
						goto l432
					}
					position++
					goto l422
				l432:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('N') {
						goto l433
					}
					position++
					if buffer[position] != rune('u') {
						goto l433
					}
					position++
					goto l422
				l433:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('R') {
						goto l434
					}
					position++
					if buffer[position] != rune('a') {
						goto l434
					}
					position++
					goto l422
				l434:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('T') {
						goto l435
					}
					position++
					if buffer[position] != rune('y') {
						goto l435
					}
					position++
					goto l422
				l435:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('U') {
						goto l436
					}
					position++
					if buffer[position] != rune('a') {
						goto l436
					}
					position++
					goto l422
				l436:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('A') {
						goto l437
					}
					position++
					if buffer[position] != rune('a') {
						goto l437
					}
					position++
					goto l422
				l437:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('J') {
						goto l438
					}
					position++
					if buffer[position] != rune('a') {
						goto l438
					}
					position++
					goto l422
				l438:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('Z') {
						goto l439
					}
					position++
					if buffer[position] != rune('u') {
						goto l439
					}
					position++
					goto l422
				l439:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('L') {
						goto l440
					}
					position++
					if buffer[position] != rune('a') {
						goto l440
					}
					position++
					goto l422
				l440:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('Q') {
						goto l441
					}
					position++
					if buffer[position] != rune('u') {
						goto l441
					}
					position++
					goto l422
				l441:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('A') {
						goto l442
					}
					position++
					if buffer[position] != rune('s') {
						goto l442
					}
					position++
					goto l422
				l442:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('B') {
						goto l420
					}
					position++
					if buffer[position] != rune('a') {
						goto l420
					}
					position++
				}
			l422:
				add(ruleTwoLetterGenus, position421)
			}
			return true
		l420:
			position, tokenIndex = position420, tokenIndex420
			return false
		},
		/* 62 Word <- <(!((('e' 'x') / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd') / ('p' 'r' 'o') / ('c' 'v') / ('c' 'u' 'l' 't' 'i' 'v' 'a' 'r') / AuthorPrefix / RankUninomial / Approximation / Word4) SpaceCharEOI) (WordApostr / WordStartsWithDigit / MultiDashedWord / Word2 / Word1) &(SpaceCharEOI / '('))> */
		func() bool {
			position443, tokenIndex443 := position, tokenIndex
			{
				position444 := position
				{
					position445, tokenIndex445 := position, tokenIndex
					{
						position446, tokenIndex446 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l447
						}
						position++
						if buffer[position] != rune('x') {
							goto l447
						}
						position++
						goto l446
					l447:
						position, tokenIndex = position446, tokenIndex446
						if buffer[position] != rune('e') {
							goto l448
						}
						position++
						if buffer[position] != rune('t') {
							goto l448
						}
						position++
						goto l446
					l448:
						position, tokenIndex = position446, tokenIndex446
						if buffer[position] != rune('a') {
							goto l449
						}
						position++
						if buffer[position] != rune('n') {
							goto l449
						}
						position++
						if buffer[position] != rune('d') {
							goto l449
						}
						position++
						goto l446
					l449:
						position, tokenIndex = position446, tokenIndex446
						if buffer[position] != rune('a') {
							goto l450
						}
						position++
						if buffer[position] != rune('p') {
							goto l450
						}
						position++
						if buffer[position] != rune('u') {
							goto l450
						}
						position++
						if buffer[position] != rune('d') {
							goto l450
						}
						position++
						goto l446
					l450:
						position, tokenIndex = position446, tokenIndex446
						if buffer[position] != rune('p') {
							goto l451
						}
						position++
						if buffer[position] != rune('r') {
							goto l451
						}
						position++
						if buffer[position] != rune('o') {
							goto l451
						}
						position++
						goto l446
					l451:
						position, tokenIndex = position446, tokenIndex446
						if buffer[position] != rune('c') {
							goto l452
						}
						position++
						if buffer[position] != rune('v') {
							goto l452
						}
						position++
						goto l446
					l452:
						position, tokenIndex = position446, tokenIndex446
						if buffer[position] != rune('c') {
							goto l453
						}
						position++
						if buffer[position] != rune('u') {
							goto l453
						}
						position++
						if buffer[position] != rune('l') {
							goto l453
						}
						position++
						if buffer[position] != rune('t') {
							goto l453
						}
						position++
						if buffer[position] != rune('i') {
							goto l453
						}
						position++
						if buffer[position] != rune('v') {
							goto l453
						}
						position++
						if buffer[position] != rune('a') {
							goto l453
						}
						position++
						if buffer[position] != rune('r') {
							goto l453
						}
						position++
						goto l446
					l453:
						position, tokenIndex = position446, tokenIndex446
						if !_rules[ruleAuthorPrefix]() {
							goto l454
						}
						goto l446
					l454:
						position, tokenIndex = position446, tokenIndex446
						if !_rules[ruleRankUninomial]() {
							goto l455
						}
						goto l446
					l455:
						position, tokenIndex = position446, tokenIndex446
						if !_rules[ruleApproximation]() {
							goto l456
						}
						goto l446
					l456:
						position, tokenIndex = position446, tokenIndex446
						if !_rules[ruleWord4]() {
							goto l445
						}
					}
				l446:
					if !_rules[ruleSpaceCharEOI]() {
						goto l445
					}
					goto l443
				l445:
					position, tokenIndex = position445, tokenIndex445
				}
				{
					position457, tokenIndex457 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l458
					}
					goto l457
				l458:
					position, tokenIndex = position457, tokenIndex457
					if !_rules[ruleWordStartsWithDigit]() {
						goto l459
					}
					goto l457
				l459:
					position, tokenIndex = position457, tokenIndex457
					if !_rules[ruleMultiDashedWord]() {
						goto l460
					}
					goto l457
				l460:
					position, tokenIndex = position457, tokenIndex457
					if !_rules[ruleWord2]() {
						goto l461
					}
					goto l457
				l461:
					position, tokenIndex = position457, tokenIndex457
					if !_rules[ruleWord1]() {
						goto l443
					}
				}
			l457:
				{
					position462, tokenIndex462 := position, tokenIndex
					{
						position463, tokenIndex463 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l464
						}
						goto l463
					l464:
						position, tokenIndex = position463, tokenIndex463
						if buffer[position] != rune('(') {
							goto l443
						}
						position++
					}
				l463:
					position, tokenIndex = position462, tokenIndex462
				}
				add(ruleWord, position444)
			}
			return true
		l443:
			position, tokenIndex = position443, tokenIndex443
			return false
		},
		/* 63 Word1 <- <(((DotPrefix / LowerASCII) Dash)? NameLowerChar NameLowerChar+)> */
		func() bool {
			position465, tokenIndex465 := position, tokenIndex
			{
				position466 := position
				{
					position467, tokenIndex467 := position, tokenIndex
					{
						position469, tokenIndex469 := position, tokenIndex
						if !_rules[ruleDotPrefix]() {
							goto l470
						}
						goto l469
					l470:
						position, tokenIndex = position469, tokenIndex469
						if !_rules[ruleLowerASCII]() {
							goto l467
						}
					}
				l469:
					if !_rules[ruleDash]() {
						goto l467
					}
					goto l468
				l467:
					position, tokenIndex = position467, tokenIndex467
				}
			l468:
				if !_rules[ruleNameLowerChar]() {
					goto l465
				}
				if !_rules[ruleNameLowerChar]() {
					goto l465
				}
			l471:
				{
					position472, tokenIndex472 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l472
					}
					goto l471
				l472:
					position, tokenIndex = position472, tokenIndex472
				}
				add(ruleWord1, position466)
			}
			return true
		l465:
			position, tokenIndex = position465, tokenIndex465
			return false
		},
		/* 64 WordStartsWithDigit <- <(('1' / '2' / '3' / '4' / '5' / '6' / '7' / '8' / '9') Nums? ('.' / Dash)? NameLowerChar NameLowerChar NameLowerChar NameLowerChar+)> */
		func() bool {
			position473, tokenIndex473 := position, tokenIndex
			{
				position474 := position
				{
					position475, tokenIndex475 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l476
					}
					position++
					goto l475
				l476:
					position, tokenIndex = position475, tokenIndex475
					if buffer[position] != rune('2') {
						goto l477
					}
					position++
					goto l475
				l477:
					position, tokenIndex = position475, tokenIndex475
					if buffer[position] != rune('3') {
						goto l478
					}
					position++
					goto l475
				l478:
					position, tokenIndex = position475, tokenIndex475
					if buffer[position] != rune('4') {
						goto l479
					}
					position++
					goto l475
				l479:
					position, tokenIndex = position475, tokenIndex475
					if buffer[position] != rune('5') {
						goto l480
					}
					position++
					goto l475
				l480:
					position, tokenIndex = position475, tokenIndex475
					if buffer[position] != rune('6') {
						goto l481
					}
					position++
					goto l475
				l481:
					position, tokenIndex = position475, tokenIndex475
					if buffer[position] != rune('7') {
						goto l482
					}
					position++
					goto l475
				l482:
					position, tokenIndex = position475, tokenIndex475
					if buffer[position] != rune('8') {
						goto l483
					}
					position++
					goto l475
				l483:
					position, tokenIndex = position475, tokenIndex475
					if buffer[position] != rune('9') {
						goto l473
					}
					position++
				}
			l475:
				{
					position484, tokenIndex484 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l484
					}
					goto l485
				l484:
					position, tokenIndex = position484, tokenIndex484
				}
			l485:
				{
					position486, tokenIndex486 := position, tokenIndex
					{
						position488, tokenIndex488 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l489
						}
						position++
						goto l488
					l489:
						position, tokenIndex = position488, tokenIndex488
						if !_rules[ruleDash]() {
							goto l486
						}
					}
				l488:
					goto l487
				l486:
					position, tokenIndex = position486, tokenIndex486
				}
			l487:
				if !_rules[ruleNameLowerChar]() {
					goto l473
				}
				if !_rules[ruleNameLowerChar]() {
					goto l473
				}
				if !_rules[ruleNameLowerChar]() {
					goto l473
				}
				if !_rules[ruleNameLowerChar]() {
					goto l473
				}
			l490:
				{
					position491, tokenIndex491 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l491
					}
					goto l490
				l491:
					position, tokenIndex = position491, tokenIndex491
				}
				add(ruleWordStartsWithDigit, position474)
			}
			return true
		l473:
			position, tokenIndex = position473, tokenIndex473
			return false
		},
		/* 65 Word2 <- <(NameLowerChar+ Dash? (WordApostr / NameLowerChar+))> */
		func() bool {
			position492, tokenIndex492 := position, tokenIndex
			{
				position493 := position
				if !_rules[ruleNameLowerChar]() {
					goto l492
				}
			l494:
				{
					position495, tokenIndex495 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l495
					}
					goto l494
				l495:
					position, tokenIndex = position495, tokenIndex495
				}
				{
					position496, tokenIndex496 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l496
					}
					goto l497
				l496:
					position, tokenIndex = position496, tokenIndex496
				}
			l497:
				{
					position498, tokenIndex498 := position, tokenIndex
					if !_rules[ruleWordApostr]() {
						goto l499
					}
					goto l498
				l499:
					position, tokenIndex = position498, tokenIndex498
					if !_rules[ruleNameLowerChar]() {
						goto l492
					}
				l500:
					{
						position501, tokenIndex501 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l501
						}
						goto l500
					l501:
						position, tokenIndex = position501, tokenIndex501
					}
				}
			l498:
				add(ruleWord2, position493)
			}
			return true
		l492:
			position, tokenIndex = position492, tokenIndex492
			return false
		},
		/* 66 WordApostr <- <(NameLowerChar NameLowerChar* Apostrophe Word1)> */
		func() bool {
			position502, tokenIndex502 := position, tokenIndex
			{
				position503 := position
				if !_rules[ruleNameLowerChar]() {
					goto l502
				}
			l504:
				{
					position505, tokenIndex505 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l505
					}
					goto l504
				l505:
					position, tokenIndex = position505, tokenIndex505
				}
				if !_rules[ruleApostrophe]() {
					goto l502
				}
				if !_rules[ruleWord1]() {
					goto l502
				}
				add(ruleWordApostr, position503)
			}
			return true
		l502:
			position, tokenIndex = position502, tokenIndex502
			return false
		},
		/* 67 Word4 <- <(NameLowerChar+ '.' NameLowerChar)> */
		func() bool {
			position506, tokenIndex506 := position, tokenIndex
			{
				position507 := position
				if !_rules[ruleNameLowerChar]() {
					goto l506
				}
			l508:
				{
					position509, tokenIndex509 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l509
					}
					goto l508
				l509:
					position, tokenIndex = position509, tokenIndex509
				}
				if buffer[position] != rune('.') {
					goto l506
				}
				position++
				if !_rules[ruleNameLowerChar]() {
					goto l506
				}
				add(ruleWord4, position507)
			}
			return true
		l506:
			position, tokenIndex = position506, tokenIndex506
			return false
		},
		/* 68 DotPrefix <- <('s' 't' '.')> */
		func() bool {
			position510, tokenIndex510 := position, tokenIndex
			{
				position511 := position
				if buffer[position] != rune('s') {
					goto l510
				}
				position++
				if buffer[position] != rune('t') {
					goto l510
				}
				position++
				if buffer[position] != rune('.') {
					goto l510
				}
				position++
				add(ruleDotPrefix, position511)
			}
			return true
		l510:
			position, tokenIndex = position510, tokenIndex510
			return false
		},
		/* 69 MultiDashedWord <- <(NameLowerChar+ Dash NameLowerChar+ Dash NameLowerChar+ (Dash NameLowerChar+)?)> */
		func() bool {
			position512, tokenIndex512 := position, tokenIndex
			{
				position513 := position
				if !_rules[ruleNameLowerChar]() {
					goto l512
				}
			l514:
				{
					position515, tokenIndex515 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l515
					}
					goto l514
				l515:
					position, tokenIndex = position515, tokenIndex515
				}
				if !_rules[ruleDash]() {
					goto l512
				}
				if !_rules[ruleNameLowerChar]() {
					goto l512
				}
			l516:
				{
					position517, tokenIndex517 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l517
					}
					goto l516
				l517:
					position, tokenIndex = position517, tokenIndex517
				}
				if !_rules[ruleDash]() {
					goto l512
				}
				if !_rules[ruleNameLowerChar]() {
					goto l512
				}
			l518:
				{
					position519, tokenIndex519 := position, tokenIndex
					if !_rules[ruleNameLowerChar]() {
						goto l519
					}
					goto l518
				l519:
					position, tokenIndex = position519, tokenIndex519
				}
				{
					position520, tokenIndex520 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l520
					}
					if !_rules[ruleNameLowerChar]() {
						goto l520
					}
				l522:
					{
						position523, tokenIndex523 := position, tokenIndex
						if !_rules[ruleNameLowerChar]() {
							goto l523
						}
						goto l522
					l523:
						position, tokenIndex = position523, tokenIndex523
					}
					goto l521
				l520:
					position, tokenIndex = position520, tokenIndex520
				}
			l521:
				add(ruleMultiDashedWord, position513)
			}
			return true
		l512:
			position, tokenIndex = position512, tokenIndex512
			return false
		},
		/* 70 HybridChar <- <('×' / (('x' / 'X') &_) / (('x' / 'X') &UninomialWord) / (('x' / 'X') &END))> */
		func() bool {
			position524, tokenIndex524 := position, tokenIndex
			{
				position525 := position
				{
					position526, tokenIndex526 := position, tokenIndex
					if buffer[position] != rune('×') {
						goto l527
					}
					position++
					goto l526
				l527:
					position, tokenIndex = position526, tokenIndex526
					{
						position529, tokenIndex529 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l530
						}
						position++
						goto l529
					l530:
						position, tokenIndex = position529, tokenIndex529
						if buffer[position] != rune('X') {
							goto l528
						}
						position++
					}
				l529:
					{
						position531, tokenIndex531 := position, tokenIndex
						if !_rules[rule_]() {
							goto l528
						}
						position, tokenIndex = position531, tokenIndex531
					}
					goto l526
				l528:
					position, tokenIndex = position526, tokenIndex526
					{
						position533, tokenIndex533 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l534
						}
						position++
						goto l533
					l534:
						position, tokenIndex = position533, tokenIndex533
						if buffer[position] != rune('X') {
							goto l532
						}
						position++
					}
				l533:
					{
						position535, tokenIndex535 := position, tokenIndex
						if !_rules[ruleUninomialWord]() {
							goto l532
						}
						position, tokenIndex = position535, tokenIndex535
					}
					goto l526
				l532:
					position, tokenIndex = position526, tokenIndex526
					{
						position536, tokenIndex536 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l537
						}
						position++
						goto l536
					l537:
						position, tokenIndex = position536, tokenIndex536
						if buffer[position] != rune('X') {
							goto l524
						}
						position++
					}
				l536:
					{
						position538, tokenIndex538 := position, tokenIndex
						if !_rules[ruleEND]() {
							goto l524
						}
						position, tokenIndex = position538, tokenIndex538
					}
				}
			l526:
				add(ruleHybridChar, position525)
			}
			return true
		l524:
			position, tokenIndex = position524, tokenIndex524
			return false
		},
		/* 71 GraftChimeraChar <- <'+'> */
		func() bool {
			position539, tokenIndex539 := position, tokenIndex
			{
				position540 := position
				if buffer[position] != rune('+') {
					goto l539
				}
				position++
				add(ruleGraftChimeraChar, position540)
			}
			return true
		l539:
			position, tokenIndex = position539, tokenIndex539
			return false
		},
		/* 72 ApproxNameIgnored <- <.*> */
		func() bool {
			{
				position542 := position
			l543:
				{
					position544, tokenIndex544 := position, tokenIndex
					if !matchDot() {
						goto l544
					}
					goto l543
				l544:
					position, tokenIndex = position544, tokenIndex544
				}
				add(ruleApproxNameIgnored, position542)
			}
			return true
		},
		/* 73 Approximation <- <(('s' 'p' '.' _? ('n' 'r' '.')) / ('s' 'p' '.' _? ('a' 'f' 'f' '.')) / ('m' 'o' 'n' 's' 't' '.') / '?' / ((('s' 'p' 'p') / ('n' 'r') / ('s' 'p') / ('a' 'f' 'f') / ('s' 'p' 'e' 'c' 'i' 'e' 's')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position545, tokenIndex545 := position, tokenIndex
			{
				position546 := position
				{
					position547, tokenIndex547 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l548
					}
					position++
					if buffer[position] != rune('p') {
						goto l548
					}
					position++
					if buffer[position] != rune('.') {
						goto l548
					}
					position++
					{
						position549, tokenIndex549 := position, tokenIndex
						if !_rules[rule_]() {
							goto l549
						}
						goto l550
					l549:
						position, tokenIndex = position549, tokenIndex549
					}
				l550:
					if buffer[position] != rune('n') {
						goto l548
					}
					position++
					if buffer[position] != rune('r') {
						goto l548
					}
					position++
					if buffer[position] != rune('.') {
						goto l548
					}
					position++
					goto l547
				l548:
					position, tokenIndex = position547, tokenIndex547
					if buffer[position] != rune('s') {
						goto l551
					}
					position++
					if buffer[position] != rune('p') {
						goto l551
					}
					position++
					if buffer[position] != rune('.') {
						goto l551
					}
					position++
					{
						position552, tokenIndex552 := position, tokenIndex
						if !_rules[rule_]() {
							goto l552
						}
						goto l553
					l552:
						position, tokenIndex = position552, tokenIndex552
					}
				l553:
					if buffer[position] != rune('a') {
						goto l551
					}
					position++
					if buffer[position] != rune('f') {
						goto l551
					}
					position++
					if buffer[position] != rune('f') {
						goto l551
					}
					position++
					if buffer[position] != rune('.') {
						goto l551
					}
					position++
					goto l547
				l551:
					position, tokenIndex = position547, tokenIndex547
					if buffer[position] != rune('m') {
						goto l554
					}
					position++
					if buffer[position] != rune('o') {
						goto l554
					}
					position++
					if buffer[position] != rune('n') {
						goto l554
					}
					position++
					if buffer[position] != rune('s') {
						goto l554
					}
					position++
					if buffer[position] != rune('t') {
						goto l554
					}
					position++
					if buffer[position] != rune('.') {
						goto l554
					}
					position++
					goto l547
				l554:
					position, tokenIndex = position547, tokenIndex547
					if buffer[position] != rune('?') {
						goto l555
					}
					position++
					goto l547
				l555:
					position, tokenIndex = position547, tokenIndex547
					{
						position556, tokenIndex556 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l557
						}
						position++
						if buffer[position] != rune('p') {
							goto l557
						}
						position++
						if buffer[position] != rune('p') {
							goto l557
						}
						position++
						goto l556
					l557:
						position, tokenIndex = position556, tokenIndex556
						if buffer[position] != rune('n') {
							goto l558
						}
						position++
						if buffer[position] != rune('r') {
							goto l558
						}
						position++
						goto l556
					l558:
						position, tokenIndex = position556, tokenIndex556
						if buffer[position] != rune('s') {
							goto l559
						}
						position++
						if buffer[position] != rune('p') {
							goto l559
						}
						position++
						goto l556
					l559:
						position, tokenIndex = position556, tokenIndex556
						if buffer[position] != rune('a') {
							goto l560
						}
						position++
						if buffer[position] != rune('f') {
							goto l560
						}
						position++
						if buffer[position] != rune('f') {
							goto l560
						}
						position++
						goto l556
					l560:
						position, tokenIndex = position556, tokenIndex556
						if buffer[position] != rune('s') {
							goto l545
						}
						position++
						if buffer[position] != rune('p') {
							goto l545
						}
						position++
						if buffer[position] != rune('e') {
							goto l545
						}
						position++
						if buffer[position] != rune('c') {
							goto l545
						}
						position++
						if buffer[position] != rune('i') {
							goto l545
						}
						position++
						if buffer[position] != rune('e') {
							goto l545
						}
						position++
						if buffer[position] != rune('s') {
							goto l545
						}
						position++
					}
				l556:
					{
						position561, tokenIndex561 := position, tokenIndex
						{
							position563, tokenIndex563 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l562
							}
							position, tokenIndex = position563, tokenIndex563
						}
						goto l561
					l562:
						position, tokenIndex = position561, tokenIndex561
						if buffer[position] != rune('.') {
							goto l545
						}
						position++
					}
				l561:
				}
			l547:
				add(ruleApproximation, position546)
			}
			return true
		l545:
			position, tokenIndex = position545, tokenIndex545
			return false
		},
		/* 74 Authorship <- <((AuthorshipCombo / OriginalAuthorship) &(SpaceCharEOI / ';' / ','))> */
		func() bool {
			position564, tokenIndex564 := position, tokenIndex
			{
				position565 := position
				{
					position566, tokenIndex566 := position, tokenIndex
					if !_rules[ruleAuthorshipCombo]() {
						goto l567
					}
					goto l566
				l567:
					position, tokenIndex = position566, tokenIndex566
					if !_rules[ruleOriginalAuthorship]() {
						goto l564
					}
				}
			l566:
				{
					position568, tokenIndex568 := position, tokenIndex
					{
						position569, tokenIndex569 := position, tokenIndex
						if !_rules[ruleSpaceCharEOI]() {
							goto l570
						}
						goto l569
					l570:
						position, tokenIndex = position569, tokenIndex569
						if buffer[position] != rune(';') {
							goto l571
						}
						position++
						goto l569
					l571:
						position, tokenIndex = position569, tokenIndex569
						if buffer[position] != rune(',') {
							goto l564
						}
						position++
					}
				l569:
					position, tokenIndex = position568, tokenIndex568
				}
				add(ruleAuthorship, position565)
			}
			return true
		l564:
			position, tokenIndex = position564, tokenIndex564
			return false
		},
		/* 75 AuthorshipCombo <- <(OriginalAuthorshipComb (_? CombinationAuthorship)?)> */
		func() bool {
			position572, tokenIndex572 := position, tokenIndex
			{
				position573 := position
				if !_rules[ruleOriginalAuthorshipComb]() {
					goto l572
				}
				{
					position574, tokenIndex574 := position, tokenIndex
					{
						position576, tokenIndex576 := position, tokenIndex
						if !_rules[rule_]() {
							goto l576
						}
						goto l577
					l576:
						position, tokenIndex = position576, tokenIndex576
					}
				l577:
					if !_rules[ruleCombinationAuthorship]() {
						goto l574
					}
					goto l575
				l574:
					position, tokenIndex = position574, tokenIndex574
				}
			l575:
				add(ruleAuthorshipCombo, position573)
			}
			return true
		l572:
			position, tokenIndex = position572, tokenIndex572
			return false
		},
		/* 76 OriginalAuthorship <- <AuthorsGroup> */
		func() bool {
			position578, tokenIndex578 := position, tokenIndex
			{
				position579 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l578
				}
				add(ruleOriginalAuthorship, position579)
			}
			return true
		l578:
			position, tokenIndex = position578, tokenIndex578
			return false
		},
		/* 77 OriginalAuthorshipComb <- <(BasionymAuthorshipYearMisformed / BasionymAuthorship / BasionymAuthorshipMissingParens)> */
		func() bool {
			position580, tokenIndex580 := position, tokenIndex
			{
				position581 := position
				{
					position582, tokenIndex582 := position, tokenIndex
					if !_rules[ruleBasionymAuthorshipYearMisformed]() {
						goto l583
					}
					goto l582
				l583:
					position, tokenIndex = position582, tokenIndex582
					if !_rules[ruleBasionymAuthorship]() {
						goto l584
					}
					goto l582
				l584:
					position, tokenIndex = position582, tokenIndex582
					if !_rules[ruleBasionymAuthorshipMissingParens]() {
						goto l580
					}
				}
			l582:
				add(ruleOriginalAuthorshipComb, position581)
			}
			return true
		l580:
			position, tokenIndex = position580, tokenIndex580
			return false
		},
		/* 78 CombinationAuthorship <- <AuthorsGroup> */
		func() bool {
			position585, tokenIndex585 := position, tokenIndex
			{
				position586 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l585
				}
				add(ruleCombinationAuthorship, position586)
			}
			return true
		l585:
			position, tokenIndex = position585, tokenIndex585
			return false
		},
		/* 79 BasionymAuthorshipMissingParens <- <(MissingParensStart / MissingParensEnd)> */
		func() bool {
			position587, tokenIndex587 := position, tokenIndex
			{
				position588 := position
				{
					position589, tokenIndex589 := position, tokenIndex
					if !_rules[ruleMissingParensStart]() {
						goto l590
					}
					goto l589
				l590:
					position, tokenIndex = position589, tokenIndex589
					if !_rules[ruleMissingParensEnd]() {
						goto l587
					}
				}
			l589:
				add(ruleBasionymAuthorshipMissingParens, position588)
			}
			return true
		l587:
			position, tokenIndex = position587, tokenIndex587
			return false
		},
		/* 80 MissingParensStart <- <('(' _? AuthorsGroup)> */
		func() bool {
			position591, tokenIndex591 := position, tokenIndex
			{
				position592 := position
				if buffer[position] != rune('(') {
					goto l591
				}
				position++
				{
					position593, tokenIndex593 := position, tokenIndex
					if !_rules[rule_]() {
						goto l593
					}
					goto l594
				l593:
					position, tokenIndex = position593, tokenIndex593
				}
			l594:
				if !_rules[ruleAuthorsGroup]() {
					goto l591
				}
				add(ruleMissingParensStart, position592)
			}
			return true
		l591:
			position, tokenIndex = position591, tokenIndex591
			return false
		},
		/* 81 MissingParensEnd <- <(AuthorsGroup _? ')')> */
		func() bool {
			position595, tokenIndex595 := position, tokenIndex
			{
				position596 := position
				if !_rules[ruleAuthorsGroup]() {
					goto l595
				}
				{
					position597, tokenIndex597 := position, tokenIndex
					if !_rules[rule_]() {
						goto l597
					}
					goto l598
				l597:
					position, tokenIndex = position597, tokenIndex597
				}
			l598:
				if buffer[position] != rune(')') {
					goto l595
				}
				position++
				add(ruleMissingParensEnd, position596)
			}
			return true
		l595:
			position, tokenIndex = position595, tokenIndex595
			return false
		},
		/* 82 BasionymAuthorshipYearMisformed <- <('(' _? AuthorsGroup _? ')' (_? ',')? _? Year)> */
		func() bool {
			position599, tokenIndex599 := position, tokenIndex
			{
				position600 := position
				if buffer[position] != rune('(') {
					goto l599
				}
				position++
				{
					position601, tokenIndex601 := position, tokenIndex
					if !_rules[rule_]() {
						goto l601
					}
					goto l602
				l601:
					position, tokenIndex = position601, tokenIndex601
				}
			l602:
				if !_rules[ruleAuthorsGroup]() {
					goto l599
				}
				{
					position603, tokenIndex603 := position, tokenIndex
					if !_rules[rule_]() {
						goto l603
					}
					goto l604
				l603:
					position, tokenIndex = position603, tokenIndex603
				}
			l604:
				if buffer[position] != rune(')') {
					goto l599
				}
				position++
				{
					position605, tokenIndex605 := position, tokenIndex
					{
						position607, tokenIndex607 := position, tokenIndex
						if !_rules[rule_]() {
							goto l607
						}
						goto l608
					l607:
						position, tokenIndex = position607, tokenIndex607
					}
				l608:
					if buffer[position] != rune(',') {
						goto l605
					}
					position++
					goto l606
				l605:
					position, tokenIndex = position605, tokenIndex605
				}
			l606:
				{
					position609, tokenIndex609 := position, tokenIndex
					if !_rules[rule_]() {
						goto l609
					}
					goto l610
				l609:
					position, tokenIndex = position609, tokenIndex609
				}
			l610:
				if !_rules[ruleYear]() {
					goto l599
				}
				add(ruleBasionymAuthorshipYearMisformed, position600)
			}
			return true
		l599:
			position, tokenIndex = position599, tokenIndex599
			return false
		},
		/* 83 BasionymAuthorship <- <(BasionymAuthorship1 / BasionymAuthorship2Parens)> */
		func() bool {
			position611, tokenIndex611 := position, tokenIndex
			{
				position612 := position
				{
					position613, tokenIndex613 := position, tokenIndex
					if !_rules[ruleBasionymAuthorship1]() {
						goto l614
					}
					goto l613
				l614:
					position, tokenIndex = position613, tokenIndex613
					if !_rules[ruleBasionymAuthorship2Parens]() {
						goto l611
					}
				}
			l613:
				add(ruleBasionymAuthorship, position612)
			}
			return true
		l611:
			position, tokenIndex = position611, tokenIndex611
			return false
		},
		/* 84 BasionymAuthorship1 <- <('(' _? AuthorsGroup _? ')')> */
		func() bool {
			position615, tokenIndex615 := position, tokenIndex
			{
				position616 := position
				if buffer[position] != rune('(') {
					goto l615
				}
				position++
				{
					position617, tokenIndex617 := position, tokenIndex
					if !_rules[rule_]() {
						goto l617
					}
					goto l618
				l617:
					position, tokenIndex = position617, tokenIndex617
				}
			l618:
				if !_rules[ruleAuthorsGroup]() {
					goto l615
				}
				{
					position619, tokenIndex619 := position, tokenIndex
					if !_rules[rule_]() {
						goto l619
					}
					goto l620
				l619:
					position, tokenIndex = position619, tokenIndex619
				}
			l620:
				if buffer[position] != rune(')') {
					goto l615
				}
				position++
				add(ruleBasionymAuthorship1, position616)
			}
			return true
		l615:
			position, tokenIndex = position615, tokenIndex615
			return false
		},
		/* 85 BasionymAuthorship2Parens <- <('(' _? '(' _? AuthorsGroup _? ')' _? ')')> */
		func() bool {
			position621, tokenIndex621 := position, tokenIndex
			{
				position622 := position
				if buffer[position] != rune('(') {
					goto l621
				}
				position++
				{
					position623, tokenIndex623 := position, tokenIndex
					if !_rules[rule_]() {
						goto l623
					}
					goto l624
				l623:
					position, tokenIndex = position623, tokenIndex623
				}
			l624:
				if buffer[position] != rune('(') {
					goto l621
				}
				position++
				{
					position625, tokenIndex625 := position, tokenIndex
					if !_rules[rule_]() {
						goto l625
					}
					goto l626
				l625:
					position, tokenIndex = position625, tokenIndex625
				}
			l626:
				if !_rules[ruleAuthorsGroup]() {
					goto l621
				}
				{
					position627, tokenIndex627 := position, tokenIndex
					if !_rules[rule_]() {
						goto l627
					}
					goto l628
				l627:
					position, tokenIndex = position627, tokenIndex627
				}
			l628:
				if buffer[position] != rune(')') {
					goto l621
				}
				position++
				{
					position629, tokenIndex629 := position, tokenIndex
					if !_rules[rule_]() {
						goto l629
					}
					goto l630
				l629:
					position, tokenIndex = position629, tokenIndex629
				}
			l630:
				if buffer[position] != rune(')') {
					goto l621
				}
				position++
				add(ruleBasionymAuthorship2Parens, position622)
			}
			return true
		l621:
			position, tokenIndex = position621, tokenIndex621
			return false
		},
		/* 86 AuthorsGroup <- <(AuthorsTeam (_ (AuthorEmend / AuthorEx) AuthorsTeam)?)> */
		func() bool {
			position631, tokenIndex631 := position, tokenIndex
			{
				position632 := position
				if !_rules[ruleAuthorsTeam]() {
					goto l631
				}
				{
					position633, tokenIndex633 := position, tokenIndex
					if !_rules[rule_]() {
						goto l633
					}
					{
						position635, tokenIndex635 := position, tokenIndex
						if !_rules[ruleAuthorEmend]() {
							goto l636
						}
						goto l635
					l636:
						position, tokenIndex = position635, tokenIndex635
						if !_rules[ruleAuthorEx]() {
							goto l633
						}
					}
				l635:
					if !_rules[ruleAuthorsTeam]() {
						goto l633
					}
					goto l634
				l633:
					position, tokenIndex = position633, tokenIndex633
				}
			l634:
				add(ruleAuthorsGroup, position632)
			}
			return true
		l631:
			position, tokenIndex = position631, tokenIndex631
			return false
		},
		/* 87 AuthorsTeam <- <(Author (AuthorSep Author)* (_? ','? _? Year)?)> */
		func() bool {
			position637, tokenIndex637 := position, tokenIndex
			{
				position638 := position
				if !_rules[ruleAuthor]() {
					goto l637
				}
			l639:
				{
					position640, tokenIndex640 := position, tokenIndex
					if !_rules[ruleAuthorSep]() {
						goto l640
					}
					if !_rules[ruleAuthor]() {
						goto l640
					}
					goto l639
				l640:
					position, tokenIndex = position640, tokenIndex640
				}
				{
					position641, tokenIndex641 := position, tokenIndex
					{
						position643, tokenIndex643 := position, tokenIndex
						if !_rules[rule_]() {
							goto l643
						}
						goto l644
					l643:
						position, tokenIndex = position643, tokenIndex643
					}
				l644:
					{
						position645, tokenIndex645 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l645
						}
						position++
						goto l646
					l645:
						position, tokenIndex = position645, tokenIndex645
					}
				l646:
					{
						position647, tokenIndex647 := position, tokenIndex
						if !_rules[rule_]() {
							goto l647
						}
						goto l648
					l647:
						position, tokenIndex = position647, tokenIndex647
					}
				l648:
					if !_rules[ruleYear]() {
						goto l641
					}
					goto l642
				l641:
					position, tokenIndex = position641, tokenIndex641
				}
			l642:
				add(ruleAuthorsTeam, position638)
			}
			return true
		l637:
			position, tokenIndex = position637, tokenIndex637
			return false
		},
		/* 88 AuthorSep <- <(AuthorSep1 / AuthorSep2)> */
		func() bool {
			position649, tokenIndex649 := position, tokenIndex
			{
				position650 := position
				{
					position651, tokenIndex651 := position, tokenIndex
					if !_rules[ruleAuthorSep1]() {
						goto l652
					}
					goto l651
				l652:
					position, tokenIndex = position651, tokenIndex651
					if !_rules[ruleAuthorSep2]() {
						goto l649
					}
				}
			l651:
				add(ruleAuthorSep, position650)
			}
			return true
		l649:
			position, tokenIndex = position649, tokenIndex649
			return false
		},
		/* 89 AuthorSep1 <- <(_? (',' _)? ('&' / AuthorSepSpanish / ('e' 't') / ('a' 'n' 'd') / ('a' 'p' 'u' 'd')) _?)> */
		func() bool {
			position653, tokenIndex653 := position, tokenIndex
			{
				position654 := position
				{
					position655, tokenIndex655 := position, tokenIndex
					if !_rules[rule_]() {
						goto l655
					}
					goto l656
				l655:
					position, tokenIndex = position655, tokenIndex655
				}
			l656:
				{
					position657, tokenIndex657 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l657
					}
					position++
					if !_rules[rule_]() {
						goto l657
					}
					goto l658
				l657:
					position, tokenIndex = position657, tokenIndex657
				}
			l658:
				{
					position659, tokenIndex659 := position, tokenIndex
					if buffer[position] != rune('&') {
						goto l660
					}
					position++
					goto l659
				l660:
					position, tokenIndex = position659, tokenIndex659
					if !_rules[ruleAuthorSepSpanish]() {
						goto l661
					}
					goto l659
				l661:
					position, tokenIndex = position659, tokenIndex659
					if buffer[position] != rune('e') {
						goto l662
					}
					position++
					if buffer[position] != rune('t') {
						goto l662
					}
					position++
					goto l659
				l662:
					position, tokenIndex = position659, tokenIndex659
					if buffer[position] != rune('a') {
						goto l663
					}
					position++
					if buffer[position] != rune('n') {
						goto l663
					}
					position++
					if buffer[position] != rune('d') {
						goto l663
					}
					position++
					goto l659
				l663:
					position, tokenIndex = position659, tokenIndex659
					if buffer[position] != rune('a') {
						goto l653
					}
					position++
					if buffer[position] != rune('p') {
						goto l653
					}
					position++
					if buffer[position] != rune('u') {
						goto l653
					}
					position++
					if buffer[position] != rune('d') {
						goto l653
					}
					position++
				}
			l659:
				{
					position664, tokenIndex664 := position, tokenIndex
					if !_rules[rule_]() {
						goto l664
					}
					goto l665
				l664:
					position, tokenIndex = position664, tokenIndex664
				}
			l665:
				add(ruleAuthorSep1, position654)
			}
			return true
		l653:
			position, tokenIndex = position653, tokenIndex653
			return false
		},
		/* 90 AuthorSep2 <- <(_? ',' _?)> */
		func() bool {
			position666, tokenIndex666 := position, tokenIndex
			{
				position667 := position
				{
					position668, tokenIndex668 := position, tokenIndex
					if !_rules[rule_]() {
						goto l668
					}
					goto l669
				l668:
					position, tokenIndex = position668, tokenIndex668
				}
			l669:
				if buffer[position] != rune(',') {
					goto l666
				}
				position++
				{
					position670, tokenIndex670 := position, tokenIndex
					if !_rules[rule_]() {
						goto l670
					}
					goto l671
				l670:
					position, tokenIndex = position670, tokenIndex670
				}
			l671:
				add(ruleAuthorSep2, position667)
			}
			return true
		l666:
			position, tokenIndex = position666, tokenIndex666
			return false
		},
		/* 91 AuthorSepSpanish <- <(_? 'y' _?)> */
		func() bool {
			position672, tokenIndex672 := position, tokenIndex
			{
				position673 := position
				{
					position674, tokenIndex674 := position, tokenIndex
					if !_rules[rule_]() {
						goto l674
					}
					goto l675
				l674:
					position, tokenIndex = position674, tokenIndex674
				}
			l675:
				if buffer[position] != rune('y') {
					goto l672
				}
				position++
				{
					position676, tokenIndex676 := position, tokenIndex
					if !_rules[rule_]() {
						goto l676
					}
					goto l677
				l676:
					position, tokenIndex = position676, tokenIndex676
				}
			l677:
				add(ruleAuthorSepSpanish, position673)
			}
			return true
		l672:
			position, tokenIndex = position672, tokenIndex672
			return false
		},
		/* 92 AuthorEx <- <((('e' 'x' '.'?) / ('m' 's' _ ('i' 'n')) / ('i' 'n')) _)> */
		func() bool {
			position678, tokenIndex678 := position, tokenIndex
			{
				position679 := position
				{
					position680, tokenIndex680 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l681
					}
					position++
					if buffer[position] != rune('x') {
						goto l681
					}
					position++
					{
						position682, tokenIndex682 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l682
						}
						position++
						goto l683
					l682:
						position, tokenIndex = position682, tokenIndex682
					}
				l683:
					goto l680
				l681:
					position, tokenIndex = position680, tokenIndex680
					if buffer[position] != rune('m') {
						goto l684
					}
					position++
					if buffer[position] != rune('s') {
						goto l684
					}
					position++
					if !_rules[rule_]() {
						goto l684
					}
					if buffer[position] != rune('i') {
						goto l684
					}
					position++
					if buffer[position] != rune('n') {
						goto l684
					}
					position++
					goto l680
				l684:
					position, tokenIndex = position680, tokenIndex680
					if buffer[position] != rune('i') {
						goto l678
					}
					position++
					if buffer[position] != rune('n') {
						goto l678
					}
					position++
				}
			l680:
				if !_rules[rule_]() {
					goto l678
				}
				add(ruleAuthorEx, position679)
			}
			return true
		l678:
			position, tokenIndex = position678, tokenIndex678
			return false
		},
		/* 93 AuthorEmend <- <('e' 'm' 'e' 'n' 'd' '.'? _)> */
		func() bool {
			position685, tokenIndex685 := position, tokenIndex
			{
				position686 := position
				if buffer[position] != rune('e') {
					goto l685
				}
				position++
				if buffer[position] != rune('m') {
					goto l685
				}
				position++
				if buffer[position] != rune('e') {
					goto l685
				}
				position++
				if buffer[position] != rune('n') {
					goto l685
				}
				position++
				if buffer[position] != rune('d') {
					goto l685
				}
				position++
				{
					position687, tokenIndex687 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l687
					}
					position++
					goto l688
				l687:
					position, tokenIndex = position687, tokenIndex687
				}
			l688:
				if !_rules[rule_]() {
					goto l685
				}
				add(ruleAuthorEmend, position686)
			}
			return true
		l685:
			position, tokenIndex = position685, tokenIndex685
			return false
		},
		/* 94 Author <- <((Author0 / Author1 / Author2 / UnknownAuthor) (_ AuthorEtAl)?)> */
		func() bool {
			position689, tokenIndex689 := position, tokenIndex
			{
				position690 := position
				{
					position691, tokenIndex691 := position, tokenIndex
					if !_rules[ruleAuthor0]() {
						goto l692
					}
					goto l691
				l692:
					position, tokenIndex = position691, tokenIndex691
					if !_rules[ruleAuthor1]() {
						goto l693
					}
					goto l691
				l693:
					position, tokenIndex = position691, tokenIndex691
					if !_rules[ruleAuthor2]() {
						goto l694
					}
					goto l691
				l694:
					position, tokenIndex = position691, tokenIndex691
					if !_rules[ruleUnknownAuthor]() {
						goto l689
					}
				}
			l691:
				{
					position695, tokenIndex695 := position, tokenIndex
					if !_rules[rule_]() {
						goto l695
					}
					if !_rules[ruleAuthorEtAl]() {
						goto l695
					}
					goto l696
				l695:
					position, tokenIndex = position695, tokenIndex695
				}
			l696:
				add(ruleAuthor, position690)
			}
			return true
		l689:
			position, tokenIndex = position689, tokenIndex689
			return false
		},
		/* 95 Author0 <- <(Author2 FiliusFNoSpace)> */
		func() bool {
			position697, tokenIndex697 := position, tokenIndex
			{
				position698 := position
				if !_rules[ruleAuthor2]() {
					goto l697
				}
				if !_rules[ruleFiliusFNoSpace]() {
					goto l697
				}
				add(ruleAuthor0, position698)
			}
			return true
		l697:
			position, tokenIndex = position697, tokenIndex697
			return false
		},
		/* 96 Author1 <- <(Author2 _? (Filius / AuthorSuffix))> */
		func() bool {
			position699, tokenIndex699 := position, tokenIndex
			{
				position700 := position
				if !_rules[ruleAuthor2]() {
					goto l699
				}
				{
					position701, tokenIndex701 := position, tokenIndex
					if !_rules[rule_]() {
						goto l701
					}
					goto l702
				l701:
					position, tokenIndex = position701, tokenIndex701
				}
			l702:
				{
					position703, tokenIndex703 := position, tokenIndex
					if !_rules[ruleFilius]() {
						goto l704
					}
					goto l703
				l704:
					position, tokenIndex = position703, tokenIndex703
					if !_rules[ruleAuthorSuffix]() {
						goto l699
					}
				}
			l703:
				add(ruleAuthor1, position700)
			}
			return true
		l699:
			position, tokenIndex = position699, tokenIndex699
			return false
		},
		/* 97 Author2 <- <(AuthorWord (_? AuthorWord)*)> */
		func() bool {
			position705, tokenIndex705 := position, tokenIndex
			{
				position706 := position
				if !_rules[ruleAuthorWord]() {
					goto l705
				}
			l707:
				{
					position708, tokenIndex708 := position, tokenIndex
					{
						position709, tokenIndex709 := position, tokenIndex
						if !_rules[rule_]() {
							goto l709
						}
						goto l710
					l709:
						position, tokenIndex = position709, tokenIndex709
					}
				l710:
					if !_rules[ruleAuthorWord]() {
						goto l708
					}
					goto l707
				l708:
					position, tokenIndex = position708, tokenIndex708
				}
				add(ruleAuthor2, position706)
			}
			return true
		l705:
			position, tokenIndex = position705, tokenIndex705
			return false
		},
		/* 98 UnknownAuthor <- <('?' / ((('a' 'u' 'c' 't') / ('a' 'n' 'o' 'n')) (&SpaceCharEOI / '.')))> */
		func() bool {
			position711, tokenIndex711 := position, tokenIndex
			{
				position712 := position
				{
					position713, tokenIndex713 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l714
					}
					position++
					goto l713
				l714:
					position, tokenIndex = position713, tokenIndex713
					{
						position715, tokenIndex715 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l716
						}
						position++
						if buffer[position] != rune('u') {
							goto l716
						}
						position++
						if buffer[position] != rune('c') {
							goto l716
						}
						position++
						if buffer[position] != rune('t') {
							goto l716
						}
						position++
						goto l715
					l716:
						position, tokenIndex = position715, tokenIndex715
						if buffer[position] != rune('a') {
							goto l711
						}
						position++
						if buffer[position] != rune('n') {
							goto l711
						}
						position++
						if buffer[position] != rune('o') {
							goto l711
						}
						position++
						if buffer[position] != rune('n') {
							goto l711
						}
						position++
					}
				l715:
					{
						position717, tokenIndex717 := position, tokenIndex
						{
							position719, tokenIndex719 := position, tokenIndex
							if !_rules[ruleSpaceCharEOI]() {
								goto l718
							}
							position, tokenIndex = position719, tokenIndex719
						}
						goto l717
					l718:
						position, tokenIndex = position717, tokenIndex717
						if buffer[position] != rune('.') {
							goto l711
						}
						position++
					}
				l717:
				}
			l713:
				add(ruleUnknownAuthor, position712)
			}
			return true
		l711:
			position, tokenIndex = position711, tokenIndex711
			return false
		},
		/* 99 AuthorWord <- <(!(HybridChar / (('b' / 'B') ('o' / 'O') ('l' / 'L') ('d' / 'D') ':')) (AuthorDashInitials / AuthorWord1 / AuthorWord2 / AuthorWord3 / AuthorWord4 / AuthorPrefix))> */
		func() bool {
			position720, tokenIndex720 := position, tokenIndex
			{
				position721 := position
				{
					position722, tokenIndex722 := position, tokenIndex
					{
						position723, tokenIndex723 := position, tokenIndex
						if !_rules[ruleHybridChar]() {
							goto l724
						}
						goto l723
					l724:
						position, tokenIndex = position723, tokenIndex723
						{
							position725, tokenIndex725 := position, tokenIndex
							if buffer[position] != rune('b') {
								goto l726
							}
							position++
							goto l725
						l726:
							position, tokenIndex = position725, tokenIndex725
							if buffer[position] != rune('B') {
								goto l722
							}
							position++
						}
					l725:
						{
							position727, tokenIndex727 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l728
							}
							position++
							goto l727
						l728:
							position, tokenIndex = position727, tokenIndex727
							if buffer[position] != rune('O') {
								goto l722
							}
							position++
						}
					l727:
						{
							position729, tokenIndex729 := position, tokenIndex
							if buffer[position] != rune('l') {
								goto l730
							}
							position++
							goto l729
						l730:
							position, tokenIndex = position729, tokenIndex729
							if buffer[position] != rune('L') {
								goto l722
							}
							position++
						}
					l729:
						{
							position731, tokenIndex731 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l732
							}
							position++
							goto l731
						l732:
							position, tokenIndex = position731, tokenIndex731
							if buffer[position] != rune('D') {
								goto l722
							}
							position++
						}
					l731:
						if buffer[position] != rune(':') {
							goto l722
						}
						position++
					}
				l723:
					goto l720
				l722:
					position, tokenIndex = position722, tokenIndex722
				}
				{
					position733, tokenIndex733 := position, tokenIndex
					if !_rules[ruleAuthorDashInitials]() {
						goto l734
					}
					goto l733
				l734:
					position, tokenIndex = position733, tokenIndex733
					if !_rules[ruleAuthorWord1]() {
						goto l735
					}
					goto l733
				l735:
					position, tokenIndex = position733, tokenIndex733
					if !_rules[ruleAuthorWord2]() {
						goto l736
					}
					goto l733
				l736:
					position, tokenIndex = position733, tokenIndex733
					if !_rules[ruleAuthorWord3]() {
						goto l737
					}
					goto l733
				l737:
					position, tokenIndex = position733, tokenIndex733
					if !_rules[ruleAuthorWord4]() {
						goto l738
					}
					goto l733
				l738:
					position, tokenIndex = position733, tokenIndex733
					if !_rules[ruleAuthorPrefix]() {
						goto l720
					}
				}
			l733:
				add(ruleAuthorWord, position721)
			}
			return true
		l720:
			position, tokenIndex = position720, tokenIndex720
			return false
		},
		/* 100 AuthorEtAl <- <(('a' 'r' 'g' '.') / ('e' 't' ' ' 'a' 'l' '.' '{' '?' '}') / ((('e' 't') / '&') (' ' 'a' 'l') '.'?))> */
		func() bool {
			position739, tokenIndex739 := position, tokenIndex
			{
				position740 := position
				{
					position741, tokenIndex741 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l742
					}
					position++
					if buffer[position] != rune('r') {
						goto l742
					}
					position++
					if buffer[position] != rune('g') {
						goto l742
					}
					position++
					if buffer[position] != rune('.') {
						goto l742
					}
					position++
					goto l741
				l742:
					position, tokenIndex = position741, tokenIndex741
					if buffer[position] != rune('e') {
						goto l743
					}
					position++
					if buffer[position] != rune('t') {
						goto l743
					}
					position++
					if buffer[position] != rune(' ') {
						goto l743
					}
					position++
					if buffer[position] != rune('a') {
						goto l743
					}
					position++
					if buffer[position] != rune('l') {
						goto l743
					}
					position++
					if buffer[position] != rune('.') {
						goto l743
					}
					position++
					if buffer[position] != rune('{') {
						goto l743
					}
					position++
					if buffer[position] != rune('?') {
						goto l743
					}
					position++
					if buffer[position] != rune('}') {
						goto l743
					}
					position++
					goto l741
				l743:
					position, tokenIndex = position741, tokenIndex741
					{
						position744, tokenIndex744 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l745
						}
						position++
						if buffer[position] != rune('t') {
							goto l745
						}
						position++
						goto l744
					l745:
						position, tokenIndex = position744, tokenIndex744
						if buffer[position] != rune('&') {
							goto l739
						}
						position++
					}
				l744:
					if buffer[position] != rune(' ') {
						goto l739
					}
					position++
					if buffer[position] != rune('a') {
						goto l739
					}
					position++
					if buffer[position] != rune('l') {
						goto l739
					}
					position++
					{
						position746, tokenIndex746 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l746
						}
						position++
						goto l747
					l746:
						position, tokenIndex = position746, tokenIndex746
					}
				l747:
				}
			l741:
				add(ruleAuthorEtAl, position740)
			}
			return true
		l739:
			position, tokenIndex = position739, tokenIndex739
			return false
		},
		/* 101 AuthorWord1 <- <(('d' 'u' 'P' 'o' 'n' 't') / ('d' 'e' 'g' 'l' 'i'))> */
		func() bool {
			position748, tokenIndex748 := position, tokenIndex
			{
				position749 := position
				{
					position750, tokenIndex750 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l751
					}
					position++
					if buffer[position] != rune('u') {
						goto l751
					}
					position++
					if buffer[position] != rune('P') {
						goto l751
					}
					position++
					if buffer[position] != rune('o') {
						goto l751
					}
					position++
					if buffer[position] != rune('n') {
						goto l751
					}
					position++
					if buffer[position] != rune('t') {
						goto l751
					}
					position++
					goto l750
				l751:
					position, tokenIndex = position750, tokenIndex750
					if buffer[position] != rune('d') {
						goto l748
					}
					position++
					if buffer[position] != rune('e') {
						goto l748
					}
					position++
					if buffer[position] != rune('g') {
						goto l748
					}
					position++
					if buffer[position] != rune('l') {
						goto l748
					}
					position++
					if buffer[position] != rune('i') {
						goto l748
					}
					position++
				}
			l750:
				add(ruleAuthorWord1, position749)
			}
			return true
		l748:
			position, tokenIndex = position748, tokenIndex748
			return false
		},
		/* 102 AuthorWord2 <- <((AuthorWord3 / AuthorWord4) Dash (AuthorWordSoft / AuthorInitial))> */
		func() bool {
			position752, tokenIndex752 := position, tokenIndex
			{
				position753 := position
				{
					position754, tokenIndex754 := position, tokenIndex
					if !_rules[ruleAuthorWord3]() {
						goto l755
					}
					goto l754
				l755:
					position, tokenIndex = position754, tokenIndex754
					if !_rules[ruleAuthorWord4]() {
						goto l752
					}
				}
			l754:
				if !_rules[ruleDash]() {
					goto l752
				}
				{
					position756, tokenIndex756 := position, tokenIndex
					if !_rules[ruleAuthorWordSoft]() {
						goto l757
					}
					goto l756
				l757:
					position, tokenIndex = position756, tokenIndex756
					if !_rules[ruleAuthorInitial]() {
						goto l752
					}
				}
			l756:
				add(ruleAuthorWord2, position753)
			}
			return true
		l752:
			position, tokenIndex = position752, tokenIndex752
			return false
		},
		/* 103 AuthorWord3 <- <(AuthorPrefixGlued2 (CapAuthorWord / AuthorLowerChar+) '.'?)> */
		func() bool {
			position758, tokenIndex758 := position, tokenIndex
			{
				position759 := position
				if !_rules[ruleAuthorPrefixGlued2]() {
					goto l758
				}
				{
					position760, tokenIndex760 := position, tokenIndex
					if !_rules[ruleCapAuthorWord]() {
						goto l761
					}
					goto l760
				l761:
					position, tokenIndex = position760, tokenIndex760
					if !_rules[ruleAuthorLowerChar]() {
						goto l758
					}
				l762:
					{
						position763, tokenIndex763 := position, tokenIndex
						if !_rules[ruleAuthorLowerChar]() {
							goto l763
						}
						goto l762
					l763:
						position, tokenIndex = position763, tokenIndex763
					}
				}
			l760:
				{
					position764, tokenIndex764 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l764
					}
					position++
					goto l765
				l764:
					position, tokenIndex = position764, tokenIndex764
				}
			l765:
				add(ruleAuthorWord3, position759)
			}
			return true
		l758:
			position, tokenIndex = position758, tokenIndex758
			return false
		},
		/* 104 AuthorWord4 <- <(AuthorPrefixGlued1? (AllCapsAuthorWord / CapAuthorWord) '.'?)> */
		func() bool {
			position766, tokenIndex766 := position, tokenIndex
			{
				position767 := position
				{
					position768, tokenIndex768 := position, tokenIndex
					if !_rules[ruleAuthorPrefixGlued1]() {
						goto l768
					}
					goto l769
				l768:
					position, tokenIndex = position768, tokenIndex768
				}
			l769:
				{
					position770, tokenIndex770 := position, tokenIndex
					if !_rules[ruleAllCapsAuthorWord]() {
						goto l771
					}
					goto l770
				l771:
					position, tokenIndex = position770, tokenIndex770
					if !_rules[ruleCapAuthorWord]() {
						goto l766
					}
				}
			l770:
				{
					position772, tokenIndex772 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l772
					}
					position++
					goto l773
				l772:
					position, tokenIndex = position772, tokenIndex772
				}
			l773:
				add(ruleAuthorWord4, position767)
			}
			return true
		l766:
			position, tokenIndex = position766, tokenIndex766
			return false
		},
		/* 105 AuthorDashInitials <- <(AuthorUpperChar '.'? Dash AuthorUpperChar '.'?)> */
		func() bool {
			position774, tokenIndex774 := position, tokenIndex
			{
				position775 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l774
				}
				{
					position776, tokenIndex776 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l776
					}
					position++
					goto l777
				l776:
					position, tokenIndex = position776, tokenIndex776
				}
			l777:
				if !_rules[ruleDash]() {
					goto l774
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l774
				}
				{
					position778, tokenIndex778 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l778
					}
					position++
					goto l779
				l778:
					position, tokenIndex = position778, tokenIndex778
				}
			l779:
				add(ruleAuthorDashInitials, position775)
			}
			return true
		l774:
			position, tokenIndex = position774, tokenIndex774
			return false
		},
		/* 106 AuthorInitial <- <(AuthorUpperChar '.'?)> */
		func() bool {
			position780, tokenIndex780 := position, tokenIndex
			{
				position781 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l780
				}
				{
					position782, tokenIndex782 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l782
					}
					position++
					goto l783
				l782:
					position, tokenIndex = position782, tokenIndex782
				}
			l783:
				add(ruleAuthorInitial, position781)
			}
			return true
		l780:
			position, tokenIndex = position780, tokenIndex780
			return false
		},
		/* 107 AuthorWordSoft <- <(((AuthorUpperChar (AuthorUpperChar+ / AuthorLowerChar+)) / AuthorLowerChar+) '.'?)> */
		func() bool {
			position784, tokenIndex784 := position, tokenIndex
			{
				position785 := position
				{
					position786, tokenIndex786 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l787
					}
					{
						position788, tokenIndex788 := position, tokenIndex
						if !_rules[ruleAuthorUpperChar]() {
							goto l789
						}
					l790:
						{
							position791, tokenIndex791 := position, tokenIndex
							if !_rules[ruleAuthorUpperChar]() {
								goto l791
							}
							goto l790
						l791:
							position, tokenIndex = position791, tokenIndex791
						}
						goto l788
					l789:
						position, tokenIndex = position788, tokenIndex788
						if !_rules[ruleAuthorLowerChar]() {
							goto l787
						}
					l792:
						{
							position793, tokenIndex793 := position, tokenIndex
							if !_rules[ruleAuthorLowerChar]() {
								goto l793
							}
							goto l792
						l793:
							position, tokenIndex = position793, tokenIndex793
						}
					}
				l788:
					goto l786
				l787:
					position, tokenIndex = position786, tokenIndex786
					if !_rules[ruleAuthorLowerChar]() {
						goto l784
					}
				l794:
					{
						position795, tokenIndex795 := position, tokenIndex
						if !_rules[ruleAuthorLowerChar]() {
							goto l795
						}
						goto l794
					l795:
						position, tokenIndex = position795, tokenIndex795
					}
				}
			l786:
				{
					position796, tokenIndex796 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l796
					}
					position++
					goto l797
				l796:
					position, tokenIndex = position796, tokenIndex796
				}
			l797:
				add(ruleAuthorWordSoft, position785)
			}
			return true
		l784:
			position, tokenIndex = position784, tokenIndex784
			return false
		},
		/* 108 CapAuthorWord <- <(AuthorUpperChar AuthorLowerChar*)> */
		func() bool {
			position798, tokenIndex798 := position, tokenIndex
			{
				position799 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l798
				}
			l800:
				{
					position801, tokenIndex801 := position, tokenIndex
					if !_rules[ruleAuthorLowerChar]() {
						goto l801
					}
					goto l800
				l801:
					position, tokenIndex = position801, tokenIndex801
				}
				add(ruleCapAuthorWord, position799)
			}
			return true
		l798:
			position, tokenIndex = position798, tokenIndex798
			return false
		},
		/* 109 AllCapsAuthorWord <- <(AuthorUpperChar AuthorUpperChar+)> */
		func() bool {
			position802, tokenIndex802 := position, tokenIndex
			{
				position803 := position
				if !_rules[ruleAuthorUpperChar]() {
					goto l802
				}
				if !_rules[ruleAuthorUpperChar]() {
					goto l802
				}
			l804:
				{
					position805, tokenIndex805 := position, tokenIndex
					if !_rules[ruleAuthorUpperChar]() {
						goto l805
					}
					goto l804
				l805:
					position, tokenIndex = position805, tokenIndex805
				}
				add(ruleAllCapsAuthorWord, position803)
			}
			return true
		l802:
			position, tokenIndex = position802, tokenIndex802
			return false
		},
		/* 110 Filius <- <(FiliusF / ('f' 'i' 'l' '.') / ('f' 'i' 'l' 'i' 'u' 's'))> */
		func() bool {
			position806, tokenIndex806 := position, tokenIndex
			{
				position807 := position
				{
					position808, tokenIndex808 := position, tokenIndex
					if !_rules[ruleFiliusF]() {
						goto l809
					}
					goto l808
				l809:
					position, tokenIndex = position808, tokenIndex808
					if buffer[position] != rune('f') {
						goto l810
					}
					position++
					if buffer[position] != rune('i') {
						goto l810
					}
					position++
					if buffer[position] != rune('l') {
						goto l810
					}
					position++
					if buffer[position] != rune('.') {
						goto l810
					}
					position++
					goto l808
				l810:
					position, tokenIndex = position808, tokenIndex808
					if buffer[position] != rune('f') {
						goto l806
					}
					position++
					if buffer[position] != rune('i') {
						goto l806
					}
					position++
					if buffer[position] != rune('l') {
						goto l806
					}
					position++
					if buffer[position] != rune('i') {
						goto l806
					}
					position++
					if buffer[position] != rune('u') {
						goto l806
					}
					position++
					if buffer[position] != rune('s') {
						goto l806
					}
					position++
				}
			l808:
				add(ruleFilius, position807)
			}
			return true
		l806:
			position, tokenIndex = position806, tokenIndex806
			return false
		},
		/* 111 FiliusF <- <('f' '.' !(_ Word))> */
		func() bool {
			position811, tokenIndex811 := position, tokenIndex
			{
				position812 := position
				if buffer[position] != rune('f') {
					goto l811
				}
				position++
				if buffer[position] != rune('.') {
					goto l811
				}
				position++
				{
					position813, tokenIndex813 := position, tokenIndex
					if !_rules[rule_]() {
						goto l813
					}
					if !_rules[ruleWord]() {
						goto l813
					}
					goto l811
				l813:
					position, tokenIndex = position813, tokenIndex813
				}
				add(ruleFiliusF, position812)
			}
			return true
		l811:
			position, tokenIndex = position811, tokenIndex811
			return false
		},
		/* 112 FiliusFNoSpace <- <('f' '.')> */
		func() bool {
			position814, tokenIndex814 := position, tokenIndex
			{
				position815 := position
				if buffer[position] != rune('f') {
					goto l814
				}
				position++
				if buffer[position] != rune('.') {
					goto l814
				}
				position++
				add(ruleFiliusFNoSpace, position815)
			}
			return true
		l814:
			position, tokenIndex = position814, tokenIndex814
			return false
		},
		/* 113 AuthorSuffix <- <(('b' 'i' 's') / ('t' 'e' 'r'))> */
		func() bool {
			position816, tokenIndex816 := position, tokenIndex
			{
				position817 := position
				{
					position818, tokenIndex818 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l819
					}
					position++
					if buffer[position] != rune('i') {
						goto l819
					}
					position++
					if buffer[position] != rune('s') {
						goto l819
					}
					position++
					goto l818
				l819:
					position, tokenIndex = position818, tokenIndex818
					if buffer[position] != rune('t') {
						goto l816
					}
					position++
					if buffer[position] != rune('e') {
						goto l816
					}
					position++
					if buffer[position] != rune('r') {
						goto l816
					}
					position++
				}
			l818:
				add(ruleAuthorSuffix, position817)
			}
			return true
		l816:
			position, tokenIndex = position816, tokenIndex816
			return false
		},
		/* 114 AuthorPrefixGlued1 <- <(('d' / 'O' / 'L' / 'M') Apostrophe)> */
		func() bool {
			position820, tokenIndex820 := position, tokenIndex
			{
				position821 := position
				{
					position822, tokenIndex822 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l823
					}
					position++
					goto l822
				l823:
					position, tokenIndex = position822, tokenIndex822
					if buffer[position] != rune('O') {
						goto l824
					}
					position++
					goto l822
				l824:
					position, tokenIndex = position822, tokenIndex822
					if buffer[position] != rune('L') {
						goto l825
					}
					position++
					goto l822
				l825:
					position, tokenIndex = position822, tokenIndex822
					if buffer[position] != rune('M') {
						goto l820
					}
					position++
				}
			l822:
				if !_rules[ruleApostrophe]() {
					goto l820
				}
				add(ruleAuthorPrefixGlued1, position821)
			}
			return true
		l820:
			position, tokenIndex = position820, tokenIndex820
			return false
		},
		/* 115 AuthorPrefixGlued2 <- <((('M' 'c') / ('M' 'a' 'c')) Apostrophe?)> */
		func() bool {
			position826, tokenIndex826 := position, tokenIndex
			{
				position827 := position
				{
					position828, tokenIndex828 := position, tokenIndex
					if buffer[position] != rune('M') {
						goto l829
					}
					position++
					if buffer[position] != rune('c') {
						goto l829
					}
					position++
					goto l828
				l829:
					position, tokenIndex = position828, tokenIndex828
					if buffer[position] != rune('M') {
						goto l826
					}
					position++
					if buffer[position] != rune('a') {
						goto l826
					}
					position++
					if buffer[position] != rune('c') {
						goto l826
					}
					position++
				}
			l828:
				{
					position830, tokenIndex830 := position, tokenIndex
					if !_rules[ruleApostrophe]() {
						goto l830
					}
					goto l831
				l830:
					position, tokenIndex = position830, tokenIndex830
				}
			l831:
				add(ruleAuthorPrefixGlued2, position827)
			}
			return true
		l826:
			position, tokenIndex = position826, tokenIndex826
			return false
		},
		/* 116 AuthorPrefix <- <(AuthorPrefix1 / AuthorPrefix2)> */
		func() bool {
			position832, tokenIndex832 := position, tokenIndex
			{
				position833 := position
				{
					position834, tokenIndex834 := position, tokenIndex
					if !_rules[ruleAuthorPrefix1]() {
						goto l835
					}
					goto l834
				l835:
					position, tokenIndex = position834, tokenIndex834
					if !_rules[ruleAuthorPrefix2]() {
						goto l832
					}
				}
			l834:
				add(ruleAuthorPrefix, position833)
			}
			return true
		l832:
			position, tokenIndex = position832, tokenIndex832
			return false
		},
		/* 117 AuthorPrefix2 <- <(('v' '.' (_? ('d' '.'))?) / (Apostrophe 't'))> */
		func() bool {
			position836, tokenIndex836 := position, tokenIndex
			{
				position837 := position
				{
					position838, tokenIndex838 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l839
					}
					position++
					if buffer[position] != rune('.') {
						goto l839
					}
					position++
					{
						position840, tokenIndex840 := position, tokenIndex
						{
							position842, tokenIndex842 := position, tokenIndex
							if !_rules[rule_]() {
								goto l842
							}
							goto l843
						l842:
							position, tokenIndex = position842, tokenIndex842
						}
					l843:
						if buffer[position] != rune('d') {
							goto l840
						}
						position++
						if buffer[position] != rune('.') {
							goto l840
						}
						position++
						goto l841
					l840:
						position, tokenIndex = position840, tokenIndex840
					}
				l841:
					goto l838
				l839:
					position, tokenIndex = position838, tokenIndex838
					if !_rules[ruleApostrophe]() {
						goto l836
					}
					if buffer[position] != rune('t') {
						goto l836
					}
					position++
				}
			l838:
				add(ruleAuthorPrefix2, position837)
			}
			return true
		l836:
			position, tokenIndex = position836, tokenIndex836
			return false
		},
		/* 118 AuthorPrefix1 <- <((('a' 'b') / ('a' 'f') / ('b' 'i' 's') / ('d' 'a') / ('d' 'e' 'r') / ('d' 'e' 's') / ('d' 'e' 'n') / ('d' 'e' 'l' 'l' 'a') / ('d' 'e' 'l' 'a') / ('d' 'e' 'l' 'l' 'e') / ('d' 'e' 'l') / ('d' 'e' ' ' 'l' 'o' 's') / ('d' 'e') / ('d' 'i') / ('d' 'o' 's') / ('d' 'u') / ('d' 'o') / ('e' 'l') / ('l' 'a') / ('l' 'e') / ('t' 'e' 'n') / ('t' 'e' 'r') / ('v' 'a' 'n') / ('v' 'e' 'r') / ('d' Apostrophe) / ('i' 'n' Apostrophe 't') / ('z' 'u' 'r') / ('z' 'u') / ('v' 'o' 'n' (_ (('d' '.') / ('d' 'e' 'm')))?) / ('v' (_ 'd')?)) &_)> */
		func() bool {
			position844, tokenIndex844 := position, tokenIndex
			{
				position845 := position
				{
					position846, tokenIndex846 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l847
					}
					position++
					if buffer[position] != rune('b') {
						goto l847
					}
					position++
					goto l846
				l847:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('a') {
						goto l848
					}
					position++
					if buffer[position] != rune('f') {
						goto l848
					}
					position++
					goto l846
				l848:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('b') {
						goto l849
					}
					position++
					if buffer[position] != rune('i') {
						goto l849
					}
					position++
					if buffer[position] != rune('s') {
						goto l849
					}
					position++
					goto l846
				l849:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('d') {
						goto l850
					}
					position++
					if buffer[position] != rune('a') {
						goto l850
					}
					position++
					goto l846
				l850:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('d') {
						goto l851
					}
					position++
					if buffer[position] != rune('e') {
						goto l851
					}
					position++
					if buffer[position] != rune('r') {
						goto l851
					}
					position++
					goto l846
				l851:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('d') {
						goto l852
					}
					position++
					if buffer[position] != rune('e') {
						goto l852
					}
					position++
					if buffer[position] != rune('s') {
						goto l852
					}
					position++
					goto l846
				l852:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('d') {
						goto l853
					}
					position++
					if buffer[position] != rune('e') {
						goto l853
					}
					position++
					if buffer[position] != rune('n') {
						goto l853
					}
					position++
					goto l846
				l853:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('d') {
						goto l854
					}
					position++
					if buffer[position] != rune('e') {
						goto l854
					}
					position++
					if buffer[position] != rune('l') {
						goto l854
					}
					position++
					if buffer[position] != rune('l') {
						goto l854
					}
					position++
					if buffer[position] != rune('a') {
						goto l854
					}
					position++
					goto l846
				l854:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('d') {
						goto l855
					}
					position++
					if buffer[position] != rune('e') {
						goto l855
					}
					position++
					if buffer[position] != rune('l') {
						goto l855
					}
					position++
					if buffer[position] != rune('a') {
						goto l855
					}
					position++
					goto l846
				l855:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('d') {
						goto l856
					}
					position++
					if buffer[position] != rune('e') {
						goto l856
					}
					position++
					if buffer[position] != rune('l') {
						goto l856
					}
					position++
					if buffer[position] != rune('l') {
						goto l856
					}
					position++
					if buffer[position] != rune('e') {
						goto l856
					}
					position++
					goto l846
				l856:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('d') {
						goto l857
					}
					position++
					if buffer[position] != rune('e') {
						goto l857
					}
					position++
					if buffer[position] != rune('l') {
						goto l857
					}
					position++
					goto l846
				l857:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('d') {
						goto l858
					}
					position++
					if buffer[position] != rune('e') {
						goto l858
					}
					position++
					if buffer[position] != rune(' ') {
						goto l858
					}
					position++
					if buffer[position] != rune('l') {
						goto l858
					}
					position++
					if buffer[position] != rune('o') {
						goto l858
					}
					position++
					if buffer[position] != rune('s') {
						goto l858
					}
					position++
					goto l846
				l858:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('d') {
						goto l859
					}
					position++
					if buffer[position] != rune('e') {
						goto l859
					}
					position++
					goto l846
				l859:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('d') {
						goto l860
					}
					position++
					if buffer[position] != rune('i') {
						goto l860
					}
					position++
					goto l846
				l860:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('d') {
						goto l861
					}
					position++
					if buffer[position] != rune('o') {
						goto l861
					}
					position++
					if buffer[position] != rune('s') {
						goto l861
					}
					position++
					goto l846
				l861:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('d') {
						goto l862
					}
					position++
					if buffer[position] != rune('u') {
						goto l862
					}
					position++
					goto l846
				l862:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('d') {
						goto l863
					}
					position++
					if buffer[position] != rune('o') {
						goto l863
					}
					position++
					goto l846
				l863:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('e') {
						goto l864
					}
					position++
					if buffer[position] != rune('l') {
						goto l864
					}
					position++
					goto l846
				l864:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('l') {
						goto l865
					}
					position++
					if buffer[position] != rune('a') {
						goto l865
					}
					position++
					goto l846
				l865:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('l') {
						goto l866
					}
					position++
					if buffer[position] != rune('e') {
						goto l866
					}
					position++
					goto l846
				l866:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('t') {
						goto l867
					}
					position++
					if buffer[position] != rune('e') {
						goto l867
					}
					position++
					if buffer[position] != rune('n') {
						goto l867
					}
					position++
					goto l846
				l867:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('t') {
						goto l868
					}
					position++
					if buffer[position] != rune('e') {
						goto l868
					}
					position++
					if buffer[position] != rune('r') {
						goto l868
					}
					position++
					goto l846
				l868:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('v') {
						goto l869
					}
					position++
					if buffer[position] != rune('a') {
						goto l869
					}
					position++
					if buffer[position] != rune('n') {
						goto l869
					}
					position++
					goto l846
				l869:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('v') {
						goto l870
					}
					position++
					if buffer[position] != rune('e') {
						goto l870
					}
					position++
					if buffer[position] != rune('r') {
						goto l870
					}
					position++
					goto l846
				l870:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('d') {
						goto l871
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l871
					}
					goto l846
				l871:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('i') {
						goto l872
					}
					position++
					if buffer[position] != rune('n') {
						goto l872
					}
					position++
					if !_rules[ruleApostrophe]() {
						goto l872
					}
					if buffer[position] != rune('t') {
						goto l872
					}
					position++
					goto l846
				l872:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('z') {
						goto l873
					}
					position++
					if buffer[position] != rune('u') {
						goto l873
					}
					position++
					if buffer[position] != rune('r') {
						goto l873
					}
					position++
					goto l846
				l873:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('z') {
						goto l874
					}
					position++
					if buffer[position] != rune('u') {
						goto l874
					}
					position++
					goto l846
				l874:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('v') {
						goto l875
					}
					position++
					if buffer[position] != rune('o') {
						goto l875
					}
					position++
					if buffer[position] != rune('n') {
						goto l875
					}
					position++
					{
						position876, tokenIndex876 := position, tokenIndex
						if !_rules[rule_]() {
							goto l876
						}
						{
							position878, tokenIndex878 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l879
							}
							position++
							if buffer[position] != rune('.') {
								goto l879
							}
							position++
							goto l878
						l879:
							position, tokenIndex = position878, tokenIndex878
							if buffer[position] != rune('d') {
								goto l876
							}
							position++
							if buffer[position] != rune('e') {
								goto l876
							}
							position++
							if buffer[position] != rune('m') {
								goto l876
							}
							position++
						}
					l878:
						goto l877
					l876:
						position, tokenIndex = position876, tokenIndex876
					}
				l877:
					goto l846
				l875:
					position, tokenIndex = position846, tokenIndex846
					if buffer[position] != rune('v') {
						goto l844
					}
					position++
					{
						position880, tokenIndex880 := position, tokenIndex
						if !_rules[rule_]() {
							goto l880
						}
						if buffer[position] != rune('d') {
							goto l880
						}
						position++
						goto l881
					l880:
						position, tokenIndex = position880, tokenIndex880
					}
				l881:
				}
			l846:
				{
					position882, tokenIndex882 := position, tokenIndex
					if !_rules[rule_]() {
						goto l844
					}
					position, tokenIndex = position882, tokenIndex882
				}
				add(ruleAuthorPrefix1, position845)
			}
			return true
		l844:
			position, tokenIndex = position844, tokenIndex844
			return false
		},
		/* 119 AuthorUpperChar <- <(UpperASCII / MiscodedChar / ('À' / 'Á' / 'Â' / 'Ã' / 'Ä' / 'Å' / 'Æ' / 'Ç' / 'È' / 'É' / 'Ê' / 'Ë' / 'Ì' / 'Í' / 'Î' / 'Ï' / 'Ð' / 'Ñ' / 'Ò' / 'Ó' / 'Ô' / 'Õ' / 'Ö' / 'Ø' / 'Ù' / 'Ú' / 'Û' / 'Ü' / 'Ý' / 'Ć' / 'Č' / 'Ď' / 'İ' / 'Ķ' / 'Ĺ' / 'ĺ' / 'Ľ' / 'ľ' / 'Ł' / 'ł' / 'Ņ' / 'Ō' / 'Ő' / 'Œ' / 'Ř' / 'Ś' / 'Ŝ' / 'Ş' / 'Š' / 'Ÿ' / 'Ź' / 'Ż' / 'Ž' / 'ƒ' / 'Ǿ' / 'Ș' / 'Ț'))> */
		func() bool {
			position883, tokenIndex883 := position, tokenIndex
			{
				position884 := position
				{
					position885, tokenIndex885 := position, tokenIndex
					if !_rules[ruleUpperASCII]() {
						goto l886
					}
					goto l885
				l886:
					position, tokenIndex = position885, tokenIndex885
					if !_rules[ruleMiscodedChar]() {
						goto l887
					}
					goto l885
				l887:
					position, tokenIndex = position885, tokenIndex885
					{
						position888, tokenIndex888 := position, tokenIndex
						if buffer[position] != rune('À') {
							goto l889
						}
						position++
						goto l888
					l889:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Á') {
							goto l890
						}
						position++
						goto l888
					l890:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Â') {
							goto l891
						}
						position++
						goto l888
					l891:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ã') {
							goto l892
						}
						position++
						goto l888
					l892:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ä') {
							goto l893
						}
						position++
						goto l888
					l893:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Å') {
							goto l894
						}
						position++
						goto l888
					l894:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Æ') {
							goto l895
						}
						position++
						goto l888
					l895:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ç') {
							goto l896
						}
						position++
						goto l888
					l896:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('È') {
							goto l897
						}
						position++
						goto l888
					l897:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('É') {
							goto l898
						}
						position++
						goto l888
					l898:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ê') {
							goto l899
						}
						position++
						goto l888
					l899:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ë') {
							goto l900
						}
						position++
						goto l888
					l900:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ì') {
							goto l901
						}
						position++
						goto l888
					l901:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Í') {
							goto l902
						}
						position++
						goto l888
					l902:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Î') {
							goto l903
						}
						position++
						goto l888
					l903:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ï') {
							goto l904
						}
						position++
						goto l888
					l904:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ð') {
							goto l905
						}
						position++
						goto l888
					l905:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ñ') {
							goto l906
						}
						position++
						goto l888
					l906:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ò') {
							goto l907
						}
						position++
						goto l888
					l907:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ó') {
							goto l908
						}
						position++
						goto l888
					l908:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ô') {
							goto l909
						}
						position++
						goto l888
					l909:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Õ') {
							goto l910
						}
						position++
						goto l888
					l910:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ö') {
							goto l911
						}
						position++
						goto l888
					l911:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ø') {
							goto l912
						}
						position++
						goto l888
					l912:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ù') {
							goto l913
						}
						position++
						goto l888
					l913:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ú') {
							goto l914
						}
						position++
						goto l888
					l914:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Û') {
							goto l915
						}
						position++
						goto l888
					l915:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ü') {
							goto l916
						}
						position++
						goto l888
					l916:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ý') {
							goto l917
						}
						position++
						goto l888
					l917:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ć') {
							goto l918
						}
						position++
						goto l888
					l918:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Č') {
							goto l919
						}
						position++
						goto l888
					l919:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ď') {
							goto l920
						}
						position++
						goto l888
					l920:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('İ') {
							goto l921
						}
						position++
						goto l888
					l921:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ķ') {
							goto l922
						}
						position++
						goto l888
					l922:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ĺ') {
							goto l923
						}
						position++
						goto l888
					l923:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('ĺ') {
							goto l924
						}
						position++
						goto l888
					l924:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ľ') {
							goto l925
						}
						position++
						goto l888
					l925:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('ľ') {
							goto l926
						}
						position++
						goto l888
					l926:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ł') {
							goto l927
						}
						position++
						goto l888
					l927:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('ł') {
							goto l928
						}
						position++
						goto l888
					l928:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ņ') {
							goto l929
						}
						position++
						goto l888
					l929:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ō') {
							goto l930
						}
						position++
						goto l888
					l930:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ő') {
							goto l931
						}
						position++
						goto l888
					l931:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Œ') {
							goto l932
						}
						position++
						goto l888
					l932:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ř') {
							goto l933
						}
						position++
						goto l888
					l933:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ś') {
							goto l934
						}
						position++
						goto l888
					l934:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ŝ') {
							goto l935
						}
						position++
						goto l888
					l935:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ş') {
							goto l936
						}
						position++
						goto l888
					l936:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Š') {
							goto l937
						}
						position++
						goto l888
					l937:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ÿ') {
							goto l938
						}
						position++
						goto l888
					l938:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ź') {
							goto l939
						}
						position++
						goto l888
					l939:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ż') {
							goto l940
						}
						position++
						goto l888
					l940:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ž') {
							goto l941
						}
						position++
						goto l888
					l941:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('ƒ') {
							goto l942
						}
						position++
						goto l888
					l942:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ǿ') {
							goto l943
						}
						position++
						goto l888
					l943:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ș') {
							goto l944
						}
						position++
						goto l888
					l944:
						position, tokenIndex = position888, tokenIndex888
						if buffer[position] != rune('Ț') {
							goto l883
						}
						position++
					}
				l888:
				}
			l885:
				add(ruleAuthorUpperChar, position884)
			}
			return true
		l883:
			position, tokenIndex = position883, tokenIndex883
			return false
		},
		/* 120 AuthorLowerChar <- <(LowerASCII / MiscodedChar / Apostrophe / ('à' / 'á' / 'â' / 'ã' / 'ä' / 'å' / 'æ' / 'ç' / 'è' / 'é' / 'ê' / 'ë' / 'ì' / 'í' / 'î' / 'ï' / 'ð' / 'ñ' / 'ò' / 'ó' / 'ó' / 'ô' / 'õ' / 'ö' / 'ø' / 'ù' / 'ú' / 'û' / 'ü' / 'ý' / 'ÿ' / 'ā' / 'ă' / 'ą' / 'ć' / 'ĉ' / 'č' / 'ď' / 'đ' / 'ē' / 'ĕ' / 'ė' / 'ę' / 'ě' / 'ğ' / 'ī' / 'ĭ' / 'İ' / 'ı' / 'ĺ' / 'ľ' / 'ł' / 'ń' / 'ņ' / 'ň' / 'ŏ' / 'ő' / 'œ' / 'ŕ' / 'ř' / 'ś' / 'ş' / 'š' / 'ţ' / 'ť' / 'ũ' / 'ū' / 'ŭ' / 'ů' / 'ű' / 'ź' / 'ż' / 'ž' / 'ſ' / 'ǎ' / 'ǔ' / 'ǧ' / 'ș' / 'ț' / 'ȳ' / 'ß'))> */
		func() bool {
			position945, tokenIndex945 := position, tokenIndex
			{
				position946 := position
				{
					position947, tokenIndex947 := position, tokenIndex
					if !_rules[ruleLowerASCII]() {
						goto l948
					}
					goto l947
				l948:
					position, tokenIndex = position947, tokenIndex947
					if !_rules[ruleMiscodedChar]() {
						goto l949
					}
					goto l947
				l949:
					position, tokenIndex = position947, tokenIndex947
					if !_rules[ruleApostrophe]() {
						goto l950
					}
					goto l947
				l950:
					position, tokenIndex = position947, tokenIndex947
					{
						position951, tokenIndex951 := position, tokenIndex
						if buffer[position] != rune('à') {
							goto l952
						}
						position++
						goto l951
					l952:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('á') {
							goto l953
						}
						position++
						goto l951
					l953:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('â') {
							goto l954
						}
						position++
						goto l951
					l954:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ã') {
							goto l955
						}
						position++
						goto l951
					l955:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ä') {
							goto l956
						}
						position++
						goto l951
					l956:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('å') {
							goto l957
						}
						position++
						goto l951
					l957:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('æ') {
							goto l958
						}
						position++
						goto l951
					l958:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ç') {
							goto l959
						}
						position++
						goto l951
					l959:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('è') {
							goto l960
						}
						position++
						goto l951
					l960:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('é') {
							goto l961
						}
						position++
						goto l951
					l961:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ê') {
							goto l962
						}
						position++
						goto l951
					l962:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ë') {
							goto l963
						}
						position++
						goto l951
					l963:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ì') {
							goto l964
						}
						position++
						goto l951
					l964:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('í') {
							goto l965
						}
						position++
						goto l951
					l965:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('î') {
							goto l966
						}
						position++
						goto l951
					l966:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ï') {
							goto l967
						}
						position++
						goto l951
					l967:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ð') {
							goto l968
						}
						position++
						goto l951
					l968:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ñ') {
							goto l969
						}
						position++
						goto l951
					l969:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ò') {
							goto l970
						}
						position++
						goto l951
					l970:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ó') {
							goto l971
						}
						position++
						goto l951
					l971:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ó') {
							goto l972
						}
						position++
						goto l951
					l972:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ô') {
							goto l973
						}
						position++
						goto l951
					l973:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('õ') {
							goto l974
						}
						position++
						goto l951
					l974:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ö') {
							goto l975
						}
						position++
						goto l951
					l975:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ø') {
							goto l976
						}
						position++
						goto l951
					l976:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ù') {
							goto l977
						}
						position++
						goto l951
					l977:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ú') {
							goto l978
						}
						position++
						goto l951
					l978:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('û') {
							goto l979
						}
						position++
						goto l951
					l979:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ü') {
							goto l980
						}
						position++
						goto l951
					l980:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ý') {
							goto l981
						}
						position++
						goto l951
					l981:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ÿ') {
							goto l982
						}
						position++
						goto l951
					l982:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ā') {
							goto l983
						}
						position++
						goto l951
					l983:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ă') {
							goto l984
						}
						position++
						goto l951
					l984:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ą') {
							goto l985
						}
						position++
						goto l951
					l985:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ć') {
							goto l986
						}
						position++
						goto l951
					l986:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ĉ') {
							goto l987
						}
						position++
						goto l951
					l987:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('č') {
							goto l988
						}
						position++
						goto l951
					l988:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ď') {
							goto l989
						}
						position++
						goto l951
					l989:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('đ') {
							goto l990
						}
						position++
						goto l951
					l990:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ē') {
							goto l991
						}
						position++
						goto l951
					l991:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ĕ') {
							goto l992
						}
						position++
						goto l951
					l992:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ė') {
							goto l993
						}
						position++
						goto l951
					l993:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ę') {
							goto l994
						}
						position++
						goto l951
					l994:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ě') {
							goto l995
						}
						position++
						goto l951
					l995:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ğ') {
							goto l996
						}
						position++
						goto l951
					l996:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ī') {
							goto l997
						}
						position++
						goto l951
					l997:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ĭ') {
							goto l998
						}
						position++
						goto l951
					l998:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('İ') {
							goto l999
						}
						position++
						goto l951
					l999:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ı') {
							goto l1000
						}
						position++
						goto l951
					l1000:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ĺ') {
							goto l1001
						}
						position++
						goto l951
					l1001:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ľ') {
							goto l1002
						}
						position++
						goto l951
					l1002:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ł') {
							goto l1003
						}
						position++
						goto l951
					l1003:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ń') {
							goto l1004
						}
						position++
						goto l951
					l1004:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ņ') {
							goto l1005
						}
						position++
						goto l951
					l1005:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ň') {
							goto l1006
						}
						position++
						goto l951
					l1006:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ŏ') {
							goto l1007
						}
						position++
						goto l951
					l1007:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ő') {
							goto l1008
						}
						position++
						goto l951
					l1008:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('œ') {
							goto l1009
						}
						position++
						goto l951
					l1009:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ŕ') {
							goto l1010
						}
						position++
						goto l951
					l1010:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ř') {
							goto l1011
						}
						position++
						goto l951
					l1011:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ś') {
							goto l1012
						}
						position++
						goto l951
					l1012:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ş') {
							goto l1013
						}
						position++
						goto l951
					l1013:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('š') {
							goto l1014
						}
						position++
						goto l951
					l1014:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ţ') {
							goto l1015
						}
						position++
						goto l951
					l1015:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ť') {
							goto l1016
						}
						position++
						goto l951
					l1016:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ũ') {
							goto l1017
						}
						position++
						goto l951
					l1017:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ū') {
							goto l1018
						}
						position++
						goto l951
					l1018:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ŭ') {
							goto l1019
						}
						position++
						goto l951
					l1019:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ů') {
							goto l1020
						}
						position++
						goto l951
					l1020:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ű') {
							goto l1021
						}
						position++
						goto l951
					l1021:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ź') {
							goto l1022
						}
						position++
						goto l951
					l1022:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ż') {
							goto l1023
						}
						position++
						goto l951
					l1023:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ž') {
							goto l1024
						}
						position++
						goto l951
					l1024:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ſ') {
							goto l1025
						}
						position++
						goto l951
					l1025:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ǎ') {
							goto l1026
						}
						position++
						goto l951
					l1026:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ǔ') {
							goto l1027
						}
						position++
						goto l951
					l1027:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ǧ') {
							goto l1028
						}
						position++
						goto l951
					l1028:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ș') {
							goto l1029
						}
						position++
						goto l951
					l1029:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ț') {
							goto l1030
						}
						position++
						goto l951
					l1030:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ȳ') {
							goto l1031
						}
						position++
						goto l951
					l1031:
						position, tokenIndex = position951, tokenIndex951
						if buffer[position] != rune('ß') {
							goto l945
						}
						position++
					}
				l951:
				}
			l947:
				add(ruleAuthorLowerChar, position946)
			}
			return true
		l945:
			position, tokenIndex = position945, tokenIndex945
			return false
		},
		/* 121 Year <- <(YearRange / YearApprox / YearWithParens / YearWithPage / YearWithDot / YearWithChar / YearNum)> */
		func() bool {
			position1032, tokenIndex1032 := position, tokenIndex
			{
				position1033 := position
				{
					position1034, tokenIndex1034 := position, tokenIndex
					if !_rules[ruleYearRange]() {
						goto l1035
					}
					goto l1034
				l1035:
					position, tokenIndex = position1034, tokenIndex1034
					if !_rules[ruleYearApprox]() {
						goto l1036
					}
					goto l1034
				l1036:
					position, tokenIndex = position1034, tokenIndex1034
					if !_rules[ruleYearWithParens]() {
						goto l1037
					}
					goto l1034
				l1037:
					position, tokenIndex = position1034, tokenIndex1034
					if !_rules[ruleYearWithPage]() {
						goto l1038
					}
					goto l1034
				l1038:
					position, tokenIndex = position1034, tokenIndex1034
					if !_rules[ruleYearWithDot]() {
						goto l1039
					}
					goto l1034
				l1039:
					position, tokenIndex = position1034, tokenIndex1034
					if !_rules[ruleYearWithChar]() {
						goto l1040
					}
					goto l1034
				l1040:
					position, tokenIndex = position1034, tokenIndex1034
					if !_rules[ruleYearNum]() {
						goto l1032
					}
				}
			l1034:
				add(ruleYear, position1033)
			}
			return true
		l1032:
			position, tokenIndex = position1032, tokenIndex1032
			return false
		},
		/* 122 YearRange <- <(YearNum (Dash / Slash) (Nums+ ('a' / 'b' / 'c' / 'd' / 'e' / 'f' / 'g' / 'h' / 'i' / 'j' / 'k' / 'l' / 'm' / 'n' / 'o' / 'p' / 'q' / 'r' / 's' / 't' / 'u' / 'v' / 'w' / 'x' / 'y' / 'z' / '?')*))> */
		func() bool {
			position1041, tokenIndex1041 := position, tokenIndex
			{
				position1042 := position
				if !_rules[ruleYearNum]() {
					goto l1041
				}
				{
					position1043, tokenIndex1043 := position, tokenIndex
					if !_rules[ruleDash]() {
						goto l1044
					}
					goto l1043
				l1044:
					position, tokenIndex = position1043, tokenIndex1043
					if !_rules[ruleSlash]() {
						goto l1041
					}
				}
			l1043:
				if !_rules[ruleNums]() {
					goto l1041
				}
			l1045:
				{
					position1046, tokenIndex1046 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1046
					}
					goto l1045
				l1046:
					position, tokenIndex = position1046, tokenIndex1046
				}
			l1047:
				{
					position1048, tokenIndex1048 := position, tokenIndex
					{
						position1049, tokenIndex1049 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l1050
						}
						position++
						goto l1049
					l1050:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('b') {
							goto l1051
						}
						position++
						goto l1049
					l1051:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('c') {
							goto l1052
						}
						position++
						goto l1049
					l1052:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('d') {
							goto l1053
						}
						position++
						goto l1049
					l1053:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('e') {
							goto l1054
						}
						position++
						goto l1049
					l1054:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('f') {
							goto l1055
						}
						position++
						goto l1049
					l1055:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('g') {
							goto l1056
						}
						position++
						goto l1049
					l1056:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('h') {
							goto l1057
						}
						position++
						goto l1049
					l1057:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('i') {
							goto l1058
						}
						position++
						goto l1049
					l1058:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('j') {
							goto l1059
						}
						position++
						goto l1049
					l1059:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('k') {
							goto l1060
						}
						position++
						goto l1049
					l1060:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('l') {
							goto l1061
						}
						position++
						goto l1049
					l1061:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('m') {
							goto l1062
						}
						position++
						goto l1049
					l1062:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('n') {
							goto l1063
						}
						position++
						goto l1049
					l1063:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('o') {
							goto l1064
						}
						position++
						goto l1049
					l1064:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('p') {
							goto l1065
						}
						position++
						goto l1049
					l1065:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('q') {
							goto l1066
						}
						position++
						goto l1049
					l1066:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('r') {
							goto l1067
						}
						position++
						goto l1049
					l1067:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('s') {
							goto l1068
						}
						position++
						goto l1049
					l1068:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('t') {
							goto l1069
						}
						position++
						goto l1049
					l1069:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('u') {
							goto l1070
						}
						position++
						goto l1049
					l1070:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('v') {
							goto l1071
						}
						position++
						goto l1049
					l1071:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('w') {
							goto l1072
						}
						position++
						goto l1049
					l1072:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('x') {
							goto l1073
						}
						position++
						goto l1049
					l1073:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('y') {
							goto l1074
						}
						position++
						goto l1049
					l1074:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('z') {
							goto l1075
						}
						position++
						goto l1049
					l1075:
						position, tokenIndex = position1049, tokenIndex1049
						if buffer[position] != rune('?') {
							goto l1048
						}
						position++
					}
				l1049:
					goto l1047
				l1048:
					position, tokenIndex = position1048, tokenIndex1048
				}
				add(ruleYearRange, position1042)
			}
			return true
		l1041:
			position, tokenIndex = position1041, tokenIndex1041
			return false
		},
		/* 123 YearWithDot <- <(YearNum '.')> */
		func() bool {
			position1076, tokenIndex1076 := position, tokenIndex
			{
				position1077 := position
				if !_rules[ruleYearNum]() {
					goto l1076
				}
				if buffer[position] != rune('.') {
					goto l1076
				}
				position++
				add(ruleYearWithDot, position1077)
			}
			return true
		l1076:
			position, tokenIndex = position1076, tokenIndex1076
			return false
		},
		/* 124 YearApprox <- <('[' _? YearNum _? ']')> */
		func() bool {
			position1078, tokenIndex1078 := position, tokenIndex
			{
				position1079 := position
				if buffer[position] != rune('[') {
					goto l1078
				}
				position++
				{
					position1080, tokenIndex1080 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1080
					}
					goto l1081
				l1080:
					position, tokenIndex = position1080, tokenIndex1080
				}
			l1081:
				if !_rules[ruleYearNum]() {
					goto l1078
				}
				{
					position1082, tokenIndex1082 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1082
					}
					goto l1083
				l1082:
					position, tokenIndex = position1082, tokenIndex1082
				}
			l1083:
				if buffer[position] != rune(']') {
					goto l1078
				}
				position++
				add(ruleYearApprox, position1079)
			}
			return true
		l1078:
			position, tokenIndex = position1078, tokenIndex1078
			return false
		},
		/* 125 YearWithPage <- <((YearWithChar / YearNum) _? ':' _? Nums+)> */
		func() bool {
			position1084, tokenIndex1084 := position, tokenIndex
			{
				position1085 := position
				{
					position1086, tokenIndex1086 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1087
					}
					goto l1086
				l1087:
					position, tokenIndex = position1086, tokenIndex1086
					if !_rules[ruleYearNum]() {
						goto l1084
					}
				}
			l1086:
				{
					position1088, tokenIndex1088 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1088
					}
					goto l1089
				l1088:
					position, tokenIndex = position1088, tokenIndex1088
				}
			l1089:
				if buffer[position] != rune(':') {
					goto l1084
				}
				position++
				{
					position1090, tokenIndex1090 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1090
					}
					goto l1091
				l1090:
					position, tokenIndex = position1090, tokenIndex1090
				}
			l1091:
				if !_rules[ruleNums]() {
					goto l1084
				}
			l1092:
				{
					position1093, tokenIndex1093 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1093
					}
					goto l1092
				l1093:
					position, tokenIndex = position1093, tokenIndex1093
				}
				add(ruleYearWithPage, position1085)
			}
			return true
		l1084:
			position, tokenIndex = position1084, tokenIndex1084
			return false
		},
		/* 126 YearWithParens <- <('(' (YearWithChar / YearNum) ')')> */
		func() bool {
			position1094, tokenIndex1094 := position, tokenIndex
			{
				position1095 := position
				if buffer[position] != rune('(') {
					goto l1094
				}
				position++
				{
					position1096, tokenIndex1096 := position, tokenIndex
					if !_rules[ruleYearWithChar]() {
						goto l1097
					}
					goto l1096
				l1097:
					position, tokenIndex = position1096, tokenIndex1096
					if !_rules[ruleYearNum]() {
						goto l1094
					}
				}
			l1096:
				if buffer[position] != rune(')') {
					goto l1094
				}
				position++
				add(ruleYearWithParens, position1095)
			}
			return true
		l1094:
			position, tokenIndex = position1094, tokenIndex1094
			return false
		},
		/* 127 YearWithChar <- <(YearNum LowerASCII)> */
		func() bool {
			position1098, tokenIndex1098 := position, tokenIndex
			{
				position1099 := position
				if !_rules[ruleYearNum]() {
					goto l1098
				}
				if !_rules[ruleLowerASCII]() {
					goto l1098
				}
				add(ruleYearWithChar, position1099)
			}
			return true
		l1098:
			position, tokenIndex = position1098, tokenIndex1098
			return false
		},
		/* 128 YearNum <- <(('1' / '2') ('0' / '7' / '8' / '9') Nums (Nums / '?') '?'*)> */
		func() bool {
			position1100, tokenIndex1100 := position, tokenIndex
			{
				position1101 := position
				{
					position1102, tokenIndex1102 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l1103
					}
					position++
					goto l1102
				l1103:
					position, tokenIndex = position1102, tokenIndex1102
					if buffer[position] != rune('2') {
						goto l1100
					}
					position++
				}
			l1102:
				{
					position1104, tokenIndex1104 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l1105
					}
					position++
					goto l1104
				l1105:
					position, tokenIndex = position1104, tokenIndex1104
					if buffer[position] != rune('7') {
						goto l1106
					}
					position++
					goto l1104
				l1106:
					position, tokenIndex = position1104, tokenIndex1104
					if buffer[position] != rune('8') {
						goto l1107
					}
					position++
					goto l1104
				l1107:
					position, tokenIndex = position1104, tokenIndex1104
					if buffer[position] != rune('9') {
						goto l1100
					}
					position++
				}
			l1104:
				if !_rules[ruleNums]() {
					goto l1100
				}
				{
					position1108, tokenIndex1108 := position, tokenIndex
					if !_rules[ruleNums]() {
						goto l1109
					}
					goto l1108
				l1109:
					position, tokenIndex = position1108, tokenIndex1108
					if buffer[position] != rune('?') {
						goto l1100
					}
					position++
				}
			l1108:
			l1110:
				{
					position1111, tokenIndex1111 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l1111
					}
					position++
					goto l1110
				l1111:
					position, tokenIndex = position1111, tokenIndex1111
				}
				add(ruleYearNum, position1101)
			}
			return true
		l1100:
			position, tokenIndex = position1100, tokenIndex1100
			return false
		},
		/* 129 NameUpperChar <- <(UpperChar / UpperCharExtended)> */
		func() bool {
			position1112, tokenIndex1112 := position, tokenIndex
			{
				position1113 := position
				{
					position1114, tokenIndex1114 := position, tokenIndex
					if !_rules[ruleUpperChar]() {
						goto l1115
					}
					goto l1114
				l1115:
					position, tokenIndex = position1114, tokenIndex1114
					if !_rules[ruleUpperCharExtended]() {
						goto l1112
					}
				}
			l1114:
				add(ruleNameUpperChar, position1113)
			}
			return true
		l1112:
			position, tokenIndex = position1112, tokenIndex1112
			return false
		},
		/* 130 UpperCharExtended <- <('Æ' / 'Œ' / 'Ö')> */
		func() bool {
			position1116, tokenIndex1116 := position, tokenIndex
			{
				position1117 := position
				{
					position1118, tokenIndex1118 := position, tokenIndex
					if buffer[position] != rune('Æ') {
						goto l1119
					}
					position++
					goto l1118
				l1119:
					position, tokenIndex = position1118, tokenIndex1118
					if buffer[position] != rune('Œ') {
						goto l1120
					}
					position++
					goto l1118
				l1120:
					position, tokenIndex = position1118, tokenIndex1118
					if buffer[position] != rune('Ö') {
						goto l1116
					}
					position++
				}
			l1118:
				add(ruleUpperCharExtended, position1117)
			}
			return true
		l1116:
			position, tokenIndex = position1116, tokenIndex1116
			return false
		},
		/* 131 UpperChar <- <UpperASCII> */
		func() bool {
			position1121, tokenIndex1121 := position, tokenIndex
			{
				position1122 := position
				if !_rules[ruleUpperASCII]() {
					goto l1121
				}
				add(ruleUpperChar, position1122)
			}
			return true
		l1121:
			position, tokenIndex = position1121, tokenIndex1121
			return false
		},
		/* 132 NameLowerChar <- <(LowerChar / LowerCharExtended / MiscodedChar)> */
		func() bool {
			position1123, tokenIndex1123 := position, tokenIndex
			{
				position1124 := position
				{
					position1125, tokenIndex1125 := position, tokenIndex
					if !_rules[ruleLowerChar]() {
						goto l1126
					}
					goto l1125
				l1126:
					position, tokenIndex = position1125, tokenIndex1125
					if !_rules[ruleLowerCharExtended]() {
						goto l1127
					}
					goto l1125
				l1127:
					position, tokenIndex = position1125, tokenIndex1125
					if !_rules[ruleMiscodedChar]() {
						goto l1123
					}
				}
			l1125:
				add(ruleNameLowerChar, position1124)
			}
			return true
		l1123:
			position, tokenIndex = position1123, tokenIndex1123
			return false
		},
		/* 133 MiscodedChar <- <'�'> */
		func() bool {
			position1128, tokenIndex1128 := position, tokenIndex
			{
				position1129 := position
				if buffer[position] != rune('�') {
					goto l1128
				}
				position++
				add(ruleMiscodedChar, position1129)
			}
			return true
		l1128:
			position, tokenIndex = position1128, tokenIndex1128
			return false
		},
		/* 134 LowerCharExtended <- <('æ' / 'œ' / 'à' / 'â' / 'å' / 'ã' / 'ä' / 'á' / 'ç' / 'č' / 'é' / 'è' / 'ë' / 'í' / 'ì' / 'ï' / 'ň' / 'ñ' / 'ñ' / 'ó' / 'ò' / 'ô' / 'ø' / 'õ' / 'ö' / 'ú' / 'û' / 'ù' / 'ü' / 'ŕ' / 'ř' / 'ŗ' / 'ſ' / 'š' / 'š' / 'ş' / 'ß' / 'ž')> */
		func() bool {
			position1130, tokenIndex1130 := position, tokenIndex
			{
				position1131 := position
				{
					position1132, tokenIndex1132 := position, tokenIndex
					if buffer[position] != rune('æ') {
						goto l1133
					}
					position++
					goto l1132
				l1133:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('œ') {
						goto l1134
					}
					position++
					goto l1132
				l1134:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('à') {
						goto l1135
					}
					position++
					goto l1132
				l1135:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('â') {
						goto l1136
					}
					position++
					goto l1132
				l1136:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('å') {
						goto l1137
					}
					position++
					goto l1132
				l1137:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ã') {
						goto l1138
					}
					position++
					goto l1132
				l1138:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ä') {
						goto l1139
					}
					position++
					goto l1132
				l1139:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('á') {
						goto l1140
					}
					position++
					goto l1132
				l1140:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ç') {
						goto l1141
					}
					position++
					goto l1132
				l1141:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('č') {
						goto l1142
					}
					position++
					goto l1132
				l1142:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('é') {
						goto l1143
					}
					position++
					goto l1132
				l1143:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('è') {
						goto l1144
					}
					position++
					goto l1132
				l1144:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ë') {
						goto l1145
					}
					position++
					goto l1132
				l1145:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('í') {
						goto l1146
					}
					position++
					goto l1132
				l1146:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ì') {
						goto l1147
					}
					position++
					goto l1132
				l1147:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ï') {
						goto l1148
					}
					position++
					goto l1132
				l1148:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ň') {
						goto l1149
					}
					position++
					goto l1132
				l1149:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ñ') {
						goto l1150
					}
					position++
					goto l1132
				l1150:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ñ') {
						goto l1151
					}
					position++
					goto l1132
				l1151:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ó') {
						goto l1152
					}
					position++
					goto l1132
				l1152:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ò') {
						goto l1153
					}
					position++
					goto l1132
				l1153:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ô') {
						goto l1154
					}
					position++
					goto l1132
				l1154:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ø') {
						goto l1155
					}
					position++
					goto l1132
				l1155:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('õ') {
						goto l1156
					}
					position++
					goto l1132
				l1156:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ö') {
						goto l1157
					}
					position++
					goto l1132
				l1157:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ú') {
						goto l1158
					}
					position++
					goto l1132
				l1158:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('û') {
						goto l1159
					}
					position++
					goto l1132
				l1159:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ù') {
						goto l1160
					}
					position++
					goto l1132
				l1160:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ü') {
						goto l1161
					}
					position++
					goto l1132
				l1161:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ŕ') {
						goto l1162
					}
					position++
					goto l1132
				l1162:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ř') {
						goto l1163
					}
					position++
					goto l1132
				l1163:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ŗ') {
						goto l1164
					}
					position++
					goto l1132
				l1164:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ſ') {
						goto l1165
					}
					position++
					goto l1132
				l1165:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('š') {
						goto l1166
					}
					position++
					goto l1132
				l1166:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('š') {
						goto l1167
					}
					position++
					goto l1132
				l1167:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ş') {
						goto l1168
					}
					position++
					goto l1132
				l1168:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ß') {
						goto l1169
					}
					position++
					goto l1132
				l1169:
					position, tokenIndex = position1132, tokenIndex1132
					if buffer[position] != rune('ž') {
						goto l1130
					}
					position++
				}
			l1132:
				add(ruleLowerCharExtended, position1131)
			}
			return true
		l1130:
			position, tokenIndex = position1130, tokenIndex1130
			return false
		},
		/* 135 LowerChar <- <LowerASCII> */
		func() bool {
			position1170, tokenIndex1170 := position, tokenIndex
			{
				position1171 := position
				if !_rules[ruleLowerASCII]() {
					goto l1170
				}
				add(ruleLowerChar, position1171)
			}
			return true
		l1170:
			position, tokenIndex = position1170, tokenIndex1170
			return false
		},
		/* 136 SpaceCharEOI <- <(_ / !.)> */
		func() bool {
			position1172, tokenIndex1172 := position, tokenIndex
			{
				position1173 := position
				{
					position1174, tokenIndex1174 := position, tokenIndex
					if !_rules[rule_]() {
						goto l1175
					}
					goto l1174
				l1175:
					position, tokenIndex = position1174, tokenIndex1174
					{
						position1176, tokenIndex1176 := position, tokenIndex
						if !matchDot() {
							goto l1176
						}
						goto l1172
					l1176:
						position, tokenIndex = position1176, tokenIndex1176
					}
				}
			l1174:
				add(ruleSpaceCharEOI, position1173)
			}
			return true
		l1172:
			position, tokenIndex = position1172, tokenIndex1172
			return false
		},
		/* 137 Nums <- <[0-9]> */
		func() bool {
			position1177, tokenIndex1177 := position, tokenIndex
			{
				position1178 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l1177
				}
				position++
				add(ruleNums, position1178)
			}
			return true
		l1177:
			position, tokenIndex = position1177, tokenIndex1177
			return false
		},
		/* 138 LowerGreek <- <[α-ω]> */
		func() bool {
			position1179, tokenIndex1179 := position, tokenIndex
			{
				position1180 := position
				if c := buffer[position]; c < rune('α') || c > rune('ω') {
					goto l1179
				}
				position++
				add(ruleLowerGreek, position1180)
			}
			return true
		l1179:
			position, tokenIndex = position1179, tokenIndex1179
			return false
		},
		/* 139 LowerASCII <- <[a-z]> */
		func() bool {
			position1181, tokenIndex1181 := position, tokenIndex
			{
				position1182 := position
				if c := buffer[position]; c < rune('a') || c > rune('z') {
					goto l1181
				}
				position++
				add(ruleLowerASCII, position1182)
			}
			return true
		l1181:
			position, tokenIndex = position1181, tokenIndex1181
			return false
		},
		/* 140 UpperASCII <- <[A-Z]> */
		func() bool {
			position1183, tokenIndex1183 := position, tokenIndex
			{
				position1184 := position
				if c := buffer[position]; c < rune('A') || c > rune('Z') {
					goto l1183
				}
				position++
				add(ruleUpperASCII, position1184)
			}
			return true
		l1183:
			position, tokenIndex = position1183, tokenIndex1183
			return false
		},
		/* 141 Apostrophe <- <(ApostrOther / ApostrASCII)> */
		func() bool {
			position1185, tokenIndex1185 := position, tokenIndex
			{
				position1186 := position
				{
					position1187, tokenIndex1187 := position, tokenIndex
					if !_rules[ruleApostrOther]() {
						goto l1188
					}
					goto l1187
				l1188:
					position, tokenIndex = position1187, tokenIndex1187
					if !_rules[ruleApostrASCII]() {
						goto l1185
					}
				}
			l1187:
				add(ruleApostrophe, position1186)
			}
			return true
		l1185:
			position, tokenIndex = position1185, tokenIndex1185
			return false
		},
		/* 142 ApostrASCII <- <'\''> */
		func() bool {
			position1189, tokenIndex1189 := position, tokenIndex
			{
				position1190 := position
				if buffer[position] != rune('\'') {
					goto l1189
				}
				position++
				add(ruleApostrASCII, position1190)
			}
			return true
		l1189:
			position, tokenIndex = position1189, tokenIndex1189
			return false
		},
		/* 143 ApostrOther <- <('‘' / '’' / '`' / '´')> */
		func() bool {
			position1191, tokenIndex1191 := position, tokenIndex
			{
				position1192 := position
				{
					position1193, tokenIndex1193 := position, tokenIndex
					if buffer[position] != rune('‘') {
						goto l1194
					}
					position++
					goto l1193
				l1194:
					position, tokenIndex = position1193, tokenIndex1193
					if buffer[position] != rune('’') {
						goto l1195
					}
					position++
					goto l1193
				l1195:
					position, tokenIndex = position1193, tokenIndex1193
					if buffer[position] != rune('`') {
						goto l1196
					}
					position++
					goto l1193
				l1196:
					position, tokenIndex = position1193, tokenIndex1193
					if buffer[position] != rune('´') {
						goto l1191
					}
					position++
				}
			l1193:
				add(ruleApostrOther, position1192)
			}
			return true
		l1191:
			position, tokenIndex = position1191, tokenIndex1191
			return false
		},
		/* 144 Dash <- <'-'> */
		func() bool {
			position1197, tokenIndex1197 := position, tokenIndex
			{
				position1198 := position
				if buffer[position] != rune('-') {
					goto l1197
				}
				position++
				add(ruleDash, position1198)
			}
			return true
		l1197:
			position, tokenIndex = position1197, tokenIndex1197
			return false
		},
		/* 145 Slash <- <'/'> */
		func() bool {
			position1199, tokenIndex1199 := position, tokenIndex
			{
				position1200 := position
				if buffer[position] != rune('/') {
					goto l1199
				}
				position++
				add(ruleSlash, position1200)
			}
			return true
		l1199:
			position, tokenIndex = position1199, tokenIndex1199
			return false
		},
		/* 146 _ <- <(MultipleSpace / SingleSpace)> */
		func() bool {
			position1201, tokenIndex1201 := position, tokenIndex
			{
				position1202 := position
				{
					position1203, tokenIndex1203 := position, tokenIndex
					if !_rules[ruleMultipleSpace]() {
						goto l1204
					}
					goto l1203
				l1204:
					position, tokenIndex = position1203, tokenIndex1203
					if !_rules[ruleSingleSpace]() {
						goto l1201
					}
				}
			l1203:
				add(rule_, position1202)
			}
			return true
		l1201:
			position, tokenIndex = position1201, tokenIndex1201
			return false
		},
		/* 147 MultipleSpace <- <(SingleSpace SingleSpace+)> */
		func() bool {
			position1205, tokenIndex1205 := position, tokenIndex
			{
				position1206 := position
				if !_rules[ruleSingleSpace]() {
					goto l1205
				}
				if !_rules[ruleSingleSpace]() {
					goto l1205
				}
			l1207:
				{
					position1208, tokenIndex1208 := position, tokenIndex
					if !_rules[ruleSingleSpace]() {
						goto l1208
					}
					goto l1207
				l1208:
					position, tokenIndex = position1208, tokenIndex1208
				}
				add(ruleMultipleSpace, position1206)
			}
			return true
		l1205:
			position, tokenIndex = position1205, tokenIndex1205
			return false
		},
		/* 148 SingleSpace <- <(' ' / OtherSpace)> */
		func() bool {
			position1209, tokenIndex1209 := position, tokenIndex
			{
				position1210 := position
				{
					position1211, tokenIndex1211 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l1212
					}
					position++
					goto l1211
				l1212:
					position, tokenIndex = position1211, tokenIndex1211
					if !_rules[ruleOtherSpace]() {
						goto l1209
					}
				}
			l1211:
				add(ruleSingleSpace, position1210)
			}
			return true
		l1209:
			position, tokenIndex = position1209, tokenIndex1209
			return false
		},
		/* 149 OtherSpace <- <('\u3000' / '\u00a0' / '\t' / '\r' / '\n' / '\f' / '\v')> */
		func() bool {
			position1213, tokenIndex1213 := position, tokenIndex
			{
				position1214 := position
				{
					position1215, tokenIndex1215 := position, tokenIndex
					if buffer[position] != rune('\u3000') {
						goto l1216
					}
					position++
					goto l1215
				l1216:
					position, tokenIndex = position1215, tokenIndex1215
					if buffer[position] != rune('\u00a0') {
						goto l1217
					}
					position++
					goto l1215
				l1217:
					position, tokenIndex = position1215, tokenIndex1215
					if buffer[position] != rune('\t') {
						goto l1218
					}
					position++
					goto l1215
				l1218:
					position, tokenIndex = position1215, tokenIndex1215
					if buffer[position] != rune('\r') {
						goto l1219
					}
					position++
					goto l1215
				l1219:
					position, tokenIndex = position1215, tokenIndex1215
					if buffer[position] != rune('\n') {
						goto l1220
					}
					position++
					goto l1215
				l1220:
					position, tokenIndex = position1215, tokenIndex1215
					if buffer[position] != rune('\f') {
						goto l1221
					}
					position++
					goto l1215
				l1221:
					position, tokenIndex = position1215, tokenIndex1215
					if buffer[position] != rune('\v') {
						goto l1213
					}
					position++
				}
			l1215:
				add(ruleOtherSpace, position1214)
			}
			return true
		l1213:
			position, tokenIndex = position1213, tokenIndex1213
			return false
		},
		/* 150 END <- <!.> */
		func() bool {
			position1222, tokenIndex1222 := position, tokenIndex
			{
				position1223 := position
				{
					position1224, tokenIndex1224 := position, tokenIndex
					if !matchDot() {
						goto l1224
					}
					goto l1222
				l1224:
					position, tokenIndex = position1224, tokenIndex1224
				}
				add(ruleEND, position1223)
			}
			return true
		l1222:
			position, tokenIndex = position1222, tokenIndex1222
			return false
		},
	}
	p.rules = _rules
	return nil
}
