package preparser

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleString
	ruleHead
	ruleTail
	ruleWord
	ruleTailPhrase
	ruleTailLastWordJunk
	ruleTailPhrase4
	ruleTailPhrase3
	ruleTailStopWords
	ruleTailPhrase2
	ruleTailPhrase1
	ruleSpaceOrEnd
	ruleCommaSpace
	rule_
	ruleNotLetterOrEnd
	ruleNotLetter
	ruleMultipleSpace
	ruleSingleSpace
	ruleOtherSpace
	ruleEND
	ruleAction0
)

var rul3s = [...]string{
	"Unknown",
	"String",
	"Head",
	"Tail",
	"Word",
	"TailPhrase",
	"TailLastWordJunk",
	"TailPhrase4",
	"TailPhrase3",
	"TailStopWords",
	"TailPhrase2",
	"TailPhrase1",
	"SpaceOrEnd",
	"CommaSpace",
	"_",
	"NotLetterOrEnd",
	"NotLetter",
	"MultipleSpace",
	"SingleSpace",
	"OtherSpace",
	"END",
	"Action0",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type PreParser struct {
	PreString
	Buffer string
	buffer []rune
	rules  [22]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *PreParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *PreParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *PreParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *PreParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *PreParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *PreParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *PreParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case ruleAction0:
			p.tailIndex = int(token.begin)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*PreParser) error {
	return func(p *PreParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*PreParser) error {
	return func(p *PreParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *PreParser) Init(options ...func(*PreParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 String <- <(_? ((Head Tail?) / (TailPhrase .*)) SpaceOrEnd)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rule_]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				{
					position4, tokenIndex4 := position, tokenIndex
					if !_rules[ruleHead]() {
						goto l5
					}
					{
						position6, tokenIndex6 := position, tokenIndex
						if !_rules[ruleTail]() {
							goto l6
						}
						goto l7
					l6:
						position, tokenIndex = position6, tokenIndex6
					}
				l7:
					goto l4
				l5:
					position, tokenIndex = position4, tokenIndex4
					if !_rules[ruleTailPhrase]() {
						goto l0
					}
				l8:
					{
						position9, tokenIndex9 := position, tokenIndex
						if !matchDot() {
							goto l9
						}
						goto l8
					l9:
						position, tokenIndex = position9, tokenIndex9
					}
				}
			l4:
				if !_rules[ruleSpaceOrEnd]() {
					goto l0
				}
				add(ruleString, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Head <- <(Word (CommaSpace Word)* &(Tail / SpaceOrEnd))> */
		func() bool {
			position10, tokenIndex10 := position, tokenIndex
			{
				position11 := position
				if !_rules[ruleWord]() {
					goto l10
				}
			l12:
				{
					position13, tokenIndex13 := position, tokenIndex
					if !_rules[ruleCommaSpace]() {
						goto l13
					}
					if !_rules[ruleWord]() {
						goto l13
					}
					goto l12
				l13:
					position, tokenIndex = position13, tokenIndex13
				}
				{
					position14, tokenIndex14 := position, tokenIndex
					{
						position15, tokenIndex15 := position, tokenIndex
						if !_rules[ruleTail]() {
							goto l16
						}
						goto l15
					l16:
						position, tokenIndex = position15, tokenIndex15
						if !_rules[ruleSpaceOrEnd]() {
							goto l10
						}
					}
				l15:
					position, tokenIndex = position14, tokenIndex14
				}
				add(ruleHead, position11)
			}
			return true
		l10:
			position, tokenIndex = position10, tokenIndex10
			return false
		},
		/* 2 Tail <- <(Action0 CommaSpace TailPhrase .*)> */
		func() bool {
			position17, tokenIndex17 := position, tokenIndex
			{
				position18 := position
				if !_rules[ruleAction0]() {
					goto l17
				}
				if !_rules[ruleCommaSpace]() {
					goto l17
				}
				if !_rules[ruleTailPhrase]() {
					goto l17
				}
			l19:
				{
					position20, tokenIndex20 := position, tokenIndex
					if !matchDot() {
						goto l20
					}
					goto l19
				l20:
					position, tokenIndex = position20, tokenIndex20
				}
				add(ruleTail, position18)
			}
			return true
		l17:
			position, tokenIndex = position17, tokenIndex17
			return false
		},
		/* 3 Word <- <((!TailPhrase (!(',' / ' ') .)+) / ',')> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				{
					position23, tokenIndex23 := position, tokenIndex
					{
						position25, tokenIndex25 := position, tokenIndex
						if !_rules[ruleTailPhrase]() {
							goto l25
						}
						goto l24
					l25:
						position, tokenIndex = position25, tokenIndex25
					}
					{
						position28, tokenIndex28 := position, tokenIndex
						{
							position29, tokenIndex29 := position, tokenIndex
							if buffer[position] != rune(',') {
								goto l30
							}
							position++
							goto l29
						l30:
							position, tokenIndex = position29, tokenIndex29
							if buffer[position] != rune(' ') {
								goto l28
							}
							position++
						}
					l29:
						goto l24
					l28:
						position, tokenIndex = position28, tokenIndex28
					}
					if !matchDot() {
						goto l24
					}
				l26:
					{
						position27, tokenIndex27 := position, tokenIndex
						{
							position31, tokenIndex31 := position, tokenIndex
							{
								position32, tokenIndex32 := position, tokenIndex
								if buffer[position] != rune(',') {
									goto l33
								}
								position++
								goto l32
							l33:
								position, tokenIndex = position32, tokenIndex32
								if buffer[position] != rune(' ') {
									goto l31
								}
								position++
							}
						l32:
							goto l27
						l31:
							position, tokenIndex = position31, tokenIndex31
						}
						if !matchDot() {
							goto l27
						}
						goto l26
					l27:
						position, tokenIndex = position27, tokenIndex27
					}
					goto l23
				l24:
					position, tokenIndex = position23, tokenIndex23
					if buffer[position] != rune(',') {
						goto l21
					}
					position++
				}
			l23:
				add(ruleWord, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 4 TailPhrase <- <(TailLastWordJunk / TailPhrase4 / TailPhrase3 / TailStopWords / TailPhrase2 / TailPhrase1)> */
		func() bool {
			position34, tokenIndex34 := position, tokenIndex
			{
				position35 := position
				{
					position36, tokenIndex36 := position, tokenIndex
					if !_rules[ruleTailLastWordJunk]() {
						goto l37
					}
					goto l36
				l37:
					position, tokenIndex = position36, tokenIndex36
					if !_rules[ruleTailPhrase4]() {
						goto l38
					}
					goto l36
				l38:
					position, tokenIndex = position36, tokenIndex36
					if !_rules[ruleTailPhrase3]() {
						goto l39
					}
					goto l36
				l39:
					position, tokenIndex = position36, tokenIndex36
					if !_rules[ruleTailStopWords]() {
						goto l40
					}
					goto l36
				l40:
					position, tokenIndex = position36, tokenIndex36
					if !_rules[ruleTailPhrase2]() {
						goto l41
					}
					goto l36
				l41:
					position, tokenIndex = position36, tokenIndex36
					if !_rules[ruleTailPhrase1]() {
						goto l34
					}
				}
			l36:
				add(ruleTailPhrase, position35)
			}
			return true
		l34:
			position, tokenIndex = position34, tokenIndex34
			return false
		},
		/* 5 TailLastWordJunk <- <(((((('v' / 'V') ('a' / 'A') ('r' / 'R')) / (('i' / 'I') ('n' / 'N') ('e' / 'E') ('d' / 'D')) / (('s' / 'S') ('s' / 'S') ('p' / 'P')) / (('s' / 'S') ('u' / 'U') ('b' / 'B') ('s' / 'S') ('p' / 'P')) / (('s' / 'S') ('u' / 'U') ('b' / 'B') ('g' / 'G') ('e' / 'E') ('n' / 'N'))) '.'?) / (('s' / 'S') ('e' / 'E') ('n' / 'N') ('s' / 'S') ('u' / 'U')) / (('n' / 'N') ('e' / 'E') ('w' / 'W')) / (('n' / 'N') ('o' / 'O') ('n' / 'N')) / (('n' / 'N') ('e' / 'E') ('c' / 'C')) / (('h' / 'H') ('y' / 'Y') ('b' / 'B') ('r' / 'R') ('i' / 'I') ('d' / 'D')) / (('v' / 'V') ('o' / 'O') ('n' / 'N')) / ('P' '.' _? ('P' '.'))) '?'? &SpaceOrEnd)> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				{
					position44, tokenIndex44 := position, tokenIndex
					{
						position46, tokenIndex46 := position, tokenIndex
						{
							position48, tokenIndex48 := position, tokenIndex
							if buffer[position] != rune('v') {
								goto l49
							}
							position++
							goto l48
						l49:
							position, tokenIndex = position48, tokenIndex48
							if buffer[position] != rune('V') {
								goto l47
							}
							position++
						}
					l48:
						{
							position50, tokenIndex50 := position, tokenIndex
							if buffer[position] != rune('a') {
								goto l51
							}
							position++
							goto l50
						l51:
							position, tokenIndex = position50, tokenIndex50
							if buffer[position] != rune('A') {
								goto l47
							}
							position++
						}
					l50:
						{
							position52, tokenIndex52 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l53
							}
							position++
							goto l52
						l53:
							position, tokenIndex = position52, tokenIndex52
							if buffer[position] != rune('R') {
								goto l47
							}
							position++
						}
					l52:
						goto l46
					l47:
						position, tokenIndex = position46, tokenIndex46
						{
							position55, tokenIndex55 := position, tokenIndex
							if buffer[position] != rune('i') {
								goto l56
							}
							position++
							goto l55
						l56:
							position, tokenIndex = position55, tokenIndex55
							if buffer[position] != rune('I') {
								goto l54
							}
							position++
						}
					l55:
						{
							position57, tokenIndex57 := position, tokenIndex
							if buffer[position] != rune('n') {
								goto l58
							}
							position++
							goto l57
						l58:
							position, tokenIndex = position57, tokenIndex57
							if buffer[position] != rune('N') {
								goto l54
							}
							position++
						}
					l57:
						{
							position59, tokenIndex59 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l60
							}
							position++
							goto l59
						l60:
							position, tokenIndex = position59, tokenIndex59
							if buffer[position] != rune('E') {
								goto l54
							}
							position++
						}
					l59:
						{
							position61, tokenIndex61 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l62
							}
							position++
							goto l61
						l62:
							position, tokenIndex = position61, tokenIndex61
							if buffer[position] != rune('D') {
								goto l54
							}
							position++
						}
					l61:
						goto l46
					l54:
						position, tokenIndex = position46, tokenIndex46
						{
							position64, tokenIndex64 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l65
							}
							position++
							goto l64
						l65:
							position, tokenIndex = position64, tokenIndex64
							if buffer[position] != rune('S') {
								goto l63
							}
							position++
						}
					l64:
						{
							position66, tokenIndex66 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l67
							}
							position++
							goto l66
						l67:
							position, tokenIndex = position66, tokenIndex66
							if buffer[position] != rune('S') {
								goto l63
							}
							position++
						}
					l66:
						{
							position68, tokenIndex68 := position, tokenIndex
							if buffer[position] != rune('p') {
								goto l69
							}
							position++
							goto l68
						l69:
							position, tokenIndex = position68, tokenIndex68
							if buffer[position] != rune('P') {
								goto l63
							}
							position++
						}
					l68:
						goto l46
					l63:
						position, tokenIndex = position46, tokenIndex46
						{
							position71, tokenIndex71 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l72
							}
							position++
							goto l71
						l72:
							position, tokenIndex = position71, tokenIndex71
							if buffer[position] != rune('S') {
								goto l70
							}
							position++
						}
					l71:
						{
							position73, tokenIndex73 := position, tokenIndex
							if buffer[position] != rune('u') {
								goto l74
							}
							position++
							goto l73
						l74:
							position, tokenIndex = position73, tokenIndex73
							if buffer[position] != rune('U') {
								goto l70
							}
							position++
						}
					l73:
						{
							position75, tokenIndex75 := position, tokenIndex
							if buffer[position] != rune('b') {
								goto l76
							}
							position++
							goto l75
						l76:
							position, tokenIndex = position75, tokenIndex75
							if buffer[position] != rune('B') {
								goto l70
							}
							position++
						}
					l75:
						{
							position77, tokenIndex77 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l78
							}
							position++
							goto l77
						l78:
							position, tokenIndex = position77, tokenIndex77
							if buffer[position] != rune('S') {
								goto l70
							}
							position++
						}
					l77:
						{
							position79, tokenIndex79 := position, tokenIndex
							if buffer[position] != rune('p') {
								goto l80
							}
							position++
							goto l79
						l80:
							position, tokenIndex = position79, tokenIndex79
							if buffer[position] != rune('P') {
								goto l70
							}
							position++
						}
					l79:
						goto l46
					l70:
						position, tokenIndex = position46, tokenIndex46
						{
							position81, tokenIndex81 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l82
							}
							position++
							goto l81
						l82:
							position, tokenIndex = position81, tokenIndex81
							if buffer[position] != rune('S') {
								goto l45
							}
							position++
						}
					l81:
						{
							position83, tokenIndex83 := position, tokenIndex
							if buffer[position] != rune('u') {
								goto l84
							}
							position++
							goto l83
						l84:
							position, tokenIndex = position83, tokenIndex83
							if buffer[position] != rune('U') {
								goto l45
							}
							position++
						}
					l83:
						{
							position85, tokenIndex85 := position, tokenIndex
							if buffer[position] != rune('b') {
								goto l86
							}
							position++
							goto l85
						l86:
							position, tokenIndex = position85, tokenIndex85
							if buffer[position] != rune('B') {
								goto l45
							}
							position++
						}
					l85:
						{
							position87, tokenIndex87 := position, tokenIndex
							if buffer[position] != rune('g') {
								goto l88
							}
							position++
							goto l87
						l88:
							position, tokenIndex = position87, tokenIndex87
							if buffer[position] != rune('G') {
								goto l45
							}
							position++
						}
					l87:
						{
							position89, tokenIndex89 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l90
							}
							position++
							goto l89
						l90:
							position, tokenIndex = position89, tokenIndex89
							if buffer[position] != rune('E') {
								goto l45
							}
							position++
						}
					l89:
						{
							position91, tokenIndex91 := position, tokenIndex
							if buffer[position] != rune('n') {
								goto l92
							}
							position++
							goto l91
						l92:
							position, tokenIndex = position91, tokenIndex91
							if buffer[position] != rune('N') {
								goto l45
							}
							position++
						}
					l91:
					}
				l46:
					{
						position93, tokenIndex93 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l93
						}
						position++
						goto l94
					l93:
						position, tokenIndex = position93, tokenIndex93
					}
				l94:
					goto l44
				l45:
					position, tokenIndex = position44, tokenIndex44
					{
						position96, tokenIndex96 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l97
						}
						position++
						goto l96
					l97:
						position, tokenIndex = position96, tokenIndex96
						if buffer[position] != rune('S') {
							goto l95
						}
						position++
					}
				l96:
					{
						position98, tokenIndex98 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l99
						}
						position++
						goto l98
					l99:
						position, tokenIndex = position98, tokenIndex98
						if buffer[position] != rune('E') {
							goto l95
						}
						position++
					}
				l98:
					{
						position100, tokenIndex100 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l101
						}
						position++
						goto l100
					l101:
						position, tokenIndex = position100, tokenIndex100
						if buffer[position] != rune('N') {
							goto l95
						}
						position++
					}
				l100:
					{
						position102, tokenIndex102 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l103
						}
						position++
						goto l102
					l103:
						position, tokenIndex = position102, tokenIndex102
						if buffer[position] != rune('S') {
							goto l95
						}
						position++
					}
				l102:
					{
						position104, tokenIndex104 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l105
						}
						position++
						goto l104
					l105:
						position, tokenIndex = position104, tokenIndex104
						if buffer[position] != rune('U') {
							goto l95
						}
						position++
					}
				l104:
					goto l44
				l95:
					position, tokenIndex = position44, tokenIndex44
					{
						position107, tokenIndex107 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l108
						}
						position++
						goto l107
					l108:
						position, tokenIndex = position107, tokenIndex107
						if buffer[position] != rune('N') {
							goto l106
						}
						position++
					}
				l107:
					{
						position109, tokenIndex109 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l110
						}
						position++
						goto l109
					l110:
						position, tokenIndex = position109, tokenIndex109
						if buffer[position] != rune('E') {
							goto l106
						}
						position++
					}
				l109:
					{
						position111, tokenIndex111 := position, tokenIndex
						if buffer[position] != rune('w') {
							goto l112
						}
						position++
						goto l111
					l112:
						position, tokenIndex = position111, tokenIndex111
						if buffer[position] != rune('W') {
							goto l106
						}
						position++
					}
				l111:
					goto l44
				l106:
					position, tokenIndex = position44, tokenIndex44
					{
						position114, tokenIndex114 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l115
						}
						position++
						goto l114
					l115:
						position, tokenIndex = position114, tokenIndex114
						if buffer[position] != rune('N') {
							goto l113
						}
						position++
					}
				l114:
					{
						position116, tokenIndex116 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l117
						}
						position++
						goto l116
					l117:
						position, tokenIndex = position116, tokenIndex116
						if buffer[position] != rune('O') {
							goto l113
						}
						position++
					}
				l116:
					{
						position118, tokenIndex118 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l119
						}
						position++
						goto l118
					l119:
						position, tokenIndex = position118, tokenIndex118
						if buffer[position] != rune('N') {
							goto l113
						}
						position++
					}
				l118:
					goto l44
				l113:
					position, tokenIndex = position44, tokenIndex44
					{
						position121, tokenIndex121 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l122
						}
						position++
						goto l121
					l122:
						position, tokenIndex = position121, tokenIndex121
						if buffer[position] != rune('N') {
							goto l120
						}
						position++
					}
				l121:
					{
						position123, tokenIndex123 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l124
						}
						position++
						goto l123
					l124:
						position, tokenIndex = position123, tokenIndex123
						if buffer[position] != rune('E') {
							goto l120
						}
						position++
					}
				l123:
					{
						position125, tokenIndex125 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l126
						}
						position++
						goto l125
					l126:
						position, tokenIndex = position125, tokenIndex125
						if buffer[position] != rune('C') {
							goto l120
						}
						position++
					}
				l125:
					goto l44
				l120:
					position, tokenIndex = position44, tokenIndex44
					{
						position128, tokenIndex128 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l129
						}
						position++
						goto l128
					l129:
						position, tokenIndex = position128, tokenIndex128
						if buffer[position] != rune('H') {
							goto l127
						}
						position++
					}
				l128:
					{
						position130, tokenIndex130 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l131
						}
						position++
						goto l130
					l131:
						position, tokenIndex = position130, tokenIndex130
						if buffer[position] != rune('Y') {
							goto l127
						}
						position++
					}
				l130:
					{
						position132, tokenIndex132 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l133
						}
						position++
						goto l132
					l133:
						position, tokenIndex = position132, tokenIndex132
						if buffer[position] != rune('B') {
							goto l127
						}
						position++
					}
				l132:
					{
						position134, tokenIndex134 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l135
						}
						position++
						goto l134
					l135:
						position, tokenIndex = position134, tokenIndex134
						if buffer[position] != rune('R') {
							goto l127
						}
						position++
					}
				l134:
					{
						position136, tokenIndex136 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l137
						}
						position++
						goto l136
					l137:
						position, tokenIndex = position136, tokenIndex136
						if buffer[position] != rune('I') {
							goto l127
						}
						position++
					}
				l136:
					{
						position138, tokenIndex138 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l139
						}
						position++
						goto l138
					l139:
						position, tokenIndex = position138, tokenIndex138
						if buffer[position] != rune('D') {
							goto l127
						}
						position++
					}
				l138:
					goto l44
				l127:
					position, tokenIndex = position44, tokenIndex44
					{
						position141, tokenIndex141 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l142
						}
						position++
						goto l141
					l142:
						position, tokenIndex = position141, tokenIndex141
						if buffer[position] != rune('V') {
							goto l140
						}
						position++
					}
				l141:
					{
						position143, tokenIndex143 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l144
						}
						position++
						goto l143
					l144:
						position, tokenIndex = position143, tokenIndex143
						if buffer[position] != rune('O') {
							goto l140
						}
						position++
					}
				l143:
					{
						position145, tokenIndex145 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l146
						}
						position++
						goto l145
					l146:
						position, tokenIndex = position145, tokenIndex145
						if buffer[position] != rune('N') {
							goto l140
						}
						position++
					}
				l145:
					goto l44
				l140:
					position, tokenIndex = position44, tokenIndex44
					if buffer[position] != rune('P') {
						goto l42
					}
					position++
					if buffer[position] != rune('.') {
						goto l42
					}
					position++
					{
						position147, tokenIndex147 := position, tokenIndex
						if !_rules[rule_]() {
							goto l147
						}
						goto l148
					l147:
						position, tokenIndex = position147, tokenIndex147
					}
				l148:
					if buffer[position] != rune('P') {
						goto l42
					}
					position++
					if buffer[position] != rune('.') {
						goto l42
					}
					position++
				}
			l44:
				{
					position149, tokenIndex149 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l149
					}
					position++
					goto l150
				l149:
					position, tokenIndex = position149, tokenIndex149
				}
			l150:
				{
					position151, tokenIndex151 := position, tokenIndex
					if !_rules[ruleSpaceOrEnd]() {
						goto l42
					}
					position, tokenIndex = position151, tokenIndex151
				}
				add(ruleTailLastWordJunk, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 6 TailPhrase4 <- <((((('p' / 'P') ('r' / 'R') ('o' / 'O') _ (('p' / 'P') ('a' / 'A') ('r' / 'R') ('t' / 'T') ('e' / 'E'))) / (('n' / 'N') ('o' / 'O') ('m' / 'M') ('e' / 'E') ('n' / 'N'))) &NotLetterOrEnd) / ('p' '.' _? ('p' '.')) / (('n' / 'N') ('o' / 'O') ('m' / 'M') '.') / (('c' / 'C') ('o' / 'O') ('m' / 'M') ('b' / 'B') '.'))> */
		func() bool {
			position152, tokenIndex152 := position, tokenIndex
			{
				position153 := position
				{
					position154, tokenIndex154 := position, tokenIndex
					{
						position156, tokenIndex156 := position, tokenIndex
						{
							position158, tokenIndex158 := position, tokenIndex
							if buffer[position] != rune('p') {
								goto l159
							}
							position++
							goto l158
						l159:
							position, tokenIndex = position158, tokenIndex158
							if buffer[position] != rune('P') {
								goto l157
							}
							position++
						}
					l158:
						{
							position160, tokenIndex160 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l161
							}
							position++
							goto l160
						l161:
							position, tokenIndex = position160, tokenIndex160
							if buffer[position] != rune('R') {
								goto l157
							}
							position++
						}
					l160:
						{
							position162, tokenIndex162 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l163
							}
							position++
							goto l162
						l163:
							position, tokenIndex = position162, tokenIndex162
							if buffer[position] != rune('O') {
								goto l157
							}
							position++
						}
					l162:
						if !_rules[rule_]() {
							goto l157
						}
						{
							position164, tokenIndex164 := position, tokenIndex
							if buffer[position] != rune('p') {
								goto l165
							}
							position++
							goto l164
						l165:
							position, tokenIndex = position164, tokenIndex164
							if buffer[position] != rune('P') {
								goto l157
							}
							position++
						}
					l164:
						{
							position166, tokenIndex166 := position, tokenIndex
							if buffer[position] != rune('a') {
								goto l167
							}
							position++
							goto l166
						l167:
							position, tokenIndex = position166, tokenIndex166
							if buffer[position] != rune('A') {
								goto l157
							}
							position++
						}
					l166:
						{
							position168, tokenIndex168 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l169
							}
							position++
							goto l168
						l169:
							position, tokenIndex = position168, tokenIndex168
							if buffer[position] != rune('R') {
								goto l157
							}
							position++
						}
					l168:
						{
							position170, tokenIndex170 := position, tokenIndex
							if buffer[position] != rune('t') {
								goto l171
							}
							position++
							goto l170
						l171:
							position, tokenIndex = position170, tokenIndex170
							if buffer[position] != rune('T') {
								goto l157
							}
							position++
						}
					l170:
						{
							position172, tokenIndex172 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l173
							}
							position++
							goto l172
						l173:
							position, tokenIndex = position172, tokenIndex172
							if buffer[position] != rune('E') {
								goto l157
							}
							position++
						}
					l172:
						goto l156
					l157:
						position, tokenIndex = position156, tokenIndex156
						{
							position174, tokenIndex174 := position, tokenIndex
							if buffer[position] != rune('n') {
								goto l175
							}
							position++
							goto l174
						l175:
							position, tokenIndex = position174, tokenIndex174
							if buffer[position] != rune('N') {
								goto l155
							}
							position++
						}
					l174:
						{
							position176, tokenIndex176 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l177
							}
							position++
							goto l176
						l177:
							position, tokenIndex = position176, tokenIndex176
							if buffer[position] != rune('O') {
								goto l155
							}
							position++
						}
					l176:
						{
							position178, tokenIndex178 := position, tokenIndex
							if buffer[position] != rune('m') {
								goto l179
							}
							position++
							goto l178
						l179:
							position, tokenIndex = position178, tokenIndex178
							if buffer[position] != rune('M') {
								goto l155
							}
							position++
						}
					l178:
						{
							position180, tokenIndex180 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l181
							}
							position++
							goto l180
						l181:
							position, tokenIndex = position180, tokenIndex180
							if buffer[position] != rune('E') {
								goto l155
							}
							position++
						}
					l180:
						{
							position182, tokenIndex182 := position, tokenIndex
							if buffer[position] != rune('n') {
								goto l183
							}
							position++
							goto l182
						l183:
							position, tokenIndex = position182, tokenIndex182
							if buffer[position] != rune('N') {
								goto l155
							}
							position++
						}
					l182:
					}
				l156:
					{
						position184, tokenIndex184 := position, tokenIndex
						if !_rules[ruleNotLetterOrEnd]() {
							goto l155
						}
						position, tokenIndex = position184, tokenIndex184
					}
					goto l154
				l155:
					position, tokenIndex = position154, tokenIndex154
					if buffer[position] != rune('p') {
						goto l185
					}
					position++
					if buffer[position] != rune('.') {
						goto l185
					}
					position++
					{
						position186, tokenIndex186 := position, tokenIndex
						if !_rules[rule_]() {
							goto l186
						}
						goto l187
					l186:
						position, tokenIndex = position186, tokenIndex186
					}
				l187:
					if buffer[position] != rune('p') {
						goto l185
					}
					position++
					if buffer[position] != rune('.') {
						goto l185
					}
					position++
					goto l154
				l185:
					position, tokenIndex = position154, tokenIndex154
					{
						position189, tokenIndex189 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l190
						}
						position++
						goto l189
					l190:
						position, tokenIndex = position189, tokenIndex189
						if buffer[position] != rune('N') {
							goto l188
						}
						position++
					}
				l189:
					{
						position191, tokenIndex191 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l192
						}
						position++
						goto l191
					l192:
						position, tokenIndex = position191, tokenIndex191
						if buffer[position] != rune('O') {
							goto l188
						}
						position++
					}
				l191:
					{
						position193, tokenIndex193 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l194
						}
						position++
						goto l193
					l194:
						position, tokenIndex = position193, tokenIndex193
						if buffer[position] != rune('M') {
							goto l188
						}
						position++
					}
				l193:
					if buffer[position] != rune('.') {
						goto l188
					}
					position++
					goto l154
				l188:
					position, tokenIndex = position154, tokenIndex154
					{
						position195, tokenIndex195 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l196
						}
						position++
						goto l195
					l196:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('C') {
							goto l152
						}
						position++
					}
				l195:
					{
						position197, tokenIndex197 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l198
						}
						position++
						goto l197
					l198:
						position, tokenIndex = position197, tokenIndex197
						if buffer[position] != rune('O') {
							goto l152
						}
						position++
					}
				l197:
					{
						position199, tokenIndex199 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l200
						}
						position++
						goto l199
					l200:
						position, tokenIndex = position199, tokenIndex199
						if buffer[position] != rune('M') {
							goto l152
						}
						position++
					}
				l199:
					{
						position201, tokenIndex201 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l202
						}
						position++
						goto l201
					l202:
						position, tokenIndex = position201, tokenIndex201
						if buffer[position] != rune('B') {
							goto l152
						}
						position++
					}
				l201:
					if buffer[position] != rune('.') {
						goto l152
					}
					position++
				}
			l154:
				add(ruleTailPhrase4, position153)
			}
			return true
		l152:
			position, tokenIndex = position152, tokenIndex152
			return false
		},
		/* 7 TailPhrase3 <- <('('? 's' (('.' _?) / _) (('s' '.'? &NotLetterOrEnd) / ('l' '.') / ('s' 't' 'r' '.') / ('l' 'a' 't' '.')))> */
		func() bool {
			position203, tokenIndex203 := position, tokenIndex
			{
				position204 := position
				{
					position205, tokenIndex205 := position, tokenIndex
					if buffer[position] != rune('(') {
						goto l205
					}
					position++
					goto l206
				l205:
					position, tokenIndex = position205, tokenIndex205
				}
			l206:
				if buffer[position] != rune('s') {
					goto l203
				}
				position++
				{
					position207, tokenIndex207 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l208
					}
					position++
					{
						position209, tokenIndex209 := position, tokenIndex
						if !_rules[rule_]() {
							goto l209
						}
						goto l210
					l209:
						position, tokenIndex = position209, tokenIndex209
					}
				l210:
					goto l207
				l208:
					position, tokenIndex = position207, tokenIndex207
					if !_rules[rule_]() {
						goto l203
					}
				}
			l207:
				{
					position211, tokenIndex211 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l212
					}
					position++
					{
						position213, tokenIndex213 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l213
						}
						position++
						goto l214
					l213:
						position, tokenIndex = position213, tokenIndex213
					}
				l214:
					{
						position215, tokenIndex215 := position, tokenIndex
						if !_rules[ruleNotLetterOrEnd]() {
							goto l212
						}
						position, tokenIndex = position215, tokenIndex215
					}
					goto l211
				l212:
					position, tokenIndex = position211, tokenIndex211
					if buffer[position] != rune('l') {
						goto l216
					}
					position++
					if buffer[position] != rune('.') {
						goto l216
					}
					position++
					goto l211
				l216:
					position, tokenIndex = position211, tokenIndex211
					if buffer[position] != rune('s') {
						goto l217
					}
					position++
					if buffer[position] != rune('t') {
						goto l217
					}
					position++
					if buffer[position] != rune('r') {
						goto l217
					}
					position++
					if buffer[position] != rune('.') {
						goto l217
					}
					position++
					goto l211
				l217:
					position, tokenIndex = position211, tokenIndex211
					if buffer[position] != rune('l') {
						goto l203
					}
					position++
					if buffer[position] != rune('a') {
						goto l203
					}
					position++
					if buffer[position] != rune('t') {
						goto l203
					}
					position++
					if buffer[position] != rune('.') {
						goto l203
					}
					position++
				}
			l211:
				add(ruleTailPhrase3, position204)
			}
			return true
		l203:
			position, tokenIndex = position203, tokenIndex203
			return false
		},
		/* 8 TailStopWords <- <(((('e' / 'E') ('n' / 'N') ('v' / 'V') ('i' / 'I') ('r' / 'R') ('o' / 'O') ('n' / 'N') ('m' / 'M') ('e' / 'E') ('n' / 'N') ('t' / 'T') ('a' / 'A') ('l' / 'L')) / (('e' / 'E') ('n' / 'N') ('r' / 'R') ('i' / 'I') ('c' / 'C') ('h' / 'H') ('m' / 'M') ('e' / 'E') ('n' / 'N') ('t' / 'T')) / (('s' / 'S') ('a' / 'A') ('m' / 'M') ('p' / 'P') ('l' / 'L') ('e' / 'E') ('s' / 'S')) / ((('s' / 'S') ('p' / 'P') ('e' / 'E') ('c' / 'C') ('i' / 'I') ('e' / 'E') ('s' / 'S') _)? ((('g' / 'G') ('r' / 'R') ('o' / 'O') ('u' / 'U') ('p' / 'P')) / (('c' / 'C') ('o' / 'O') ('m' / 'M') ('p' / 'P') ('l' / 'L') ('e' / 'E') ('x' / 'X')))) / (('c' / 'C') ('l' / 'L') ('a' / 'A') ('d' / 'D') ('e' / 'E')) / (('a' / 'A') ('u' / 'U') ('t' / 'T') ('h' / 'H') ('o' / 'O') ('r' / 'R')) / (('n' / 'N') ('e' / 'E') ('c' / 'C')) / (('v' / 'V') ('i' / 'I') ('d' / 'D') ('e' / 'E')) / (('f' / 'F') ('i' / 'I') ('d' / 'D') ('e' / 'E')) / (('n' / 'N') ('o' / 'O') ('n' / 'N'))) &NotLetterOrEnd)> */
		func() bool {
			position218, tokenIndex218 := position, tokenIndex
			{
				position219 := position
				{
					position220, tokenIndex220 := position, tokenIndex
					{
						position222, tokenIndex222 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l223
						}
						position++
						goto l222
					l223:
						position, tokenIndex = position222, tokenIndex222
						if buffer[position] != rune('E') {
							goto l221
						}
						position++
					}
				l222:
					{
						position224, tokenIndex224 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l225
						}
						position++
						goto l224
					l225:
						position, tokenIndex = position224, tokenIndex224
						if buffer[position] != rune('N') {
							goto l221
						}
						position++
					}
				l224:
					{
						position226, tokenIndex226 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l227
						}
						position++
						goto l226
					l227:
						position, tokenIndex = position226, tokenIndex226
						if buffer[position] != rune('V') {
							goto l221
						}
						position++
					}
				l226:
					{
						position228, tokenIndex228 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l229
						}
						position++
						goto l228
					l229:
						position, tokenIndex = position228, tokenIndex228
						if buffer[position] != rune('I') {
							goto l221
						}
						position++
					}
				l228:
					{
						position230, tokenIndex230 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l231
						}
						position++
						goto l230
					l231:
						position, tokenIndex = position230, tokenIndex230
						if buffer[position] != rune('R') {
							goto l221
						}
						position++
					}
				l230:
					{
						position232, tokenIndex232 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l233
						}
						position++
						goto l232
					l233:
						position, tokenIndex = position232, tokenIndex232
						if buffer[position] != rune('O') {
							goto l221
						}
						position++
					}
				l232:
					{
						position234, tokenIndex234 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l235
						}
						position++
						goto l234
					l235:
						position, tokenIndex = position234, tokenIndex234
						if buffer[position] != rune('N') {
							goto l221
						}
						position++
					}
				l234:
					{
						position236, tokenIndex236 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l237
						}
						position++
						goto l236
					l237:
						position, tokenIndex = position236, tokenIndex236
						if buffer[position] != rune('M') {
							goto l221
						}
						position++
					}
				l236:
					{
						position238, tokenIndex238 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l239
						}
						position++
						goto l238
					l239:
						position, tokenIndex = position238, tokenIndex238
						if buffer[position] != rune('E') {
							goto l221
						}
						position++
					}
				l238:
					{
						position240, tokenIndex240 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l241
						}
						position++
						goto l240
					l241:
						position, tokenIndex = position240, tokenIndex240
						if buffer[position] != rune('N') {
							goto l221
						}
						position++
					}
				l240:
					{
						position242, tokenIndex242 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l243
						}
						position++
						goto l242
					l243:
						position, tokenIndex = position242, tokenIndex242
						if buffer[position] != rune('T') {
							goto l221
						}
						position++
					}
				l242:
					{
						position244, tokenIndex244 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l245
						}
						position++
						goto l244
					l245:
						position, tokenIndex = position244, tokenIndex244
						if buffer[position] != rune('A') {
							goto l221
						}
						position++
					}
				l244:
					{
						position246, tokenIndex246 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l247
						}
						position++
						goto l246
					l247:
						position, tokenIndex = position246, tokenIndex246
						if buffer[position] != rune('L') {
							goto l221
						}
						position++
					}
				l246:
					goto l220
				l221:
					position, tokenIndex = position220, tokenIndex220
					{
						position249, tokenIndex249 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l250
						}
						position++
						goto l249
					l250:
						position, tokenIndex = position249, tokenIndex249
						if buffer[position] != rune('E') {
							goto l248
						}
						position++
					}
				l249:
					{
						position251, tokenIndex251 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l252
						}
						position++
						goto l251
					l252:
						position, tokenIndex = position251, tokenIndex251
						if buffer[position] != rune('N') {
							goto l248
						}
						position++
					}
				l251:
					{
						position253, tokenIndex253 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l254
						}
						position++
						goto l253
					l254:
						position, tokenIndex = position253, tokenIndex253
						if buffer[position] != rune('R') {
							goto l248
						}
						position++
					}
				l253:
					{
						position255, tokenIndex255 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l256
						}
						position++
						goto l255
					l256:
						position, tokenIndex = position255, tokenIndex255
						if buffer[position] != rune('I') {
							goto l248
						}
						position++
					}
				l255:
					{
						position257, tokenIndex257 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l258
						}
						position++
						goto l257
					l258:
						position, tokenIndex = position257, tokenIndex257
						if buffer[position] != rune('C') {
							goto l248
						}
						position++
					}
				l257:
					{
						position259, tokenIndex259 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l260
						}
						position++
						goto l259
					l260:
						position, tokenIndex = position259, tokenIndex259
						if buffer[position] != rune('H') {
							goto l248
						}
						position++
					}
				l259:
					{
						position261, tokenIndex261 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l262
						}
						position++
						goto l261
					l262:
						position, tokenIndex = position261, tokenIndex261
						if buffer[position] != rune('M') {
							goto l248
						}
						position++
					}
				l261:
					{
						position263, tokenIndex263 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l264
						}
						position++
						goto l263
					l264:
						position, tokenIndex = position263, tokenIndex263
						if buffer[position] != rune('E') {
							goto l248
						}
						position++
					}
				l263:
					{
						position265, tokenIndex265 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l266
						}
						position++
						goto l265
					l266:
						position, tokenIndex = position265, tokenIndex265
						if buffer[position] != rune('N') {
							goto l248
						}
						position++
					}
				l265:
					{
						position267, tokenIndex267 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l268
						}
						position++
						goto l267
					l268:
						position, tokenIndex = position267, tokenIndex267
						if buffer[position] != rune('T') {
							goto l248
						}
						position++
					}
				l267:
					goto l220
				l248:
					position, tokenIndex = position220, tokenIndex220
					{
						position270, tokenIndex270 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l271
						}
						position++
						goto l270
					l271:
						position, tokenIndex = position270, tokenIndex270
						if buffer[position] != rune('S') {
							goto l269
						}
						position++
					}
				l270:
					{
						position272, tokenIndex272 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l273
						}
						position++
						goto l272
					l273:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('A') {
							goto l269
						}
						position++
					}
				l272:
					{
						position274, tokenIndex274 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l275
						}
						position++
						goto l274
					l275:
						position, tokenIndex = position274, tokenIndex274
						if buffer[position] != rune('M') {
							goto l269
						}
						position++
					}
				l274:
					{
						position276, tokenIndex276 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l277
						}
						position++
						goto l276
					l277:
						position, tokenIndex = position276, tokenIndex276
						if buffer[position] != rune('P') {
							goto l269
						}
						position++
					}
				l276:
					{
						position278, tokenIndex278 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l279
						}
						position++
						goto l278
					l279:
						position, tokenIndex = position278, tokenIndex278
						if buffer[position] != rune('L') {
							goto l269
						}
						position++
					}
				l278:
					{
						position280, tokenIndex280 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l281
						}
						position++
						goto l280
					l281:
						position, tokenIndex = position280, tokenIndex280
						if buffer[position] != rune('E') {
							goto l269
						}
						position++
					}
				l280:
					{
						position282, tokenIndex282 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l283
						}
						position++
						goto l282
					l283:
						position, tokenIndex = position282, tokenIndex282
						if buffer[position] != rune('S') {
							goto l269
						}
						position++
					}
				l282:
					goto l220
				l269:
					position, tokenIndex = position220, tokenIndex220
					{
						position285, tokenIndex285 := position, tokenIndex
						{
							position287, tokenIndex287 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l288
							}
							position++
							goto l287
						l288:
							position, tokenIndex = position287, tokenIndex287
							if buffer[position] != rune('S') {
								goto l285
							}
							position++
						}
					l287:
						{
							position289, tokenIndex289 := position, tokenIndex
							if buffer[position] != rune('p') {
								goto l290
							}
							position++
							goto l289
						l290:
							position, tokenIndex = position289, tokenIndex289
							if buffer[position] != rune('P') {
								goto l285
							}
							position++
						}
					l289:
						{
							position291, tokenIndex291 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l292
							}
							position++
							goto l291
						l292:
							position, tokenIndex = position291, tokenIndex291
							if buffer[position] != rune('E') {
								goto l285
							}
							position++
						}
					l291:
						{
							position293, tokenIndex293 := position, tokenIndex
							if buffer[position] != rune('c') {
								goto l294
							}
							position++
							goto l293
						l294:
							position, tokenIndex = position293, tokenIndex293
							if buffer[position] != rune('C') {
								goto l285
							}
							position++
						}
					l293:
						{
							position295, tokenIndex295 := position, tokenIndex
							if buffer[position] != rune('i') {
								goto l296
							}
							position++
							goto l295
						l296:
							position, tokenIndex = position295, tokenIndex295
							if buffer[position] != rune('I') {
								goto l285
							}
							position++
						}
					l295:
						{
							position297, tokenIndex297 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l298
							}
							position++
							goto l297
						l298:
							position, tokenIndex = position297, tokenIndex297
							if buffer[position] != rune('E') {
								goto l285
							}
							position++
						}
					l297:
						{
							position299, tokenIndex299 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l300
							}
							position++
							goto l299
						l300:
							position, tokenIndex = position299, tokenIndex299
							if buffer[position] != rune('S') {
								goto l285
							}
							position++
						}
					l299:
						if !_rules[rule_]() {
							goto l285
						}
						goto l286
					l285:
						position, tokenIndex = position285, tokenIndex285
					}
				l286:
					{
						position301, tokenIndex301 := position, tokenIndex
						{
							position303, tokenIndex303 := position, tokenIndex
							if buffer[position] != rune('g') {
								goto l304
							}
							position++
							goto l303
						l304:
							position, tokenIndex = position303, tokenIndex303
							if buffer[position] != rune('G') {
								goto l302
							}
							position++
						}
					l303:
						{
							position305, tokenIndex305 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l306
							}
							position++
							goto l305
						l306:
							position, tokenIndex = position305, tokenIndex305
							if buffer[position] != rune('R') {
								goto l302
							}
							position++
						}
					l305:
						{
							position307, tokenIndex307 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l308
							}
							position++
							goto l307
						l308:
							position, tokenIndex = position307, tokenIndex307
							if buffer[position] != rune('O') {
								goto l302
							}
							position++
						}
					l307:
						{
							position309, tokenIndex309 := position, tokenIndex
							if buffer[position] != rune('u') {
								goto l310
							}
							position++
							goto l309
						l310:
							position, tokenIndex = position309, tokenIndex309
							if buffer[position] != rune('U') {
								goto l302
							}
							position++
						}
					l309:
						{
							position311, tokenIndex311 := position, tokenIndex
							if buffer[position] != rune('p') {
								goto l312
							}
							position++
							goto l311
						l312:
							position, tokenIndex = position311, tokenIndex311
							if buffer[position] != rune('P') {
								goto l302
							}
							position++
						}
					l311:
						goto l301
					l302:
						position, tokenIndex = position301, tokenIndex301
						{
							position313, tokenIndex313 := position, tokenIndex
							if buffer[position] != rune('c') {
								goto l314
							}
							position++
							goto l313
						l314:
							position, tokenIndex = position313, tokenIndex313
							if buffer[position] != rune('C') {
								goto l284
							}
							position++
						}
					l313:
						{
							position315, tokenIndex315 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l316
							}
							position++
							goto l315
						l316:
							position, tokenIndex = position315, tokenIndex315
							if buffer[position] != rune('O') {
								goto l284
							}
							position++
						}
					l315:
						{
							position317, tokenIndex317 := position, tokenIndex
							if buffer[position] != rune('m') {
								goto l318
							}
							position++
							goto l317
						l318:
							position, tokenIndex = position317, tokenIndex317
							if buffer[position] != rune('M') {
								goto l284
							}
							position++
						}
					l317:
						{
							position319, tokenIndex319 := position, tokenIndex
							if buffer[position] != rune('p') {
								goto l320
							}
							position++
							goto l319
						l320:
							position, tokenIndex = position319, tokenIndex319
							if buffer[position] != rune('P') {
								goto l284
							}
							position++
						}
					l319:
						{
							position321, tokenIndex321 := position, tokenIndex
							if buffer[position] != rune('l') {
								goto l322
							}
							position++
							goto l321
						l322:
							position, tokenIndex = position321, tokenIndex321
							if buffer[position] != rune('L') {
								goto l284
							}
							position++
						}
					l321:
						{
							position323, tokenIndex323 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l324
							}
							position++
							goto l323
						l324:
							position, tokenIndex = position323, tokenIndex323
							if buffer[position] != rune('E') {
								goto l284
							}
							position++
						}
					l323:
						{
							position325, tokenIndex325 := position, tokenIndex
							if buffer[position] != rune('x') {
								goto l326
							}
							position++
							goto l325
						l326:
							position, tokenIndex = position325, tokenIndex325
							if buffer[position] != rune('X') {
								goto l284
							}
							position++
						}
					l325:
					}
				l301:
					goto l220
				l284:
					position, tokenIndex = position220, tokenIndex220
					{
						position328, tokenIndex328 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l329
						}
						position++
						goto l328
					l329:
						position, tokenIndex = position328, tokenIndex328
						if buffer[position] != rune('C') {
							goto l327
						}
						position++
					}
				l328:
					{
						position330, tokenIndex330 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l331
						}
						position++
						goto l330
					l331:
						position, tokenIndex = position330, tokenIndex330
						if buffer[position] != rune('L') {
							goto l327
						}
						position++
					}
				l330:
					{
						position332, tokenIndex332 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l333
						}
						position++
						goto l332
					l333:
						position, tokenIndex = position332, tokenIndex332
						if buffer[position] != rune('A') {
							goto l327
						}
						position++
					}
				l332:
					{
						position334, tokenIndex334 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l335
						}
						position++
						goto l334
					l335:
						position, tokenIndex = position334, tokenIndex334
						if buffer[position] != rune('D') {
							goto l327
						}
						position++
					}
				l334:
					{
						position336, tokenIndex336 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l337
						}
						position++
						goto l336
					l337:
						position, tokenIndex = position336, tokenIndex336
						if buffer[position] != rune('E') {
							goto l327
						}
						position++
					}
				l336:
					goto l220
				l327:
					position, tokenIndex = position220, tokenIndex220
					{
						position339, tokenIndex339 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l340
						}
						position++
						goto l339
					l340:
						position, tokenIndex = position339, tokenIndex339
						if buffer[position] != rune('A') {
							goto l338
						}
						position++
					}
				l339:
					{
						position341, tokenIndex341 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l342
						}
						position++
						goto l341
					l342:
						position, tokenIndex = position341, tokenIndex341
						if buffer[position] != rune('U') {
							goto l338
						}
						position++
					}
				l341:
					{
						position343, tokenIndex343 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l344
						}
						position++
						goto l343
					l344:
						position, tokenIndex = position343, tokenIndex343
						if buffer[position] != rune('T') {
							goto l338
						}
						position++
					}
				l343:
					{
						position345, tokenIndex345 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l346
						}
						position++
						goto l345
					l346:
						position, tokenIndex = position345, tokenIndex345
						if buffer[position] != rune('H') {
							goto l338
						}
						position++
					}
				l345:
					{
						position347, tokenIndex347 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l348
						}
						position++
						goto l347
					l348:
						position, tokenIndex = position347, tokenIndex347
						if buffer[position] != rune('O') {
							goto l338
						}
						position++
					}
				l347:
					{
						position349, tokenIndex349 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l350
						}
						position++
						goto l349
					l350:
						position, tokenIndex = position349, tokenIndex349
						if buffer[position] != rune('R') {
							goto l338
						}
						position++
					}
				l349:
					goto l220
				l338:
					position, tokenIndex = position220, tokenIndex220
					{
						position352, tokenIndex352 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l353
						}
						position++
						goto l352
					l353:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('N') {
							goto l351
						}
						position++
					}
				l352:
					{
						position354, tokenIndex354 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l355
						}
						position++
						goto l354
					l355:
						position, tokenIndex = position354, tokenIndex354
						if buffer[position] != rune('E') {
							goto l351
						}
						position++
					}
				l354:
					{
						position356, tokenIndex356 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l357
						}
						position++
						goto l356
					l357:
						position, tokenIndex = position356, tokenIndex356
						if buffer[position] != rune('C') {
							goto l351
						}
						position++
					}
				l356:
					goto l220
				l351:
					position, tokenIndex = position220, tokenIndex220
					{
						position359, tokenIndex359 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l360
						}
						position++
						goto l359
					l360:
						position, tokenIndex = position359, tokenIndex359
						if buffer[position] != rune('V') {
							goto l358
						}
						position++
					}
				l359:
					{
						position361, tokenIndex361 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l362
						}
						position++
						goto l361
					l362:
						position, tokenIndex = position361, tokenIndex361
						if buffer[position] != rune('I') {
							goto l358
						}
						position++
					}
				l361:
					{
						position363, tokenIndex363 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l364
						}
						position++
						goto l363
					l364:
						position, tokenIndex = position363, tokenIndex363
						if buffer[position] != rune('D') {
							goto l358
						}
						position++
					}
				l363:
					{
						position365, tokenIndex365 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l366
						}
						position++
						goto l365
					l366:
						position, tokenIndex = position365, tokenIndex365
						if buffer[position] != rune('E') {
							goto l358
						}
						position++
					}
				l365:
					goto l220
				l358:
					position, tokenIndex = position220, tokenIndex220
					{
						position368, tokenIndex368 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l369
						}
						position++
						goto l368
					l369:
						position, tokenIndex = position368, tokenIndex368
						if buffer[position] != rune('F') {
							goto l367
						}
						position++
					}
				l368:
					{
						position370, tokenIndex370 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l371
						}
						position++
						goto l370
					l371:
						position, tokenIndex = position370, tokenIndex370
						if buffer[position] != rune('I') {
							goto l367
						}
						position++
					}
				l370:
					{
						position372, tokenIndex372 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l373
						}
						position++
						goto l372
					l373:
						position, tokenIndex = position372, tokenIndex372
						if buffer[position] != rune('D') {
							goto l367
						}
						position++
					}
				l372:
					{
						position374, tokenIndex374 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l375
						}
						position++
						goto l374
					l375:
						position, tokenIndex = position374, tokenIndex374
						if buffer[position] != rune('E') {
							goto l367
						}
						position++
					}
				l374:
					goto l220
				l367:
					position, tokenIndex = position220, tokenIndex220
					{
						position376, tokenIndex376 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l377
						}
						position++
						goto l376
					l377:
						position, tokenIndex = position376, tokenIndex376
						if buffer[position] != rune('N') {
							goto l218
						}
						position++
					}
				l376:
					{
						position378, tokenIndex378 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l379
						}
						position++
						goto l378
					l379:
						position, tokenIndex = position378, tokenIndex378
						if buffer[position] != rune('O') {
							goto l218
						}
						position++
					}
				l378:
					{
						position380, tokenIndex380 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l381
						}
						position++
						goto l380
					l381:
						position, tokenIndex = position380, tokenIndex380
						if buffer[position] != rune('N') {
							goto l218
						}
						position++
					}
				l380:
				}
			l220:
				{
					position382, tokenIndex382 := position, tokenIndex
					if !_rules[ruleNotLetterOrEnd]() {
						goto l218
					}
					position, tokenIndex = position382, tokenIndex382
				}
				add(ruleTailStopWords, position219)
			}
			return true
		l218:
			position, tokenIndex = position218, tokenIndex218
			return false
		},
		/* 9 TailPhrase2 <- <(((('s' / 'S') ('e' / 'E') ('r' / 'R') ('o' / 'O') ((('v' / 'V') ('a' / 'A') ('r' / 'R')) / (('t' / 'T') ('y' / 'Y') ('p' / 'P') ('e' / 'E')))) / (('s' / 'S') ('e' / 'E') ('n' / 'N') ('s' / 'S') ('u' / 'U')) / (('a' / 'A') ('u' / 'U') ('c' / 'C') ('t' / 'T')) / (('s' / 'S') ('e' / 'E') ('c' / 'C')) / (('n' / 'N') ('e' / 'E') ('a' / 'A') ('r' / 'R')) / (('s' / 'S') ('t' / 'T') ('r' / 'R'))) '.'? &NotLetterOrEnd)> */
		func() bool {
			position383, tokenIndex383 := position, tokenIndex
			{
				position384 := position
				{
					position385, tokenIndex385 := position, tokenIndex
					{
						position387, tokenIndex387 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l388
						}
						position++
						goto l387
					l388:
						position, tokenIndex = position387, tokenIndex387
						if buffer[position] != rune('S') {
							goto l386
						}
						position++
					}
				l387:
					{
						position389, tokenIndex389 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l390
						}
						position++
						goto l389
					l390:
						position, tokenIndex = position389, tokenIndex389
						if buffer[position] != rune('E') {
							goto l386
						}
						position++
					}
				l389:
					{
						position391, tokenIndex391 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l392
						}
						position++
						goto l391
					l392:
						position, tokenIndex = position391, tokenIndex391
						if buffer[position] != rune('R') {
							goto l386
						}
						position++
					}
				l391:
					{
						position393, tokenIndex393 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l394
						}
						position++
						goto l393
					l394:
						position, tokenIndex = position393, tokenIndex393
						if buffer[position] != rune('O') {
							goto l386
						}
						position++
					}
				l393:
					{
						position395, tokenIndex395 := position, tokenIndex
						{
							position397, tokenIndex397 := position, tokenIndex
							if buffer[position] != rune('v') {
								goto l398
							}
							position++
							goto l397
						l398:
							position, tokenIndex = position397, tokenIndex397
							if buffer[position] != rune('V') {
								goto l396
							}
							position++
						}
					l397:
						{
							position399, tokenIndex399 := position, tokenIndex
							if buffer[position] != rune('a') {
								goto l400
							}
							position++
							goto l399
						l400:
							position, tokenIndex = position399, tokenIndex399
							if buffer[position] != rune('A') {
								goto l396
							}
							position++
						}
					l399:
						{
							position401, tokenIndex401 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l402
							}
							position++
							goto l401
						l402:
							position, tokenIndex = position401, tokenIndex401
							if buffer[position] != rune('R') {
								goto l396
							}
							position++
						}
					l401:
						goto l395
					l396:
						position, tokenIndex = position395, tokenIndex395
						{
							position403, tokenIndex403 := position, tokenIndex
							if buffer[position] != rune('t') {
								goto l404
							}
							position++
							goto l403
						l404:
							position, tokenIndex = position403, tokenIndex403
							if buffer[position] != rune('T') {
								goto l386
							}
							position++
						}
					l403:
						{
							position405, tokenIndex405 := position, tokenIndex
							if buffer[position] != rune('y') {
								goto l406
							}
							position++
							goto l405
						l406:
							position, tokenIndex = position405, tokenIndex405
							if buffer[position] != rune('Y') {
								goto l386
							}
							position++
						}
					l405:
						{
							position407, tokenIndex407 := position, tokenIndex
							if buffer[position] != rune('p') {
								goto l408
							}
							position++
							goto l407
						l408:
							position, tokenIndex = position407, tokenIndex407
							if buffer[position] != rune('P') {
								goto l386
							}
							position++
						}
					l407:
						{
							position409, tokenIndex409 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l410
							}
							position++
							goto l409
						l410:
							position, tokenIndex = position409, tokenIndex409
							if buffer[position] != rune('E') {
								goto l386
							}
							position++
						}
					l409:
					}
				l395:
					goto l385
				l386:
					position, tokenIndex = position385, tokenIndex385
					{
						position412, tokenIndex412 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l413
						}
						position++
						goto l412
					l413:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('S') {
							goto l411
						}
						position++
					}
				l412:
					{
						position414, tokenIndex414 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l415
						}
						position++
						goto l414
					l415:
						position, tokenIndex = position414, tokenIndex414
						if buffer[position] != rune('E') {
							goto l411
						}
						position++
					}
				l414:
					{
						position416, tokenIndex416 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l417
						}
						position++
						goto l416
					l417:
						position, tokenIndex = position416, tokenIndex416
						if buffer[position] != rune('N') {
							goto l411
						}
						position++
					}
				l416:
					{
						position418, tokenIndex418 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l419
						}
						position++
						goto l418
					l419:
						position, tokenIndex = position418, tokenIndex418
						if buffer[position] != rune('S') {
							goto l411
						}
						position++
					}
				l418:
					{
						position420, tokenIndex420 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l421
						}
						position++
						goto l420
					l421:
						position, tokenIndex = position420, tokenIndex420
						if buffer[position] != rune('U') {
							goto l411
						}
						position++
					}
				l420:
					goto l385
				l411:
					position, tokenIndex = position385, tokenIndex385
					{
						position423, tokenIndex423 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l424
						}
						position++
						goto l423
					l424:
						position, tokenIndex = position423, tokenIndex423
						if buffer[position] != rune('A') {
							goto l422
						}
						position++
					}
				l423:
					{
						position425, tokenIndex425 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l426
						}
						position++
						goto l425
					l426:
						position, tokenIndex = position425, tokenIndex425
						if buffer[position] != rune('U') {
							goto l422
						}
						position++
					}
				l425:
					{
						position427, tokenIndex427 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l428
						}
						position++
						goto l427
					l428:
						position, tokenIndex = position427, tokenIndex427
						if buffer[position] != rune('C') {
							goto l422
						}
						position++
					}
				l427:
					{
						position429, tokenIndex429 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l430
						}
						position++
						goto l429
					l430:
						position, tokenIndex = position429, tokenIndex429
						if buffer[position] != rune('T') {
							goto l422
						}
						position++
					}
				l429:
					goto l385
				l422:
					position, tokenIndex = position385, tokenIndex385
					{
						position432, tokenIndex432 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l433
						}
						position++
						goto l432
					l433:
						position, tokenIndex = position432, tokenIndex432
						if buffer[position] != rune('S') {
							goto l431
						}
						position++
					}
				l432:
					{
						position434, tokenIndex434 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l435
						}
						position++
						goto l434
					l435:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('E') {
							goto l431
						}
						position++
					}
				l434:
					{
						position436, tokenIndex436 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l437
						}
						position++
						goto l436
					l437:
						position, tokenIndex = position436, tokenIndex436
						if buffer[position] != rune('C') {
							goto l431
						}
						position++
					}
				l436:
					goto l385
				l431:
					position, tokenIndex = position385, tokenIndex385
					{
						position439, tokenIndex439 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l440
						}
						position++
						goto l439
					l440:
						position, tokenIndex = position439, tokenIndex439
						if buffer[position] != rune('N') {
							goto l438
						}
						position++
					}
				l439:
					{
						position441, tokenIndex441 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l442
						}
						position++
						goto l441
					l442:
						position, tokenIndex = position441, tokenIndex441
						if buffer[position] != rune('E') {
							goto l438
						}
						position++
					}
				l441:
					{
						position443, tokenIndex443 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l444
						}
						position++
						goto l443
					l444:
						position, tokenIndex = position443, tokenIndex443
						if buffer[position] != rune('A') {
							goto l438
						}
						position++
					}
				l443:
					{
						position445, tokenIndex445 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l446
						}
						position++
						goto l445
					l446:
						position, tokenIndex = position445, tokenIndex445
						if buffer[position] != rune('R') {
							goto l438
						}
						position++
					}
				l445:
					goto l385
				l438:
					position, tokenIndex = position385, tokenIndex385
					{
						position447, tokenIndex447 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l448
						}
						position++
						goto l447
					l448:
						position, tokenIndex = position447, tokenIndex447
						if buffer[position] != rune('S') {
							goto l383
						}
						position++
					}
				l447:
					{
						position449, tokenIndex449 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l450
						}
						position++
						goto l449
					l450:
						position, tokenIndex = position449, tokenIndex449
						if buffer[position] != rune('T') {
							goto l383
						}
						position++
					}
				l449:
					{
						position451, tokenIndex451 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l452
						}
						position++
						goto l451
					l452:
						position, tokenIndex = position451, tokenIndex451
						if buffer[position] != rune('R') {
							goto l383
						}
						position++
					}
				l451:
				}
			l385:
				{
					position453, tokenIndex453 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l453
					}
					position++
					goto l454
				l453:
					position, tokenIndex = position453, tokenIndex453
				}
			l454:
				{
					position455, tokenIndex455 := position, tokenIndex
					if !_rules[ruleNotLetterOrEnd]() {
						goto l383
					}
					position, tokenIndex = position455, tokenIndex455
				}
				add(ruleTailPhrase2, position384)
			}
			return true
		l383:
			position, tokenIndex = position383, tokenIndex383
			return false
		},
		/* 10 TailPhrase1 <- <((('('? (('h' 't') / ('h' 'o' 'r' 't'))) / ('s' 'p' 'e' 'c') / ('n' 'o' 'v' '.'? _ ('s' 'p' 'e' 'c'))) '.'? &NotLetterOrEnd)> */
		func() bool {
			position456, tokenIndex456 := position, tokenIndex
			{
				position457 := position
				{
					position458, tokenIndex458 := position, tokenIndex
					{
						position460, tokenIndex460 := position, tokenIndex
						if buffer[position] != rune('(') {
							goto l460
						}
						position++
						goto l461
					l460:
						position, tokenIndex = position460, tokenIndex460
					}
				l461:
					{
						position462, tokenIndex462 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l463
						}
						position++
						if buffer[position] != rune('t') {
							goto l463
						}
						position++
						goto l462
					l463:
						position, tokenIndex = position462, tokenIndex462
						if buffer[position] != rune('h') {
							goto l459
						}
						position++
						if buffer[position] != rune('o') {
							goto l459
						}
						position++
						if buffer[position] != rune('r') {
							goto l459
						}
						position++
						if buffer[position] != rune('t') {
							goto l459
						}
						position++
					}
				l462:
					goto l458
				l459:
					position, tokenIndex = position458, tokenIndex458
					if buffer[position] != rune('s') {
						goto l464
					}
					position++
					if buffer[position] != rune('p') {
						goto l464
					}
					position++
					if buffer[position] != rune('e') {
						goto l464
					}
					position++
					if buffer[position] != rune('c') {
						goto l464
					}
					position++
					goto l458
				l464:
					position, tokenIndex = position458, tokenIndex458
					if buffer[position] != rune('n') {
						goto l456
					}
					position++
					if buffer[position] != rune('o') {
						goto l456
					}
					position++
					if buffer[position] != rune('v') {
						goto l456
					}
					position++
					{
						position465, tokenIndex465 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l465
						}
						position++
						goto l466
					l465:
						position, tokenIndex = position465, tokenIndex465
					}
				l466:
					if !_rules[rule_]() {
						goto l456
					}
					if buffer[position] != rune('s') {
						goto l456
					}
					position++
					if buffer[position] != rune('p') {
						goto l456
					}
					position++
					if buffer[position] != rune('e') {
						goto l456
					}
					position++
					if buffer[position] != rune('c') {
						goto l456
					}
					position++
				}
			l458:
				{
					position467, tokenIndex467 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l467
					}
					position++
					goto l468
				l467:
					position, tokenIndex = position467, tokenIndex467
				}
			l468:
				{
					position469, tokenIndex469 := position, tokenIndex
					if !_rules[ruleNotLetterOrEnd]() {
						goto l456
					}
					position, tokenIndex = position469, tokenIndex469
				}
				add(ruleTailPhrase1, position457)
			}
			return true
		l456:
			position, tokenIndex = position456, tokenIndex456
			return false
		},
		/* 11 SpaceOrEnd <- <(CommaSpace? END)> */
		func() bool {
			position470, tokenIndex470 := position, tokenIndex
			{
				position471 := position
				{
					position472, tokenIndex472 := position, tokenIndex
					if !_rules[ruleCommaSpace]() {
						goto l472
					}
					goto l473
				l472:
					position, tokenIndex = position472, tokenIndex472
				}
			l473:
				if !_rules[ruleEND]() {
					goto l470
				}
				add(ruleSpaceOrEnd, position471)
			}
			return true
		l470:
			position, tokenIndex = position470, tokenIndex470
			return false
		},
		/* 12 CommaSpace <- <((_? ',' _?)+ / _)> */
		func() bool {
			position474, tokenIndex474 := position, tokenIndex
			{
				position475 := position
				{
					position476, tokenIndex476 := position, tokenIndex
					{
						position480, tokenIndex480 := position, tokenIndex
						if !_rules[rule_]() {
							goto l480
						}
						goto l481
					l480:
						position, tokenIndex = position480, tokenIndex480
					}
				l481:
					if buffer[position] != rune(',') {
						goto l477
					}
					position++
					{
						position482, tokenIndex482 := position, tokenIndex
						if !_rules[rule_]() {
							goto l482
						}
						goto l483
					l482:
						position, tokenIndex = position482, tokenIndex482
					}
				l483:
				l478:
					{
						position479, tokenIndex479 := position, tokenIndex
						{
							position484, tokenIndex484 := position, tokenIndex
							if !_rules[rule_]() {
								goto l484
							}
							goto l485
						l484:
							position, tokenIndex = position484, tokenIndex484
						}
					l485:
						if buffer[position] != rune(',') {
							goto l479
						}
						position++
						{
							position486, tokenIndex486 := position, tokenIndex
							if !_rules[rule_]() {
								goto l486
							}
							goto l487
						l486:
							position, tokenIndex = position486, tokenIndex486
						}
					l487:
						goto l478
					l479:
						position, tokenIndex = position479, tokenIndex479
					}
					goto l476
				l477:
					position, tokenIndex = position476, tokenIndex476
					if !_rules[rule_]() {
						goto l474
					}
				}
			l476:
				add(ruleCommaSpace, position475)
			}
			return true
		l474:
			position, tokenIndex = position474, tokenIndex474
			return false
		},
		/* 13 _ <- <(MultipleSpace / SingleSpace)> */
		func() bool {
			position488, tokenIndex488 := position, tokenIndex
			{
				position489 := position
				{
					position490, tokenIndex490 := position, tokenIndex
					if !_rules[ruleMultipleSpace]() {
						goto l491
					}
					goto l490
				l491:
					position, tokenIndex = position490, tokenIndex490
					if !_rules[ruleSingleSpace]() {
						goto l488
					}
				}
			l490:
				add(rule_, position489)
			}
			return true
		l488:
			position, tokenIndex = position488, tokenIndex488
			return false
		},
		/* 14 NotLetterOrEnd <- <(NotLetter / END)> */
		func() bool {
			position492, tokenIndex492 := position, tokenIndex
			{
				position493 := position
				{
					position494, tokenIndex494 := position, tokenIndex
					if !_rules[ruleNotLetter]() {
						goto l495
					}
					goto l494
				l495:
					position, tokenIndex = position494, tokenIndex494
					if !_rules[ruleEND]() {
						goto l492
					}
				}
			l494:
				add(ruleNotLetterOrEnd, position493)
			}
			return true
		l492:
			position, tokenIndex = position492, tokenIndex492
			return false
		},
		/* 15 NotLetter <- <(!([a-z] / [A-Z] / ([0-9] / [0-9]) / '_' / '-') .)> */
		func() bool {
			position496, tokenIndex496 := position, tokenIndex
			{
				position497 := position
				{
					position498, tokenIndex498 := position, tokenIndex
					{
						position499, tokenIndex499 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l500
						}
						position++
						goto l499
					l500:
						position, tokenIndex = position499, tokenIndex499
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l501
						}
						position++
						goto l499
					l501:
						position, tokenIndex = position499, tokenIndex499
						{
							position503, tokenIndex503 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l504
							}
							position++
							goto l503
						l504:
							position, tokenIndex = position503, tokenIndex503
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l502
							}
							position++
						}
					l503:
						goto l499
					l502:
						position, tokenIndex = position499, tokenIndex499
						if buffer[position] != rune('_') {
							goto l505
						}
						position++
						goto l499
					l505:
						position, tokenIndex = position499, tokenIndex499
						if buffer[position] != rune('-') {
							goto l498
						}
						position++
					}
				l499:
					goto l496
				l498:
					position, tokenIndex = position498, tokenIndex498
				}
				if !matchDot() {
					goto l496
				}
				add(ruleNotLetter, position497)
			}
			return true
		l496:
			position, tokenIndex = position496, tokenIndex496
			return false
		},
		/* 16 MultipleSpace <- <(SingleSpace SingleSpace+)> */
		func() bool {
			position506, tokenIndex506 := position, tokenIndex
			{
				position507 := position
				if !_rules[ruleSingleSpace]() {
					goto l506
				}
				if !_rules[ruleSingleSpace]() {
					goto l506
				}
			l508:
				{
					position509, tokenIndex509 := position, tokenIndex
					if !_rules[ruleSingleSpace]() {
						goto l509
					}
					goto l508
				l509:
					position, tokenIndex = position509, tokenIndex509
				}
				add(ruleMultipleSpace, position507)
			}
			return true
		l506:
			position, tokenIndex = position506, tokenIndex506
			return false
		},
		/* 17 SingleSpace <- <(' ' / OtherSpace)> */
		func() bool {
			position510, tokenIndex510 := position, tokenIndex
			{
				position511 := position
				{
					position512, tokenIndex512 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l513
					}
					position++
					goto l512
				l513:
					position, tokenIndex = position512, tokenIndex512
					if !_rules[ruleOtherSpace]() {
						goto l510
					}
				}
			l512:
				add(ruleSingleSpace, position511)
			}
			return true
		l510:
			position, tokenIndex = position510, tokenIndex510
			return false
		},
		/* 18 OtherSpace <- <('\u3000' / '\u00a0' / '\t' / '\r' / '\n' / '\f' / '\v')> */
		func() bool {
			position514, tokenIndex514 := position, tokenIndex
			{
				position515 := position
				{
					position516, tokenIndex516 := position, tokenIndex
					if buffer[position] != rune('\u3000') {
						goto l517
					}
					position++
					goto l516
				l517:
					position, tokenIndex = position516, tokenIndex516
					if buffer[position] != rune('\u00a0') {
						goto l518
					}
					position++
					goto l516
				l518:
					position, tokenIndex = position516, tokenIndex516
					if buffer[position] != rune('\t') {
						goto l519
					}
					position++
					goto l516
				l519:
					position, tokenIndex = position516, tokenIndex516
					if buffer[position] != rune('\r') {
						goto l520
					}
					position++
					goto l516
				l520:
					position, tokenIndex = position516, tokenIndex516
					if buffer[position] != rune('\n') {
						goto l521
					}
					position++
					goto l516
				l521:
					position, tokenIndex = position516, tokenIndex516
					if buffer[position] != rune('\f') {
						goto l522
					}
					position++
					goto l516
				l522:
					position, tokenIndex = position516, tokenIndex516
					if buffer[position] != rune('\v') {
						goto l514
					}
					position++
				}
			l516:
				add(ruleOtherSpace, position515)
			}
			return true
		l514:
			position, tokenIndex = position514, tokenIndex514
			return false
		},
		/* 19 END <- <!.> */
		func() bool {
			position523, tokenIndex523 := position, tokenIndex
			{
				position524 := position
				{
					position525, tokenIndex525 := position, tokenIndex
					if !matchDot() {
						goto l525
					}
					goto l523
				l525:
					position, tokenIndex = position525, tokenIndex525
				}
				add(ruleEND, position524)
			}
			return true
		l523:
			position, tokenIndex = position523, tokenIndex523
			return false
		},
		/* 21 Action0 <- <{ p.tailIndex = int(token.begin) }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
