package preparser

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleString
	ruleHead
	ruleTail
	ruleWord
	ruleTailPhrase
	ruleTailLastWordJunk
	ruleTailPhrase4
	ruleTailPhrase3
	ruleTailStopWords
	ruleTailPhrase2
	ruleTailPhrase1
	ruleSpaceOrEnd
	ruleCommaSpace
	rule_
	ruleNotLetterOrEnd
	ruleNotLetter
	ruleMultipleSpace
	ruleSingleSpace
	ruleOtherSpace
	ruleEND
	ruleAction0
)

var rul3s = [...]string{
	"Unknown",
	"String",
	"Head",
	"Tail",
	"Word",
	"TailPhrase",
	"TailLastWordJunk",
	"TailPhrase4",
	"TailPhrase3",
	"TailStopWords",
	"TailPhrase2",
	"TailPhrase1",
	"SpaceOrEnd",
	"CommaSpace",
	"_",
	"NotLetterOrEnd",
	"NotLetter",
	"MultipleSpace",
	"SingleSpace",
	"OtherSpace",
	"END",
	"Action0",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type PreParser struct {
	PreString
	Buffer string
	buffer []rune
	rules  [22]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *PreParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *PreParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *PreParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *PreParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *PreParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *PreParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *PreParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case ruleAction0:
			p.tailIndex = int(token.begin)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*PreParser) error {
	return func(p *PreParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*PreParser) error {
	return func(p *PreParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *PreParser) Init(options ...func(*PreParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 String <- <(_? ((Head Tail?) / (TailPhrase .*)) SpaceOrEnd)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rule_]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				{
					position4, tokenIndex4 := position, tokenIndex
					if !_rules[ruleHead]() {
						goto l5
					}
					{
						position6, tokenIndex6 := position, tokenIndex
						if !_rules[ruleTail]() {
							goto l6
						}
						goto l7
					l6:
						position, tokenIndex = position6, tokenIndex6
					}
				l7:
					goto l4
				l5:
					position, tokenIndex = position4, tokenIndex4
					if !_rules[ruleTailPhrase]() {
						goto l0
					}
				l8:
					{
						position9, tokenIndex9 := position, tokenIndex
						if !matchDot() {
							goto l9
						}
						goto l8
					l9:
						position, tokenIndex = position9, tokenIndex9
					}
				}
			l4:
				if !_rules[ruleSpaceOrEnd]() {
					goto l0
				}
				add(ruleString, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Head <- <(Word (CommaSpace Word)* &(Tail / SpaceOrEnd))> */
		func() bool {
			position10, tokenIndex10 := position, tokenIndex
			{
				position11 := position
				if !_rules[ruleWord]() {
					goto l10
				}
			l12:
				{
					position13, tokenIndex13 := position, tokenIndex
					if !_rules[ruleCommaSpace]() {
						goto l13
					}
					if !_rules[ruleWord]() {
						goto l13
					}
					goto l12
				l13:
					position, tokenIndex = position13, tokenIndex13
				}
				{
					position14, tokenIndex14 := position, tokenIndex
					{
						position15, tokenIndex15 := position, tokenIndex
						if !_rules[ruleTail]() {
							goto l16
						}
						goto l15
					l16:
						position, tokenIndex = position15, tokenIndex15
						if !_rules[ruleSpaceOrEnd]() {
							goto l10
						}
					}
				l15:
					position, tokenIndex = position14, tokenIndex14
				}
				add(ruleHead, position11)
			}
			return true
		l10:
			position, tokenIndex = position10, tokenIndex10
			return false
		},
		/* 2 Tail <- <(Action0 CommaSpace TailPhrase .*)> */
		func() bool {
			position17, tokenIndex17 := position, tokenIndex
			{
				position18 := position
				if !_rules[ruleAction0]() {
					goto l17
				}
				if !_rules[ruleCommaSpace]() {
					goto l17
				}
				if !_rules[ruleTailPhrase]() {
					goto l17
				}
			l19:
				{
					position20, tokenIndex20 := position, tokenIndex
					if !matchDot() {
						goto l20
					}
					goto l19
				l20:
					position, tokenIndex = position20, tokenIndex20
				}
				add(ruleTail, position18)
			}
			return true
		l17:
			position, tokenIndex = position17, tokenIndex17
			return false
		},
		/* 3 Word <- <((!TailPhrase (!(',' / ' ') .)+) / ',')> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				{
					position23, tokenIndex23 := position, tokenIndex
					{
						position25, tokenIndex25 := position, tokenIndex
						if !_rules[ruleTailPhrase]() {
							goto l25
						}
						goto l24
					l25:
						position, tokenIndex = position25, tokenIndex25
					}
					{
						position28, tokenIndex28 := position, tokenIndex
						{
							position29, tokenIndex29 := position, tokenIndex
							if buffer[position] != rune(',') {
								goto l30
							}
							position++
							goto l29
						l30:
							position, tokenIndex = position29, tokenIndex29
							if buffer[position] != rune(' ') {
								goto l28
							}
							position++
						}
					l29:
						goto l24
					l28:
						position, tokenIndex = position28, tokenIndex28
					}
					if !matchDot() {
						goto l24
					}
				l26:
					{
						position27, tokenIndex27 := position, tokenIndex
						{
							position31, tokenIndex31 := position, tokenIndex
							{
								position32, tokenIndex32 := position, tokenIndex
								if buffer[position] != rune(',') {
									goto l33
								}
								position++
								goto l32
							l33:
								position, tokenIndex = position32, tokenIndex32
								if buffer[position] != rune(' ') {
									goto l31
								}
								position++
							}
						l32:
							goto l27
						l31:
							position, tokenIndex = position31, tokenIndex31
						}
						if !matchDot() {
							goto l27
						}
						goto l26
					l27:
						position, tokenIndex = position27, tokenIndex27
					}
					goto l23
				l24:
					position, tokenIndex = position23, tokenIndex23
					if buffer[position] != rune(',') {
						goto l21
					}
					position++
				}
			l23:
				add(ruleWord, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 4 TailPhrase <- <(TailLastWordJunk / TailPhrase4 / TailPhrase3 / TailStopWords / TailPhrase2 / TailPhrase1)> */
		func() bool {
			position34, tokenIndex34 := position, tokenIndex
			{
				position35 := position
				{
					position36, tokenIndex36 := position, tokenIndex
					if !_rules[ruleTailLastWordJunk]() {
						goto l37
					}
					goto l36
				l37:
					position, tokenIndex = position36, tokenIndex36
					if !_rules[ruleTailPhrase4]() {
						goto l38
					}
					goto l36
				l38:
					position, tokenIndex = position36, tokenIndex36
					if !_rules[ruleTailPhrase3]() {
						goto l39
					}
					goto l36
				l39:
					position, tokenIndex = position36, tokenIndex36
					if !_rules[ruleTailStopWords]() {
						goto l40
					}
					goto l36
				l40:
					position, tokenIndex = position36, tokenIndex36
					if !_rules[ruleTailPhrase2]() {
						goto l41
					}
					goto l36
				l41:
					position, tokenIndex = position36, tokenIndex36
					if !_rules[ruleTailPhrase1]() {
						goto l34
					}
				}
			l36:
				add(ruleTailPhrase, position35)
			}
			return true
		l34:
			position, tokenIndex = position34, tokenIndex34
			return false
		},
		/* 5 TailLastWordJunk <- <(((((('v' / 'V') ('a' / 'A') ('r' / 'R')) / (('i' / 'I') ('n' / 'N') ('e' / 'E') ('d' / 'D')) / (('s' / 'S') ('s' / 'S') ('p' / 'P')) / (('s' / 'S') ('u' / 'U') ('b' / 'B') ('s' / 'S') ('p' / 'P')) / (('s' / 'S') ('u' / 'U') ('b' / 'B') ('g' / 'G') ('e' / 'E') ('n' / 'N'))) '.'?) / (('s' / 'S') ('e' / 'E') ('n' / 'N') ('s' / 'S') ('u' / 'U')) / (('n' / 'N') ('e' / 'E') ('w' / 'W')) / (('n' / 'N') ('o' / 'O') ('n' / 'N')) / (('n' / 'N') ('e' / 'E') ('c' / 'C')) / (('h' / 'H') ('y' / 'Y') ('b' / 'B') ('r' / 'R') ('i' / 'I') ('d' / 'D')) / (('v' / 'V') ('o' / 'O') ('n' / 'N')) / ('P' '.' _? ('P' '.')) / (('m' / 'M') ('s' / 'S'))) '?'? &SpaceOrEnd)> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				{
					position44, tokenIndex44 := position, tokenIndex
					{
						position46, tokenIndex46 := position, tokenIndex
						{
							position48, tokenIndex48 := position, tokenIndex
							if buffer[position] != rune('v') {
								goto l49
							}
							position++
							goto l48
						l49:
							position, tokenIndex = position48, tokenIndex48
							if buffer[position] != rune('V') {
								goto l47
							}
							position++
						}
					l48:
						{
							position50, tokenIndex50 := position, tokenIndex
							if buffer[position] != rune('a') {
								goto l51
							}
							position++
							goto l50
						l51:
							position, tokenIndex = position50, tokenIndex50
							if buffer[position] != rune('A') {
								goto l47
							}
							position++
						}
					l50:
						{
							position52, tokenIndex52 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l53
							}
							position++
							goto l52
						l53:
							position, tokenIndex = position52, tokenIndex52
							if buffer[position] != rune('R') {
								goto l47
							}
							position++
						}
					l52:
						goto l46
					l47:
						position, tokenIndex = position46, tokenIndex46
						{
							position55, tokenIndex55 := position, tokenIndex
							if buffer[position] != rune('i') {
								goto l56
							}
							position++
							goto l55
						l56:
							position, tokenIndex = position55, tokenIndex55
							if buffer[position] != rune('I') {
								goto l54
							}
							position++
						}
					l55:
						{
							position57, tokenIndex57 := position, tokenIndex
							if buffer[position] != rune('n') {
								goto l58
							}
							position++
							goto l57
						l58:
							position, tokenIndex = position57, tokenIndex57
							if buffer[position] != rune('N') {
								goto l54
							}
							position++
						}
					l57:
						{
							position59, tokenIndex59 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l60
							}
							position++
							goto l59
						l60:
							position, tokenIndex = position59, tokenIndex59
							if buffer[position] != rune('E') {
								goto l54
							}
							position++
						}
					l59:
						{
							position61, tokenIndex61 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l62
							}
							position++
							goto l61
						l62:
							position, tokenIndex = position61, tokenIndex61
							if buffer[position] != rune('D') {
								goto l54
							}
							position++
						}
					l61:
						goto l46
					l54:
						position, tokenIndex = position46, tokenIndex46
						{
							position64, tokenIndex64 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l65
							}
							position++
							goto l64
						l65:
							position, tokenIndex = position64, tokenIndex64
							if buffer[position] != rune('S') {
								goto l63
							}
							position++
						}
					l64:
						{
							position66, tokenIndex66 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l67
							}
							position++
							goto l66
						l67:
							position, tokenIndex = position66, tokenIndex66
							if buffer[position] != rune('S') {
								goto l63
							}
							position++
						}
					l66:
						{
							position68, tokenIndex68 := position, tokenIndex
							if buffer[position] != rune('p') {
								goto l69
							}
							position++
							goto l68
						l69:
							position, tokenIndex = position68, tokenIndex68
							if buffer[position] != rune('P') {
								goto l63
							}
							position++
						}
					l68:
						goto l46
					l63:
						position, tokenIndex = position46, tokenIndex46
						{
							position71, tokenIndex71 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l72
							}
							position++
							goto l71
						l72:
							position, tokenIndex = position71, tokenIndex71
							if buffer[position] != rune('S') {
								goto l70
							}
							position++
						}
					l71:
						{
							position73, tokenIndex73 := position, tokenIndex
							if buffer[position] != rune('u') {
								goto l74
							}
							position++
							goto l73
						l74:
							position, tokenIndex = position73, tokenIndex73
							if buffer[position] != rune('U') {
								goto l70
							}
							position++
						}
					l73:
						{
							position75, tokenIndex75 := position, tokenIndex
							if buffer[position] != rune('b') {
								goto l76
							}
							position++
							goto l75
						l76:
							position, tokenIndex = position75, tokenIndex75
							if buffer[position] != rune('B') {
								goto l70
							}
							position++
						}
					l75:
						{
							position77, tokenIndex77 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l78
							}
							position++
							goto l77
						l78:
							position, tokenIndex = position77, tokenIndex77
							if buffer[position] != rune('S') {
								goto l70
							}
							position++
						}
					l77:
						{
							position79, tokenIndex79 := position, tokenIndex
							if buffer[position] != rune('p') {
								goto l80
							}
							position++
							goto l79
						l80:
							position, tokenIndex = position79, tokenIndex79
							if buffer[position] != rune('P') {
								goto l70
							}
							position++
						}
					l79:
						goto l46
					l70:
						position, tokenIndex = position46, tokenIndex46
						{
							position81, tokenIndex81 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l82
							}
							position++
							goto l81
						l82:
							position, tokenIndex = position81, tokenIndex81
							if buffer[position] != rune('S') {
								goto l45
							}
							position++
						}
					l81:
						{
							position83, tokenIndex83 := position, tokenIndex
							if buffer[position] != rune('u') {
								goto l84
							}
							position++
							goto l83
						l84:
							position, tokenIndex = position83, tokenIndex83
							if buffer[position] != rune('U') {
								goto l45
							}
							position++
						}
					l83:
						{
							position85, tokenIndex85 := position, tokenIndex
							if buffer[position] != rune('b') {
								goto l86
							}
							position++
							goto l85
						l86:
							position, tokenIndex = position85, tokenIndex85
							if buffer[position] != rune('B') {
								goto l45
							}
							position++
						}
					l85:
						{
							position87, tokenIndex87 := position, tokenIndex
							if buffer[position] != rune('g') {
								goto l88
							}
							position++
							goto l87
						l88:
							position, tokenIndex = position87, tokenIndex87
							if buffer[position] != rune('G') {
								goto l45
							}
							position++
						}
					l87:
						{
							position89, tokenIndex89 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l90
							}
							position++
							goto l89
						l90:
							position, tokenIndex = position89, tokenIndex89
							if buffer[position] != rune('E') {
								goto l45
							}
							position++
						}
					l89:
						{
							position91, tokenIndex91 := position, tokenIndex
							if buffer[position] != rune('n') {
								goto l92
							}
							position++
							goto l91
						l92:
							position, tokenIndex = position91, tokenIndex91
							if buffer[position] != rune('N') {
								goto l45
							}
							position++
						}
					l91:
					}
				l46:
					{
						position93, tokenIndex93 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l93
						}
						position++
						goto l94
					l93:
						position, tokenIndex = position93, tokenIndex93
					}
				l94:
					goto l44
				l45:
					position, tokenIndex = position44, tokenIndex44
					{
						position96, tokenIndex96 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l97
						}
						position++
						goto l96
					l97:
						position, tokenIndex = position96, tokenIndex96
						if buffer[position] != rune('S') {
							goto l95
						}
						position++
					}
				l96:
					{
						position98, tokenIndex98 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l99
						}
						position++
						goto l98
					l99:
						position, tokenIndex = position98, tokenIndex98
						if buffer[position] != rune('E') {
							goto l95
						}
						position++
					}
				l98:
					{
						position100, tokenIndex100 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l101
						}
						position++
						goto l100
					l101:
						position, tokenIndex = position100, tokenIndex100
						if buffer[position] != rune('N') {
							goto l95
						}
						position++
					}
				l100:
					{
						position102, tokenIndex102 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l103
						}
						position++
						goto l102
					l103:
						position, tokenIndex = position102, tokenIndex102
						if buffer[position] != rune('S') {
							goto l95
						}
						position++
					}
				l102:
					{
						position104, tokenIndex104 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l105
						}
						position++
						goto l104
					l105:
						position, tokenIndex = position104, tokenIndex104
						if buffer[position] != rune('U') {
							goto l95
						}
						position++
					}
				l104:
					goto l44
				l95:
					position, tokenIndex = position44, tokenIndex44
					{
						position107, tokenIndex107 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l108
						}
						position++
						goto l107
					l108:
						position, tokenIndex = position107, tokenIndex107
						if buffer[position] != rune('N') {
							goto l106
						}
						position++
					}
				l107:
					{
						position109, tokenIndex109 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l110
						}
						position++
						goto l109
					l110:
						position, tokenIndex = position109, tokenIndex109
						if buffer[position] != rune('E') {
							goto l106
						}
						position++
					}
				l109:
					{
						position111, tokenIndex111 := position, tokenIndex
						if buffer[position] != rune('w') {
							goto l112
						}
						position++
						goto l111
					l112:
						position, tokenIndex = position111, tokenIndex111
						if buffer[position] != rune('W') {
							goto l106
						}
						position++
					}
				l111:
					goto l44
				l106:
					position, tokenIndex = position44, tokenIndex44
					{
						position114, tokenIndex114 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l115
						}
						position++
						goto l114
					l115:
						position, tokenIndex = position114, tokenIndex114
						if buffer[position] != rune('N') {
							goto l113
						}
						position++
					}
				l114:
					{
						position116, tokenIndex116 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l117
						}
						position++
						goto l116
					l117:
						position, tokenIndex = position116, tokenIndex116
						if buffer[position] != rune('O') {
							goto l113
						}
						position++
					}
				l116:
					{
						position118, tokenIndex118 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l119
						}
						position++
						goto l118
					l119:
						position, tokenIndex = position118, tokenIndex118
						if buffer[position] != rune('N') {
							goto l113
						}
						position++
					}
				l118:
					goto l44
				l113:
					position, tokenIndex = position44, tokenIndex44
					{
						position121, tokenIndex121 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l122
						}
						position++
						goto l121
					l122:
						position, tokenIndex = position121, tokenIndex121
						if buffer[position] != rune('N') {
							goto l120
						}
						position++
					}
				l121:
					{
						position123, tokenIndex123 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l124
						}
						position++
						goto l123
					l124:
						position, tokenIndex = position123, tokenIndex123
						if buffer[position] != rune('E') {
							goto l120
						}
						position++
					}
				l123:
					{
						position125, tokenIndex125 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l126
						}
						position++
						goto l125
					l126:
						position, tokenIndex = position125, tokenIndex125
						if buffer[position] != rune('C') {
							goto l120
						}
						position++
					}
				l125:
					goto l44
				l120:
					position, tokenIndex = position44, tokenIndex44
					{
						position128, tokenIndex128 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l129
						}
						position++
						goto l128
					l129:
						position, tokenIndex = position128, tokenIndex128
						if buffer[position] != rune('H') {
							goto l127
						}
						position++
					}
				l128:
					{
						position130, tokenIndex130 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l131
						}
						position++
						goto l130
					l131:
						position, tokenIndex = position130, tokenIndex130
						if buffer[position] != rune('Y') {
							goto l127
						}
						position++
					}
				l130:
					{
						position132, tokenIndex132 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l133
						}
						position++
						goto l132
					l133:
						position, tokenIndex = position132, tokenIndex132
						if buffer[position] != rune('B') {
							goto l127
						}
						position++
					}
				l132:
					{
						position134, tokenIndex134 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l135
						}
						position++
						goto l134
					l135:
						position, tokenIndex = position134, tokenIndex134
						if buffer[position] != rune('R') {
							goto l127
						}
						position++
					}
				l134:
					{
						position136, tokenIndex136 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l137
						}
						position++
						goto l136
					l137:
						position, tokenIndex = position136, tokenIndex136
						if buffer[position] != rune('I') {
							goto l127
						}
						position++
					}
				l136:
					{
						position138, tokenIndex138 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l139
						}
						position++
						goto l138
					l139:
						position, tokenIndex = position138, tokenIndex138
						if buffer[position] != rune('D') {
							goto l127
						}
						position++
					}
				l138:
					goto l44
				l127:
					position, tokenIndex = position44, tokenIndex44
					{
						position141, tokenIndex141 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l142
						}
						position++
						goto l141
					l142:
						position, tokenIndex = position141, tokenIndex141
						if buffer[position] != rune('V') {
							goto l140
						}
						position++
					}
				l141:
					{
						position143, tokenIndex143 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l144
						}
						position++
						goto l143
					l144:
						position, tokenIndex = position143, tokenIndex143
						if buffer[position] != rune('O') {
							goto l140
						}
						position++
					}
				l143:
					{
						position145, tokenIndex145 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l146
						}
						position++
						goto l145
					l146:
						position, tokenIndex = position145, tokenIndex145
						if buffer[position] != rune('N') {
							goto l140
						}
						position++
					}
				l145:
					goto l44
				l140:
					position, tokenIndex = position44, tokenIndex44
					if buffer[position] != rune('P') {
						goto l147
					}
					position++
					if buffer[position] != rune('.') {
						goto l147
					}
					position++
					{
						position148, tokenIndex148 := position, tokenIndex
						if !_rules[rule_]() {
							goto l148
						}
						goto l149
					l148:
						position, tokenIndex = position148, tokenIndex148
					}
				l149:
					if buffer[position] != rune('P') {
						goto l147
					}
					position++
					if buffer[position] != rune('.') {
						goto l147
					}
					position++
					goto l44
				l147:
					position, tokenIndex = position44, tokenIndex44
					{
						position150, tokenIndex150 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l151
						}
						position++
						goto l150
					l151:
						position, tokenIndex = position150, tokenIndex150
						if buffer[position] != rune('M') {
							goto l42
						}
						position++
					}
				l150:
					{
						position152, tokenIndex152 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l153
						}
						position++
						goto l152
					l153:
						position, tokenIndex = position152, tokenIndex152
						if buffer[position] != rune('S') {
							goto l42
						}
						position++
					}
				l152:
				}
			l44:
				{
					position154, tokenIndex154 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l154
					}
					position++
					goto l155
				l154:
					position, tokenIndex = position154, tokenIndex154
				}
			l155:
				{
					position156, tokenIndex156 := position, tokenIndex
					if !_rules[ruleSpaceOrEnd]() {
						goto l42
					}
					position, tokenIndex = position156, tokenIndex156
				}
				add(ruleTailLastWordJunk, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 6 TailPhrase4 <- <((((('p' / 'P') ('r' / 'R') ('o' / 'O') _ (('p' / 'P') ('a' / 'A') ('r' / 'R') ('t' / 'T') ('e' / 'E'))) / (('n' / 'N') ('o' / 'O') ('m' / 'M') ('e' / 'E') ('n' / 'N'))) &NotLetterOrEnd) / ('p' '.' _? ('p' '.')) / (('n' / 'N') ('o' / 'O') ('m' / 'M') '.') / (('c' / 'C') ('o' / 'O') ('m' / 'M') ('b' / 'B') '.'))> */
		func() bool {
			position157, tokenIndex157 := position, tokenIndex
			{
				position158 := position
				{
					position159, tokenIndex159 := position, tokenIndex
					{
						position161, tokenIndex161 := position, tokenIndex
						{
							position163, tokenIndex163 := position, tokenIndex
							if buffer[position] != rune('p') {
								goto l164
							}
							position++
							goto l163
						l164:
							position, tokenIndex = position163, tokenIndex163
							if buffer[position] != rune('P') {
								goto l162
							}
							position++
						}
					l163:
						{
							position165, tokenIndex165 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l166
							}
							position++
							goto l165
						l166:
							position, tokenIndex = position165, tokenIndex165
							if buffer[position] != rune('R') {
								goto l162
							}
							position++
						}
					l165:
						{
							position167, tokenIndex167 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l168
							}
							position++
							goto l167
						l168:
							position, tokenIndex = position167, tokenIndex167
							if buffer[position] != rune('O') {
								goto l162
							}
							position++
						}
					l167:
						if !_rules[rule_]() {
							goto l162
						}
						{
							position169, tokenIndex169 := position, tokenIndex
							if buffer[position] != rune('p') {
								goto l170
							}
							position++
							goto l169
						l170:
							position, tokenIndex = position169, tokenIndex169
							if buffer[position] != rune('P') {
								goto l162
							}
							position++
						}
					l169:
						{
							position171, tokenIndex171 := position, tokenIndex
							if buffer[position] != rune('a') {
								goto l172
							}
							position++
							goto l171
						l172:
							position, tokenIndex = position171, tokenIndex171
							if buffer[position] != rune('A') {
								goto l162
							}
							position++
						}
					l171:
						{
							position173, tokenIndex173 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l174
							}
							position++
							goto l173
						l174:
							position, tokenIndex = position173, tokenIndex173
							if buffer[position] != rune('R') {
								goto l162
							}
							position++
						}
					l173:
						{
							position175, tokenIndex175 := position, tokenIndex
							if buffer[position] != rune('t') {
								goto l176
							}
							position++
							goto l175
						l176:
							position, tokenIndex = position175, tokenIndex175
							if buffer[position] != rune('T') {
								goto l162
							}
							position++
						}
					l175:
						{
							position177, tokenIndex177 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l178
							}
							position++
							goto l177
						l178:
							position, tokenIndex = position177, tokenIndex177
							if buffer[position] != rune('E') {
								goto l162
							}
							position++
						}
					l177:
						goto l161
					l162:
						position, tokenIndex = position161, tokenIndex161
						{
							position179, tokenIndex179 := position, tokenIndex
							if buffer[position] != rune('n') {
								goto l180
							}
							position++
							goto l179
						l180:
							position, tokenIndex = position179, tokenIndex179
							if buffer[position] != rune('N') {
								goto l160
							}
							position++
						}
					l179:
						{
							position181, tokenIndex181 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l182
							}
							position++
							goto l181
						l182:
							position, tokenIndex = position181, tokenIndex181
							if buffer[position] != rune('O') {
								goto l160
							}
							position++
						}
					l181:
						{
							position183, tokenIndex183 := position, tokenIndex
							if buffer[position] != rune('m') {
								goto l184
							}
							position++
							goto l183
						l184:
							position, tokenIndex = position183, tokenIndex183
							if buffer[position] != rune('M') {
								goto l160
							}
							position++
						}
					l183:
						{
							position185, tokenIndex185 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l186
							}
							position++
							goto l185
						l186:
							position, tokenIndex = position185, tokenIndex185
							if buffer[position] != rune('E') {
								goto l160
							}
							position++
						}
					l185:
						{
							position187, tokenIndex187 := position, tokenIndex
							if buffer[position] != rune('n') {
								goto l188
							}
							position++
							goto l187
						l188:
							position, tokenIndex = position187, tokenIndex187
							if buffer[position] != rune('N') {
								goto l160
							}
							position++
						}
					l187:
					}
				l161:
					{
						position189, tokenIndex189 := position, tokenIndex
						if !_rules[ruleNotLetterOrEnd]() {
							goto l160
						}
						position, tokenIndex = position189, tokenIndex189
					}
					goto l159
				l160:
					position, tokenIndex = position159, tokenIndex159
					if buffer[position] != rune('p') {
						goto l190
					}
					position++
					if buffer[position] != rune('.') {
						goto l190
					}
					position++
					{
						position191, tokenIndex191 := position, tokenIndex
						if !_rules[rule_]() {
							goto l191
						}
						goto l192
					l191:
						position, tokenIndex = position191, tokenIndex191
					}
				l192:
					if buffer[position] != rune('p') {
						goto l190
					}
					position++
					if buffer[position] != rune('.') {
						goto l190
					}
					position++
					goto l159
				l190:
					position, tokenIndex = position159, tokenIndex159
					{
						position194, tokenIndex194 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l195
						}
						position++
						goto l194
					l195:
						position, tokenIndex = position194, tokenIndex194
						if buffer[position] != rune('N') {
							goto l193
						}
						position++
					}
				l194:
					{
						position196, tokenIndex196 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l197
						}
						position++
						goto l196
					l197:
						position, tokenIndex = position196, tokenIndex196
						if buffer[position] != rune('O') {
							goto l193
						}
						position++
					}
				l196:
					{
						position198, tokenIndex198 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l199
						}
						position++
						goto l198
					l199:
						position, tokenIndex = position198, tokenIndex198
						if buffer[position] != rune('M') {
							goto l193
						}
						position++
					}
				l198:
					if buffer[position] != rune('.') {
						goto l193
					}
					position++
					goto l159
				l193:
					position, tokenIndex = position159, tokenIndex159
					{
						position200, tokenIndex200 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l201
						}
						position++
						goto l200
					l201:
						position, tokenIndex = position200, tokenIndex200
						if buffer[position] != rune('C') {
							goto l157
						}
						position++
					}
				l200:
					{
						position202, tokenIndex202 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l203
						}
						position++
						goto l202
					l203:
						position, tokenIndex = position202, tokenIndex202
						if buffer[position] != rune('O') {
							goto l157
						}
						position++
					}
				l202:
					{
						position204, tokenIndex204 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l205
						}
						position++
						goto l204
					l205:
						position, tokenIndex = position204, tokenIndex204
						if buffer[position] != rune('M') {
							goto l157
						}
						position++
					}
				l204:
					{
						position206, tokenIndex206 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l207
						}
						position++
						goto l206
					l207:
						position, tokenIndex = position206, tokenIndex206
						if buffer[position] != rune('B') {
							goto l157
						}
						position++
					}
				l206:
					if buffer[position] != rune('.') {
						goto l157
					}
					position++
				}
			l159:
				add(ruleTailPhrase4, position158)
			}
			return true
		l157:
			position, tokenIndex = position157, tokenIndex157
			return false
		},
		/* 7 TailPhrase3 <- <('('? 's' (('.' _?) / _) (('s' '.'? &NotLetterOrEnd) / ('l' '.') / ('s' 't' 'r' '.') / ('l' 'a' 't' '.')))> */
		func() bool {
			position208, tokenIndex208 := position, tokenIndex
			{
				position209 := position
				{
					position210, tokenIndex210 := position, tokenIndex
					if buffer[position] != rune('(') {
						goto l210
					}
					position++
					goto l211
				l210:
					position, tokenIndex = position210, tokenIndex210
				}
			l211:
				if buffer[position] != rune('s') {
					goto l208
				}
				position++
				{
					position212, tokenIndex212 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l213
					}
					position++
					{
						position214, tokenIndex214 := position, tokenIndex
						if !_rules[rule_]() {
							goto l214
						}
						goto l215
					l214:
						position, tokenIndex = position214, tokenIndex214
					}
				l215:
					goto l212
				l213:
					position, tokenIndex = position212, tokenIndex212
					if !_rules[rule_]() {
						goto l208
					}
				}
			l212:
				{
					position216, tokenIndex216 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l217
					}
					position++
					{
						position218, tokenIndex218 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l218
						}
						position++
						goto l219
					l218:
						position, tokenIndex = position218, tokenIndex218
					}
				l219:
					{
						position220, tokenIndex220 := position, tokenIndex
						if !_rules[ruleNotLetterOrEnd]() {
							goto l217
						}
						position, tokenIndex = position220, tokenIndex220
					}
					goto l216
				l217:
					position, tokenIndex = position216, tokenIndex216
					if buffer[position] != rune('l') {
						goto l221
					}
					position++
					if buffer[position] != rune('.') {
						goto l221
					}
					position++
					goto l216
				l221:
					position, tokenIndex = position216, tokenIndex216
					if buffer[position] != rune('s') {
						goto l222
					}
					position++
					if buffer[position] != rune('t') {
						goto l222
					}
					position++
					if buffer[position] != rune('r') {
						goto l222
					}
					position++
					if buffer[position] != rune('.') {
						goto l222
					}
					position++
					goto l216
				l222:
					position, tokenIndex = position216, tokenIndex216
					if buffer[position] != rune('l') {
						goto l208
					}
					position++
					if buffer[position] != rune('a') {
						goto l208
					}
					position++
					if buffer[position] != rune('t') {
						goto l208
					}
					position++
					if buffer[position] != rune('.') {
						goto l208
					}
					position++
				}
			l216:
				add(ruleTailPhrase3, position209)
			}
			return true
		l208:
			position, tokenIndex = position208, tokenIndex208
			return false
		},
		/* 8 TailStopWords <- <(((('e' / 'E') ('n' / 'N') ('v' / 'V') ('i' / 'I') ('r' / 'R') ('o' / 'O') ('n' / 'N') ('m' / 'M') ('e' / 'E') ('n' / 'N') ('t' / 'T') ('a' / 'A') ('l' / 'L')) / (('e' / 'E') ('n' / 'N') ('r' / 'R') ('i' / 'I') ('c' / 'C') ('h' / 'H') ('m' / 'M') ('e' / 'E') ('n' / 'N') ('t' / 'T')) / (('s' / 'S') ('a' / 'A') ('m' / 'M') ('p' / 'P') ('l' / 'L') ('e' / 'E') ('s' / 'S')) / ((('s' / 'S') ('p' / 'P') ('e' / 'E') ('c' / 'C') ('i' / 'I') ('e' / 'E') ('s' / 'S') _)? ((('g' / 'G') ('r' / 'R') ('o' / 'O') ('u' / 'U') ('p' / 'P')) / (('c' / 'C') ('o' / 'O') ('m' / 'M') ('p' / 'P') ('l' / 'L') ('e' / 'E') ('x' / 'X')))) / (('c' / 'C') ('l' / 'L') ('a' / 'A') ('d' / 'D') ('e' / 'E')) / (('a' / 'A') ('u' / 'U') ('t' / 'T') ('h' / 'H') ('o' / 'O') ('r' / 'R')) / (('n' / 'N') ('e' / 'E') ('c' / 'C')) / (('v' / 'V') ('i' / 'I') ('d' / 'D') ('e' / 'E')) / (('f' / 'F') ('i' / 'I') ('d' / 'D') ('e' / 'E')) / (('n' / 'N') ('o' / 'O') ('n' / 'N'))) &NotLetterOrEnd)> */
		func() bool {
			position223, tokenIndex223 := position, tokenIndex
			{
				position224 := position
				{
					position225, tokenIndex225 := position, tokenIndex
					{
						position227, tokenIndex227 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l228
						}
						position++
						goto l227
					l228:
						position, tokenIndex = position227, tokenIndex227
						if buffer[position] != rune('E') {
							goto l226
						}
						position++
					}
				l227:
					{
						position229, tokenIndex229 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l230
						}
						position++
						goto l229
					l230:
						position, tokenIndex = position229, tokenIndex229
						if buffer[position] != rune('N') {
							goto l226
						}
						position++
					}
				l229:
					{
						position231, tokenIndex231 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l232
						}
						position++
						goto l231
					l232:
						position, tokenIndex = position231, tokenIndex231
						if buffer[position] != rune('V') {
							goto l226
						}
						position++
					}
				l231:
					{
						position233, tokenIndex233 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l234
						}
						position++
						goto l233
					l234:
						position, tokenIndex = position233, tokenIndex233
						if buffer[position] != rune('I') {
							goto l226
						}
						position++
					}
				l233:
					{
						position235, tokenIndex235 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l236
						}
						position++
						goto l235
					l236:
						position, tokenIndex = position235, tokenIndex235
						if buffer[position] != rune('R') {
							goto l226
						}
						position++
					}
				l235:
					{
						position237, tokenIndex237 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l238
						}
						position++
						goto l237
					l238:
						position, tokenIndex = position237, tokenIndex237
						if buffer[position] != rune('O') {
							goto l226
						}
						position++
					}
				l237:
					{
						position239, tokenIndex239 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l240
						}
						position++
						goto l239
					l240:
						position, tokenIndex = position239, tokenIndex239
						if buffer[position] != rune('N') {
							goto l226
						}
						position++
					}
				l239:
					{
						position241, tokenIndex241 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l242
						}
						position++
						goto l241
					l242:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune('M') {
							goto l226
						}
						position++
					}
				l241:
					{
						position243, tokenIndex243 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l244
						}
						position++
						goto l243
					l244:
						position, tokenIndex = position243, tokenIndex243
						if buffer[position] != rune('E') {
							goto l226
						}
						position++
					}
				l243:
					{
						position245, tokenIndex245 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l246
						}
						position++
						goto l245
					l246:
						position, tokenIndex = position245, tokenIndex245
						if buffer[position] != rune('N') {
							goto l226
						}
						position++
					}
				l245:
					{
						position247, tokenIndex247 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l248
						}
						position++
						goto l247
					l248:
						position, tokenIndex = position247, tokenIndex247
						if buffer[position] != rune('T') {
							goto l226
						}
						position++
					}
				l247:
					{
						position249, tokenIndex249 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l250
						}
						position++
						goto l249
					l250:
						position, tokenIndex = position249, tokenIndex249
						if buffer[position] != rune('A') {
							goto l226
						}
						position++
					}
				l249:
					{
						position251, tokenIndex251 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l252
						}
						position++
						goto l251
					l252:
						position, tokenIndex = position251, tokenIndex251
						if buffer[position] != rune('L') {
							goto l226
						}
						position++
					}
				l251:
					goto l225
				l226:
					position, tokenIndex = position225, tokenIndex225
					{
						position254, tokenIndex254 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l255
						}
						position++
						goto l254
					l255:
						position, tokenIndex = position254, tokenIndex254
						if buffer[position] != rune('E') {
							goto l253
						}
						position++
					}
				l254:
					{
						position256, tokenIndex256 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l257
						}
						position++
						goto l256
					l257:
						position, tokenIndex = position256, tokenIndex256
						if buffer[position] != rune('N') {
							goto l253
						}
						position++
					}
				l256:
					{
						position258, tokenIndex258 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l259
						}
						position++
						goto l258
					l259:
						position, tokenIndex = position258, tokenIndex258
						if buffer[position] != rune('R') {
							goto l253
						}
						position++
					}
				l258:
					{
						position260, tokenIndex260 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l261
						}
						position++
						goto l260
					l261:
						position, tokenIndex = position260, tokenIndex260
						if buffer[position] != rune('I') {
							goto l253
						}
						position++
					}
				l260:
					{
						position262, tokenIndex262 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l263
						}
						position++
						goto l262
					l263:
						position, tokenIndex = position262, tokenIndex262
						if buffer[position] != rune('C') {
							goto l253
						}
						position++
					}
				l262:
					{
						position264, tokenIndex264 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l265
						}
						position++
						goto l264
					l265:
						position, tokenIndex = position264, tokenIndex264
						if buffer[position] != rune('H') {
							goto l253
						}
						position++
					}
				l264:
					{
						position266, tokenIndex266 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l267
						}
						position++
						goto l266
					l267:
						position, tokenIndex = position266, tokenIndex266
						if buffer[position] != rune('M') {
							goto l253
						}
						position++
					}
				l266:
					{
						position268, tokenIndex268 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l269
						}
						position++
						goto l268
					l269:
						position, tokenIndex = position268, tokenIndex268
						if buffer[position] != rune('E') {
							goto l253
						}
						position++
					}
				l268:
					{
						position270, tokenIndex270 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l271
						}
						position++
						goto l270
					l271:
						position, tokenIndex = position270, tokenIndex270
						if buffer[position] != rune('N') {
							goto l253
						}
						position++
					}
				l270:
					{
						position272, tokenIndex272 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l273
						}
						position++
						goto l272
					l273:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('T') {
							goto l253
						}
						position++
					}
				l272:
					goto l225
				l253:
					position, tokenIndex = position225, tokenIndex225
					{
						position275, tokenIndex275 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l276
						}
						position++
						goto l275
					l276:
						position, tokenIndex = position275, tokenIndex275
						if buffer[position] != rune('S') {
							goto l274
						}
						position++
					}
				l275:
					{
						position277, tokenIndex277 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l278
						}
						position++
						goto l277
					l278:
						position, tokenIndex = position277, tokenIndex277
						if buffer[position] != rune('A') {
							goto l274
						}
						position++
					}
				l277:
					{
						position279, tokenIndex279 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l280
						}
						position++
						goto l279
					l280:
						position, tokenIndex = position279, tokenIndex279
						if buffer[position] != rune('M') {
							goto l274
						}
						position++
					}
				l279:
					{
						position281, tokenIndex281 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l282
						}
						position++
						goto l281
					l282:
						position, tokenIndex = position281, tokenIndex281
						if buffer[position] != rune('P') {
							goto l274
						}
						position++
					}
				l281:
					{
						position283, tokenIndex283 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l284
						}
						position++
						goto l283
					l284:
						position, tokenIndex = position283, tokenIndex283
						if buffer[position] != rune('L') {
							goto l274
						}
						position++
					}
				l283:
					{
						position285, tokenIndex285 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l286
						}
						position++
						goto l285
					l286:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('E') {
							goto l274
						}
						position++
					}
				l285:
					{
						position287, tokenIndex287 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l288
						}
						position++
						goto l287
					l288:
						position, tokenIndex = position287, tokenIndex287
						if buffer[position] != rune('S') {
							goto l274
						}
						position++
					}
				l287:
					goto l225
				l274:
					position, tokenIndex = position225, tokenIndex225
					{
						position290, tokenIndex290 := position, tokenIndex
						{
							position292, tokenIndex292 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l293
							}
							position++
							goto l292
						l293:
							position, tokenIndex = position292, tokenIndex292
							if buffer[position] != rune('S') {
								goto l290
							}
							position++
						}
					l292:
						{
							position294, tokenIndex294 := position, tokenIndex
							if buffer[position] != rune('p') {
								goto l295
							}
							position++
							goto l294
						l295:
							position, tokenIndex = position294, tokenIndex294
							if buffer[position] != rune('P') {
								goto l290
							}
							position++
						}
					l294:
						{
							position296, tokenIndex296 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l297
							}
							position++
							goto l296
						l297:
							position, tokenIndex = position296, tokenIndex296
							if buffer[position] != rune('E') {
								goto l290
							}
							position++
						}
					l296:
						{
							position298, tokenIndex298 := position, tokenIndex
							if buffer[position] != rune('c') {
								goto l299
							}
							position++
							goto l298
						l299:
							position, tokenIndex = position298, tokenIndex298
							if buffer[position] != rune('C') {
								goto l290
							}
							position++
						}
					l298:
						{
							position300, tokenIndex300 := position, tokenIndex
							if buffer[position] != rune('i') {
								goto l301
							}
							position++
							goto l300
						l301:
							position, tokenIndex = position300, tokenIndex300
							if buffer[position] != rune('I') {
								goto l290
							}
							position++
						}
					l300:
						{
							position302, tokenIndex302 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l303
							}
							position++
							goto l302
						l303:
							position, tokenIndex = position302, tokenIndex302
							if buffer[position] != rune('E') {
								goto l290
							}
							position++
						}
					l302:
						{
							position304, tokenIndex304 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l305
							}
							position++
							goto l304
						l305:
							position, tokenIndex = position304, tokenIndex304
							if buffer[position] != rune('S') {
								goto l290
							}
							position++
						}
					l304:
						if !_rules[rule_]() {
							goto l290
						}
						goto l291
					l290:
						position, tokenIndex = position290, tokenIndex290
					}
				l291:
					{
						position306, tokenIndex306 := position, tokenIndex
						{
							position308, tokenIndex308 := position, tokenIndex
							if buffer[position] != rune('g') {
								goto l309
							}
							position++
							goto l308
						l309:
							position, tokenIndex = position308, tokenIndex308
							if buffer[position] != rune('G') {
								goto l307
							}
							position++
						}
					l308:
						{
							position310, tokenIndex310 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l311
							}
							position++
							goto l310
						l311:
							position, tokenIndex = position310, tokenIndex310
							if buffer[position] != rune('R') {
								goto l307
							}
							position++
						}
					l310:
						{
							position312, tokenIndex312 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l313
							}
							position++
							goto l312
						l313:
							position, tokenIndex = position312, tokenIndex312
							if buffer[position] != rune('O') {
								goto l307
							}
							position++
						}
					l312:
						{
							position314, tokenIndex314 := position, tokenIndex
							if buffer[position] != rune('u') {
								goto l315
							}
							position++
							goto l314
						l315:
							position, tokenIndex = position314, tokenIndex314
							if buffer[position] != rune('U') {
								goto l307
							}
							position++
						}
					l314:
						{
							position316, tokenIndex316 := position, tokenIndex
							if buffer[position] != rune('p') {
								goto l317
							}
							position++
							goto l316
						l317:
							position, tokenIndex = position316, tokenIndex316
							if buffer[position] != rune('P') {
								goto l307
							}
							position++
						}
					l316:
						goto l306
					l307:
						position, tokenIndex = position306, tokenIndex306
						{
							position318, tokenIndex318 := position, tokenIndex
							if buffer[position] != rune('c') {
								goto l319
							}
							position++
							goto l318
						l319:
							position, tokenIndex = position318, tokenIndex318
							if buffer[position] != rune('C') {
								goto l289
							}
							position++
						}
					l318:
						{
							position320, tokenIndex320 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l321
							}
							position++
							goto l320
						l321:
							position, tokenIndex = position320, tokenIndex320
							if buffer[position] != rune('O') {
								goto l289
							}
							position++
						}
					l320:
						{
							position322, tokenIndex322 := position, tokenIndex
							if buffer[position] != rune('m') {
								goto l323
							}
							position++
							goto l322
						l323:
							position, tokenIndex = position322, tokenIndex322
							if buffer[position] != rune('M') {
								goto l289
							}
							position++
						}
					l322:
						{
							position324, tokenIndex324 := position, tokenIndex
							if buffer[position] != rune('p') {
								goto l325
							}
							position++
							goto l324
						l325:
							position, tokenIndex = position324, tokenIndex324
							if buffer[position] != rune('P') {
								goto l289
							}
							position++
						}
					l324:
						{
							position326, tokenIndex326 := position, tokenIndex
							if buffer[position] != rune('l') {
								goto l327
							}
							position++
							goto l326
						l327:
							position, tokenIndex = position326, tokenIndex326
							if buffer[position] != rune('L') {
								goto l289
							}
							position++
						}
					l326:
						{
							position328, tokenIndex328 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l329
							}
							position++
							goto l328
						l329:
							position, tokenIndex = position328, tokenIndex328
							if buffer[position] != rune('E') {
								goto l289
							}
							position++
						}
					l328:
						{
							position330, tokenIndex330 := position, tokenIndex
							if buffer[position] != rune('x') {
								goto l331
							}
							position++
							goto l330
						l331:
							position, tokenIndex = position330, tokenIndex330
							if buffer[position] != rune('X') {
								goto l289
							}
							position++
						}
					l330:
					}
				l306:
					goto l225
				l289:
					position, tokenIndex = position225, tokenIndex225
					{
						position333, tokenIndex333 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l334
						}
						position++
						goto l333
					l334:
						position, tokenIndex = position333, tokenIndex333
						if buffer[position] != rune('C') {
							goto l332
						}
						position++
					}
				l333:
					{
						position335, tokenIndex335 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l336
						}
						position++
						goto l335
					l336:
						position, tokenIndex = position335, tokenIndex335
						if buffer[position] != rune('L') {
							goto l332
						}
						position++
					}
				l335:
					{
						position337, tokenIndex337 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l338
						}
						position++
						goto l337
					l338:
						position, tokenIndex = position337, tokenIndex337
						if buffer[position] != rune('A') {
							goto l332
						}
						position++
					}
				l337:
					{
						position339, tokenIndex339 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l340
						}
						position++
						goto l339
					l340:
						position, tokenIndex = position339, tokenIndex339
						if buffer[position] != rune('D') {
							goto l332
						}
						position++
					}
				l339:
					{
						position341, tokenIndex341 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l342
						}
						position++
						goto l341
					l342:
						position, tokenIndex = position341, tokenIndex341
						if buffer[position] != rune('E') {
							goto l332
						}
						position++
					}
				l341:
					goto l225
				l332:
					position, tokenIndex = position225, tokenIndex225
					{
						position344, tokenIndex344 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l345
						}
						position++
						goto l344
					l345:
						position, tokenIndex = position344, tokenIndex344
						if buffer[position] != rune('A') {
							goto l343
						}
						position++
					}
				l344:
					{
						position346, tokenIndex346 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l347
						}
						position++
						goto l346
					l347:
						position, tokenIndex = position346, tokenIndex346
						if buffer[position] != rune('U') {
							goto l343
						}
						position++
					}
				l346:
					{
						position348, tokenIndex348 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l349
						}
						position++
						goto l348
					l349:
						position, tokenIndex = position348, tokenIndex348
						if buffer[position] != rune('T') {
							goto l343
						}
						position++
					}
				l348:
					{
						position350, tokenIndex350 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l351
						}
						position++
						goto l350
					l351:
						position, tokenIndex = position350, tokenIndex350
						if buffer[position] != rune('H') {
							goto l343
						}
						position++
					}
				l350:
					{
						position352, tokenIndex352 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l353
						}
						position++
						goto l352
					l353:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('O') {
							goto l343
						}
						position++
					}
				l352:
					{
						position354, tokenIndex354 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l355
						}
						position++
						goto l354
					l355:
						position, tokenIndex = position354, tokenIndex354
						if buffer[position] != rune('R') {
							goto l343
						}
						position++
					}
				l354:
					goto l225
				l343:
					position, tokenIndex = position225, tokenIndex225
					{
						position357, tokenIndex357 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l358
						}
						position++
						goto l357
					l358:
						position, tokenIndex = position357, tokenIndex357
						if buffer[position] != rune('N') {
							goto l356
						}
						position++
					}
				l357:
					{
						position359, tokenIndex359 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l360
						}
						position++
						goto l359
					l360:
						position, tokenIndex = position359, tokenIndex359
						if buffer[position] != rune('E') {
							goto l356
						}
						position++
					}
				l359:
					{
						position361, tokenIndex361 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l362
						}
						position++
						goto l361
					l362:
						position, tokenIndex = position361, tokenIndex361
						if buffer[position] != rune('C') {
							goto l356
						}
						position++
					}
				l361:
					goto l225
				l356:
					position, tokenIndex = position225, tokenIndex225
					{
						position364, tokenIndex364 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l365
						}
						position++
						goto l364
					l365:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('V') {
							goto l363
						}
						position++
					}
				l364:
					{
						position366, tokenIndex366 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l367
						}
						position++
						goto l366
					l367:
						position, tokenIndex = position366, tokenIndex366
						if buffer[position] != rune('I') {
							goto l363
						}
						position++
					}
				l366:
					{
						position368, tokenIndex368 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l369
						}
						position++
						goto l368
					l369:
						position, tokenIndex = position368, tokenIndex368
						if buffer[position] != rune('D') {
							goto l363
						}
						position++
					}
				l368:
					{
						position370, tokenIndex370 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l371
						}
						position++
						goto l370
					l371:
						position, tokenIndex = position370, tokenIndex370
						if buffer[position] != rune('E') {
							goto l363
						}
						position++
					}
				l370:
					goto l225
				l363:
					position, tokenIndex = position225, tokenIndex225
					{
						position373, tokenIndex373 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l374
						}
						position++
						goto l373
					l374:
						position, tokenIndex = position373, tokenIndex373
						if buffer[position] != rune('F') {
							goto l372
						}
						position++
					}
				l373:
					{
						position375, tokenIndex375 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l376
						}
						position++
						goto l375
					l376:
						position, tokenIndex = position375, tokenIndex375
						if buffer[position] != rune('I') {
							goto l372
						}
						position++
					}
				l375:
					{
						position377, tokenIndex377 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l378
						}
						position++
						goto l377
					l378:
						position, tokenIndex = position377, tokenIndex377
						if buffer[position] != rune('D') {
							goto l372
						}
						position++
					}
				l377:
					{
						position379, tokenIndex379 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l380
						}
						position++
						goto l379
					l380:
						position, tokenIndex = position379, tokenIndex379
						if buffer[position] != rune('E') {
							goto l372
						}
						position++
					}
				l379:
					goto l225
				l372:
					position, tokenIndex = position225, tokenIndex225
					{
						position381, tokenIndex381 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l382
						}
						position++
						goto l381
					l382:
						position, tokenIndex = position381, tokenIndex381
						if buffer[position] != rune('N') {
							goto l223
						}
						position++
					}
				l381:
					{
						position383, tokenIndex383 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l384
						}
						position++
						goto l383
					l384:
						position, tokenIndex = position383, tokenIndex383
						if buffer[position] != rune('O') {
							goto l223
						}
						position++
					}
				l383:
					{
						position385, tokenIndex385 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l386
						}
						position++
						goto l385
					l386:
						position, tokenIndex = position385, tokenIndex385
						if buffer[position] != rune('N') {
							goto l223
						}
						position++
					}
				l385:
				}
			l225:
				{
					position387, tokenIndex387 := position, tokenIndex
					if !_rules[ruleNotLetterOrEnd]() {
						goto l223
					}
					position, tokenIndex = position387, tokenIndex387
				}
				add(ruleTailStopWords, position224)
			}
			return true
		l223:
			position, tokenIndex = position223, tokenIndex223
			return false
		},
		/* 9 TailPhrase2 <- <(((('s' / 'S') ('e' / 'E') ('r' / 'R') ('o' / 'O') ((('v' / 'V') ('a' / 'A') ('r' / 'R')) / (('t' / 'T') ('y' / 'Y') ('p' / 'P') ('e' / 'E')))) / (('s' / 'S') ('e' / 'E') ('n' / 'N') ('s' / 'S') ('u' / 'U')) / (('a' / 'A') ('u' / 'U') ('c' / 'C') ('t' / 'T')) / (('s' / 'S') ('e' / 'E') ('c' / 'C')) / (('n' / 'N') ('e' / 'E') ('a' / 'A') ('r' / 'R')) / (('s' / 'S') ('t' / 'T') ('r' / 'R'))) '.'? &NotLetterOrEnd)> */
		func() bool {
			position388, tokenIndex388 := position, tokenIndex
			{
				position389 := position
				{
					position390, tokenIndex390 := position, tokenIndex
					{
						position392, tokenIndex392 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l393
						}
						position++
						goto l392
					l393:
						position, tokenIndex = position392, tokenIndex392
						if buffer[position] != rune('S') {
							goto l391
						}
						position++
					}
				l392:
					{
						position394, tokenIndex394 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l395
						}
						position++
						goto l394
					l395:
						position, tokenIndex = position394, tokenIndex394
						if buffer[position] != rune('E') {
							goto l391
						}
						position++
					}
				l394:
					{
						position396, tokenIndex396 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l397
						}
						position++
						goto l396
					l397:
						position, tokenIndex = position396, tokenIndex396
						if buffer[position] != rune('R') {
							goto l391
						}
						position++
					}
				l396:
					{
						position398, tokenIndex398 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l399
						}
						position++
						goto l398
					l399:
						position, tokenIndex = position398, tokenIndex398
						if buffer[position] != rune('O') {
							goto l391
						}
						position++
					}
				l398:
					{
						position400, tokenIndex400 := position, tokenIndex
						{
							position402, tokenIndex402 := position, tokenIndex
							if buffer[position] != rune('v') {
								goto l403
							}
							position++
							goto l402
						l403:
							position, tokenIndex = position402, tokenIndex402
							if buffer[position] != rune('V') {
								goto l401
							}
							position++
						}
					l402:
						{
							position404, tokenIndex404 := position, tokenIndex
							if buffer[position] != rune('a') {
								goto l405
							}
							position++
							goto l404
						l405:
							position, tokenIndex = position404, tokenIndex404
							if buffer[position] != rune('A') {
								goto l401
							}
							position++
						}
					l404:
						{
							position406, tokenIndex406 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l407
							}
							position++
							goto l406
						l407:
							position, tokenIndex = position406, tokenIndex406
							if buffer[position] != rune('R') {
								goto l401
							}
							position++
						}
					l406:
						goto l400
					l401:
						position, tokenIndex = position400, tokenIndex400
						{
							position408, tokenIndex408 := position, tokenIndex
							if buffer[position] != rune('t') {
								goto l409
							}
							position++
							goto l408
						l409:
							position, tokenIndex = position408, tokenIndex408
							if buffer[position] != rune('T') {
								goto l391
							}
							position++
						}
					l408:
						{
							position410, tokenIndex410 := position, tokenIndex
							if buffer[position] != rune('y') {
								goto l411
							}
							position++
							goto l410
						l411:
							position, tokenIndex = position410, tokenIndex410
							if buffer[position] != rune('Y') {
								goto l391
							}
							position++
						}
					l410:
						{
							position412, tokenIndex412 := position, tokenIndex
							if buffer[position] != rune('p') {
								goto l413
							}
							position++
							goto l412
						l413:
							position, tokenIndex = position412, tokenIndex412
							if buffer[position] != rune('P') {
								goto l391
							}
							position++
						}
					l412:
						{
							position414, tokenIndex414 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l415
							}
							position++
							goto l414
						l415:
							position, tokenIndex = position414, tokenIndex414
							if buffer[position] != rune('E') {
								goto l391
							}
							position++
						}
					l414:
					}
				l400:
					goto l390
				l391:
					position, tokenIndex = position390, tokenIndex390
					{
						position417, tokenIndex417 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l418
						}
						position++
						goto l417
					l418:
						position, tokenIndex = position417, tokenIndex417
						if buffer[position] != rune('S') {
							goto l416
						}
						position++
					}
				l417:
					{
						position419, tokenIndex419 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l420
						}
						position++
						goto l419
					l420:
						position, tokenIndex = position419, tokenIndex419
						if buffer[position] != rune('E') {
							goto l416
						}
						position++
					}
				l419:
					{
						position421, tokenIndex421 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l422
						}
						position++
						goto l421
					l422:
						position, tokenIndex = position421, tokenIndex421
						if buffer[position] != rune('N') {
							goto l416
						}
						position++
					}
				l421:
					{
						position423, tokenIndex423 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l424
						}
						position++
						goto l423
					l424:
						position, tokenIndex = position423, tokenIndex423
						if buffer[position] != rune('S') {
							goto l416
						}
						position++
					}
				l423:
					{
						position425, tokenIndex425 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l426
						}
						position++
						goto l425
					l426:
						position, tokenIndex = position425, tokenIndex425
						if buffer[position] != rune('U') {
							goto l416
						}
						position++
					}
				l425:
					goto l390
				l416:
					position, tokenIndex = position390, tokenIndex390
					{
						position428, tokenIndex428 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l429
						}
						position++
						goto l428
					l429:
						position, tokenIndex = position428, tokenIndex428
						if buffer[position] != rune('A') {
							goto l427
						}
						position++
					}
				l428:
					{
						position430, tokenIndex430 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l431
						}
						position++
						goto l430
					l431:
						position, tokenIndex = position430, tokenIndex430
						if buffer[position] != rune('U') {
							goto l427
						}
						position++
					}
				l430:
					{
						position432, tokenIndex432 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l433
						}
						position++
						goto l432
					l433:
						position, tokenIndex = position432, tokenIndex432
						if buffer[position] != rune('C') {
							goto l427
						}
						position++
					}
				l432:
					{
						position434, tokenIndex434 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l435
						}
						position++
						goto l434
					l435:
						position, tokenIndex = position434, tokenIndex434
						if buffer[position] != rune('T') {
							goto l427
						}
						position++
					}
				l434:
					goto l390
				l427:
					position, tokenIndex = position390, tokenIndex390
					{
						position437, tokenIndex437 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l438
						}
						position++
						goto l437
					l438:
						position, tokenIndex = position437, tokenIndex437
						if buffer[position] != rune('S') {
							goto l436
						}
						position++
					}
				l437:
					{
						position439, tokenIndex439 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l440
						}
						position++
						goto l439
					l440:
						position, tokenIndex = position439, tokenIndex439
						if buffer[position] != rune('E') {
							goto l436
						}
						position++
					}
				l439:
					{
						position441, tokenIndex441 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l442
						}
						position++
						goto l441
					l442:
						position, tokenIndex = position441, tokenIndex441
						if buffer[position] != rune('C') {
							goto l436
						}
						position++
					}
				l441:
					goto l390
				l436:
					position, tokenIndex = position390, tokenIndex390
					{
						position444, tokenIndex444 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l445
						}
						position++
						goto l444
					l445:
						position, tokenIndex = position444, tokenIndex444
						if buffer[position] != rune('N') {
							goto l443
						}
						position++
					}
				l444:
					{
						position446, tokenIndex446 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l447
						}
						position++
						goto l446
					l447:
						position, tokenIndex = position446, tokenIndex446
						if buffer[position] != rune('E') {
							goto l443
						}
						position++
					}
				l446:
					{
						position448, tokenIndex448 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l449
						}
						position++
						goto l448
					l449:
						position, tokenIndex = position448, tokenIndex448
						if buffer[position] != rune('A') {
							goto l443
						}
						position++
					}
				l448:
					{
						position450, tokenIndex450 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l451
						}
						position++
						goto l450
					l451:
						position, tokenIndex = position450, tokenIndex450
						if buffer[position] != rune('R') {
							goto l443
						}
						position++
					}
				l450:
					goto l390
				l443:
					position, tokenIndex = position390, tokenIndex390
					{
						position452, tokenIndex452 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l453
						}
						position++
						goto l452
					l453:
						position, tokenIndex = position452, tokenIndex452
						if buffer[position] != rune('S') {
							goto l388
						}
						position++
					}
				l452:
					{
						position454, tokenIndex454 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l455
						}
						position++
						goto l454
					l455:
						position, tokenIndex = position454, tokenIndex454
						if buffer[position] != rune('T') {
							goto l388
						}
						position++
					}
				l454:
					{
						position456, tokenIndex456 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l457
						}
						position++
						goto l456
					l457:
						position, tokenIndex = position456, tokenIndex456
						if buffer[position] != rune('R') {
							goto l388
						}
						position++
					}
				l456:
				}
			l390:
				{
					position458, tokenIndex458 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l458
					}
					position++
					goto l459
				l458:
					position, tokenIndex = position458, tokenIndex458
				}
			l459:
				{
					position460, tokenIndex460 := position, tokenIndex
					if !_rules[ruleNotLetterOrEnd]() {
						goto l388
					}
					position, tokenIndex = position460, tokenIndex460
				}
				add(ruleTailPhrase2, position389)
			}
			return true
		l388:
			position, tokenIndex = position388, tokenIndex388
			return false
		},
		/* 10 TailPhrase1 <- <((('('? (('h' 't') / ('h' 'o' 'r' 't'))) / ('s' 'p' 'e' 'c') / ('n' 'o' 'v' '.'? _ ('s' 'p' 'e' 'c'))) '.'? &NotLetterOrEnd)> */
		func() bool {
			position461, tokenIndex461 := position, tokenIndex
			{
				position462 := position
				{
					position463, tokenIndex463 := position, tokenIndex
					{
						position465, tokenIndex465 := position, tokenIndex
						if buffer[position] != rune('(') {
							goto l465
						}
						position++
						goto l466
					l465:
						position, tokenIndex = position465, tokenIndex465
					}
				l466:
					{
						position467, tokenIndex467 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l468
						}
						position++
						if buffer[position] != rune('t') {
							goto l468
						}
						position++
						goto l467
					l468:
						position, tokenIndex = position467, tokenIndex467
						if buffer[position] != rune('h') {
							goto l464
						}
						position++
						if buffer[position] != rune('o') {
							goto l464
						}
						position++
						if buffer[position] != rune('r') {
							goto l464
						}
						position++
						if buffer[position] != rune('t') {
							goto l464
						}
						position++
					}
				l467:
					goto l463
				l464:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('s') {
						goto l469
					}
					position++
					if buffer[position] != rune('p') {
						goto l469
					}
					position++
					if buffer[position] != rune('e') {
						goto l469
					}
					position++
					if buffer[position] != rune('c') {
						goto l469
					}
					position++
					goto l463
				l469:
					position, tokenIndex = position463, tokenIndex463
					if buffer[position] != rune('n') {
						goto l461
					}
					position++
					if buffer[position] != rune('o') {
						goto l461
					}
					position++
					if buffer[position] != rune('v') {
						goto l461
					}
					position++
					{
						position470, tokenIndex470 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l470
						}
						position++
						goto l471
					l470:
						position, tokenIndex = position470, tokenIndex470
					}
				l471:
					if !_rules[rule_]() {
						goto l461
					}
					if buffer[position] != rune('s') {
						goto l461
					}
					position++
					if buffer[position] != rune('p') {
						goto l461
					}
					position++
					if buffer[position] != rune('e') {
						goto l461
					}
					position++
					if buffer[position] != rune('c') {
						goto l461
					}
					position++
				}
			l463:
				{
					position472, tokenIndex472 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l472
					}
					position++
					goto l473
				l472:
					position, tokenIndex = position472, tokenIndex472
				}
			l473:
				{
					position474, tokenIndex474 := position, tokenIndex
					if !_rules[ruleNotLetterOrEnd]() {
						goto l461
					}
					position, tokenIndex = position474, tokenIndex474
				}
				add(ruleTailPhrase1, position462)
			}
			return true
		l461:
			position, tokenIndex = position461, tokenIndex461
			return false
		},
		/* 11 SpaceOrEnd <- <(CommaSpace? END)> */
		func() bool {
			position475, tokenIndex475 := position, tokenIndex
			{
				position476 := position
				{
					position477, tokenIndex477 := position, tokenIndex
					if !_rules[ruleCommaSpace]() {
						goto l477
					}
					goto l478
				l477:
					position, tokenIndex = position477, tokenIndex477
				}
			l478:
				if !_rules[ruleEND]() {
					goto l475
				}
				add(ruleSpaceOrEnd, position476)
			}
			return true
		l475:
			position, tokenIndex = position475, tokenIndex475
			return false
		},
		/* 12 CommaSpace <- <((_? ',' _?)+ / _)> */
		func() bool {
			position479, tokenIndex479 := position, tokenIndex
			{
				position480 := position
				{
					position481, tokenIndex481 := position, tokenIndex
					{
						position485, tokenIndex485 := position, tokenIndex
						if !_rules[rule_]() {
							goto l485
						}
						goto l486
					l485:
						position, tokenIndex = position485, tokenIndex485
					}
				l486:
					if buffer[position] != rune(',') {
						goto l482
					}
					position++
					{
						position487, tokenIndex487 := position, tokenIndex
						if !_rules[rule_]() {
							goto l487
						}
						goto l488
					l487:
						position, tokenIndex = position487, tokenIndex487
					}
				l488:
				l483:
					{
						position484, tokenIndex484 := position, tokenIndex
						{
							position489, tokenIndex489 := position, tokenIndex
							if !_rules[rule_]() {
								goto l489
							}
							goto l490
						l489:
							position, tokenIndex = position489, tokenIndex489
						}
					l490:
						if buffer[position] != rune(',') {
							goto l484
						}
						position++
						{
							position491, tokenIndex491 := position, tokenIndex
							if !_rules[rule_]() {
								goto l491
							}
							goto l492
						l491:
							position, tokenIndex = position491, tokenIndex491
						}
					l492:
						goto l483
					l484:
						position, tokenIndex = position484, tokenIndex484
					}
					goto l481
				l482:
					position, tokenIndex = position481, tokenIndex481
					if !_rules[rule_]() {
						goto l479
					}
				}
			l481:
				add(ruleCommaSpace, position480)
			}
			return true
		l479:
			position, tokenIndex = position479, tokenIndex479
			return false
		},
		/* 13 _ <- <(MultipleSpace / SingleSpace)> */
		func() bool {
			position493, tokenIndex493 := position, tokenIndex
			{
				position494 := position
				{
					position495, tokenIndex495 := position, tokenIndex
					if !_rules[ruleMultipleSpace]() {
						goto l496
					}
					goto l495
				l496:
					position, tokenIndex = position495, tokenIndex495
					if !_rules[ruleSingleSpace]() {
						goto l493
					}
				}
			l495:
				add(rule_, position494)
			}
			return true
		l493:
			position, tokenIndex = position493, tokenIndex493
			return false
		},
		/* 14 NotLetterOrEnd <- <(NotLetter / END)> */
		func() bool {
			position497, tokenIndex497 := position, tokenIndex
			{
				position498 := position
				{
					position499, tokenIndex499 := position, tokenIndex
					if !_rules[ruleNotLetter]() {
						goto l500
					}
					goto l499
				l500:
					position, tokenIndex = position499, tokenIndex499
					if !_rules[ruleEND]() {
						goto l497
					}
				}
			l499:
				add(ruleNotLetterOrEnd, position498)
			}
			return true
		l497:
			position, tokenIndex = position497, tokenIndex497
			return false
		},
		/* 15 NotLetter <- <(!([a-z] / [A-Z] / ([0-9] / [0-9]) / '_' / '-') .)> */
		func() bool {
			position501, tokenIndex501 := position, tokenIndex
			{
				position502 := position
				{
					position503, tokenIndex503 := position, tokenIndex
					{
						position504, tokenIndex504 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l505
						}
						position++
						goto l504
					l505:
						position, tokenIndex = position504, tokenIndex504
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l506
						}
						position++
						goto l504
					l506:
						position, tokenIndex = position504, tokenIndex504
						{
							position508, tokenIndex508 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l509
							}
							position++
							goto l508
						l509:
							position, tokenIndex = position508, tokenIndex508
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l507
							}
							position++
						}
					l508:
						goto l504
					l507:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('_') {
							goto l510
						}
						position++
						goto l504
					l510:
						position, tokenIndex = position504, tokenIndex504
						if buffer[position] != rune('-') {
							goto l503
						}
						position++
					}
				l504:
					goto l501
				l503:
					position, tokenIndex = position503, tokenIndex503
				}
				if !matchDot() {
					goto l501
				}
				add(ruleNotLetter, position502)
			}
			return true
		l501:
			position, tokenIndex = position501, tokenIndex501
			return false
		},
		/* 16 MultipleSpace <- <(SingleSpace SingleSpace+)> */
		func() bool {
			position511, tokenIndex511 := position, tokenIndex
			{
				position512 := position
				if !_rules[ruleSingleSpace]() {
					goto l511
				}
				if !_rules[ruleSingleSpace]() {
					goto l511
				}
			l513:
				{
					position514, tokenIndex514 := position, tokenIndex
					if !_rules[ruleSingleSpace]() {
						goto l514
					}
					goto l513
				l514:
					position, tokenIndex = position514, tokenIndex514
				}
				add(ruleMultipleSpace, position512)
			}
			return true
		l511:
			position, tokenIndex = position511, tokenIndex511
			return false
		},
		/* 17 SingleSpace <- <(' ' / OtherSpace)> */
		func() bool {
			position515, tokenIndex515 := position, tokenIndex
			{
				position516 := position
				{
					position517, tokenIndex517 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l518
					}
					position++
					goto l517
				l518:
					position, tokenIndex = position517, tokenIndex517
					if !_rules[ruleOtherSpace]() {
						goto l515
					}
				}
			l517:
				add(ruleSingleSpace, position516)
			}
			return true
		l515:
			position, tokenIndex = position515, tokenIndex515
			return false
		},
		/* 18 OtherSpace <- <('\u3000' / '\u00a0' / '\t' / '\r' / '\n' / '\f' / '\v')> */
		func() bool {
			position519, tokenIndex519 := position, tokenIndex
			{
				position520 := position
				{
					position521, tokenIndex521 := position, tokenIndex
					if buffer[position] != rune('\u3000') {
						goto l522
					}
					position++
					goto l521
				l522:
					position, tokenIndex = position521, tokenIndex521
					if buffer[position] != rune('\u00a0') {
						goto l523
					}
					position++
					goto l521
				l523:
					position, tokenIndex = position521, tokenIndex521
					if buffer[position] != rune('\t') {
						goto l524
					}
					position++
					goto l521
				l524:
					position, tokenIndex = position521, tokenIndex521
					if buffer[position] != rune('\r') {
						goto l525
					}
					position++
					goto l521
				l525:
					position, tokenIndex = position521, tokenIndex521
					if buffer[position] != rune('\n') {
						goto l526
					}
					position++
					goto l521
				l526:
					position, tokenIndex = position521, tokenIndex521
					if buffer[position] != rune('\f') {
						goto l527
					}
					position++
					goto l521
				l527:
					position, tokenIndex = position521, tokenIndex521
					if buffer[position] != rune('\v') {
						goto l519
					}
					position++
				}
			l521:
				add(ruleOtherSpace, position520)
			}
			return true
		l519:
			position, tokenIndex = position519, tokenIndex519
			return false
		},
		/* 19 END <- <!.> */
		func() bool {
			position528, tokenIndex528 := position, tokenIndex
			{
				position529 := position
				{
					position530, tokenIndex530 := position, tokenIndex
					if !matchDot() {
						goto l530
					}
					goto l528
				l530:
					position, tokenIndex = position530, tokenIndex530
				}
				add(ruleEND, position529)
			}
			return true
		l528:
			position, tokenIndex = position528, tokenIndex528
			return false
		},
		/* 21 Action0 <- <{ p.tailIndex = int(token.begin) }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
